<!--
     The FreeBSD Documentation Project
     The FreeBSD Japanese Documentation Project

     Original revision: 1.9
     $Id: book.sgml,v 1.1.1.1 1999-04-08 15:45:59 kuriyama Exp $
-->

<chapter id="ports">
  <title>アプリケーションのインストール : ports コレクション</title>

  <para><emphasis>原作: &a.jraynard;.</emphasis></para>

  <para><emphasis>訳: &a.jp.masaki;, &a.jp.saeki;.<!-- <br> -->
      11 November 1996.</emphasis></para>

  <para>FreeBSD の ports コレクションを利用すると, 最小限の労力で
    非常に幅広くのアプリケーションのコンパイルとインストールがおこなえます.</para>

  <para>やってみたことのある方はよくご存知でしょうが,
    オープンな規格とは 全くの誇大広告であって,
    あるプログラムを異なるバージョンの Unix 上で
    動作させることは退屈で手間のかかる仕事です.
    求めているプログラムが自分のシステムでうまくコンパイルでき,
    正しいところにインストールできて,
    完璧に動作するとしたらとてもラッキーです.  しかし,
    あいにくこれは滅多にないことなのです.
    ほとんどのプログラムについて,
    あなたは髪を掻きむしることになるでしょうし,
    かなりのプログラムでは, 白髪混じりの頭になってしまったり,
    あるいは慢性の 脱毛症にすら なってしまうかもしれません...</para>

  <para>いくつかのソフトウェアディストリビューションでは,
    設定用のスクリプトを
    配布することでこの問題を解決しようとしています.
    これらのスクリプトの中には非常に精巧なものもありますが,
    残念ながら, 中にはこれまで
    聞いたこともないようなシステムの名前をしゃあしゃあと
    言い放ったうえに, まるでシステムレベルの Unix
    プログラミングに関する 最終試験のような,
    たくさんの質問をしてくる場合があります.  (例えば,
    <literal>このシステムの gethitlist 関数は fromboz への const
      ポインタを 返しますか? それとも const fromboz
      へのポインタを返しますか?</literal>,  <literal>このシステムには
      Foonix スタイルの, 容認できない例外処理をおこなう
      ルーチンがありますか? もしもないとしたら,
      それはなぜですか?</literal>)</para>

  <para>幸いなことに, ports コレクションがあれば,
    これらのきつい作業はすべて 完了しています. <command>make
      install</command> とタイプするだけで, 動作するプログラムを
    入手することができるのです.</para>

  <sect1>
    <title>なぜ ports コレクションを作ったのか?</title>

    <para>FreeBSD の基本システムは,
      非常に多くのツールやユーティリティから 構成されています. しかし,
      よく使われるプログラムのうち多くのものが,
      この基本システムには含まれていません. その理由は:-</para>

    <orderedlist>
      <listitem>
	<para>ある Lisp ベースのエディタのように,
	  それがないと生きていけないと 言う人もいれば,
	  ディスクの無駄だと言う人もいるようなプログラム.</para>
      </listitem>

      <listitem>
	<para>基本システムに組み込むには特殊すぎるプログラム.  (CAD
	  やデータベースなど.)</para>
      </listitem>

      <listitem>
	<para>&ldquo;時間のある時に,
	  ちょっと見ておかなければ&rdquo;というような類の,
	  それがシステムに含まれていないことが
	  致命的とは言えないプログラム.  (おそらく,
	  何らかの言語などでしょう.)</para>
      </listitem>

      <listitem>
	<para>FreeBSD
	  のような真面目なオペレーティングシステムの一部として
	  供給するには遊びが過ぎるようなプログラム. ;-)</para>
      </listitem>

      <listitem>
	<para>たくさんのプログラムを基本システムに組み込んだとしても,
	  もっともっと 組み込みたいという要求が出てくるので,
	  どこかで制限を引かなくてはならないため.  (そうしなければ
	  FreeBSD の配布物は,
	  とてつもなく膨大になってしまうでしょう.)</para>
      </listitem>
    </orderedlist>

    <para>すべての人が自分のお気に入りの
      プログラムを手作業で移植しなければ ならないとしたら,
      (途方もない膨大な作業の繰り返しをさておいたとしても)
      それは明らかに不合理な話です.  そこで, FreeBSD プロジェクトでは,
      標準のツールを使って移植のプロセスを
      自動化する巧妙な方法を考え出しました.</para>

    <para>なお,
      これは単純ながら非常に柔軟なツールを組み合わせることで,
      非常に強力な働きをさせるという&ldquo;Unix
      流&rdquo;の作業の優れた実例です.</para>
  </sect1>

  <sect1>
    <title>ports コレクションはどのように動くのでしょうか?</title>

    <para>インターネットでは通常, <link
	linkend="ports-tarball">tarball</link> の形で
      プログラムが配布されています. これは, Makefile
      とソースコードで構成され,  普通は何らかの説明書 (あいにく,
      いつもわかりやすく書かれているとは 限りませんが)
      が付属しています. ことによるとコンフィグレーションスクリプトも
      含まれているかもしれません.</para>

    <para>標準的な手順では, FTP で tarball を入手して,
      適当なディレクトリで展開します.  次に説明書を読んで,
      必要な変更をおこないます. そして, 設定スクリプトを実行し, 標準の
      <command>make</command>
      コマンドを使ってソースのコンパイルとインストールを
      おこないます.</para>

    <para>FreeBSD の ports も tarball の仕組みを利用していますが,
      これはユーザが 苦労して作業することを期待したものではなく,
      どのようにすれば FreeBSD 上で
      そのプログラムが動くようになるかという「ノウハウ」を <link
	linkend="ports-skeleton">スケルトン</link>
      を使用して収めているものです.  スケルトンは, カスタマイズ済みの
      <link linkend="ports-makefile">Makefile</link> も
      提供していますので, ほとんどすべての ports
      は同じ手順でインストールすることが できます.</para>

    <para>もしあなたが (<ulink
	URL="file://localhost/usr/ports/devel/ElectricFence">あなたの
	FreeBSD システム</ulink> または  <ulink
	URL="ftp://ftp.freebsd.org/pub/FreeBSD/ports/ports/devel/ElectricFence">
	FTP サイト</ulink> にある) ports スケルトンを見ていて,
      そこに潜んでいる あらゆる種類の先端的な
      ロケット工学的なものを見つけられると期待していると,
      つまらなそうなファイルやディレクトリがそこにあるだけなのを見て,
      がっかりするかもしれません.
      (ports を手に入れる方法については, すぐに
      <link linkend="ports-getting">FreeBSD ports コレクションの入手方法
      </link> の節でお話します.)</para>

    <para>&ldquo;一体どうしたらいいんだ? ここにはソースコードが
      ないじゃないか?&rdquo;
      というあなたの叫びが聞こえるようです.</para>

    <para>心配いりません. おとなしく読んでいけば, すべてが (たぶん)
      明らかに なるでしょう.  試しに ports をインストールして,
      何が起きるのかを見てみましょう.
      ここではサンプルとして開発者向けの便利なツール,
      <application>ElectricFence</application> を選択します.
      このスケルトンを選んだ理由は, 他の ports
      に比べても素直で理解しやすく 書かれているからです.</para>

    <note>
      <para>自宅で試してみる場合には, root
	になる必要があるでしょう.</para>
    </note>

    <!-- kuriyama - remove informalexample -->
    <informalexample>
      <screen>&prompt.root; <userinput>cd /usr/ports/devel/ElectricFence</userinput>
&prompt.root; <userinput>make install</userinput>
&gt;&gt; Checksum OK for ElectricFence-2.0.5.tar.gz.
===&gt;  Extracting for ElectricFence-2.0.5
===&gt;  Patching for ElectricFence-2.0.5
===&gt;  Applying FreeBSD patches for ElectricFence-2.0.5
===&gt;  Configuring for ElectricFence-2.0.5
===&gt;  Building for ElectricFence-2.0.5
[大量のメッセージをコンパイラが出力します...]
===&gt;  Installing for ElectricFence-2.0.5
===&gt;  Warning: your umask is "0002".
      If this is not desired, set it to an appropriate value
      and install this port again by ``make reinstall''.
install -c -o bin -g bin -m 444 /usr/ports/devel/ElectricFence/work/ElectricFence-2.0.5/libefence.a /usr/local/lib
install -c -o bin -g bin -m 444 /usr/ports/devel/ElectricFence/work/ElectricFence-2.0.5/libefence.3 /usr/local/man/man3
===&gt;   Compressing manual pages for ElectricFence-2.0.5
===&gt;  Registering installation for ElectricFence-2.0.5</screen>
    </informalexample>

    <para>ここではあなたが混乱しないように, コンパイル時の出力を
      すべて取り除いてあります.</para>

    <para>もしもあなた自身で実行されたら, 最初にこのような
      出力結果が得られるはずです:-</para>

    <informalexample id="ports-fetch">
	  <screen>&prompt.root; <userinput>make install</userinput>
&gt;&gt; ElectricFence-2.0.5.tar.gz doesn't seem to exist on this system.
&gt;&gt; Attempting to fetch from ftp://ftp.doc.ic.ac.uk/Mirrors/sunsite.unc.edu/pub/Linux/devel/lang/c/.</screen>
    </informalexample>

    <para><command>make</command> プログラムは,
      あなたの手元にソースコードがないことを検出し,
      処理を続けられるようにソースを FTP でダウンロードしようとします.
      この例では, あらかじめ手動でソースコードを用意してあったので,
      持ってくる必要はありませんでした.</para>

    <para>では, 続けて <command>make</command>
      プログラムが何をしているのか見てみましょう.</para>

    <procedure>
      <step>
	<para>ソースコード <link
	    linkend="ports-tarball">tarball</link> のありかを
	  確認します.  手元にファイルが存在しなければ, FTP
	  サイトから入手しようとします.</para>
      </step>

      <step>
	<para><link linkend="ports-checksum">チェックサム</link>
	  テストを実行して,  その tarball
	  が事故か何かで途中で切れていたり, ASCII モードで
	  ダウンロードされていたり,
	  転送中にニュートリノによって傷められたりして
	  改変されたりしていないかどうかを確認します.</para>
      </step>

      <step>
	<para>tarball を一時的な作業用ディレクトリに展開します.</para>
      </step>

      <step>
	<para>FreeBSD 上でコンパイルしたり, 動作させるのに必要な
	  すべての <link linkend="ports-patch">パッチ</link>
	  をソースコードに当てます.</para>
      </step>

      <step>
	<para>構築のために必要な
	  コンフィグレーションスクリプトを実行します.
	  コンフィグレーションスクリプトの
	  質問には正確に答えてください.</para>
      </step>

      <step>
	<para>(いよいよ!) ソースコードをコンパイルします.</para>
      </step>

      <step>
	<para>実行形式のプログラム, マニュアル,
	  その他のサポートファイルを,
	  システムのプログラムと混ざってしまわないように
	  <filename>/usr/local</filename> 以下に インストールします.
	  ports はすべて同じ場所にインストールされ,
	  システムのあちこちにばらまかれることはありません.</para>
      </step>

      <step>
	<para>インストール結果はデータベースに登録されます.
	  これにより,
	  インストールしたプログラムがもしも気に入らなかったときも,
	  システムから すべての痕跡をきれいに <link
	    linkend="ports-remove">消去</link>
	  することができます.</para>
      </step>
    </procedure>

    <para>以上のステップが <command>make</command>
      の出力と一致しているかどうか確認してください.
      今まで確認していなかったのなら,
      今からするようにしてください!</para>
  </sect1>

  <sect1 id="ports-getting">
    <title>FreeBSD ports コレクションの入手</title>

    <para>あるプログラムの FreeBSD port
      を入手するには二つの方法があります.  ひとつは <link
	linkend="ports-cd">FreeBSD CD-ROM</link> を使う方法で,
      もうひとつは <link
	linkend="ports-inet">インターネット接続</link>
      を使う方法です.</para>

    <sect2 id="ports-cd">
      <title>CD-ROM からコンパイルする</title>

      <para>FreeBSD CD-ROM がドライブに入っており,
	<filename>/cdrom</filename> にマウントされていると仮定すると
	(マウントポイントが <filename>/cdrom</filename>
	である必要があります), ただ普通に実行するだけで ports
	を構築できるようになり,  tarball
	をネットワーク経由でダウンロードするのではなく
	<filename>/cdrom/ports/distfiles/</filename>
	からさがすようになります (そこにあればの話ですが).</para>

      <para>CD-ROM にある port スケルトンを使いたければ, 他に
	<filename>/etc/make.conf</filename> の
	変数を以下のようにセットする方法があります:</para>

      <programlisting>
PORTSDIR=       /cdrom/ports
DISTDIR=        /tmp/distfiles
WRKDIRPREFIX=   /tmp</programlisting>

      <para>(任意の十分な空きスペースの場所を <literal>/tmp</literal>
	とおいています).
	次に, <filename>/cdrom/ports</filename> 下の適宜のサブディレクトリに
	<command>cd</command> して, 例のごとく
	<command>make install</command> とタイプします.
	<makevar>WRKDIRPREFIX</makevar> は port に
	<filename>/tmp/cdrom/ports</filename> の下でビルドさせようとします;
	例えば, <filename>games/oneko</filename> は
	<filename>/tmp/cdrom/ports/games/oneko</filename> の下で
	ビルドされるでしょう.
      </para>

      <para>ライセンスの制限により, いくつかの ports
	でオリジナルのソースコードを  CD-ROM
	に入れることができなかったものがあることに注意してください.
	この場合,  <link linkend="ports-inet">インターネット経由で
	  ports をコンパイルする</link> の
	節を参照してください.</para>
    </sect2>

    <sect2 id="ports-inet">
      <title>インターネット経由で ports をコンパイルする</title>

      <para>CD-ROM を持っていなかったり, その ports
	の最新バージョンを確実に入手したい 場合は, その ports の <link
	  linkend="ports-skeleton">スケルトン</link> を
	ダウンロードする必要があります. ところで, これは落し穴が
	たくさんある作業に見えるかもしれませんが,
	実際には非常に簡単です.</para>

      <para>初めに, あなたの動かしている FreeBSD
	がリリースバージョンなら <ulink
	  url="http://www.freebsd.org/ports/">ports ページ </ulink>
	でその FreeBSD 用の &ldquo;アップグレードキット&rdquo;
	を手にいれてください. このパッケージには, 最新の ports
	をコンパイルするのに必要な,
	リリース以降に更新されたファイルが含まれています.</para>

      <para>FreeBSD の FTP サーバーがその場で <link
	  linkend="ports-tarball">tarball</link>
	を作成できることを利用してスケルトンを入手すると
	非常に便利です. ここでは例として databases ディレクトリにある
	gnats プログラムを使って説明します.
	(角型かっこの中の文はコメントなので,  実際に実行する場合には,
	これをタイプしないでください!):-</para>

      <informalexample>
	<screen>&prompt.root; <userinput>cd /usr/ports</userinput>
&prompt.root; <userinput>mkdir databases</userinput>
&prompt.root; <userinput>cd databases</userinput>
&prompt.root; <userinput>ftp ftp.freebsd.org</userinput>
[ユーザ名 `ftp' でログインし, パスワードを要求されたら, あなたの電子メール
アドレスを入力してください. バイナリモードを (イメージモードと呼ばれることも
あります) 使うのをお忘れなく!]
<prompt>&gt;</prompt> <userinput>cd /pub/FreeBSD/ports/ports/databases</userinput>
<prompt>&gt;</prompt> <userinput>get gnats.tar</userinput>
[gnats スケルトンの tarballs を取得]
<prompt>&gt;</prompt> <userinput>quit</userinput>
&prompt.root; <userinput>tar xf gnats.tar</userinput>
[gnats スケルトンの展開]
&prompt.root; <userinput>cd gnats</userinput>
&prompt.root; <userinput>make install</userinput>
[gnats の構築とインストール]</screen>
      </informalexample>

      <para>さて何が起きるでしょうか? FTP
	サイトにいつも通りに接続して, データベースの
	サブディレクトリに移動します. <command>get gnats.tar</command>
	とコマンドを入力すると,  FTP サイトでは gnats ディレクトリを
	<link linkend="ports-tarball">tarred</link>
	にしてくれるのです.</para>

      <para>gnats スケルトンを展開したら, gnats ディレクトリへ移動して
	ports を構築します.  <link linkend="ports-fetch">すでに</link>
	説明したように, make の過程で
	手元にソースコードがないことを検出すると,
	ソースコードを取得してから 展開し,
	パッチ当てと構築をおこないます.</para>

      <para>それでは, 少し冒険をしてみましょう. 一つの ports
	スケルトンを 取得するかわりに, たとえば ports
	コレクションの中のデータベースの スケルトンをすべて,
	サブディレクトリ全体を取得してみましょう.
	やり方はほとんど同じです:-</para>

      <para>
	<literallayout> &prompt.root; cd /usr/ports
 &prompt.root; ftp ftp.freebsd.org
 [ユーザ名 `ftp' でログインし, パスワードを要求されたら, あなたの電子メール
アドレスを入力してください. バイナリモードを (イメージモードと呼ばれることも
あります) 使うのをお忘れなく!]
 &gt; cd /pub/FreeBSD/ports/ports
 &gt; get databases.tar		[データベースディレクトリの tarballs を取得]
 &gt; quit
 &prompt.root; tar xf databases.tar	[すべてのスケルトンを展開]
 &prompt.root; cd databases
 &prompt.root; make install			[データベース ports 全部の構築とインストール] </literallayout>
      </para>
      <!-- kuriyama - literallayout? -->

      <para>わずかばかりの簡単なコマンドで, この FreeBSD
	マシン上にデータベース
	プログラムを一揃い手に入れてしまいました! 一つの ports
	スケルトンを取ってきて それを構築する場合との違いは,
	すべてのディレクトリを一度に取得して,
	全部を一度にコンパイルしたということだけです.
	かなり感動的だと思いませんか?</para>

      <para>たくさんの ports をインストールする つもりなら,
	おそらくすべての ports ディレクトリをダウンロードしておく
	価値があるでしょう.</para>
    </sect2>
  </sect1>

  <sect1 id="ports-skeleton">
    <title>スケルトン</title>

    <para>スケルトン (訳注: skeleton とは骸骨のことです) とは,
      締め切りを守るため, 食事をするのを忘れるほど仕事にのめり込んだ
      ハッカーたちのなれの果ての ことでしょうか? FreeBSD
      の屋根裏に潜む, なにか気持ちの悪いものでしょうか?  いいえ,
      ここでスケルトンの意味するところは, ports の魔術を実現するのに
      必要とされるすべてのものを提供する最小の骨組みのことです.</para>

    <sect2 id="ports-makefile">
      <title><filename>Makefile</filename></title>

      <para>スケルトンのもっとも重要な要素は Makefile です. Makefile
	は ports を どのようにコンパイルし,
	インストールをおこなうかを指示する
	いろいろな命令を含んでいます. 以下に ElectricFence の Makefile
	を示します:-</para>

      <programlisting>
# New ports collection makefile for:  Electric Fence
# Version required:	2.0.5
# Date created: 	13 November 1997
# Whom:			jraynard
#
# &#36;Id&#36;
#

DISTNAME=	ElectricFence-2.0.5
CATEGORIES=	devel
MASTER_SITES=	${MASTER_SITE_SUNSITE}
MASTER_SITE_SUBDIR=	devel/lang/c

MAINTAINER=	jraynard@freebsd.org

MAN3=		libefence.3

do-install:
	${INSTALL_DATA} ${WRKSRC}/libefence.a ${PREFIX}/lib
	${INSTALL_MAN} ${WRKSRC}/libefence.3 ${PREFIX}/man/man3

.include &lt;bsd.port.mk&gt;</programlisting>

      <para>&quot;#&quot; で始まる行は, 人間のためのコメント行です.
	(ほとんどの Unix のスクリプトと同じですね.)</para>

      <para><literal>DISTNAME</literal> は <link
	  linkend="ports-tarball">tarball</link>
	の名前から拡張子を取ったものです.</para>

      <para><literal>CATEGORIES</literal>
	はこのプログラムの種類を示します.  この場合,
	開発者向けのユーティリティということになります.
	完全なリストはこのハンドブックの <link
	  linkend="porting-categories">カテゴリ</link>
	をみてください.</para>

      <para><literal>MASTER_SITES</literal> はマスタ FTP サイトの URL
	です. もしローカルシステムに  <link
	  linkend="ports-tarball">tarball</link> がない場合には,
	ここから取得します.  これは信頼できると考えられているサイトで,
	通常はそのプログラムを
	インターネット上で公式に配布しているサイトです.
	(そのソフトウェアがインターネット上で「公式に」
	配布されているとしたら)</para>

      <para><literal>MAINTAINER</literal> は,
	例えば新しいバージョンのプログラムが出た場合に, 必要であれば
	スケルトンの更新をおこなう保守担当者の
	電子メールアドレスです.</para>

      <para>次の数行はとりあえず飛ばします.

	<literal>.include &lt;bsd.port.mk&gt;</literal>

	この行は, この ports に必要なその他の命令やコマンドは
	<filename>bsd.port.mk</filename> に
	入っているということを示しています.
	これらはすべての ports で共通のものなので,
	それぞれの Makefile に書いておく必要はありません.
	そのため単一の標準ファイルに
	まとめられているのです.</para>

      <para>ここでは Makefile
	がどう働くかを詳細に調査するのが目的ではありませんので,
	<literal>MAN3</literal> で始まる行は, インストールの後に
	ElectricFence のマニュアルを 圧縮するために使用される,
	と言っておくだけで充分でしょう.  これにより,
	貴重なディスクスペースが保護されているわけです.  オリジナルの
	port では <maketarget>install</maketarget>
	ターゲットが用意されていないので,
	<maketarget>do-install</maketarget> からの 3 行が この ports
	によって生成されたファイルを
	正しい場所に置くために使用されます.</para>
    </sect2>

    <sect2>
      <title><filename>files</filename> ディレクトリ</title>

      <para>ports のチェックサム算出には MD5
	アルゴリズムを使用しているので,  この <link
	  linkend="ports-checksum">チェックサム</link> を含んでいる
	ファイルは  <filename>md5</filename> と呼ばれます.
	ちょっと混乱するかもしれませんが, このファイルは
	<filename>files</filename> という
	名前のディレクトリに置かれています.</para>

      <para>このディレクトリは, ports に必要だけれども,
	他のどこにも属さない 雑多なファイルも含んでいます.</para>
    </sect2>

    <sect2>
      <title><filename>patches</filename> ディレクトリ</title>

      <para>このディレクトリには, FreeBSD
	ですべてを正常に動作させるのに 必要な <link
	  linkend="ports-patch">パッチ</link> が含まれています.</para>
    </sect2>

    <sect2>
      <title><filename>pkg</filename> ディレクトリ</title>

      <para>このディレクトリには,
	非常に役立つ三つのファイルが含まれています:-</para>

      <itemizedlist>
	<listitem>
	  <para><filename>COMMENT</filename> &mdash;
	    プログラムについての 1 行の説明.</para>
	</listitem>

	<listitem>
	  <para><filename>DESCR</filename> &mdash; より詳細な説明.</para>
	</listitem>

	<listitem>
	  <para><filename>PLIST</filename> &mdash;
	    プログラムのインストール時に作成される,
	    すべてのファイルのリスト.</para>
	</listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 id="ports-troubleshooting">
    <title>ports が動かないのですが, どうしたらよいでしょう</title>

    <para>おやおや. では, 次の四つのどれかをやってみてください:</para>

    <orderedlist>
      <listitem>
	<para>自分で修正する. ports
	  の仕組みに関する技術的な詳細については,  <link
	    linkend="porting">
	    アプリケーションの移殖方法</link>をご覧ください.</para>
      </listitem>

      <listitem>
	<para>苦情をいう. これは電子メールで <emphasis>だけ</emphasis>
	  にしてください!  このようなメールの宛先は &a.ports; です.
	  なお, 必ず port の名前やバージョン, その port のソースや
	  distfile(s) を どこから入手したか,
	  どんなエラーが発生したのかを書いておいてください.</para>
      </listitem>

      <listitem>
	<para>忘れてしまう. これはほとんどの場合最も簡単な方法です.
	  ports
	  のプログラムのうち必要不可欠な物はごくわずかです.</para>
      </listitem>

      <listitem>
	<para>FTP サイトからコンパイル済みのパッケージを入手する.
	  &ldquo;マスター&rdquo;パッケージコレクションは FreeBSD の
	  FTP サイトの <ulink
	    URL="ftp://ftp.FreeBSD.org/pub/FreeBSD/ports/packages/">
	    パッケージディレクトリ</ulink> に置いてありますが,
	  まずあなたの近くのローカルミラーサイトを確認してください!
	  ソースからのコンパイルに挑戦するよりも,
	  パッケージを使うほうが (全体的に見て)
	  ずっと確実に動作するでしょうし,
	  より手っ取り早い方法でもあります.
	  システムにパッケージをインストールするには, &man.pkg.add.1;
	  を使ってください.</para>
      </listitem>
    </orderedlist>
  </sect1>

  <sect1>
    <title>質問と回答集</title>

    <itemizedlist>
      <listitem>
	<para>Q. 私はモデムについての議論を
	  しているのかと思っていました??!</para>

	<para>A.なるほど, あなたはきっとコンピュータの背面についている
	  シリアルポートのことだと思ってしまったのでしょう.
	  あるバージョンの Unixから別のバージョンの Unix
	  へとプログラムを 移殖することを &ldquo;porting&rdquo;
	  というのですが, ここで我たちは &ldquo;porting&rdquo; の結果
	  という意味で &ldquo;port&rdquo; を使っています.
	  (コンピュータに関わる人々の悪しき習慣として,
	  ひとつの同じ言葉を複数の
	  まったく違う意味として使うことがあるのです.)</para>
      </listitem>

      <listitem>
	<para>Q. 私は, 標準以外のプログラムのインストールには packages
	  を使うと 思っていたのですが.</para>

	<para>A. そのとおり. 通常は packages
	  が最も手早くて簡単な方法です.</para>
      </listitem>

      <listitem>
	<para>Q. それではどうして面倒な ports があるのですか?</para>

	<para>A. いくつかの理由があります:-</para>

	<orderedlist>
	  <listitem>
	    <para>いくつかのソフトウェアのライセンス条件には,
	      バイナリではなくソースコードでの
	      配布を求めているものがあります.</para>
	  </listitem>

	  <listitem>
	    <para>バイナリ配布を信用していない人もいます.
	      少なくともソースコード があれば, ソースコードを読んで,
	      (理論的には) 潜在的な問題点を自分で
	      見つけ出すこともできるはずです.</para>
	  </listitem>

	  <listitem>
	    <para>ローカルなパッチを入手した場合,
	      それを自分で追加するために
	      ソースコードが必要になります.</para>
	  </listitem>

	  <listitem>
	    <para>プログラムがいかにコンパイルされるべきかについて,
	      あなたはパッケージを作った人とは
	      異なる見解を持っているかもしれません.
	      どんな最適化オプションをつけるべきかとか,
	      デバッグバージョンを作ってから それを strip
	      するべきだとか, いや, そうするべきでない, などなど,
	      確固たる見解を持っている人もいるでしょう.</para>
	  </listitem>

	  <listitem>
	    <para>ソースコードを手元に置いておきたい人たちもいます.
	      彼らは, 退屈したときに眺めたり, あちこち解析してみたり,
	      ソースコードを 借用したり (もちろん,
	      ライセンスが許せばの話ですが) するのです.</para>
	  </listitem>

	  <listitem>
	    <para>あなたがソースコードを持っていなければ,
	      それはソフトウェアとは 言えませんね! <!-- smiley
	      -->;-)</para>
	  </listitem>
	</orderedlist>
      </listitem>

      <listitem>
	<para><anchor id="ports-patch">
	  Q. パッチとは何ですか?</para>

	<para>A. パッチとは,
	  あるバージョンから他のバージョンへどのように変更するかを
	  示す, (通常は) 小さなファイルです. &ldquo;23
	  行目を削除&rdquo;, &ldquo;468 行目の後に これらの 2
	  行を追加&rdquo;, または&ldquo;197
	  行目をこのように変更&rdquo;というような 内容を含んでいます.
	  これは, &ldquo;diff&rdquo;
	  という名前のプログラムで生成されます.</para>
      </listitem>

      <listitem>
	<para><anchor id="ports-tarball">
	  Q. tarball とは一体何ですか?</para>

	<para>A. <filename>.tar</filename> または
	  <filename>.tar.gz</filename> という拡張子を持つファイルです.
	  (<filename>.tar.Z</filename> のようなバリエーションも
	  ありますし, DOS のファイルシステム用に
	  <filename>.tgz</filename>
	  と短縮される場合もあります.)</para>

	<para>これは基本的に, 一つのファイルに固めた
	  (<filename>.tar</filename>) ディレクトリツリーです.
	  圧縮されている (<filename>.gz</filename>) 場合もあります.
	  これは元々 <emphasis>T</emphasis>ape
	  <emphasis>AR</emphasis>chives (訳注: テープアーカイブ)
	  (このため <command>tar</command> という名前なのです)
	  で使われていたものなのですが,
	  インターネット上でプログラムのソースコードを配布するために
	  広く使われている方法です.</para>

	<para>これらのファイルの中身を見たり,
	  展開したりすることもできます.  FreeBSD
	  の基本システムに付属する Unix 標準の tar
	  コマンドを使ってみると 次のようになります:-</para>

	<informalexample>
	  <screen>&prompt.user; <userinput>tar tvzf foobar.tar.gz</userinput>
&prompt.user; <userinput>tar xzvf foobar.tar.gz</userinput>
&prompt.user; <userinput>tar tvf foobar.tar</userinput>
&prompt.user; <userinput>tar xvf foobar.tar</userinput>
	  </screen>
	</informalexample>
      </listitem>

      <listitem>
	<para><anchor id="ports-checksum">
	  Q. チェックサムとは何ですか?</para>

	<para>A. これは,
	  チェックしたいファイル中のすべてのデータを加えて生成した
	  数値です. 何か文字が書き換わっていたら,
	  チェックサムが一致しなくなります.  そのため,
	  単純な比較だけで違いを見つけることができるのです.
	  (実際には, 文字の位置が入れ替わるなどの,
	  単純な加算ではわからない問題も
	  見つけることができる複雑な方法で計算されています.)</para>
      </listitem>

      <listitem>
	<para>Q. 私は, <link linkend="ports-cd">CD-ROM から ports
	    をコンパイルする</link> にしたがって ports
	  をインストールしていました.  kermit
	  をインストールしようとするまではうまくいっていました:-</para>

	<informalexample>
	  <screen>&prompt.root; <userinput>make install</userinput>
&gt;&gt; cku190.tar.gz doesn't seem to exist on this system.
&gt;&gt; Attempting to fetch from ftp://kermit.columbia.edu/kermit/archives/.</screen>
	</informalexample>

	<para>なぜ cku190.tar.gz が見つからないのでしょうか?  不良品の
	  CD-ROM を買ってしまったのでしょうか?</para>

	<para>A. Kermit の権利を持つチームは, 私たちの CDROM に kermit
	  の tarball を 入れることを許可しませんでした.
	  申し分けありませんが, 手動でファイルを 入手してください.
	  このようなエラーメッセージが出たのは,
	  あなたがそのときインターネットに 接続していなかったためです.
	  あらかじめ上記のサイトのいずれかからファイルを
	  ダウンロードしておけば, プロセスを再開することができます.
	  (ダウンロードの際には,
	  あなたに最も近いサイトを選ぶようにしてください.  そうすれば,
	  時間とインターネットの帯域の節約になります)</para>
      </listitem>

      <listitem>
	<para>Q. kermit の tarball を入手しましたが,
	  <filename>/usr/ports/distfiles</filename> に
	  ファイルを置こうとすると,
	  書き込み権がないというエラーがでます.</para>

	<para>A. ports のしくみは
	  <filename>/usr/ports/distfiles</filename> から tarball
	  を探します.  しかし, これは read-only の CD-ROM
	  へのシンボリックリンクなので,
	  ここにファイルを置くことはできません.  次のようにすれば,
	  他の場所を探すよう ports に指示することができます.</para>

	<informalexample>
	  <screen>&prompt.root; <userinput>make DISTDIR=/where/you/put/it install</userinput></screen>
	</informalexample>
      </listitem>

      <listitem>
	<para>Q. ports では, すべてを <filename>/usr/ports</filename>
	  に置いたときだけ動作するのでしょうか?
	  システムの管理者によると, 私の個人的なファイルは
	  <filename>/u/people/guests/wurzburger</filename>
	  に入れなければならないのですが,  これでは
	  うまくいかないように思います.</para>

	<para>A. <makevar>PORTSDIR</makevar> 変数と
	  <makevar>PREFIX</makevar> 変数を変更することで,
	  違うディレクトリを 使用することができます. 例えば,</para>

	<informalexample>
	  <screen>&prompt.root; <userinput>make PORTSDIR=/u/people/guests/wurzburger/ports install</userinput></screen>
	</informalexample>

	<para>とすると, ports は
	  <filename>/u/people/guests/wurzburger/ports</filename>
	  でコンパイルされ,  すべて <filename>/usr/local</filename>
	  以下にインストールされます.</para>

	<informalexample>
	  <screen>&prompt.root; <userinput>make PREFIX=/u/people/guests/wurzburger/local install</userinput></screen>
	</informalexample>

	<para>この場合, コンパイルは <filename>/usr/ports</filename>
	  でおこない,
	  <filename>/u/people/guests/wurzburger/local</filename>
	  にインストールします.  もちろん,
	  以下のように両者を組み合わせることも可能です.</para>

	<informalexample>
	  <screen>&prompt.root; <userinput>make PORTSDIR=.../ports PREFIX=.../local install</userinput></screen>
	</informalexample>

	<para>(省略せずに記述したら,
	  このページに収めるには長すぎるのですが,
	  考え方は理解していただけたと思います)</para>

	<para>もし ports をインストールするたびに,
	  これらを毎回タイプするのが 気に入らないのであれば,
	  (正直に言って, 誰もそう思わないでしょう)
	  これらを環境変数にセットしてしまうという手があります.</para>
      </listitem>

      <listitem>
	<para>Q. 私は, FreeBSD の CD-ROM を持っていませんが,
	  私はすべての tarball を 私のシステムに置いておきたいのです.
	  そうすれば, 私は ports をインストール するたびに,
	  毎回ダウンロードが終わるのを待たなくてすむでしょう.
	  これを一度におこなう簡単な方法はありませんか?</para>

	<para>A. ports コレクション全体の tarball を持ってくるには,
	  次のようにしてください.</para>

	<informalexample>
	  <screen>&prompt.root; <userinput>cd /usr/ports</userinput>
&prompt.root; <userinput>make fetch</userinput></screen>
	</informalexample>

	<para>ports の下のディレクトリひとつの tarball
	  を持ってくるには, 次のように してください.</para>

	<informalexample>
	  <screen>&prompt.root; <userinput>cd /usr/ports/directory</userinput>
&prompt.root; <userinput>make fetch</userinput></screen>
	</informalexample>

	<para>ports をひとつだけ持ってくる方法は,
	  きっと既にご存知だと思います.</para>
      </listitem>

      <listitem>
	<para>Q. マスタ FTP サイトから tarball を持ってくるより,
	  近くにある FreeBSD の
	  ミラーサイトから持ってきた方が速いはずです. MASTER_SITES
	  に書かれている サイト以外から持ってくるように ports
	  に指示する方法はありませんか?</para>

	<para>A. もちろんあります. 例えば <hostid
	    role="fqdn">ftp.FreeBSD.ORG</hostid> が
	  <makevar>MASTER_SITES</makevar> に書かれている
	  サイトより近いとしたら, 以下のようにしてください.</para>

	<informalexample>
	  <screen>&prompt.root; <userinput>cd /usr/ports/directory</userinput>
&prompt.root; <userinput>make MASTER_SITE_OVERRIDE=ftp://ftp.FreeBSD.ORG/pub/FreeBSD/ports/distfiles/ fetch</userinput></screen>
	</informalexample>
      </listitem>

      <listitem>
	<para>Q. ダウンロードをする前に,
	  どんなファイルが必要なのか知りたいのですが.</para>

	<para>A. <command>make fetch-list</command> とすると, ports
	  に必要なファイルの一覧を表示できます.</para>
      </listitem>

      <listitem>
	<para>Q. ports のコンパイルを途中で止める方法はありますか?
	  私はインストールをする前に
	  いろいろとソースコードを解析したいのですが,  毎回 control-C
	  を打たなければならないのが少し面倒です.</para>

	<para>A. <command>make extract</command> を実行すると,
	  ファイル転送とソースコードの展開まで
	  おこなったところで停止します.</para>
      </listitem>

      <listitem>
	<para>Q. 自分で ports を作ろうとしています. 私の作ったパッチが
	  正しく処理できることを確認できるように,
	  コンパイルを止めたいのです.  パッチのための <command>make
	    extract</command> のようなものはありませんか?</para>

	<para>A. あります. <command>make patch</command>
	  があなたのお望みのものです.  おそらく
	  <makevar>PATCH_DEBUG</makevar> オプションも同様に
	  お役に立つことでしょう.  ところで,
	  あなたの努力に感謝いたします!!</para>
      </listitem>

      <listitem>
	<para>Q. あるコンパイルオプションはバグの
	  原因になるという話を聞きました.  本当なのでしょうか?
	  どうやったら正しい設定で ports
	  をコンパイルできますか?</para>

	<para>A. 本当です. <command>gcc</command> の バージョン 2.6.3
	  (FreeBSDの 2.1.0 と 2.1.5 に付属している バージョン) では,
	  <option>-O2</option> オプションを
	  <option>-fno-strength-reduce</option> オプションなしで
	  使うと, バグのあるコードを出力します (ほとんどの ports は
	  <option>-O2</option> オプションを 使いません).
	  コンバイラオプションは次のように定義 <emphasis> すべき
	  </emphasis> です.</para>

	<informalexample>
	  <screen>&prompt.root; <userinput>make CFLAGS='-O2 -fno-strength-reduce' install</userinput></screen>
	</informalexample>

	<para>これを <filename>/etc/make.conf</filename>
	  に書いておくこともできますが, 残念なことに すべての ports
	  がこの指定を尊重してくれる 訳ではありません.
	  もっとも確実なのは <command>make configure</command>
	  を実行し,  ソースディレクトリの Makefile
	  を見て手で修整することですが, ソースが
	  多くのサブディレクトリにわかれていて, 各々に Makefile
	  がある場合は 大変な仕事になります.</para>
      </listitem>

      <listitem>
	<para>Q. ports がたくさんありすぎて,
	  私の欲しいものがなかなか見つけられません.  どんな ports
	  が使えるのか, リストはどこかにありませんか?</para>

	<para>A. <filename>/usr/ports</filename> の中にある
	  <filename>INDEX</filename> ファイルを見てみましょう.
	  あるキーワードで ports コレクションを検索したければ,
	  それも可能です.  たとえば,
	  以下のようにすればプログラミング言語 LISP に関連した ports
	  を見つけることができます: </para>

	<screen>&prompt.user; <userinput>cd /usr/ports</userinput>
&prompt.user; <userinput>make search key=lisp</userinput></screen>
      </listitem>

      <listitem>
	<para>Q. <literal>foo</literal> ports
	  をインストールしたいのですが, それのコンパイルは
	  すぐに停止して, <literal>bar</literal> ports
	  のコンパイルが始まってしまいます. 一体どうして?</para>

	<para>A. <literal>foo</literal> ports が,
	  <literal>bar</literal> ports
	  の提供する何らかの機能を必要としているからです.  例えば
	  <literal>foo</literal> が画像を使うとすると,
	  <literal>bar</literal> は画像処理に必要な
	  ライブラリを持っている, などです.  または,
	  <literal>bar</literal> は <literal>foo</literal>
	  をコンパイルするのに必要なツールなのかもしれません.</para>
      </listitem>

      <listitem>
	<para><anchor id="ports-remove">  Q. ports から
	  <literal>grizzle</literal>
	  プログラムをインストールしましたが, まったく
	  ディスクスペースの浪費です. 削除したいのですが,
	  すべてのファイルが どこへインストールされたのかわかりません.
	  何か手がかりはありませんか?</para>

	<para>A. 大丈夫, 次のようにしてください.</para>

	<informalexample>
	  <screen>&prompt.root; <userinput>pkg_delete grizzle-6.5</userinput></screen>
	</informalexample>
      </listitem>

      <listitem>
	<para>Q. ちょっと待ってください.
	  削除しようとするコマンドのバージョン番号を
	  知っていなくてはならないのでしょうか? あなたは,
	  私がバージョン番号を
	  覚えていることを本気で当てにしているのでしょうか?</para>

	<para>A. そんなことはありません.
	  バージョン番号は次のようにすればわかります.</para>

	<informalexample>
	  <screen>&prompt.root; <userinput>pkg_info -a | grep grizzle</userinput>
Information for grizzle-6.5:
grizzle-6.5 - the combined piano tutorial, LOGO interpreter and shoot 'em up arcade game.</screen>
	</informalexample>
      </listitem>

      <listitem>
	<para>Q. ディスク容量のことなのですが, ports
	  のディレクトリは非常に膨大な容量を 使うように見えます.
	  残しておいた方がよいのでしょうか? 削除してしまっても
	  よいのでしょうか?</para>

	<para>A. はい. インストールが首尾よく終わり,
	  もうソースコードが必要でないと思うなら,
	  それらを残しておく理由はないでしょう. 一番よい方法は,
	  次の通りです.</para>

	<informalexample>
	  <screen>&prompt.root; <userinput>cd /usr/ports</userinput>
&prompt.root; <userinput>make clean</userinput></screen>
	</informalexample>

	<para>これは, すべての ports のサブディレクトリを調べ,  各
	  ports のスケルトン以外の削除をおこないます.</para>
      </listitem>

      <listitem>
	<para>Q. これを試してみたのですが, tarball や ports
	  で使われたファイルが  <filename>distfiles</filename>
	  ディレクトリに残っています.
	  これも削除してしまっても大丈夫ですか?</para>

	<para>A.  はい. それを使った作業が終わったのであれば,
	  削除してしまっても大丈夫です.</para>
      </listitem>

      <listitem>
	<para>Q.
	  私はとてもとてもたくさんのプログラムを楽しみたいのです.
	  一度にすべての ports
	  をインストールする方法はありませんか?</para>

	<para>A. 次のようにしてください.</para>

	<informalexample>
	  <screen>&prompt.root; <userinput>cd /usr/ports</userinput>
&prompt.root; <userinput>make install</userinput></screen>
	</informalexample>
      </listitem>

      <listitem>
	<para>Q. やってみました. 時間がとてもかかるだろうと思ったので,
	  そのまま実行を 続けさせて, 私は寝ました.
	  翌朝コンピュータを見てみると, 三つ半の ports しか
	  処理が終わっていませんでした.
	  なにか悪かったのでしょうか?</para>

	<para>A. これは ports の中には私たちの決められないこと
	  (例えば, あなたが A4 の 用紙に印刷したいのか, US
	  レターサイズの用紙に印刷したいのかなど) について
	  質問してくるものがあるからです.
	  それらの質問には手動で答える必要があります.</para>
      </listitem>

      <listitem>
	<para>Q.
	  私は一日中モニタの前に座って過ごしたりしたくないのですが.
	  何かよいアイデアはありませんか?</para>

	<para>A. では, あなたが寝に / 仕事に /
	  公園にいく前に以下を実行してください:-</para>

	<informalexample>
	  <screen>&prompt.root; <userinput>cd /usr/ports</userinput>
&prompt.root; <userinput>make -DBATCH install</userinput></screen>
	</informalexample>

	<para>これでユーザの入力を要求しないすべての ports
	  をインストールします.  そして, 戻ってきてから,
	  次のように実行してください.</para>

	<informalexample>
	  <screen>&prompt.root; <userinput>cd /usr/ports</userinput>
&prompt.root; <userinput>make -DIS_INTERACTIVE install</userinput></screen>
	</informalexample>

	<para>そして, 残りの作業を実行してください.</para>
      </listitem>

      <listitem>
	<para>Q. 私たちは ports コレクションにある
	  <literal>frobble</literal> を使っています.  ですが,
	  私たちの必要に応じて ports を変更したところがあるのです.
	  自分でパッケージを作って, それを私たちのサイトのまわりに
	  簡単に配布できるような方法がありますか?</para>

	<para>A. もちろんあります.
	  変更点をパッチにする方法は知っていますよね:-</para>

	<informalexample>
	  <screen>&prompt.root; <userinput>cd /usr/ports/somewhere/frobble</userinput>
&prompt.root; <userinput>make extract</userinput>
&prompt.root; <userinput>cd work/frobble-2.8</userinput>
[あなたのパッチを当ててください]
&prompt.root; <userinput>cd ../..</userinput>
&prompt.root; <userinput>make package</userinput></screen>
	</informalexample>
      </listitem>

      <listitem>
	<para>Q. この ports の技術は本当に賢いですね.
	  どのようにして動いているのか
	  私はどうしても知りたいと思います. その秘密は何ですか?</para>

	<para>A. 秘密は一切ありません.  <ulink
	    URL="file://localhost/usr/share/mk/">Makefiles
	    ディレクトリ</ulink> にある
	  <filename>bsd.ports.mk</filename> と
	  <filename>bsd.ports.subdir.mk</filename>
	  ファイルを見るだけです.</para>

	<note>
	  <para>複雑なシェルスクリプトを嫌う読者は,
	    このリンクを追いかけないほうが よいでしょう.</para>
	</note>
      </listitem>
    </itemizedlist>
  </sect1>
</chapter>

<!--
     Local Variables:
     mode: sgml
     sgml-declaration: "../chapter.decl"
     sgml-indent-data: t
     sgml-omittag: nil
     sgml-always-quote-attributes: t
     sgml-parent-document: ("../handbook.sgml" "part" "chapter")
     End:
-->
