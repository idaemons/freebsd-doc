.\" st                        -*- nroff -*-
.\" $FreeBSD: doc/ja_JP.eucJP/man/man7/groff.7,v 1.5 2001/05/14 01:09:42 horikawa Exp $
.ig
groff.7

This file is part of groff, the GNU roff type-setting system.

Copyright (C) 2000 Free Software Foundation, Inc.
written by Bernd Warken <bwarken@mayn.de>

Last update: 17 May 2000

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Sections being this .ig-section and AUTHOR, with no
Front-Cover Texts, and with no Back-Cover Texts.

A copy of the Free Documentation License is included as a file called
FDL in the main directory of the groff source package.

.\"WORD: diversion	ディバージョン[groff.7]
.\"WORD: divert		転換する(出力データを別の場所に貯め込むこと)[groff.7]
.\"WORD: line adjustment	行の位置揃え[groff.7]
.\"WORD: roff formatting system	roff 清書システム[groff.7]
.\"WORD: control line	制御行[groff.7]
.\"WORD: formatting element	整形要素[groff.7]
.\"WORD: in-line	行埋め込み式の[groff.7]
.\"WORD: scale indicator	単位指定子[groff.7]
.\"WORD: trap	トラップ[groff.7]
.\"WORD: no-break control character	非改行制御文字[groff.7]
.\"WORD: center	センタリングする(動詞)[groff.7]
.\"WORD: special	特別フォント[groff.7]
.\"WORD: leader		リーダ(目次などで項目とページ番号の間に引く線)[groff.7]
.\"WORD: intra-line skip	行間スキップ(行と行の間に入れる空き)[groff.7]
.\"WORD: fill		行詰め(する)[groff.7]
.\"WORD: built-in condition	組み込み条件式[groff.7]
.\"WORD: baseline	基準線(文字位置の基準となる水平線)[groff.7]

..
.
.\" --------------------------------------------------------------------
.\" Setup
.\" --------------------------------------------------------------------
.
.if n \{\
.  mso tmac.tty-char
.  ftr CR R
.  ftr CI I
.  ftr CB B
.\}
.
.if '\*[.T]'dvi' \{\
.  ftr CB CW
.\}
.
.\" a comment macro which does nothing
.de c
..
.
.\" a tab string
.ds t "\t
.
.eo
.
.c text lines in macro definitions or bracketed sections \{...\}
.de text
.  if 1 \&\$*\&
..
.
.de option
.  ds @tmp@ \f(CB\$1\fP
.  shift 1
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.als shellcommand option
.
.c --------- characters ---------
.
.de character
.  ds @tmp@ \f(CB\$1\fP
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de 'char
.  ds @tmp@ \(oq\f(CB\$1\fP\(cq
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de ''char
.  ds @tmp@ \(lq\f(CB\$1\fP\(rq
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.c --------- requests ---------
.
.c request synopsis
.de REQ
.  ds @tmp@ \&\$1
.  shift 1
.  IP "\f(CB\&\*[@tmp@] \fP\f(CI\&\$*\fP" 10n
.  rm @tmp@
..
.
.de request
.  ds @tmp@ \f(CB\$1\fP
.  shift 1
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.c --------- macro or function arguments ---------
.
.de argument
.  ds @tmp@ \f(CI\$1\fP
.  shift 1
.  while (\n[.$] >= 2) \{\
.    as @tmp@ \/\f(CR\$1\fP\f(CI\,\$2\fP
.    shift 2
.  \}
.  if \n[.$] .as @tmp@ \/\f(CR\$1\fP
.  text \*[@tmp@]
.  rm @tmp@
..
.
.c argument followed by a numerical expression
.de argterm
.  ds @tmp@ \f(CI\$1\fP\|\f(CR\$2\fP
.  shift 2
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.c --------- numerical elements ---------
.
.de number
.  ds @tmp@ \f(CR\$1\fP
.  shift 1
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de prefixednumber
.  ds @tmp@ \&\$1\ \f(CR\$2\fP
.  shift 2
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.als scaleindicator request
.
.de scalednumber
.  ds @tmp@ \f(CR\$1\fP\f(CB\$2\fP
.  shift 2
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de operator
.  ds @tmp@ \(oq\f(CB\$1\fP\(cq
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.c --------- escape sequences ---------
.
.de esc[arg]
.  ds @tmp@ \f(CB\(rs\$1[\fP\f(CI\$2\fP\f(CB]\fP
.  shift 2
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de esc(arg
.  ds @tmp@ \f(CB\(rs\$1(\fP\f(CI\$2\fP
.  shift 2
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de escarg
.  ds @tmp@ \f(CB\(rs\$1\fP\f(CI\$2\fP
.  shift 2
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de esc[]
.  ds @tmp@ \f(CB\(rs[\fP\f(CI\$1\fP\f(CB]\fP
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de esc(
.  ds @tmp@ \f(CB\(rs(\fP\f(CI\$1\fP
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de esc
.  ds @tmp@ \f(CB\(rs\$1\fP
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de (esc
.  ds @tmp@ \f(CB\(rs(\$1\fP
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de [esc]
.  ds @tmp@ \f(CB\(rs[\$1]\fP
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.c escape sequence synopsis
.de ESC
.  ds @tmp@ \&\$1
.  shift 1
.  IP "\f(CB\(rs\&\*[@tmp@]\fP\f(CI\&\$*\fP"
.  rm @tmp@
..
.
.c synopsis for escape sequences with a long name
.de ESC[]
.  ds @arg1@ \&\$1
.  ds @arg2@ \&\$2
.  shift 2
.  IP "\f(CB\(rs\&\*[@arg1@][\fP\f(CI\&\*[@arg2@]\fP\f(CB]\&\$*\fP"
.  rm @arg1@
.  rm @arg2@
..
.
.c synopsis escape sequence with quoted argument
.  de ESCq
.  ds @tmp@ \&\$1
.  shift 1
.  IP "\f(CB\(rs\&\*[@tmp@]\(cq\fP\f(CI\h'-0.2m'\$*\/\fP\f(CB\(cq\fP"
.  rm @tmp@
..
.
.c synopsis for 2-escapes (special characters)
.de ESc
.  ds @tmp@ \$1
.  TP 14n
.  text \f(CB\(rs(\&\*[@tmp@]\ \ \ \fP\fR\(\*[@tmp@]\fP
.  shift 1
.  text \$*.
.  rm @tmp@
..
.
.c --------- registers ---------
.
.c synopsis for registers
.de REG
.  TP 10n
.  text \&\f(CR\(rsn[\fP\f(CB\$1\fP\f(CR]\fP
.  shift 1
.if \n[.$] \&\$*
..
.
.als register request
.
.c --------- warnings ---------
.
.als warning request
.
.c description of warnings
.de Warning
.  ne (2v + 1)
.  TP 12n
.  text \f(CB\$1\fP
.  text \f(CI\$2\fP
.  br
..
.
.ec
.
.\" WORD: first measure  最初のステップ (音楽用語では第一小節)
.\" --------------------------------------------------------------------
.\" Title
.\" --------------------------------------------------------------------
.
.TH GROFF 7 "7 December 2000" "Groff Version 1.16.1"
.SH 名称
groff \- GNU roff 言語の簡易リファレンス
.
.\" --------------------------------------------------------------------
.SH 解説
.\" --------------------------------------------------------------------
.I groff
とは、
.I GNU roff
を表しており、roff 清書システムをフリーで実装したものです。
groff システムの概観ならびに背景については
.BR roff (7)
を参照してください。
.LP
このドキュメントでは、groff 内で使用される、あらかじめ定義された
roff 言語要素を簡潔に説明しているだけです。
古くからある機能と groff 拡張機能についての両方とも
扱っています。
.LP
歴史的に、
.I roff 言語
は
.IR troff
と呼ばれています。
.I groff
は、古くからあるシステムと互換性を持ちつつ、独自の拡張機能も
提供しています。そのため GNU 版では、
.IR roff ,
.IR troff ,
.I groff 言語
という術語は同義として使うこともできるでしょう。
しかし、
.I troff
は、どちらかと言えば古くからの機能に対して適用されるという
傾向があり、それに対して、
.I groff
は GNU 拡張に重きを置いています。そして、
.I roff
は、この言語の一般的な術語になっています。
.LP
このファイルは、
.I groff
.BR info (1)
ファイルにある完全なドキュメントの簡易版に過ぎません。
info ファイルの方がより詳細で実情に近く、正確な情報を含んでいます。
.LP
groff ドキュメントを書くために使う一般的な文法は比較的
やさしいのですが、
roff 言語の拡張機能を書くのは少々骨が折れるかもしれません。
.LP
roff 言語は、行指向の言語です。
行には、制御行とテキスト行の 2 種類しかありません。
制御行は制御文字で始まります。制御文字は、デフォルトではピリオド
.''char .
あるいはシングルクォート
.''char '
です。そのほかの文字で始まる行はすべてテキスト行です。
.LP
.B 制御行
は、コマンドを表し、オプションで引数を取ることもあります。
制御行は、次のような文法になります。
先頭の制御文字の後には、コマンド名を続けることができます。
引数は、もしあれば、コマンド名や他の引数と空白で分けられます。
例えば、次のようにします。
.RS
.LP
\&\.command_name arg1 arg2
.RE
.LP
インデント用に、先頭の制御文字とコマンド名との間にはスペースや
タブ文字をいくつ入れても良いですが、制御文字は行の先頭になくては
なりません。
.LP
.B テキスト行
は、表示される部分のことです。
テキスト行はエスケープシーケンスで変更することができます。
エスケープシーケンスは先頭にバックスラッシュ
.'char \(rs
を置くことで認識されます。
これらは、行や単語の一部に含まれ、整形要素となったり
関数となったりします。
シングルクォート
.''char '
で区切られた引数を取るものもあります。
また、開き括弧
.'char (
で始めたり、角括弧
.'char [
と
.'char ] 
で括ったりする符号化で長さが決まるシーケンスもあります。
.LP
roff 言語は、マクロなど、言語拡張機能を書くための柔軟な手段を
提供しています。
マクロ定義を解釈する際に、roff システムは
.BR "コピーモード"
と呼ばれる特別なモードに入ります。
.LP
コピーモードの振る舞いはとても扱いにくいものでもありますが、
確実に安全に使えるようにするルールがいくつかあります。
.IP 1.
表示可能なバックスラッシュは
.esc e
と記述しなくてはなりません。
もっと正確に言えば、
.esc e
は現在のエスケープ文字を表します。
バックスラッシュのグリフを得るには
.esc (rs
を使用してください。
.IP 2.
バックスラッシュはすべて 2 重にしてください。
.IP 3.
テキスト行はすべて、スペースをとらない特殊文字
.esc &
で始めてください。
.LP
このやり方は、一番効率の良いコードが生成できる
というわけではありませんが、最初の一歩としては使えるはずです。
さらに良いやり方については groff info ファイルおよび
.BR groff_tmac (5)
を参照してください。
.LP
roff ソースファイルを読むのはこれよりは簡単です。
すべてのマクロ定義部分で 2 重になっているバックスラッシュを
1 つに置き換えればよいだけです。
.
.\" --------------------------------------------------------------------
.SH "groff 要素"
.\"--------------------------------------------------------------------
roff 言語の要素は、テキストファイルに整形用情報を
付加するものです。基本的な要素は、あらかじめ定義されたコマンド
および変数であり、
この要素のおかげで roff は本格的なプログラミング言語に
なっているのです。
.LP
roff コマンドには 2 種類あります。コマンドは
引数を取ることもあります。
.B リクエスト
は、ドット
.'char .
あるいは
.''char ' 
で始まる行に書かれるものです。これに対して
.B エスケープシーケンス
は、
バックスラッシュ
.'char \(rs
で始まる、行埋め込み式の関数や単語中の整形要素です。
.LP
ユーザは独自の整形コマンドを
.request .de
リクエストを使って定義することができます。これらのコマンドは
.BR マクロ
と呼ばれていますが、実際にはリクエストとまったく同様に使われます。
マクロパッケージは groff 言語で書かれた定義済みのマクロセットです。
ユーザが独自にエスケープシーケンスを作成できる場合というのは
非常に限られており、特殊文字のみマップすることができます。
.LP
groff 言語は、インタフェースによってさまざまな種類の変数を
提供しています。定義済みの変数もありますが、
ユーザも同様に自分で変数を定義できます。
.LP
.B 文字列
変数は文字列を格納します。
この変数は
.request .ds
リクエストで設定され、値は
.esc *
エスケープシーケンスを使って取り出します。
.LP
.B レジスタ
変数は数値、スケールファクタつき数字、場合によっては文字列に似た
オブジェクトを格納できます。
.request .nr
リクエストで設定され、値は
.esc n
エスケープシーケンスを使って取り出します。
.LP
.B 環境
変数は、行の長さやフォントサイズなどのような
グローバルな整形パラメータをユーザが後で再利用するために
一時的に格納できるようにする変数です。
.request .ev
リクエストによってできます。
.LP
.B フォント
は、名前もしくは内部番号のどちらかで判別されます。
現在のフォントは
.request .ft
リクエストもしくは
.esc f
エスケープシーケンスで選択されます。
デバイスごとに特殊なフォントがありますが、次のフォントはすべての
デバイスで利用可能です。
.B R
は標準フォント、ローマン体です。
.B B
はその
.B ボールド体
です。
.I イタリック体
フォントは
.B I
と呼ばれておりどこででも利用可能ですが、テキストデバイスでは
ローマン体フォントに下線がついたものとして表示されます。
グラフィカルの出力デバイスに対しては、次のフォントの固定幅の
修飾文字が存在します。
.BR CR ,
.BR CI ,
および
.BR CB
です。
テキストデバイスでは、いずれにしても文字はすべて固定幅です。
.LP
さらに、roff の拡張要素がいくつかあります。
.B ディバージョン
は後で利用できるように情報をマクロに格納します。
.B トラップ
はページの先頭から何行目とか、ディバージョンや入力において
何行目というような位置条件です。
アクションの中には、条件が揃ったときに自動的に起動するように
指示できるものがあります。
.LP
これより詳細な情報については、groff info ファイルに示されています。
.
.\" --------------------------------------------------------------------
.SH "制御文字"
.\" --------------------------------------------------------------------
ある条件下で特別な制御タスクをもつ文字が
いくつかあります。
.TP
.character .
ドットは、行の先頭あるいは
.request .if ,
.request .ie ,
.request .el ,
および
.request .while
リクエスト中の条件の後にある場合のみ特別です。
その位置では、リクエスト (あるいはマクロ) を導入する制御文字になります。
.esc .
エスケープを使うと、この特別な動作を遅らせることができます。
.request .cc
リクエストを使うことで、この制御文字を別の文字に設定して、
ドット
.'char .
を特殊文字でなくすることができます。
.IP ""
他の位置にドットがあるときは、ただのドット文字以上の意味はありません。
テキスト段落の中では、文はそれぞれ新しい行で始めるほうが有利です。
.TP
.character '
シングルクォートには 2 つの制御機能があります。行の先頭および
条件リクエスト内では、シングルクォートは非ブレーク制御文字に
なります。これは、ドットのようにリクエストを導入しますが、
リクエストが行を折り返さないような追加のプロパティをつけるものです。
.request .c2
リクエストを用いると、非ブレーク制御文字を別の文字に設定する
ことができます。
.IP ""
2 つめのタスクとして、シングルクォートは、
いくつかの関数エスケープシーケンスの中で
引数の区切り文字としてよく使用されます (引数に含まれない文字のペアなら
どれでも良いのですが)。
その他の場所にあれば、シングルクォート文字あるいはアポストロフィ文字
になります。
groff は、表示用の表記として
エスケープシーケンス
.esc (cq
を提供しています。
.TP
.character \(dq
ダブルクォートはリクエストおよびマクロ中の引数を括るときに使用されます。
エスケープされたダブルクォート
.esc \(dq
はコメントの開始になります。
それ以外は、ダブルクォートには特別な機能はありません。
groff は、表示用の表記として
エスケープシーケンス
.esc (dq
を提供しています。
.TP
.character \(rs
バックスラッシュは、通常エスケープシーケンスの開始を意味しています
(この文字は、
.request ec
リクエストによって変更できます)。
表示用のエスケープ文字は、エスケープシーケンス
.esc e
で、バックスラッシュのグリフは
.esc (rs
で得られます。
.TP
.character (
開き括弧は、エスケープシーケンス内で、ちょうど 2 文字でできた
エスケープ名あるいは引数を導入したときのみ特別な意味を持ちます。
groff では、この動作は \f(CB[]\fP の組で置き換えることができます。
.TP
.character [
開き角括弧は、groff のエスケープシーケンス内でのみ特別な意味を持ちます。
これは、長いエスケープシーケンス名やエスケープシーケンスの引数を
導入するときに使用します。
それ以外の場合は、例えばマクロ呼び出しなどでも特別な意味はありません。
.TP
.character ]
閉じ角括弧は、groff のエスケープシーケンス内でのみ特別な意味を持ちます。
これは、長いエスケープシーケンス名やエスケープシーケンスの引数を
終わらせます。
それ以外の場合は、特別な意味はありません。
.TP
\f(CIspace\fP
空白文字は、機能的な働きしか持たない文字です。これは、
リクエストやマクロの引数の区切り文字、
およびテキスト行における単語の区切り文字です。
また、空白文字は groff の単語間の水平方向の空白計算に作用します。
定義された空白幅を得たい場合は、
.'char "\(rs\ "
(エスケープ文字とそれに続いた空白文字)、
.esc | ,
.esc ^ ,
あるいは
.esc h
のようなエスケープシーケンスを使う必要があります。
.IP \f(CInewline\fP
テキストの段落においては、改行は空白文字とほぼ同じような作用をします。
連結された行は、エスケープした改行で指定できます。
つまり、行の最後の文字に
.'char \(rs
を指定するのです。
.IP \f(CItab\fP
テキスト中にタブ文字があれば、インタプリタは次の定義済みのタブ位置へ
水平方向にインデントを作ります。
タブ位置の調整には洗練されたインタフェースが存在します。
.
.\" --------------------------------------------------------------------
.SH "数式"
.\" --------------------------------------------------------------------
.B 数値
は、符号つき整数、符号なし整数、浮動小数点実数のいずれか、およびそれに
単位指定子を付加したものです。
.B 単位指定子
は、計測単位を表す 1 文字の略語です。
単位指定子が後についた数字は、サイズに関する値を意味しています。
デフォルトでは、数値は単位指定を持ちません。つまり、
単なる数字にすぎません。
.LP
roff 言語では、次の単位指定子を定義しています。
.LP
.na
.nh
.TS
center, tab(@);
LfCB Lw(4i).
c@センチメートル
i@インチ
P@パイカ\ \(eq\ 1/6\ インチ
p@ポイント\ \(eq\ 1/72\ インチ
m@T{
em\ \(eq\ \fRポイント値でのフォントサイズ (文字 `\f(CRm\fR' の幅)
T}
M@\f(CRem\fR の 100 倍
n@en\ \(eq\ em/2
u@\fR実際の出力デバイスでの基本単位
v@\fR基本単位での行送り幅
z@T{
スケールされたポイント数\ \(eq\ 1 ポイントの 1/\f(CIsizescale\fR 倍
(フォントの \fIDESC\fP ファイルで定義)
T}
.TE
.LP
.ad
.hy
.B 数式
は、先で定義された数値と算術演算子
.operator + ,
.operator \- ,
.operator * ,
.operator / ,
.operator %
.RI ( 剰余 ),
比較演算子
.operator ==
(
.operator = 
と同じ),
.operator <= ,
.operator >= ,
.operator < ,
.operator > ,
論理演算子
.operator &
.RI ( 論理積 ),
.operator :
.RI ( 論理和 ),
.operator !
.RI ( 否定 ),
および括弧
.operator (
と
.operator ) 
との組み合わせです。
.LP
さらに、
.I groff
は、数式に対して次の演算子を追加しました。
.LP
.na
.nh
.TS
center, tab(@);
LfCB Lw(4i).
e1\f(CB>?\fPe2@\f(CIe1\fP と \f(CIe2\fP の最大値
e1\f(CB<?\fPe2@\f(CIe1\fP と \f(CIe2\fP の最小値
\f(CB(\fPc\f(CB;\fPe\f(CB)@T{
\f(CIc\fP をデフォルトの単位指定子として \f(CIe\fP を評価
T}
.TE
.LP
.ad
.hy
詳細は groff info ファイルを参照してください。
.
.\" --------------------------------------------------------------------
.SH 条件式
.\" --------------------------------------------------------------------
.B 条件式
は、リクエスト
.request .if ,
.request .ie ,
および
.request .while
での判定文で出てきます。
次の表にいろいろな種類の条件式を示します。
.LP
.na
.nh
.TS
center, tab(@);
LfCB Lw(4i).
\f(CIN\fP@T{
数式 \f(CIN\fP は値が 0 より大きければ真を返します。
T}
!\f(CIN\fP@T{
\f(CIN\fP の値が 0 以下であれば真です。
T}
\&'\f(CIs1\fP'\f(CIs2\fP'@T{
文字列 \f(CIs1\fP が文字列 \f(CIs2\fP と同一であれば真です。
T}
!'\f(CIs1\fP'\f(CIs2\fP'@T{
文字列 \f(CIs1\fP が文字列 \f(CIs2\fP と同一でなければ真です。
T}
c\f(CIch@T{
文字 \f(CIch\fP が利用可能であれば真です。
T}
d\f(CIname@T{
\f(CIname\fP という文字列、マクロ、ディバージョン、リクエストが存在すれば
真です。
T}
e@現在のページ番号が偶数なら真です。
o@現在のページ番号が奇数なら真です。
n@フォーマッタが \fBnroff\fP なら真です。
r\f(CIreg@T{
\f(CIreg\fP というレジスタがあれば真です。
T}
t@フォーマッタが \fBtroff\fR なら真です。
.TE
.LP
.ad
.hy
.
.\" --------------------------------------------------------------------
.SH リクエスト
.\" --------------------------------------------------------------------
このセクションでは、定義済みのリクエストについて短いリファレンスを
与えます。
groff では、リクエストとマクロの名前を任意の長さにすること
できます。長い名前に対して括弧で括ったりマークをつける必要は
ありません。
.LP
たいていのリクエストは 1 つないし複数の引数をとります。
引数は空白文字で区切られます (タブではありません!)
引数の長さや数について固有の制限はありません。
引数はダブルクォートで括ることができます。引数に空白文字が
含まれる場合にとても便利です。例えば、
.argument "\(dqarg\ with\ space\(dq"
は 1 つの引数を表しています。
.LP
リクエストの中には、引数を与えると、引数なしの場合と異なった動きを
するものがあります。
その詳細すべてについてはここでは説明しません。
詳細は groff info ファイルを参照してください。
.LP
後に述べるリクエストの説明では、引数の名前の多くは
その意味を表すように選ばれています。
次にあげる表記についてだけは、意味を明らかにする必要があるでしょう。
.LP
.na
.nh
.TS
center, tab(@);
LfCI Lw(4i).
c@1 文字を表します。
font@T{
フォント名あるいはフォント番号で指定されたフォント
T}
anything@T{
行末までのすべての文字、あるいは
\f(CB\(rs{\fP と \f(CB\(rs}\fP に囲われた文字
T}
n@T{
評価されると整数値を返す数式
T}
N@T{
符号つきまたは符号なしの任意の数式
T}
\(+-N@T{
符号によって 3 つの意味があります。次に説明をします。
T}
.TE
.LP
.ad
.hy
.argument \(+-N
で定義された式が
.operator +
符号で始まる場合、この式の結果の値は、関連するリクエストが
すでに持っている固有値に加算されます。
例えば、数値レジスタに加算されます。
式が
.operator -
で始まる場合、この式の結果の値は、リクエストの値から
減算されます。
.LP
符号がない場合は、既存の値を
.argument N
で直接置き換えます。
負の値を指定する場合は、
.number 0
を前に置くかあるいは負の値を括弧で括れば良いです。
.
.\" --------------------------------------------------------------------
.SS "リクエストの簡易リファレンス"
.\" --------------------------------------------------------------------
.PD 0
.
.REQ .
空行 (無視されます)。ドキュメントの整形に便利です。
.
.REQ .\(rs" anything
行全体がコメントとなります。
.
.REQ .ab string
.argument string
を標準エラー出力に出力し、プログラムを終了します。
.
.REQ .ad
現在の位置揃えモードで出力行の位置揃えを開始します。
.
.REQ .ad c
位置揃えモード
.argument c
で行の位置揃えを開始します
(\f(CIc\fP\f(CR\|\^\(eq\|l,r,b,n\fP)。
.
.REQ .af register c
フォーマット
.argument c
をレジスタ
.argument register
に割り当てます
(\f(CIc\fP\f(CR\|\^\(eq\|l,i,I,a,A\fP)。
.
.REQ .aln alias register
レジスタ
.argument register
の別名
.argument alias
を作成します。
.
.REQ .als alias object
リクエスト、文字列、マクロ、ディバージョン
.argument object
の別名
.argument alias
を作成します。
.
.REQ .am macro
.request ..
が呼ばれるまでのものをマクロ
.argument macro
に追加します。
.
.REQ .am macro end
.request .end
が呼ばれるまでのものをマクロ
.argument macro
に追加します。
.
.REQ .as stringvar anything
文字列
.argument anything
を文字列変数
.argument stringvar
に追加します。
.
.REQ .asciify diversion
ディバージョン
.argument diversion
に含まれる特殊 ASCII 文字をアンフォーマットします。
.
.REQ .backtrace
入力のバックトレースを標準エラー出力に出力します。
.
.REQ .bd font N
フォント
.argument font
を
.argterm N -1
単位分強調します。
.
.REQ .bd S font N
現在のフォントが
.argument font
のときに特別なフォント
.argument S
で強調します。
.
.REQ .bp
現在のページを終了して新しいページを開始します。
.
.REQ .bp \(+-N
現在のページを終了します。次のページ番号を
.argument \(+-N
にします。
.
.REQ .blm macro
空白行を意味するマクロを
.argument macro
に設定します。
.
.REQ .br
改行です。
.
.REQ .break
while ループを終了します。
.
.REQ .c2
非改行制御文字を
.''char '
に戻します。
.
.REQ .c2 c
非改行制御文字を
.argument c
に設定します。
.
.REQ .cc
制御文字を
.'char .
に戻します。
.
.REQ .cc c
制御文字を
.argument c
に設定します。
.
.REQ .ce
次の入力行をセンタリングします。
.
.REQ .ce N
次に来る
.argument N
行の入力行をセンタリングします。
.
.REQ .cf filename
ファイル
.argument filename
の内容をそのまま標準出力またはディバージョンへコピーします。
.
.REQ .cflags mode c1 c2 ...
.argument mode
番号に従って、文字
.argument c1 ,
.argument c2 ,
.argument ...
を扱います。
.
.REQ .ch trap N
.argument trap
の場所を
.argument N
に変更します。
.
.REQ .char c anything
文字
.argument c
を
文字列
.argument anything
と定義します。
.
.REQ .chop object
マクロ、文字列、ディバージョン
.argument object
の最後の 1 文字をとり除きます。
.
.REQ .close stream
ストリーム
.argument stream
をクローズします。
.
.REQ .continue
while ループにおける現在の繰り返し処理を終了します。
.
.REQ .cp
互換モードを有効にします。
.
.REQ .cp N
.I N
が 0 なら互換モードを無効にします。それ以外なら有効にします。
.
.REQ .cs font N M
フォント
.argument font
の固定ピッチ文字幅を
.argterm N /36
em に設定します (em は値
.argument M )。
.
.REQ .cu N
nroff の場合の連続アンダーライン。
troff のリクエスト
.request .ul
に相当します。
.
.REQ .da macro
マクロ
.argument macro
を転換・追加します。
.
.REQ .de macro
リクエスト
.request ..
が呼ばれるまでマクロ
.argument macro
を定義 (再定義) します。
.
.REQ .de macro end
リクエスト
.request .end
が呼ばれるまでマクロ
.argument macro
を定義 (再定義) します。
.
.REQ .di
現在のディバージョンを終了します。
.
.REQ .di macro
マクロ
.argument macro
に転換します。
.\" kageyama: divert = 「変換」？
.\" kumagai: とりあえず「転換」で統一します。
.
.REQ .do name
リクエスト
.request .name
を互換モードを有効にして解釈します。
.
.REQ .ds stringvar anything
文字列変数
.argument stringvar
に文字列
.argument anything
を設定します。
.
.REQ .dt N trap
ディバージョンのトラップ位置を
.argument N
に設定します
(デフォルトの単位指定子は
.scaleindicator v です)。
.
.REQ .ec
エスケープ文字を
.'char \(rs
に戻します。
.
.REQ .ec c
エスケープ文字を
.argument c
に設定します。
.
.REQ .el anything
if-else リクエスト (\c
.argument .ie )
の else ブロックです。
.
.REQ .em macro
入力が終わった後にマクロ
.argument macro
を実行します。
.
.REQ .eo
エスケープ文字の処理を抑制します。
.
.REQ .ev
直前の環境に変更します。
.
.REQ .ev env
環境
.argument env
(番号または名前で指定) をプッシュして切り替えます。
.
.REQ .evc env
環境
.argument env
の内容を現在の環境にコピーします。
環境のプッシュまたはポップは行いません。
.
.REQ .ex
roff の処理を終了します。
.
.REQ .fam name
現在のフォントファミリを
.argument name
に設定します。
.
.REQ .fc
フィールド機構を無効にします。
.
.REQ .fc a
フィールド区切りを
.argument a
に設定し、パディング文字を空白にします。
.
.REQ .fc a b
フィールド区切りを
.argument a
に、パディング文字を
.argument b
に設定します。
.
.REQ .fi
出力行を埋めます。
.
.REQ .fl
出力バッファをフラッシュします。
.
.REQ .fp n font
位置
.argument n
にフォント
.argument font
をマウントします。
.
.REQ .fp n internal external
長い名前
.argument external
のフォントを短い名前
.argument internal
のフォントとし、位置
.argument n
にマウントします。
.
.REQ .fspecial font s1 s2...
現在のフォントが
.argument font
の場合に、
.argument s1 ,
.argument s2 ,
.argument ...
を特別フォントにします。
.\" 「特別」 => 「特別フォント」
.
.REQ .ft
直前のフォントに戻します。
リクエスト
.request \(rsfP
と同じです。
.
.REQ .ft font
フォント名または番号
.argument font
に変更します。
エスケープシーケンス
.esc[arg] f font
と同じです。
.
.REQ .ftr font1 font2
フォント
.argument font1
をフォント
.argument font2
に変換します。
.
.REQ .hc
追加ハイフネーション指定文字を削除します。
.
.REQ .hc c
追加ハイフネーション指定文字として\ \c
.argument c
を設定します。
.
.REQ .hcode c1 code1 c2 code2 ...
文字
.argument c1
のハイフネーションコードを
.argument code1
に、文字
.argument c2
のコードを
.argument code2
のように設定します。
.
.REQ .hla lang
現在のハイフネーション言語を
.argument lang
に設定します。
.
.REQ .hlm n
ハイフンされた行の最大連続数を
.argument n
に設定します。
.
.REQ .hpf file
ハイフネーションのパターンをファイル
.argument file
から読み込みます。
.
.REQ .hw words
例外的なハイフネーションをする単語のリストを
.argument words
で指定します。
.
.REQ .hy N
ハイフネーションモードを
.argument N
に変更します。
.
.REQ .hym n
ハイフネーションのマージンを
.argument n
に設定します
(デフォルトの単位指定子は\ \c
.scaleindicator m 
です)。
.
.REQ .hys n
ハイフネーションのスペースを
.argument n
に設定します。
.
.REQ .ie cond anything
条件式
.argument cond
が真ならば
.argument anything
を処理します。偽の場合はリクエスト
.request .el
へ移動します。
.
.REQ .if cond anything
条件式
.argument cond
が真ならば
.argument anything
を処理します。偽の場合は何もしません。
.
.REQ .ig
リクエスト
.request ..
が呼ばれるまでテキストを無視します。
.
.REQ .ig end
リクエスト
.request .end
が呼ばれるまでテキストを無視します。
.
.REQ .in
インデント量を直前の値に戻します。
.
.REQ .in \(+-N
引き数
.argument \(+-N
に従ってインデント量を変更します
(デフォルトの単位指定子は\ \c
.scaleindicator m です)。
.
.REQ .it N trap
入力行のカウントトラップを位置
.argument N
に設定します。
.
.REQ .kern
pairwise kerning を有効にします。
.
.REQ .kern n
.argument n
が 0 ならば pairwise kerning を無効にします。0 でなければ
有効にします。
.
.REQ .lc
リーダ繰り返し文字の定義を削除します。
.
.REQ .lc c
リーダ繰り返し文字を\ \c
.argument c
に設定します。
.
.REQ .length register anything
文字列
.argument anything
の文字列長をレジスタ
.argument register
に書き込みます。
.
.REQ .lf N file
入力する行数を
.argument N
に、ファイル名を
.argument file
に設定します。
.
.REQ .lg N
引数
.argument N
が 0 より大きければリガチャ (合字) モードにします。
.
.REQ .ll
行幅を直前の値に戻します。
.
.REQ .ll \(+-N
行幅を引数
.argument \(+-N
に従って設定します
(デフォルトの設定は
.scalednumber 6.5 i
で、単位指定子は
.scaleindicator m 
です)。
.
.REQ .ls
追加の行間スキップ量を直前の値に戻します。
.
.REQ .ls N
追加の行間スキップ量を
.argument N
に設定します。
つまり、テキストの出力行それぞれの後に
.argument N -1
行の空白行を挿入します。
.
.REQ .lt \(+-N
タイトルの長さです (デフォルトの単位指定子は\ \c
.scaleindicator m
です)。
.
.REQ .mc
マージンの文字を無効にします。
.
.REQ .mc c
それぞれのテキスト行の後と右側マージンの間に文字
.argument c
を出力します。
.
.REQ .mc c N
マージン文字を
.argument c
に、右側マージンからの距離を
.argument N
に設定します (デフォルトの単位指定子は\ \c
.scaleindicator m
です)。
.
.REQ .mk register
現在の垂直位置を
.argument register
にマークします。
.
.REQ .mso file
リクエスト .so と同じですが、tmac ディレクトリにある
.I file
も検索されます。
.
.REQ .na
出力行の位置揃えを行いません。
.
.REQ .ne
1 行分の行送りが必要です。
.
.REQ .ne N
.argument N
行分の行送りが必要です (デフォルトの単位指定子は\ \c
.scaleindicator v
です)。
.
.REQ .nf
出力行に行詰めや位置揃えを行いません。
.
.REQ .nh
ハイフネーションをしません。
.
.REQ .nm
行番号モードを無効にします。
.
.REQ .nm \(+-N M S I
行番号モードの、行番号、行番号出力間隔、空白、インデントを
設定します。
.
.REQ .nn
次の行に行番号をつけません。
.
.REQ .nn N
次の
.argument N
行に行番号をつけません。
.
.REQ .nr register \(+-N M
レジスタの値を、インクリメント値
.argument M
で
.argument \(+-N
に設定・変更します。
.
.REQ .nroff
組み込み条件式
.B n
を真に、
.B t
を偽にします。
.
.REQ .ns
空白なしモードにします。
.
.REQ .nx filename
次のファイルを表します。
.
.REQ .open stream filename
ファイル
.register filename
を書き込みモードでオープンし、名前
.register stream
を持つストリームに関連づけます。
.
.REQ .opena stream filename
リクエスト
.request .open
と同じですが、追加モードでファイルをオープンします。
.
.REQ .os
リクエスト
.request .sv
で指定された行送り量を出力します。
.
.REQ .pc
ページ番号文字を
.'char %
に戻します。
.
.REQ .pc c
ページ番号文字を設定します。
.
.REQ .pi program
プログラム
.argument program
に出力をパイプします (nroff のみ)。
.
.REQ .pl
ページ長をデフォルトの
.scalednumber 11 i
に設定します。
現在のページ長はレジスタ
.register .p
に格納されています。
.
.REQ .pl \(+-N
ページ長を
.argument \(+-N
に変更します (デフォルトの単位指定子は\ \c
.scaleindicator v
です)。
.
.REQ .pm
マクロ名とサイズを出力します (サイズは 1 ブロック 128 バイトの
ブロック数です)。
.
.REQ ".pm t"
マクロ全体のサイズだけを出力します (サイズは 1 ブロック 128 バイトの
ブロック数です)。
.
.REQ .pn \(+-N
次のページ番号を
.argument N
に設定します。
.
.REQ .pnr
現在定義されている数値レジスタの名前と内容を標準エラー出力に
出力します。
.
.REQ .po
ページオフセットを直前の値に戻します。現在のページオフセットはレジスタ
.register .o
に格納されています。
.
.REQ .po \(+-N
ページオフセットを
.argument N
に設定します。
.
.REQ .ps
ポイントサイズを直前の値に戻します。
.
.REQ .ps \(+-N
ポイントサイズを指定します。エスケープシーケンス
.esc[arg] s \(+-N
と同じです。
.
.REQ .psbb filename
PostScript 画像
.argument filename
のための矩形領域を取得します。
.
.REQ .pso command
リクエスト
.request .so
と同様ですが、
.argument command
の標準出力から入力します。
.
.REQ .ptr
すべてのトラップの名前と位置を標準エラー出力に出力します
(入力行のトラップとディバージョンのトラップは含まれません)。
.
.REQ .rchar c1 c2...
文字定義
.argument c1 ,
.argument c2 ,
.argument ...
を削除します。
.
.REQ .rd prompt
挿入を読み込みます。
.
.REQ .rj n
次の
.argument n
行の入力行を右寄せします。
.
.REQ .rm name
.argument name
で指定されたリクエスト、マクロ、文字列を削除します。
.
.REQ .rn old new
.argument old
で指定されたリクエスト、マクロ、文字列の名前を
.argument new
に変更します。
.
.REQ .rnn reg1 reg2
レジスタ名
.argument reg1
を
.argument reg2
に変更します。
.
.REQ .rr register
レジスタ
.argument register
を削除します。
.
.REQ .rs
空白をもとに戻します。つまり空白なしモードを無効にします。
.
.REQ .rt \(+-N
マークしておいた垂直位置まで戻します (上方向のみ)。
(デフォルトの単位指定子は\ \c
.scaleindicator v
です)。
.
.REQ .shc
ソフトハイフン文字を
.esc (hy
に戻します。
.
.REQ .shc c
ソフトハイフン文字を
.argument c
に設定します。
.
.REQ .shift n
マクロにおいて、引き数を位置
.argument n
にシフトします。
.
.REQ .so filename
ソースファイルをインクルードします。
.
.REQ .sp
1 行スキップします。
.
.REQ .sp N
.argument N
の行送りを挿入します。
.argument N
の符号によって上下方向が決まります
(デフォルトの単位指定子は
.scaleindicator v
です)。
.
.REQ .special s1 s2 ...
フォント
.argument s1 ,
.argument s2 ,
などを特別とします。現在のフォントにない文字をこれらから検索します。
.
.REQ .ss N
空白文字のサイズを
.argument N /12
に設定します。単位は現在のフォントの空白幅です。
.
.REQ .ss N M
空白文字のサイズを
.argument N /12
に、文の空白サイズを
.argument M /12
に設定します。単位は現在のフォントの空白幅 (\f(CR\(eq1/3 em\fP)
です。
.
.REQ .sty n style
位置
.argument n
のフォントをスタイル
.argument style
に関連づけます。
.
.REQ .substring register n1 n2
レジスタ
.argument register
の文字列の中の部分文字列
.argument n1
を
.argument n2
に置き換えます。
.
.REQ .sv
行送り量を
.scalednumber 1 v
に設定します。
.
.REQ .sv N
リクエスト
.request os
で出力される空白行の送り量を
.argument N
に設定します。
.
.REQ .sy command-line
プログラム
.argument command-line
を実行します。
.
.REQ ".ta T" N
タブ位置を
.argument N
の倍数に設定します
(デフォルトの単位指定子は\ \c
.scaleindicator m
です)。
.
.REQ .ta n1 n2 ... nn \f(CBT\fP r1 r2 ... rn
位置
.argument n1 ,
.argument n2 ,
\&... ,
.argument nn
のタブ位置をそれぞれ
.argument nn + r1 ,
.argument nn + r2 ,
\&...
.argument nn + rn
に、さらにそれ以降を
.argument nn + rn + r1 ,
.argument nn + rn + r2 ,
\&...
.argument nn + rn + rn
のように設定します。
.
.\".REQ .tar
.\"Restore internally saved tab positions.
.\".
.\".REQ .tas
.\"Save tab positions internally.
.
.REQ .tc
タブ繰り返し文字を削除します。
.
.REQ .tc c
タブ繰り返し文字を\ \c
.argument c
に設定します。
.
.REQ .ti \(+-N
次の行を一時的にインデントします
(デフォルトの単位指定子は\ \c
.scaleindicator m
です)。
.
.REQ .tkf font s1 n1 s2 n2
フォント
.argument font
のトラックカーニングを有効にします。
.
.REQ .tl \f(CB'\fPleft\f(CB'\fPcenter\f(CB'\fPright\f(CB'\fP
3 つの部位をもつタイトルです。
.
.REQ .trf filename
ファイル
.argument filename
の内容をそのまま出力します。
.
.REQ .tm anything
.argument anything
を端末 (UNIX の標準的なメッセージ出力先) に出力します。
.\" 「ターミナル」 => 「端末」
.
.REQ .tr abcd....
出力で
.argument a
を
.argument b
に、
.argument c
を
.argument d
のように変換します。
.
.REQ .trnt abcd....
リクエスト
.request .tr
と同じですが、
.esc !
によってディバージョンへと出力されるテキストは変換されません。
.
.REQ .troff
組み込み条件式
.B t
を真に、
.B n
を偽に設定します。
.
.REQ .uf font
アンダーラインフォントセットを
.argument font
に設定します
(リクエスト
.request .ul
で切り替わります)。
.
.REQ .ul N
入力行を
.argument N
行、アンダーライン付きにします (troff では イタリック体になります)。
.
.REQ .vpt n
.argument n
が 0 でなければ垂直位置のトラップを有効にします。
0 ならば無効にします。
.
.REQ .vs
行送り幅を直前の値に戻します。
.
.REQ .vs N
行送りの基準線間隔を
.argument N
に設定します。
デフォルト値は
.scalednumber 12 p
です。
.
.REQ .warn n
警告コードを
.argument n
に設定します。
.
.REQ .wh N trap
位置によるトラップを設定します。負の値の場合はページ末尾からになります。
.
.REQ .while cond anything
条件式
.argument cond
が真ならば
.argument anything
を入力として受理します。
.
.REQ .write stream anything
ストリーム
.argument stream
へ
.argument anything
を書き込みます。
.
.PD
.LP
これらの基本的な groff リクエストの他にも、
マクロの呼び出しがあります。
これらはマクロパッケージ (概要は
.BR roff (7)
を参照) やプリプロセッサに由来するものです。
.LP
プリプロセッサマクロを認識するのは容易です。
これらは独特のマクロの対で括られています。
.LP
.TS
box, center, tab (@);
c | c | c
CfCB | CfCB | CfCB.
プリプロセッサ@開始マクロ@終了マクロ
=
eqn@.PS@.PE
grap@.G1@.G2
grn@.GS@.GE
pic@.PS@.PE
refer@.R1@.R2
soelim@\fIなし@\fIなし
tbl@.TS@.TE
.TE
.LP
.
.\" --------------------------------------------------------------------
.SH "エスケープシーケンス"
.\" --------------------------------------------------------------------
.
エスケープシーケンスは、行中の要素であり、通常は
バックスラッシュ
.'char \(rs
とそれに続けてエスケープ名をつける形で導入されます。場合によっては
必要な引数をつけることもあります。
入力処理は、エスケープ文字あるいはその引数の直後から再開されます。
引数には区切り文字がはさまっているわけではありません。
そのため、エスケープ名や引数の終わりを決定する方法が必要です。
.LP
これは、名前 (エスケープ名、および変数名からなる引数) を
角括弧
.esc[] name
で囲い、定数引数 (数式および文字) を
アポストロフィ (ASCII 0x27) で
.IR \(cqconstant\(cq
のように囲うことによって実現します。
.LP
エスケープ名には短い名前の省略形があります。
2 文字のエスケープ名は開き括弧で
.esc( xy
のように指定され、閉じ括弧は必要ありません。
そして、特殊文字である
.'char [
と
.'char (
以外の 1 文字の名前はすべて
.esc \fP\f(CIc
のようにマーカなしで指定することができます。
.LP
長さ
.number 1
の定数の引数もアポストロフィのマーカを省略できますが、
2 文字の名前のときには省略できません。
.LP
1 文字のエスケープシーケンスは主に行中での
関数とシステムに関連したタスク用に使われるのに対して、
.esc( ""
が続いた 2 文字の名前は roff システムで定義済みの特殊文字用に
使われます。
2 文字より多い文字を持った名前
.esc[] name
は、ほとんどユーザ定義の文字を表しています (
リクエスト
.request .char
を参照してください)。
.
.\" --------------------------------------------------------------------
.SS "1 文字のエスケープシーケンス"
.\" --------------------------------------------------------------------
.
.PD 0
.
.\" --------- comments ---------
.
.ESC \(dq
コメントの開始です。
行末までのものすべてが無視されます。
.
.ESC #
次の改行文字までのものすべてが無視されます。
これは、コピーモードで解釈されます。
.esc \(dq
と似ていますが、終端となる改行を無視する点が異なります。
.
.\" --------- strings ---------
.
.ESC * s
1 文字の名前
.argument s 
を持った文字列変数に格納される文字列です。
.
.ESC *( st
2 文字の名前
.argument st
を持った文字列変数に格納される文字列です。
.
.ESC[] * stringvar
任意の長さの名前
.argument stringvar
を持った文字列変数に格納される文字列です。
.
.\" --------- macro arguments ---------
.
.ESC $0
現在のマクロが呼び出されている名前。
リクエスト
.request .als
は、1 つのマクロに複数の名前をつけることができます。
.
.ESC $ x
.argument x 
番目のマクロの引数。ここで、
.argument x
は、1 から 9 までの数値です。
.
.ESC $( xy
2 桁の番号
.argument xy 
番目のマクロの引数。
.
.ESC[] $ nexp
.argument nexp 
番目のマクロの引数。ここで、
.argument nexp
は 1 以上の整数に評価される数値表現です。
.
.ESC $*
マクロにおいて、引数すべてを空白文字区切りで連結したもの。
.
.ESC $@
マクロにおいて、引数すべてをそれぞれダブルクォートで囲い、
空白文字で区切って連結したもの。
.
.\" --------- escaped characters ---------
.
.ESC \(rs
バックスラッシュ 1 個に縮退します。コピーモードで
エスケープ文字として解釈されるのを遅らせるときに便利です。
表示可能なバックスラッシュには、
.esc e
を使用してください。
.
.ESC \(cq
揚音アクセント符号 \(aa 。 
.esc( aa
と同じです。
エスケープなし: アポストロフィ、右クォーテーション記号、シングルクォート
(ASCII 0x27)。
.
.ESC `
抑音アクセント符号 \(ga 。
.esc( ga
と同じです。
エスケープなし: 左クォート、バッククォート (ASCII 0x60)。
.
.ESC \-
現在のフォントでの \- 符号。
.
.ESC .
解釈されないドット (ピリオド)。行頭にあってもそうなります。
.
.ESC %
デフォルトでのオプションのハイフン文字。
.
.ESC !
透過行指定子。
.
.ESC ? anything\fB?\fP
ディバージョンにおいて、そのまま
.argument anything
を組み込みます。コピーモードで
.argument anything
は読み込まれます。
エスケープシーケンス
.esc !
および
.esc ?
も参照してください。
.
.
.\" --------- spacing ---------
.
.ESC \& space
連結されない空白の大きさを持った空白文字 (改行もされません)。
.
.ESC 0
数字の幅。
.
.ESC |
1/6\ em の狭い空白文字。nroff では幅 0 です。
.
.ESC ^
1/12\ em やや狭い空白文字。nroff では幅 0 です。
.
.ESC &
表示されない、幅 0 の文字。
.
.ESC )
.esc &
と同様ですが、文の終わりを認識する目的で、 cflags リクエストを
用いて透過になるように宣言された文字のように振る舞うという
点で異なります。
.
.ESC /
次の文字がローマン体であるときには、それの前の文字の幅を増やして
次の文字との間の余白が修正されるようにします。
.
.ESC ,
前の文字がローマン体であるときには、次の文字の余白を変更して
前の文字との間の余白が修正されるようにします。
.
.ESC ~
改行されない空白。行を調整するとき、通常の単語間の空白のように
引き延ばされます。
.
.ESC \& newline
無視される改行。行を連続させるときのためです。
.
.\" --------- structuring ---------
.
.ESC {
条件入力の開始。
.
.ESC }
条件入力の終了。
.
.\" --------- longer escape names ---------
.
.ESC ( st
2 文字の名前を持った特殊文字。
セクション
.BR "特殊文字"
を参照してください。
.ESC[] \& name
任意の長さの名前
.argument name
を持った文字
.
.\" --------- alphabetical escapes ---------
.
.ESC a
解釈されないリーダ文字。
.
.ESCq A anything
.argument anything
が文字列、マクロ、ディバージョン、レジスタ、環境、あるいは
フォント名として受け付けられるものの場合、
.number 1
です。そうでない場合
.number 0
になります。
.
.ESCq b abc...
角括弧を作る関数。
.
.ESC c
テキスト処理を中断します。
.
.ESCq C char
.argument char
と呼ばれる文字。
.esc[] char
と同じですが、他の roff バージョンと互換性があります。
.
.ESC d
垂直単位で 1/2 em だけ前方 (下) に移動します
(nroff では 1/2 行です)。
.
.ESCq D charseq
.argument charseq
中の文字で定義されたグラフィカルな要素を描きます。
詳細は groff info ファイルを参照してください。
.
.ESC e
現在のエスケープ文字の表示できるバージョン。
.
.ESC E
エスケープ文字と等価ですが、コピーモードでは評価されません。
.
.ESC f F
1 文字の名前もしくは 1 個の数字
.argument F
を持つフォントに変更します。
.
.ESC f( fo
2 文字の名前もしくは 2 個の数字
.argument fo
を持つフォントに変更します。
.
.ESC[] f font
任意の長さの名前もしくは数式
.argument font
で表されるフォントに変更します。
.
.ESC[] g reg
リクエスト
.request .af
に適した、名前
.argument reg
を持ったレジスタのフォーマットを返します。
別の形式として
.esc(arg g xy
および
.escarg g x
があります。
.
.ESCq h N
局所的な水平移動。右側へ
.argument N
だけ移動します
(負の値のときは左側へ移動します)。
.
.ESCq H N
現在のフォントの高さを
.argument N 
に設定します。
.
.ESC[] k reg
任意の長さの名前
.argument reg
を持つレジスタ中の水平入力位置をマークします。
別の形式では
.esc(arg k xy
と
.escarg k x 
です。
.
.ESCq l Nc
水平線描画関数 (文字
.argument c 
を用いることも可能です)。
.
.ESCq L Nc
垂直描画関数 (文字
.argument c
を用いることも可能です)。
.
.ESC n r
1 文字の名前
.argument r 
を持つレジスタ変数に格納されている数値。
.
.ESC n( re
2 文字の名前
.argument re 
を持つレジスタ変数に格納されている数値。
.
.ESC[] n reg
任意の長さの名前
.argument reg 
を持つレジスタ変数に格納されている数値。
.
.ESCq N n
現在のフォントで、コード
.argument n
で指定された文字を出力します。特殊フォントは検索されません。
リクエスト
.request .char
を用いて文字にフォントを追加するときに便利です。
.
.ESCq o abc...
文字
.argument a ,
.argument b ,
.argument c ,
などを 2 度打ちします。
.
.ESC p
改行のあと出力行を展開します。
.
.ESC r
垂直方向に 1\ em 逆戻りします (nroff では 1 行逆戻りします)。
.
.ESCq R name \(+-n
リクエスト
.request .nr
.argument name
.argument \(+-n 
と同じです。
.
.ESC[] s \(+-N
ポイントサイズを
.I N
スケールポイントに設定します。別の書式として
.BI \(rss \(+- [ N ]\c
,
.BI \(rss' \(+-N '\c
,
.BI \(rss \(+- ' N '\c
,
.esc(arg s \(+-xy ,
.BI \(rss \(+- ( xy\c
,
.escarg s \(+-x 
が使えることに注意してください。
これは、リクエスト
.request .ps
と同じです。
.
.ESCq S N
出力を
.argument N
度傾けます。
.
.ESC t
解釈されない水平タブ。
.
.ESC u
垂直方向に 1/2 em 逆戻りします (nroff では 1/2 行逆戻りします)。
.
.ESCq v N
局所的な垂直移動。
.argument N
だけ下がります (負の値のときは上がります)。
.
.ESC[] V env
環境変数
.argument env
の内容。別の書式では、
.esc(arg V xy
と
.escarg V x
が使えます。
.
.ESCq w string
文字列
.argument string 
の幅。
.
.ESCq x N
さらに行送りする関数 (負の値なら前へ、正の値なら後ろへ
行送りします)。
.
.ESCq X string
.argument string
をデバイス制御関数として出力します。
.
.ESC[] Y name
文字列変数あるいはマクロ
.argument name
をデバイス制御関数として解釈しないように出力します。
別の書式では、
.esc(arg Y xy
と
.escarg Y x
になります。
.
.ESC z c
幅 0 (空白なし) で
.argument c
を出力します。
.
.ESCq Z anything
.argument anything
を出力し、水平・垂直位置を元に戻します。
.argument anything
にはタブや先頭文字は含まれません。
.PD
.LP
エスケープシーケンス
.esc e ,
.esc . ,
.esc \(dq ,
.esc $ ,
.esc * ,
.esc a ,
.esc n ,
.esc t ,
.esc g ,
および
.escarg \& newline
はコピーモードで解釈されます。
.LP
.esc (
あるいは
.esc [
で始まるエスケープシーケンスは 1 文字のエスケープシーケンスを
表してはいませんが、2 つ以上の文字を持ったエスケープ名の
開始を示します。
.LP
バックスラッシュの後に定義済みのエスケープシーケンスを
形成しない文字が続く場合は、バックスラッシュは黙って無視され、
文字そのものがマップされます。
.
.\" --------------------------------------------------------------------
.SS "特殊文字"
.\"--------------------------------------------------------------------
よく使われる特殊文字は文字
.argument x
と
.argument y
を用いた
.(esc \fP\f(CIxy
の形式のエスケープシーケンスであらかじめ定義されています。
特殊文字の中には通常のフォントに含まれているものも一部ありますが、
ほとんどは特殊フォントでしか利用できません。
最も重要なグリフを抜き出したものを次に示します。完全なリストは、
.BR groff_char (7)
にあります。
.RS
.LP
.PD 0
.
.ESc bu 中黒
.ESc co 著作権記号
.ESc ct セント記号 (通貨)
.ESc dd 2 重ダガー
.ESc de 度記号
.ESc dg ダガー
.ESc em 全角ダッシュ
.ESc hy ハイフン
.ESc rg 登録記号
.ESc sc セクション記号
.ESc ul アンダーライン文字
.ESc == 等号
.ESc >= 以上
.ESc <= 以下
.ESc != 不等号
.ESc -> 右矢印
.ESc <- 左矢印
.ESc +- プラスマイナス記号
.PD
.RE
.
.\" --------------------------------------------------------------------
.SH レジスタ
.\" --------------------------------------------------------------------
レジスタは値を格納する変数です。
groff では、ほとんどのレジスタは数値を格納しますが
(前述セクション
.B 数式
を参照してください)、なかには文字列値を保持できるものもあります。
.LP
各レジスタには名前が与えられています。
任意のレジスタを定義でき、リクエスト
.request .nr
.argument register
で定義・設定できます。
.LP
レジスタに格納された値は、エスケープシーケンス
.esc n
を用いて取り出すことができます。
.LP
最も有用なのは、定義済みのレジスタです。
次からは、レジスタのことを話しているのだということを明確にするため、
.argument name
という表記を用いて
.register name
レジスタのことを示します。
.esc en[]
修飾はレジスタ名の一部ではないことを気にとめておいてください。
.
.\" --------------------------------------------------------------------
.SS "読み込み専用レジスタ"
.\"--------------------------------------------------------------------
次のレジスタは、ユーザが書き換えられない定義済みの値を持った
レジスタです (通常、ドットで始まるレジスタは読み込み専用です)。
ほとんどは、現在の設定についての情報を提供したり、リクエスト呼び出し
からの結果を保存したりするものです。
.LP
.PD 0
.REG .$ 現在のマクロの引数の個数
.REG .A
オプション
.B \-A
が使用されているときに
.B troff
に
.number 1
を設定します。
.BR ntoff
では常に
.number 1
です。
.REG .H 基本単位で表した、利用可能な水平方向の解像度
.REG .T
オプション
.B \-T
が使用されているとき
.number 1
が設定されています。
.REG .V 基本単位で表した、利用可能な垂直方向の解像度。
.REG .
最後に
.escarg x 'N'
を用いて指定した行送り幅。
.REG .C 互換モードが有効になっている場合は 1 で、そうでない場合 0 です。
.REG .c 現在の入力行番号
.REG .cdp
現在の環境に追加された最後の文字の深さ。
最後の文字が基準線から下に突き出ている場合に正になります。
.REG .ce
リクエスト
.request .ce
で設定された中央寄せされる行の残数。
.REG .cht
現在の環境に追加された最後の文字の高さ。
基準線よりも上に文字が突き出ている場合に正になります。
.REG .csk
現在の環境に追加された最後の文字の傾き。
文字の傾きとは、文字の上についたアクセント記号が文字の中央からどれだけ
右に離れて置かれるかということです。
.\"the right of the center of a character...?
.\"この訳が正しいと思います。
.REG .d
現在のディバージョンでの垂直方向の位置です。レジスタ
.register nl
と同じです。
.REG .ev 現在の環境の名前もしくは番号です (文字列の値です)。
.REG .f 現在のフォント番号です。
.REG .fam  現在のフォントファミリです (文字列の値です)。
.REG .fp 次に空いているフォント位置番号。
.REG .g
GNU troff では常に 1 です。
マクロ中で groff で動作しているかどうかをテストする場合、
このレジスタを使用する必要があります。
.REG .h 現在のページあるいはディバージョンでのテキスト基準線の
最高点です。
.REG .hla
リクエスト
.B .hla
で設定された現在のハイフネーション言語。
.REG .hlc
直前で連続したハイフネーション行数。
.REG .hlm
連続したハイフネーション行数の許される最大値。これは、
リクエスト
.request .hlm
で設定されます。
.REG .hy
現在のハイフネーションフラグ (
リクエスト
.request .hy
で設定されます)。
.REG .hym
現在のハイフネーションのマージン (
リクエスト
.request .hym
で設定されます)。
.REG .hys
現在のハイフネーション間隔 (
リクエスト
.request .hys
で設定されます)。
.REG .i 現在のインデント。
.REG .in 現在の出力行に対して適用されるインデント。
.REG .kern
pairwise kerning が有効になっている場合
.number 1
で、無効になっていれば
.number 0
です。
.REG .l 現在行の長さです。
.REG .lg
現在の合字モード (
リクエスト
.request .lg
で設定されます)。
.REG .ll 現在の出力行に対して適用される行の長さ。
.REG .lt
タイトルの長さ (
リクエスト
.request .lt
で設定されます)。
.REG .n 直前の出力行でのテキスト部分の長さ。
.REG .ne
トラップを生起させる原因となった最後のリクエスト
.request .ne
が必要とした空白の量。
このレジスタは、
.register .trunc
と一緒に使用すると便利です。
.REG .o 現在のページのオフセット。
.REG .p 現在のページの長さ。
.REG .pn
次ページの番号。これは、
リクエスト
.request .pn
で定義された値もしくは現在ページに 1 を足した番号の
いずれかです。
.REG .ps スケールポイントで表した現在のポイントサイズ。
.REG .psr 最後に要求された、スケールポイントで表した
ポイントサイズ。
.REG .rj
リクエスト
.request rj
によって設定された右寄せされる行の数。
.REG .s 10 進小数での現在のポイントサイズ。
.REG .sr
10 進小数での最後に要求されたポイントサイズ (文字列値)。
.REG .t 次のトラップまでの距離。
.REG .tabs
現在のタブ設定の文字列表現。
リクエスト
.request .ta
に対する引数として使用するのに適しています。
.REG .trunc
最近の垂直位置トラップによって切り詰められた垂直スペースの量。
リクエスト
.request .ne
によるトラップが引き起こされた場合は、そのリクエストによって生じた
垂直移動量をさらにマイナスした値になります。
別の言い方をすれば、トラップが発生した時点での、
トラップが起きなかった場合の垂直位置と現在の垂直位置との差を
表しています。
リクエスト
.register .ne
と一緒に使用すると便利です。
.REG .ss
リクエスト
.request .ss
の第 1 引数によって設定されたパラメータの値。
.REG .sss
リクエスト
.request .ss
の第 2 引数によって設定されたパラメータの値。
.REG .u 行連結モードのときは 1 で、そうでなければ 0 です。
.REG .v 現在の垂直方向の行送り量。
.REG .vpt
垂直位置トラップが有効なら
.number 1
で、無効なら
.number 0
です。
.REG .w 直前の文字の幅。
.REG .warn
現在有効になっている警告の番号コードの和。
.REG .x メジャーバージョン番号。
.REG .y マイナバージョン番号。
.REG .Y groff のリビジョン番号。
.REG .z 現在のディバージョン名。
.REG llx
与えられた PostScript 画像 (
.request .psbb 
で設定されます)
の左下 x 座標 (PostScript 単位)。
.REG lly
与えられた PostScript 画像 (
.request .psbb
で設定されます)
の左下 y 座標 (PostScript 単位)。
.REG rsb 
.register sb
と同様ですが、文字の高さおよび深さを勘定に含めています。
.REG rst
.register st
と同様ですが、文字の高さおよび深さを勘定に含めています。
.REG sb
文字列の、基準線の下側の深さ
(幅関数
.esc w
で生成されます)。
.REG skw
.esc w
引数の最後の文字の中央からの右スキップ幅。
.REG ssc
添字の直前にある文字に追加すべき水平方向の空白量 (幅関数
.esc w
で生成されます) 
(負の値になる可能性もあります)。
.REG st
文字列の、基準線の上の高さ (幅関数
.esc w
で生成されます)。
.REG urx
与えられた PostScript 画像 (
.request .psbb 
で設定されます)
の右上 x 座標 (PostScript 単位)。
.REG ury
与えられた PostScript 画像 (
.request .psbb 
で設定されます)
の右上 y 座標 (PostScript 単位)。
.PD
.
.\" --------------------------------------------------------------------
.SS "書き込み可能なレジスタ"
.\"--------------------------------------------------------------------
次のレジスタは、ユーザによって読み書き可能です。
定義済みのデフォルト値を持っていますが、ドキュメントを
カスタマイズするために変更できます。
.LP
.PD 0
.REG % 現在のページ番号。
.REG c. 現在の入力行番号。
.REG ct 文字の種類 (幅関数
.esc w 
で指定されます)。
.REG dl 最後に行われたディバージョンの最大幅。
.REG dw 現在の曜日 (1-7)。
.REG dy 現在の日 (1-31)。
.REG hp 現在の入力行における水平位置。
.REG ln 出力行番号。
.REG mo 現在の月 (1-12)。
.REG nl 最後に表示されたテキストのベースラインの垂直方向の位置。
.REG slimit
0 よりも大きければ、入力スタック上のオブジェクトの最大数。
0 以下であれば、制限はありません。つまり、仮想メモリを使い果たすまで
再帰呼び出しし続けることができます。
.REG systat
最後の
.request .sy
リクエストによって実行された
.I system()
関数の戻り値。
.REG year 現在の年 (2000 年問題対応です)。
.REG yr
現在の年から 1900 を引いたものです。2000 年問題対応にするには
レジスタ
.register year
を代わりに使用してください。
.PD
.
.\" --------------------------------------------------------------------
.SH 警告
.\" --------------------------------------------------------------------
groff が生成する警告は各々名前およびコード番号で識別されます。
コードは 2 の累乗になっていて、1 つの整数の上にビットエンコード
できるようになっています。名前も警告のグループを参照するのに
使用できます。
.LP
警告と関連のある名前は、
.option \-w
および
.option \-W
オプションで使用されます。
コード番号は
リクエスト
.request .warn
および
.esc[arg] n warn
レジスタで使用されます。
.LP
.PD 0
.Warning all group
.warning di ,
.warning mac
および
.warning reg
を除いたすべての警告です。
伝統的なマクロパッケージでの警告をすべて網羅しています。
.Warning break 4
行連結モード時に、1 行の長さよりも短くなるように
行を分割できませんでした。デフォルトでは有効です。
.Warning char 1
存在しない文字です。デフォルトでは有効です。
.Warning delim 8
閉じ区切り記号がないか、もしくは対応が取れません。
.Warning di 256
現在ディバージョンが存在しないのに
引数なしで
.request .di
あるいは
.request .da
を使っています。
.Warning el 16
対応するリクエスト
.request .ie
が存在しないのに
.request .el
リクエストを使っています。
.Warning escape 32768
認識されないエスケープシーケンスです。そのためエスケープ文字は
無視されます。
.Warning font 131072
存在しないフォントです。デフォルトでは有効です。
.Warning ig 262144
リクエスト
.request \.ig
を使って無視されているテキスト中で不正なエスケープがあります。
無視されるテキストの外側でこの警告が発生する場合、
エラーとなる状態です。
.Warning mac 512
定義されていない文字列、マクロ、およびディバージョンが使われました。
自動的に空文字として扱われます。通常は、名前ごとに 1 つしか
警告は出ません。
.Warning missing 8192
オプションではない引数が指定されていないリクエストです。
.Warning input 16384
不正な入力文字です。
.Warning number 2
不正な数式です。デフォルトでは有効です。
.Warning range 64
引数が範囲外です。
.Warning reg 1024
定義されていない番号レジスタを使っています。自動的に
値 0 をもつレジスタとして扱われます。通常は、
名前ごとに 1 つしか警告は出ません。
.Warning right-brace 4096
数字を指定すべき場所で
.esc }
が使われました。
.Warning scale 32
意味のない単位指定子です。
.Warning space 65536
リクエストあるいはマクロとその引数との間に空白がありません。
そのため、自動的にマクロは定義されません。
デフォルトでは有効です。
この警告は互換モードでは絶対に発生しません。
.Warning syntax 128
数式中の構文が曖昧です。
.Warning tab 2048
タブ文字の使い方が適切ではありません (クォートされていない
マクロ引数中や数字を指定すべきところにタブ文字がある)。
.Warning w group
すべての警告です。
.PD
.LP
.TS
tab(@), box, expand;
c c c | c  c  c | c  c  c
R RI CB | R RI CB | R RI CB.
Bit@Code@警告@Bit@Code@警告@Bit@Code@警告
_
0@1@char@8@256@di@16@65536@space
1@2@number@9@512@mac@17@131072@font
2@4@break@10@1024@reg@18@262144@ig
3@8@delim@11@2048@tab
4@16@el@12@4096@right-brace
5@32@scale@13@8192@missing
6@64@range@14@16384@input
7@128@syntax@15@32768@escape
.TE
.LP
.
.\" --------------------------------------------------------------------
.SH 互換性
.\" --------------------------------------------------------------------
.I groff
は、古典的な
.I troff
用に書かれた roff コードや他の roff 実装用の roff コードを同じ方法で
処理できるようにする
.B 互換モード
を提供します。
.LP
互換モードはコマンドラインオプション
.option \-C
を用いて有効にでき、
.request .cp
で有効にしたり無効にしたりできます。番号レジスタ
.esc(arg n .C
は、互換モードが有効であるとき
.number 1
で、無効であるとき
.number 0
です。
.LP
長い名前に対する GNU の考え方によってある種の非互換性が
生まれてしまうのでこれが必要になりました。
.I 古典的な troff
は、
.IP
.B
\&.dsabcd
.LP
を
.BR cd
という中身を持った文字列
.B ab
を定義しているものとして解釈します。
.I groff
は、通常これを
.request dsabcd
という名前のマクロ呼び出しとして解釈します。
.LP
さらに、
.I 古典的な troff
では
.esc *[
または
.esc n[
を
.register [
と呼ばれる文字列レジスタあるいは番号レジスタへのリファレンスとして
解釈します。
しかし、
.I GNU 独自の
.IR モード
では通常これを長い名前の始まりとして解釈してしまいます。
.LP
.I 互換性
.IR モードでは、
groff はこれらを古典的な方法で解釈するようになりますが、長い名前は
認識されません。
.LP
これに対して、
.I GNU 独自モード
での groff は、文字列やマクロ、変換、番号レジスタ、フォントあるいは
環境名にエスケープシーケンス
.esc e ,
.esc | ,
.esc ^ ,
.esc & ,
.esc } ,
.esc { ,
.esc "\ " (スペース),
.esc ' ,
.esc ` ,
.esc - ,
.esc _ ,
.esc ! ,
.esc % ,
.esc c
を使うことはできません。これに対して
.I 古典的な troff
ではこれらのエスケープシーケンスを使えます。
エスケープシーケンス
.esc A
は、名前の中でこれらのエスケープシーケンスを使わないようにするとき
役に立ちます。
.LP
小数のポイントサイズは、顕著な非互換性を生み出します。
.I 古典的な
.IR troff
では、
.request .ps
リクエストは単位指定子を無視しますので、
.RS
.LP
.B .ps\ 10u
.RE
.LP
とするとポイントサイズを 10 ポイントに設定します。
これに対して groff 独自のモードでは、ポイントサイズは
スケールポイントで 10 ポイントに設定します。
.LP
.I groff
モードでは、整形されていない入力と整形された出力文字との間に
基本的な違いがあります。
出力文字がどのように出力されるかに影響を与えるものは、すべて
その文字と一緒に格納されます。一度出力文字が作られれば、
その後でどのようなリクエストが実行されても出力文字は影響を受けません。
.request .bd ,
.request .cs ,
.request .tkf ,
.request .tr ,
.request .fp
のいずれのリクエストでも同様です。
.LP
通常、出力文字は、入力文字を現在の出力行に追加する直前に
作られます。
マクロ、ディバージョン、文字列は、実はすべて
同じオブジェクトタイプです。
これらは、どのような組み合わせでも入力文字のリスト
ならびに出力文字のリストを持っています。
.LP
マクロを処理する目的では、出力文字は入力文字と同じような
振る舞いはしません。出力文字は、自分の構築元となった
入力文字ならば持っていたであろう特別な属性を一切
引き継ぎません。
次の例は、これらのことをもっと明解に示しています。
.LP
.RS
.nf
.ft B
\&.di x
\(rs\(rs\(rs\(rs
\&.br
\&.di
\&.x
.ft
.fi
.RE
.LP
.I GNU モード
では、これは
.esc \(rs 
として表示されます。
つまり、入力されたバックスラッシュの対
.'char \(rs\(rs
はそれぞれ 1 つのバックスラッシュ
.'char \(rs
に変換されます。
そして、結果として出力されるバックスラッシュは、
再度読み込まれるときにはエスケープ文字としては解釈されません。
.LP
.I 古典的な troff
では、こうしたバックスラッシュは再度読み込まれるときには
エスケープ文字として解釈されるので、最終的には
1 つのバックスラッシュ
.'char \(rs 
として出力されるでしょう。
.LP
出力可能な
.'char \(rs
を得る正しい方法は
エスケープシーケンス
.esc e
を使うことでしょう。
これは、ディバージョン内で使用されているかどうかに関わらず、
現在のエスケープ文字を常に 1 つだけ出力します。
さらにこれは GNU モードでも互換モードでも動作します。
.LP
ディバージョン内に、再度読み込まれたときに解釈したい
エスケープシーケンスを格納するには、伝統的な
透過出力ファシリティ
.esc !
あるいは新しいエスケープシーケンス
.esc ?
のどちらかが使用できます。
.
.\" --------------------------------------------------------------------
.SH バグ
.\" --------------------------------------------------------------------
現在、groff システムのドキュメントは変更・刷新途上にあります。
それぞれのマニュアルには小さな不一致がある可能性があります。
.LP
.B 警告
セクションは
.BR troff (1)
に属しています。
.
.\" --------------------------------------------------------------------
.SH 作者
.\"--------------------------------------------------------------------
このドキュメントは groff、すなわち GNU roff 配布物の一部です。
Bernd Warken <bwarken@mayn.de> が書きました。
.LP
このドキュメントは、FDL (GNU Free Documentation License) バージョン
1.1 以降の条項のもとに配布されています。
システムに FDL のコピーがあるはずですし、オンライン
.RS
.LP
.I http://www.gnu.org/copyleft/fdl.html
.RE
.LP
でも入手できます。
.LP
もともと、groff 言語拡張については
.BR troff (1)
マニュアルページで管理されていました。
このドキュメントは groff 言語拡張の不可欠な部分を含んではいますが、
詳しい説明については、groff info ファイルの中にあります。
.
.\" --------------------------------------------------------------------
.SH "関連項目"
.\"--------------------------------------------------------------------
groff 言語の主な情報源は
.B groff
.BR info (1)
ファイルです。
.LP
roff および groff システムを調べたり、さらなるドキュメントへの
ポインタを得るには、
.BR roff (7)
を参照してください。
.LP
フォーマッタプログラムについては
.BR groff (1)
および
.BR troff (1)
で説明されており、
前もって定義されているグリフ名のすべては
.BR groff_char (7)
で説明されています。
.LP
古くからある
.I troff
のドキュメントはオンライン
.RS
.LP
.I http://cm.bell-labs.com/cm/cs/cstr.html
.RE
および
.RS
.I http://www.kohala.com/start/troff/
.RE
にあります。


