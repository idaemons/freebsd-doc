.\"
.\" Copyright (C) 2001 Jason Evans <jasone@FreeBSD.org>.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice(s), this list of conditions and the following disclaimer as
.\"    the first lines of this file unmodified other than the possible
.\"    addition of one or more copyright notices.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice(s), this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) ``AS IS'' AND ANY
.\" EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\" DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
.\" DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
.\" CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
.\" DAMAGE.
.\"
.\" %FreeBSD: src/share/man/man9/sx.9,v 1.22 2003/09/14 13:41:59 ru Exp %
.\"
.\" $FreeBSD$
.Dd August 14, 2001
.Dt SX 9
.Os
.Sh 名称
.Nm sx ,
.Nm sx_init ,
.Nm sx_destroy ,
.Nm sx_slock ,
.Nm sx_xlock ,
.Nm sx_try_slock ,
.Nm sx_try_xlock ,
.Nm sx_sunlock ,
.Nm sx_xunlock ,
.Nm sx_try_upgrade ,
.Nm sx_downgrade ,
.Nm sx_assert ,
.Nm SX_SYSINIT
.Nd カーネルの共有/排他ロック
.Sh 書式
.In sys/param.h
.In sys/lock.h
.In sys/mutex.h
.In sys/sx.h
.Ft void
.Fn sx_init "struct sx *sx" "const char *description"
.Ft void
.Fn sx_destroy "struct sx *sx"
.Ft void
.Fn sx_slock "struct sx *sx"
.Ft void
.Fn sx_xlock "struct sx *sx"
.Ft int
.Fn sx_try_slock "struct sx *sx"
.Ft int
.Fn sx_try_xlock "struct sx *sx"
.Ft void
.Fn sx_sunlock "struct sx *sx"
.Ft void
.Fn sx_xunlock "struct sx *sx"
.Ft int
.Fn sx_try_upgrade "struct sx *sx"
.Ft void
.Fn sx_downgrade "struct sx *sx"
.Ft void
.Fn sx_assert "struct sx *sx" "int what"
.Fn SX_SYSINIT "name" "struct sx *sx" "const char *description"
.Sh 解説
共有/排他ロックは書き込まれるよりも、読み込まれる方が非常に多いデータを
保護するために使用されます。
mutex は本質的に共有/排他ロックよりも能率的なので、共有/排他ロックは
用心深く使用されるべきです。
.Pp
共有/排他ロックは
.Fn sx_init
を使用して作成されます。ここで
.Fa sx
は
.Vt struct sx
のための領域へのポインタで、
.Fa description
はその共有/排他ロックを説明するヌルで終端された文字列へのポインタです。
共有/排他ロックは
.Fn sx_destroy
を使用して破壊されます。
スレッドは
.Fn sx_slock
または
.Fn sx_try_slock
および
.Fn sx_sunlock
の呼び出しによって共有ロックを獲得および解放します。
スレッドは
.Fn sx_xlock
または
.Fn sx_try_xlock
および
.Fn sx_xunlock
の呼び出しによって排他ロックを獲得および解放します。
スレッドは
.Fn sx_try_upgrade
の呼び出しによって、現在所有している共有ロックから排他ロックへの
アップグレードを試みることが可能です。
排他ロックを所有しているスレッドは、
.Fn sx_downgrade
の呼び出しによってその排他ロックから共有ロックへのダウングレードが可能です。
.Pp
.Fn sx_try_slock
および
.Fn sx_try_xlock
は共有/排他ロックがすぐに獲得できなかった場合には 0 を返し、
そうでない場合には共有/排他ロックが獲得され 0 ではない値が返されます。
.Pp
.Fn sx_try_upgrade
は共有ロックをすぐに排他ロックにアップグレードできない場合には 0 を返し、
そうでない場合には排他ロックが獲得され 0 ではない値が返されます。
.Pp
.Fn sx_assert
関数は指定された状態をテストして、その状態に合わずかつカーネルが
.Dv INVARIANTS
付きでコンパイルされている場合には、panic します。
.Pp
.Fn SX_SYSINIT
マクロはシステムスタートアップ時に与えられた
.Fa sx
ロックを初期化するために
.Fn sx_sysinit
の呼び出しを生成します。
引数は
.Fn sx_init
と同様ですが、
そのロックと sysinit ルーチンに関連付けられた構造体に関連した唯一の
変数名を生成する際に使用される追加の引数として
.Fa name
を持ちます。
.Pp
以下のアサートがサポートされています。
.Bl -tag -width ".Dv SX_XLOCKED"
.It Dv SX_LOCKED
現在のスレッドが、最初の引数によって指されている
.Vt sx
ロック上に、共有または排他ロックのいずれかを持っていることをアサートします。
.It Dv SX_SLOCKED
現在のスレッドが、最初の引数によって指されている
.Vt sx
ロック上に、共有ロックを持っていることをアサートします。
.It Dv SX_XLOCKED
現在のスレッドが、最初の引数によって指されている
.Vt sx
ロック上に、排他ロックを持っていることをアサートします。
.El
.Pp
スレッドは共有ロックと排他ロックを同時には持つことができません。
同時に持つことはデッドロックを引き起こすことになるためです。
.Sh コンテキスト
スリープしている間に共有ロックまたは排他ロックを所有することは許可されます。
.Sh 関連項目
.Xr condvar 9 ,
.Xr mtx_pool 9 ,
.Xr mutex 9 ,
.Xr sema 9
.Sh バグ
現在、ロックが保持されていないことをアサートする方法がありません。
.Dv WITNESS
ではない場合には、このスレッドが共有ロックを保持していないことを
アサートすることは不可能です。　
.Dv WITNESS
ではない場合には、
.Dv SX_LOCKED
および
.Dv SX_SLOCKED
のアサートは、あるスレッドが共有ロックを保持していることを
単にチェックするに過ぎません。
これらは、現在のスレッドが共有ロックを保持していることを保証しません。
