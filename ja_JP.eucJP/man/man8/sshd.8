.\"  -*- nroff -*-
.\"
.\" Author: Tatu Ylonen <ylo@cs.hut.fi>
.\" Copyright (c) 1995 Tatu Ylonen <ylo@cs.hut.fi>, Espoo, Finland
.\"                    All rights reserved
.\"
.\" As far as I am concerned, the code I have written for this software
.\" can be used freely for any purpose.  Any derived versions of this
.\" software must be clearly marked as such, and if the derived work is
.\" incompatible with the protocol description in the RFC file, it must be
.\" called by a name other than "ssh" or "Secure Shell".
.\"
.\" Copyright (c) 1999,2000 Markus Friedl. All rights reserved.
.\" Copyright (c) 1999 Aaron Campbell. All rights reserved.
.\" Copyright (c) 1999 Theo de Raadt. All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" $OpenBSD: sshd.8,v 1.70 2000/10/16 09:38:44 djm Exp $
.\" %FreeBSD: src/crypto/openssh/sshd.8,v 1.5.2.6 2001/01/18 22:36:53 green Exp %
.\" jpman %Id%
.\"
.Dd September 25, 1999
.Dt SSHD 8
.Os
.Sh 名前
.Nm sshd
.Nd セキュア シェル デーモン
.Sh 書式
.Nm sshd
.Op Fl diqQ46
.Op Fl b Ar ビット数
.Op Fl f Ar 設定ファイル
.Op Fl g Ar ログイン猶予時間
.Op Fl h Ar ホスト鍵ファイル
.Op Fl k Ar 鍵の生成間隔
.Op Fl p Ar ポート
.Op Fl u Ar 長さ
.Op Fl V Ar クライアントプロトコル ID
.Sh 説明
.Nm
(セキュア シェル デーモン) は
.Xr ssh 1
のためのデーモンプログラムです。
これらのプログラムはともに rlogin と rsh を置き換えるもので、
安全でないネットワーク上にある、2つの信頼されていないホスト間で、
暗号化された安全な通信を提供します。これらのプログラムはなるべく簡単に
インストールでき、なるべく簡単に使えるよう配慮されています。
.Pp
.Nm
はクライアントからの接続を listen しているデーモンです。通常
これはブート時に
.Pa /etc/rc.network
から起動され、接続ごとに新しいデーモンが
fork します。Fork したデーモンは、鍵の交換、暗号化、認証、コマンド実行、
そしてデータ交換を行います。この
.Nm
の実装では、SSH プロトコルバージョン 1 と 2 を同時にサポートしています。
.Nm
は以下のように動作します。
.Pp
.Ss SSH プロトコル バージョン 1
.Pp
各ホストは、そのホストに固有の RSA 鍵 (通常 1024 ビット) をもっています。
これはそれぞれのホストを識別するのに使われます。加えて、デーモンは
起動時にサーバ用 RSA 鍵 (通常 768 ビット) を生成します。
この鍵はふつう使われると 1時間おきに生成し直され、
ディスクに保存されることは決してありません。
.Pp
クライアントが接続してくると、デーモンはその公開ホスト鍵およびサーバ鍵を
返します。クライアントは自分がもっているデータベースとこの RSA ホスト鍵とを
比較し、それが変更されていないことを確かめます。つぎにクライアントは
256 ビットの乱数を生成します。これをそのホスト鍵とサーバ鍵両方をつかって
暗号化し、暗号化された数値をサーバに送ります。このとき、どちらの側も
この数値をセッション鍵として使います。セッション鍵とはこれ以降のすべての
通信を暗号化するのに使われるもので、以後セッションは既存の暗号化
アルゴリズムを使って暗号化されます。これらのアルゴリズムは現在のところ
Blowfish または 3DES で、デフォルトでは 3DES となっています。
クライアントはサーバによって提案された暗号化アルゴリズムから
使用するものを選択します。
.Pp
つぎに、サーバとクライアントは認証のための対話に入ります。クライアントは
自分自身の身分を証明するため、
.Pa .rhosts
認証や、RSA ホスト認証と組み合わせた
.Pa .rhosts
認証、RSA チャレンジ-レスポンス 認証、あるいはパスワード認証を使おうとします。
.Pp
Rhosts 認証は根本的に安全でないため、ふつうは禁止されています。しかし
必要とあればサーバの設定ファイルによって許可することもできます。
.Xr rshd 8 ,
.Xr rlogind 8 ,
.Xr rexecd 8 ,
および
.Xr rexd 8
を止めないかぎり (これは
.Xr rlogin 1
と
.Xr rsh 1
を完全に禁止することになりますが)、
システムのセキュリティは改善されません。
.Pp
.Ss SSH プロトコル バージョン 2
.Pp
バージョン 2 も同様に動作します: 各ホストは固有の DSA 鍵をもっており、
これでホストを識別します。しかしデーモンが開始した時点では、これは
サーバ鍵を生成しません。Diffie-Hellman の key agreement によって、
より進歩したセキュリティが提供されています。この key agreement から、
共通のセッション鍵が得られます。
これ以降セッションは対称的暗号化アルゴリズムを用いて
暗号化されます。アルゴリズムは現在のところ CBC モードの
Blowfish, 3DES, CAST128 または Arcfour です。クライアントはサーバが
提案した暗号化アルゴリズムを選びます。加えて、暗号化メッセージ認証コード
(hmac-sha1 あるいは hmac-md5) により、
セッションの内容が途中で改竄されてしまうことのないようにします。
.Pp
プロトコル バージョン 2 は公開鍵ベースのユーザ認証 (DSAAuthentication) と、
従来のパスワード認証を提供します。
.Pp
.Ss コマンド実行とデータ転送
.Pp
クライアントが自分自身の証明に成功すると、セッションを準備するための
対話が始まります。このあとクライアントは仮想端末を割り当てたり、
X11 接続を転送したり、TCP/IP 接続を転送したり、あるいは安全な通信路を
経由して認証エージェントの接続を転送したりします。
.Pp
最後に、クライアントはシェルか、あるいはコマンドの実行のどちらかを
要求します。ここで双方はセッション モードに入ります。このモードでは
両者はいつでもデータを送ることができ、そのデータはサーバ側のシェル
またはコマンドと、クライアント側のユーザ端末とでやりとりされます。
.Pp
ユーザのプログラムが終了し、転送されたすべての X11 接続やその他の接続が
閉じられると、サーバはクライアントにコマンドの終了状態を送り、
両者は終了します。
.Pp
.Nm
はコマンドライン オプションか、設定ファイルによって設定することが
できます。コマンドラインからのオプションは、
設定ファイルで指定されている値よりも優先されます。
.Pp
.Nm
はハングアップシグナル 
.Dv SIGHUP
を受け取ると、自分の設定ファイルを読み込みなおします。
.Pp
オプションには次のようなものがあります:
.Bl -tag -width Ds
.It Fl b Ar ビット数
サーバ鍵のビット数を指定します (デフォルトは 768 ビットです)。
.Pp
.It Fl d
デバッグモードにします。サーバはシステムログに対し、
冗長なデバッグ表示を出力するようになり、バックグラウンドには移行しません。
またサーバは fork せず、1回の接続しか受けつけません。
このオプションはサーバのデバッグのためだけに使ってください。
複数の -d オプションをつけるとデバッグレベルが上がります。
最高は 3 です。
.It Fl f Ar 設定ファイル
設定ファイルの名前を指定します。デフォルトは
.Pa /etc/ssh/sshd_config
になっています。
.Nm
は設定ファイルがないと起動しません。
.It Fl g Ar ログイン猶予時間
クライアントが自分自身を認証するのにかかる猶予時間を与えます
(デフォルトは 300秒)。クライアントがこの時間内にユーザを
認証できなかった場合、サーバは接続を切って終了します。ゼロを
値として与えると猶予は無限になります。
.It Fl h Ar ホスト鍵ファイル
RSA ホスト鍵を読むファイルを指定します (デフォルトは
.Pa /etc/ssh/ssh_host_key
です)。このオプションは
.Nm
を root 以外で起動するときは必ず指定しなければいけません
(ホスト鍵のファイルはふつう root からしか読めないようになっているからです)。
.It Fl i
.Nm
が inetd から起動されることを指定します。
.Nm
はふつう inetd からは起動されません。なぜならこれはクライアントを
受けつける前にサーバ鍵を生成しておく必要があり、これには
数十秒かかるためです。鍵が毎回生成しなおされると、クライアントは
非常に長い間待たされてしまいます。しかし鍵のサイズが
小さければ (たとえば 512 ビットぐらい)、inetd から
.Nm
を使うことも、まあ可能でしょう。
.It Fl k Ar 鍵の生成間隔
サーバ鍵がどれくらいの間隔で再生成されるかを指定します
(デフォルトでは 3600秒、つまり 1時間ごとになっています)。
こんなに頻繁に鍵を再生成するのは以下のような理由によります。
この鍵はどこにも格納されません。そのため、このようにしておくと
たとえマシンがクラックされたり物理的に乗っ取られたりしても、
1時間後には 盗聴した通信を解読して鍵を見つけることは不可能に
なります。この値としてゼロを指定すると、
鍵はまったく再生成されなくなります。
.It Fl p Ar ポート
サーバが接続を受けつける (listen する) ポート番号あるいは
ポート名を指定します (デフォルトは 22 です)。
.It Fl q
静かなモード。
ふつう、接続の開始、認証および終了はログに残りますが、
この場合システムログには何も残りません。
.It Fl u Ar 長さ
このオプションはリモートホスト名を保持させる
.Li utmp
構造体のフィールド長を指定するのに使われます。名前解決されたホストがこの
.Ar len
よりも長い場合、ドットで区切られた 10進の数値がかわりに保持されます。
これは非常に長いホスト名をもつホストがこのフィールドをあふれさせても、
一意に識別できるようにするためです。
.Fl u0
を指定すると 
.Pa utmp
ファイルにはつねにドットで区切られた 10進値が使われるようになります。
.It Fl Q
RSA サポートがない場合でもエラーメッセージを表示しないようにします。
.It Fl V Ar クライアント プロトコル ID
SSH-2 互換モード。このオプションが指定されると、
.Nm
はクライアントがあらかじめ与えられたバージョン文字列を送ってきたと仮定し、
プロトコルのバージョンを識別するための対話 (Protocol
Version Identification Exchange) を省略します。このオプションは
直接使われることを意図されているものではありません。
.It Fl 4
.Nm
が IPv4 アドレスのみを使うよう強制します。
.It Fl 6
.Nm
が IPv6 アドレスのみを使うよう強制します。
.El
.Sh 設定ファイル
.Nm
は
.Pa /etc/ssh/sshd_config
(あるいはコマンドラインから
.Fl f
オプションで指定したファイル) から設定情報を読み込みます。
このファイルの各行は ``キーワード  引数'' の形式になっており、
空行あるいは
.Ql #
で始まる行はコメントとみなされます。
.Pp
以下のキーワードが使えます。
.Bl -tag -width Ds
.It Cm AFSTokenPassing (AFS トークンパス)
このオプションは AFS トークンがサーバに転送されるかどうかを指定します。
デフォルトは
.Dq yes
です。
.It Cm AllowGroups (許可グループ)
このキーワードにはいくつかのグループ名をスペースで区切って
指定します。これが指定されると、ユーザの基本グループが
そのパターンのどれかにマッチするグループであるようなユーザだけが
ログインを許可されます。パターン中では
.Ql \&*
および
.Ql ?
がワイルドカードとして使えます。有効なのはグループの「名前」だけで、
数字で表されたグループ ID は認識されません。デフォルトでは、
ログインはユーザの基本グループに関係なく許可されています。
.Pp
.It Cm AllowTcpForwarding (TCP 転送許可)
TCP 転送を許可するかどうかを指定します。デフォルトは
.Dq yes
です。TCP 転送を禁止しても、ユーザにシェルのアクセスを禁止しない
かぎりセキュリティの向上にはならないことに注意してください。
なぜならユーザはいつでも自分自身で転送プログラムをインストール
できるのですから。
.Pp
.It Cm AllowUsers (許可ユーザ)
このキーワードにはいくつかのユーザ名をスペースで区切って
指定します。これが指定されると、そのパターンのどれかにマッチする
ユーザだけがログインを許可されます。パターン中では
.Ql \&*
および
.Ql ?
がワイルドカードとして使えます。有効なのはユーザの「名前」だけで、
数字で表されたユーザ ID は認識されません。デフォルトでは、
ログインはユーザ名に関係なく許可されています。
.Pp
.It Cm Ciphers (複数の暗号化アルゴリズム)
プロトコル バージョン 2 で許される暗号化アルゴリズムを指定します。
複数の暗号化アルゴリズムはカンマで区切ってください。デフォルトは
.Dq 3des-cbc,blowfish-cbc,arcfour,cast128-cbc
になっています。
.It Cm CheckMail (メールチェック)
対話的ログインのさいに
.Nm
が新着メールをチェックするかどうかを指定します。デフォルトは
.Dq yes
です。
.It Cm DenyGroups (拒絶グループ)
このキーワードにはいくつかのグループ名をスペースで区切って指定します。
ユーザの基本グループがこのパターンのどれかに
マッチするようなユーザはログインを許可されません。パターン中では
.Ql \&*
および
.Ql ?
がワイルドカードとして使えます。有効なのは
グループの「名前」だけで、数字で表されたグループ ID は
認識されません。デフォルトでは、ログインはユーザの基本グループに
関係なく許可されています。
.Pp
.It Cm DenyUsers (拒絶ユーザ)
このキーワードにはいくつかのグループ名をスペースで区切って
指定します。これが指定されると、そのパターンにマッチする
このパターンのどれかにマッチするユーザはログインを許可されません。
マッチするようなユーザはログインを許可されません。パターン中では
.Ql \&*
および
.Ql ?
がワイルドカードとして使えます。
有効なのはグループの「名前」だけで、数字で表されたグループ ID は
認識されません。デフォルトでは、ログインはユーザ名に関係なく許可されています。
.It Cm DSAAuthentication (DSA 認証)
DSA 認証を許可するかどうか指定します。デフォルトは
.Dq yes
です。このオプションは プロトコル バージョン 2 のみに適用されることに
注意してください。
.It Cm GatewayPorts (ゲートウェイポート)
サーバ側からみたリモートホストが、
クライアント側に転送されたポートに接続することを
許可するかどうかを指定します。この引数の値は
.Dq yes
あるいは
.Dq no
で、デフォルトは
.Dq no
です。
.It Cm HostDSAKey (ホスト DSA 鍵)
SSH プロトコル 2.0 で使われる、DSA のホスト秘密鍵が入っている
ファイル (デフォルトは
.Pa /etc/ssh/ssh_host_dsa_key
) を指定します。
このファイルがグループあるいは他人からアクセス可能になっていると、
.Nm
はプロトコル 2.0 を禁止するので注意してください。
.It Cm HostKey (ホスト鍵)
SSH プロトコル 1.3 および 1.5 で使われる、RSA のホスト秘密鍵が
入っているファイル (デフォルトは
.Pa /etc/ssh/ssh_host_key
) を指定します。このファイルがグループあるいは他人からアクセス可能に
なっていると、
.Nm
はプロトコル 1.3 および 1.5 を禁止するので注意してください。
.It Cm IgnoreRhosts (rhosts の無視)
認証のさい、
.Pa .rhosts
および
.Pa .shosts
ファイルを無視するよう指定します。この状態でも、
.Pa /etc/hosts.equiv
および
.Pa /etc/shosts.equiv
は依然として有効です。デフォルトは
.Dq yes
です。
.It Cm IgnoreUserKnownHosts (ユーザ側 known_hosts の無視)
.Cm RhostsRSAAuthentication
のさい、
.Nm
がユーザの
.Pa $HOME/.ssh/known_hosts
を使わないよう指定します。
デフォルトは
.Dq no
です。
.It Cm KeepAlive (生かしておく)
システムが相手のマシンに keepalive メッセージを送るべきかどうかを
指定します。これが送られると、接続の異常終了や相手マシンの
クラッシュが通知されるようになります。しかし、これは
経路が一時的にダウンしていても接続が死んでいるということに
なってしまい、これが気にいらない人もいます。いっぽうで
もし keepalive が送られないと、セッションはいつまでもサーバ側で
ハングしているかもしれず、
.Dq ghost
ユーザがいつまでも居残って
サーバの資源を消費するかもしれません。
.Pp
デフォルトは
.Dq yes
で (つまり keepalive を送るようになっており)、ネットワークがダウン
したりクライアントホストがリブートした際にはサーバが通知するように
なっています。これは永久にハングしつづけるセッションを回避します。
.Pp
keepalive を禁止するには、サーバとクライアント両方の
設定ファイルでこの値を
.Dq no
に指定する必要があります。
.It Cm KerberosAuthentication (Kerberos 認証)
Kerberos 認証を許可するかどうかを指定します。この認証は Kerberos 
チケットをつかうという形で行われます。あるいは
.Cm PasswordAuthentication
が yes なら、ユーザのパスワードは Kerberos KDC を経由して確認されます。
このオプションを使うためには
サーバは KDC の identity を検査する Kerberos servtab を必要と
します。デフォルトでは
.Dq yes
になっています。
.It Cm KerberosOrLocalPasswd (Kerberos がなければローカルパスワード使用)
これが指定されていると Kerberos 経由のパスワード認証が
失敗したとき、そのパスワードは
.Pa /etc/passwd
などの別のローカルな機構によって確認されます。デフォルトは
.Dq yes
です。
.It Cm KerberosTgtPassing (Kerberos TGT パス)
Kerberos TGT をサーバに転送してもよいかどうかを指定します。デフォルトは
.Dq no
です。これがまともに動くのは Kerberos KDC が
実際の AFS kaserver であるときだけだからです。
.It Cm KerberosTicketCleanup (Kerberos チケットの片づけ)
ユーザのチケット用キャッシュをログアウト時に自動的に消去するかどうかを
指定します。デフォルトは
.Dq yes
です。
.It Cm KeyRegenerationInterval (鍵の再生成間隔)
サーバ鍵は、(一度でも使われると) ここで指定された秒数ごとに
自動的に再生成されます。このように鍵を再生成する目的は、
あとでそのマシンに侵入して盗聴したセッションを解読されたり、
鍵を盗まれたりするのを防ぐためです。この鍵はどこにも格納されません。
値としてゼロを指定すると、鍵はまったく再生成されなくなります。
デフォルトでは 3600 (秒) になっています。
.It Cm ListenAddress (接続受付アドレス)
.Nm
が接続を受けつける (listen する) ローカルアドレスを指定します。
デフォルトではすべてのローカルアドレスに対して
接続を受けつけるようになっています。このオプションは複数指定しても
かまいません。また
.Cm Ports
オプションはこのオプションよりも前に指定しておく必要があります。
.It Cm LoginGraceTime (ログイン猶予時間)
ユーザがこの時間内でログインに成功できないと、サーバは接続を切ります。
この値をゼロにすると、時間に制限はなくなります。
デフォルトは 120 (秒) です。
[訳注: -g オプションの解説ではデフォルト 300 秒になっている。
どっちが正しいんだろう。]
.It Cm LogLevel (ログレベル)
.Nm sshd
が出力するログメッセージの冗長性レベルを指定します。
とりうる値は次のとおりです: QUIET, FATAL, ERROR, INFO, VERBOSE
および DEBUG。デフォルトでは INFO です。DEBUG レベルのログは
ユーザのプライバシーを侵害するものであり、勧められるものではありません。
.It Cm MaxStartups (最大起動数)
.Nm
デーモンに対する認証以前の接続を、最大で同時にどれくらい
受けつけるかを指定します。これを超える接続は認証が成功するか、
あるいは接続の
.Cm LoginGraceTime
(ログイン猶予時間) が切れるまで受けつけられず、捨てられます。
デフォルトではこの数は 10 です。
.Pp
もうひとつの方法は、コロンで区切った 3つの値を与えることにより
早期のランダムな接続拒否を許可することです。この値は
.Dq start:rate:full
(``開始時:確率:最大数'') のような形をとります (例: "10:30:60" など)。
.Nm
は認証以前の接続が
.Dq start
(この例では 10) 個を超えると、これ以後の接続要求を
.Dq rate/100
(この例では 30%) の確率で拒否しはじめます。この確率は
.Dq full
(この例では 60) 個の接続が来るまで線形に増えつづけ、
最大数に達した時点でそれ以降すべての接続を拒否するようになります。
.It Cm PasswordAuthentication (パスワード認証)
パスワード認証を許可するかどうかを指定します。デフォルトでは
.Dq yes
になっています。このオプションはプロトコル 
バージョン 1 および 2 の両方に適用されます。
.It Cm PermitEmptyPasswords (空のパスワード許可)
パスワード認証が許可されているとき、パスワード文字列が空の
アカウントに対してサーバがログインを許可するかどうか指定します。
デフォルトは
.Dq no
です。
.It Cm PermitRootLogin (root ログイン許可)
.Xr ssh 1
を使って、root がログインできるかどうかを指定します。この引数の値は
.Dq yes
、 
.Dq without-password
(パスワード認証なし)、あるいは
.Dq no
のいずれかになります。デフォルトは
.Dq no
です。このオプションを
.Dq without-password
にすると、root にのみ
パスワード認証が不許可になります。
.Pp
RSA 認証での root ログインは、
.Ar command
引数が指定されているときはこのオプションの値に関係なく許可されます
(これは、通常は root ログインを禁止しても、
リモートバックアップをとるときなどに有効です)。
.It Cm PidFile (pid ファイル)
.Nm
デーモンのプロセス ID を格納するファイルを指定します。
デフォルトでは
.Pa /var/run/sshd.pid
になっています。
.It Cm Port (ポート)
.Nm
が接続を受けつける (listen する) ポート番号を指定します。
デフォルトは 22 です。複数指定することも可能です。
.It Cm PrintMotd (motd 表示)
ユーザが対話的にログインしたとき、
.Nm
が
.Pa /etc/motd
の内容を表示するかどうかを指定します (システムによっては、これはシェルや
.Pa /etc/profile
に類するものが表示します)。デフォルトは
.Dq yes
です。
.It Cm Protocol (プロトコル)
.Nm
がサポートすべきプロトコルのバージョンを指定します。
とりうる値は
.Dq 1
と 
.Dq 2
で、複数のバージョンをカンマで
区切って指定することもできます。デフォルトは
.Dq 1
です。
.It Cm RandomSeed (乱数初期値)
これはもはや使われていないオプションで、
指定すると警告が表示されて無視されます。
乱数の発生は別の方法で行われます。
.It Cm RhostsAuthentication (rhosts 認証)
rhosts や
.Pa /etc/hosts.equiv
だけを使った認証でログインを許可して
しまってもよいかどうかを指定します。通常これは安全でないため
許可すべきではありません。かわりに
.Cm RhostsRSAAuthentication
を使うべきです。なぜならこれは通常の rhosts や
.Pa /etc/hosts.equiv
認証に加えて、RSA ベースのホスト間認証を行うからです。
デフォルトではこのオプションは
.Dq no
になっています。
.It Cm RhostsRSAAuthentication (rhosts-RSA 認証)
RSA ホスト間認証が成功しているとき、rhosts 認証や
.Pa /etc/hosts.equiv
認証を使ってよいかどうかを指定します。デフォルトは
.Dq no
です。
.It Cm RSAAuthentication (RSA 認証)
純粋な RSA 認証を許可するかどうかを指定します。デフォルトは
.Dq yes
になっています。このオプションはプロトコル バージョン 1 にのみ
適用されることに注意してください。
.It Cm ServerKeyBits (サーバ鍵のビット数)
サーバ鍵のビット数を定義します。最小値は 512 で、デフォルトは 768 です。
.It Cm SkeyAuthentication (s/key 認証)
.Xr skey 1
認証を許可するかどうかを指定します。デフォルトは
.Dq yes
です。OPIE 認証を使うには
.Cm PasswordAuthentication
も一緒に許可されていなければいけません。
.It Cm StrictModes (厳格モード)
.Nm
がログインを許可する前に、ユーザのファイルおよび
ホームディレクトリの所有権とパーミッションをチェックすべきか
どうかを指定します。これはふつう初心者が、しばしば自分の
ディレクトリを誰でも書き込めるようにしてしまう事故を防ぐために
有効です。デフォルトでは
.Dq yes
になっています。
.It Cm Subsystem (サブシステム)
外部サブシステム (ファイル転送デーモンなど) を設定します。
このオプションへの引数はサブシステム名と、そのサブシステムに
要求があったとき実行されるコマンドを与えます。
.Xr sftp-server 8
はファイル転送サブシステム
.Dq sftp
を実装したものです。デフォルトではサブシステムは
何も定義されていません。このオプションは
プロトコル バージョン 2 にのみ適用されることに注意してください。
.It Cm SyslogFacility (syslog 分類)
.Nm sshd
が出力するログメッセージで使われるログの分類コード
(facility) を指定します。とりうる値は次のとおりです: DAEMON, USER,
AUTH, LOCAL0, LOCAL1, LOCAL2, LOCAL3, LOCAL4, LOCAL5, LOCAL6,
LOCAL7。デフォルトは AUTH です。
.It Cm UseLogin (login の使用)
対話的ログインセッションのさい、
.Xr login 1
プログラムを使うかどうかを指定します。
対話的でないリモートコマンド実行のときに
.Xr login 1
が使われることは決してありません。デフォルトでは
.Dq no
になっています。
.It Cm X11DisplayOffset (X11 ディスプレイ基底番号)
.Nm sshd
が X11 転送をするときに最初に使われるディスプレイ番号を指定します。これは
.Nm
が本物の X11 サーバと衝突してしまうのを防ぎます。
デフォルトは 10 です。
.It Cm X11Forwarding (X11 転送)
X11 転送を許可するかどうかを指定します。デフォルトは
.Dq no
です。X11 転送を禁止してもセキュリティを上げることにはまったくなりません。
ユーザはいつでも自分自身で転送プログラムをインストールできるのです。
.It Cm XAuthLocation (xauth の位置)
.Xr xauth 1
プログラムの位置を指定します。デフォルトでは
.Pa /usr/X11R6/bin/xauth
になっています。
.El
.Sh ログイン過程
ユーザがログインに成功すると、
.Nm
は以下のことを行います:
.Bl -enum -offset indent
.It
ユーザが端末にログインしており、コマンドがとくに指定されていない場合、
(設定ファイルまたは
.Pa $HOME/.hushlogin
で禁止されていなければ) 最終ログイン時刻と
.Pa /etc/motd
を表示する。
.Sx FILES
セクションも参照のこと。
.It
ユーザが端末にログインしている場合、ログイン時刻を記録する。
.It
.Pa /etc/nologin
と
.Pa /var/run/nologin
をチェックする。
どちらかが存在する場合、その内容を表示して終了する (root 以外)。
.It
そのユーザの通常の権限に移行する。
.It
基本的な環境変数を設定する。
.It
.Pa $HOME/.ssh/environment
が存在するなら、それを読み込む。
.It
ユーザのホームディレクトリに移動する。
.It
.Pa $HOME/.ssh/rc
が存在する場合、それを実行する。そうでなければ、もし
.Pa /etc/ssh/sshrc
が存在しているなら、それを実行する。これ以外の場合は
.Xr xauth 1
を実行する。この
.Dq rc
ファイルには、標準入力から X11 の認証プロトコルとクッキーが
(それが適切なものであったなら)
与えられる。
.It
ユーザのシェルまたはコマンドを実行する。
.El
.Sh authorized_keys ファイルの形式
.Pa $HOME/.ssh/authorized_keys
ファイルには、SSH プロトコル 1.3 および 1.5で
RSA 認証に使うことを許可されている RSA 公開鍵の一覧が入っています。同様に、
.Pa $HOME/.ssh/authorized_keys2
ファイルには SSH プロトコル 2.0 で
DSA 認証に使うことを許可されている DSA 公開鍵の一覧が入っています。
これらのファイルは各行にひとつの鍵が格納されています (空行や
.Ql #
で始まる行はコメントとして無視されます)。各行は次のようなフィールドから
成ります: オプション、ビット数、指数、係数、コメント。オプションの
フィールドはなくてもかまいません。オプションが存在するかどうかは、
この行が数字で始まるかどうかによって決定されます (オプションフィールドは
決して数字では始まりません)。ビット数、指数、係数の部分で RSA 鍵を
表しています。コメントフィールドは特に使われません (が、これをつけておくと
ユーザが鍵を見分けるのに便利です)。
.Pp
注意すべきことは、これらのファイルでは通常 1行が何百バイトもの長さに
なっていることです (RSA 鍵の係数のサイズが大きいため)。これを手で
タイプする気にはならないでしょう。かわりに
.Pa identity.pub
をコピーして、それを編集してください。
.Pp
オプションは (もしあれば) カンマによって区切ることができます。間に
スペースを入れてはいけませんが、ダブルクォートの間にはさめばオッケーです。
以下のオプションがサポートされています:
.Bl -tag -width Ds
.It Cm from="pattern-list"
RSA 認証に加えて、カンマで区切ったリモートホストの正式名の
パターン列を指定することができます (
.Ql *
および
.Ql ?
がワイルドカードとして使えます)。このリストには否定を入れることも
でき、それにはパターンの先頭に
.Ql !
を置きます。ホストの正式名が
この否定されたパターンにマッチする場合、その鍵は受け付けられ
ません。このオプションはセキュリティを向上させる目的でつけられ
ました: RSA 認証それ自体は、(鍵を除いて) ネットワークや
ネームサーバ、その他ありとあらゆるものを信用していません。
しかし、もし何物かが何らかの方法で鍵を盗むことができれば、
その鍵を使って世界のどこからでもログインできてしまうことに
なります。この追加オプションはそのような盗まれた鍵の使用を
より困難にします (これを使うなら、鍵のほかにネームサーバや
ルータまでも手を入れなくてはならないからです)。
.It Cm command="command"
この鍵が認証に使われたときは、指定されたコマンドが実行されるように
します。ユーザが指定してきたコマンドは (あっても) 無視されます。
このコマンドは、接続要求が仮想端末からくれば、仮想端末上で
走ります。それ以外のときは端末なしで走ります。コマンドの中に
引用符 (") を入れたいときはバックスラッシュを前につけてください。
このオプションは、ある RSA 鍵には特定の操作だけしかさせないように
するのに有効です。例としては、リモートバックアップだけをさせて、
それ以外な何もさせないようにする鍵などがあります。クライアントの
TCP/IP や X11 転送は、明示的に禁止されていない限り可能なので注意してください。
.It Cm environment="NAME=value"
この鍵が使われたとき、環境変数に追加される文字列を指定します。この
やりかたで指定した環境変数は、デフォルトの環境変数の値を上書きします。
このオプションは複数指定することも可能です。
.It Cm no-port-forwarding
この鍵が認証に使われたときは TCP/IP 転送が禁止されます。
クライアントがポート転送を要求しても、すべてエラーになります。
これはたとえば
.Cm command
オプションの指定されている接続などで使われます。
.It Cm no-X11-forwarding
この鍵が認証に使われたときは X11 転送が禁止されます。
クライアントが X11 転送を要求しても、すべてエラーになります。
.It Cm no-agent-forwarding
この鍵が認証に使われたときは、認証エージェントの転送が禁止されます。
.It Cm no-pty
端末の割り当てを禁止します (仮想端末の割り当てが失敗するようになります)。
.El
.Ss 例:
.Bd -literal
1024 33 12121...312314325 ylo@foo.bar
from="*.niksula.hut.fi,!pc.niksula.hut.fi" 1024 35 23...2334 ylo@niksula
command="dump /home",no-pty,no-port-forwarding 1024 33 23...2323 backup.hut.fi
.Ed
.Sh ssh_known_hosts ファイルの形式
.Pa /etc/ssh/ssh_known_hosts ,
.Pa /etc/ssh/ssh_known_hosts2 ,
.Pa $HOME/.ssh/known_hosts ,
および
.Pa $HOME/.ssh/known_hosts2
の各ファイルは今までに知られている
ホストの公開鍵をすべて格納しています。大域的なファイルは管理者によって
(オプションで) 用意され、ユーザごとのファイルは自動的に管理されます。
つまりユーザがまだ知られていないホストに接続したときはいつでも、その
ホスト鍵がユーザのファイルに追加されるのです。
.Pp
これらのファイルの各行は次のようなフィールドからなっています: ホスト名、
ビット数、指数、係数、コメント。
各フィールドはスペースによって区切られています。
.Pp
ホスト名はカンマで区切られたパターン列です (
.Ql *
および
.Ql ?
がワイルドカードとして使えます)。各パターンは (クライアントを認証している
ときは) 順にそのホストの正式名と比較されるか、あるいは (サーバを
認証しているときは) ユーザが与えた名前と比較されます。パターンの先頭に
.Ql !
をつけると否定を表すことができます。否定されたパターンに
マッチしたホストは、たとえその行の他のパターンにマッチしても (その行では)
受けつけられません。
.Pp
ビット数、指数および係数は RSA ホスト鍵から直接取り込まれます。
たとえばこれらは
.Pa /etc/ssh/ssh_host_key.pub
などから取得されます。オプションのコメント フィールドは行末まで続き、
これは無視されます。
.Pp
.Ql #
で始まる行および空行はコメントとして無視されます。
.Pp
ホスト間認証を行うさい、どれか適切な鍵をもった行がマッチすれば、
認証は受け入れられます。したがって同じ名前が複数の行にあったり、
同一ホストに異なるホスト鍵が書いてあったりしても受けつけられます
(が、おすすめはしません)。異なったドメインにあるホスト名の短縮形が
ひとつのファイルにまとめられているときは、これは仕方がないでしょう。
また、これらのファイルには矛盾する情報が書かれていることもあり得ます。
その場合は、どれかのファイルに正しい情報が書いてあれば認証は受け入れられます。
.Pp
注意。これらのファイルの各行は、ふつう何百文字もの長さになっています。
もちろんこんなホスト鍵を手で入力したくはないでしょう。かわりにスクリプトで
生成するか、
.Pa /etc/ssh/ssh_host_key.pub
をとってきてその先頭にホスト名をつけ加えるかしてください。
.Ss 例:
.Bd -literal
closenet,closenet.hut.fi,...,130.233.208.41 1024 37 159...93 closenet.hut.fi
.Ed
.Sh ファイル
.Bl -tag -width Ds
.It Pa /etc/ssh/sshd_config
.Nm sshd
の設定ファイルです。このファイルに書き込めるのは
root だけでなくてはいけませんが、読むのは誰でもできるように
しておいたほうがよいでしょう (必須ではありませんが)。
.It Pa /etc/ssh/ssh_host_key
ホストの秘密鍵を格納します。このファイルは root だけが所有し、
root だけが読み込み可能であり、これ以外は誰にも読ませてはいけません。
.Nm
はこのファイルが誰にでも読めるようになっていると
起動しないので注意してください。
.It Pa /etc/ssh/ssh_host_key.pub
ホストの公開鍵を格納します。このファイルは誰にでも読めるように
なっている必要がありますが、書き込めるのは root だけにして
ください。この内容は秘密鍵のほうと対応しています。このファイルが
実際に使われることはありません。これは単にユーザの便宜をはかる
ためだけに存在し、ユーザはこれを known_hosts ファイルにコピーする
ことができます。これら 2つのファイル (秘密鍵と公開鍵) は
.Xr ssh-keygen 1
を使って生成することができます。
.It Pa /var/run/sshd.pid
現在 接続を受けつけている
.Nm
のプロセス ID が入っています (複数の
.Nm
が異なるポートで走っているときは、最後に開始したプロセスの ID が入ります)。
このファイルの内容は機密事項ではありません。
これは誰でも読めるようにしておけます。
.It Pa $HOME/.ssh/authorized_keys
そのユーザのアカウントでログインするときに使われる RSA 鍵の一覧が
入っています。このファイルは root に読めるようになっている必要が
あります (つまりそのユーザのホームディレクトリが NFS ボリューム上に
あるような場合、そのファイルは誰にでも読めるようになっている
必要がある、ということです)。これは他の人には読めないように
しておくことをすすめます。このファイルの形式は上で説明されています。
.Xr ssh-keygen 1
で説明されているように、ユーザは自分の
.Pa identity.pub
ファイルの内容をこのファイルに入れておきます。
.It Pa $HOME/.ssh/authorized_keys2
そのユーザのアカウントでログインするときに使われる DSA 鍵の一覧が
入っています。このファイルは root に読めるようになっている必要が
あります (つまりそのユーザのホームディレクトリが NFS ボリューム
上にあるような場合、そのファイルは誰にでも読めるようになっている
必要がある、ということです)。これは他の人には読めないように
しておくことをすすめます。このファイルの形式は上で説明されています。
.Xr ssh-keygen 1
で説明されているように、ユーザは自分の
.Pa id_dsa.pub
ファイルの内容をこのファイルに入れておきます。
.It Pa "/etc/ssh/ssh_known_hosts", "$HOME/.ssh/known_hosts"
これらのファイルは、RSA ホスト間認証とともに rhosts を使うさい、
ホストの公開鍵をチェックするために使用されます。認証が
成功するためには、これらのファイルのどちらかにそのホスト鍵が
格納されていなくてはいけません。クライアントもこれと同じ
ファイルで、そのリモートホストが接続しようとしている
ホストであるかどうかを確認します。これらのファイルは root と
所有者には書き込み可能にしておきます。
.Pa /etc/ssh/ssh_known_hosts
は誰からでも読めるようにしておいてください。
.Pa $HOME/.ssh/known_hosts
はそうしておいてもよいですが、別にその必要はありません。
.It Pa /etc/nologin
このファイルが存在していると、
.Nm
は root を除くすべてのユーザのログインを拒否します。
このファイルの内容は root 以外で
ログインしようとして拒否された人に対して表示されます。この
ファイルは誰にでも読めるようになっている必要があります。
.It Pa /etc/hosts.allow
.Sy LIBWRAP
をサポートしてコンパイルされている場合、
.Xr hosts_access 5
の項で説明されている tcp-wrappers の
アクセス制限がこのファイルによって定義できます。
.It Pa $HOME/.rhosts
このファイルには、各行にホスト名とユーザ名の対をスペースで区切って
格納します。当該ホストの指定されたユーザからはパスワードなしの
ログインが許可されます。このファイルは rlogind および rshd からも
使われます。これはそのユーザにのみ書き込めるようにしておき、
他の人からはアクセス不可能にしておくのがよいでしょう。
.Pp
このファイルでは ネットグループ を使うこともできます。ホスト名や
ユーザ名は +@groupname のような形式をとることができ、この場合
そのグループ中のすべてのホストあるいはユーザを指定できます。
.It Pa $HOME/.shosts
ssh は、これを
.Pa .rhosts
とまったく同じように扱います。
しかしこれは rlogind や rshd からは使われないので、SSH を使ったときのみ
アクセスを許可するときにこのファイルを使います。
.It Pa /etc/hosts.equiv
このファイルは
.Pa .rhosts
認証のさいに使われます。いちばん
簡単な形式は、各行にひとつのホスト名を書いておくことです。これらの
ホストからのユーザは、両方のマシンでユーザ名が同じならば
パスワードなしでログインを許可されます。ホスト名のあとにユーザ名を
つけることもできます。この場合、そのユーザはこのマシン上で
.Em どんな
ユーザとしてもログインできてしまいます (root を除く)。
.Dq +@group
のような形式で ネットグループ を指定することもできます。否定のエントリは
先頭に
.Ql \&-
をつけてください。
.Pp
そのクライアント、あるいはそこのユーザがこのファイルにマッチする場合、
クライアント側とサーバ側のユーザ名が同じならばログインは
自動的に許可されます。通常はこれに加えて RSA ホスト間認証が
成功していることが必要です。このファイルは root にしか書き込み可能に
してはいけません。また、誰にでも読めるようにしておくほうがよいでしょう。
.Pp
.Sy 「警告:
.Pa hosts.equiv 
.Sy でユーザ名を使うのは絶対にやめるべきです」
.Pp
これはそのユーザが本当に
.Em 誰としてでも
ログインできてしまうことになるんです。
bin や daemon や adm や、その他非常に重要な
バイナリやディレクトリを所有しているアカウントでもログインできるのです。
ユーザ名を使うのは、実際にはそのユーザに root の
アクセスを許しているのと同じです。ここでのユーザ名の唯一の
まともな使いみちは、おそらく否定のエントリで使うことだけでしょう。
.Pp
ここでの警告は rsh/rlogin にもあてはまることを覚えておいてください。
.It Pa /etc/ssh/shosts.equiv
これは
.Pa /etc/hosts.equiv
とまったく同じように使われます。
このファイルは rsh や rlogin を ssh と同じ環境で動かすときに有用でしょう。
.It Pa $HOME/.ssh/environment
このファイルは (存在していれば) ログイン時に環境変数に読み込まれ
ます。これが含んでいてよいのは、空行、コメント行 (
.Ql #
で始まる)、および ``変数名=値'' の形式の代入行だけです。このファイルは
そのユーザにのみ書き込み可能にしておいてください。べつに
他人が読めるようにしておく必要もありません。
.It Pa $HOME/.ssh/rc
このファイルが存在していると、環境変数ファイルが読み込まれた
後にこのファイルが
.Pa /bin/sh
によって実行されます。これはユーザの
シェルあるいはコマンドの実行よりも前に行われます。X11 偽装
[訳注: クライアント側でいうところの X11 転送] を使っているときは、この
ファイルには標準入力から ``プロトコル  クッキー'' の対
(および環境変数には
.Ev DISPLAY
) が与えられます。このときはここで
.Xr xauth 1
を呼び出す必要があります。
.Pp
このファイルの基本的な目的は、ユーザがホームディレクトリに
アクセス可能になる前に必要と考えられる初期化ルーチンを実行することです。
とくにこのような環境の例として、AFS があります。
.Pp
おそらくこのファイルは、たとえば次のような何らかの初期化コードを
含むことになるでしょう:
.Bd -literal -offset indent
if [ -n "$DISPLAY" ] && read proto cookie; then
    echo add $DISPLAY $proto $cookie | xauth -q -
fi
.Ed
.Pp
このファイルが存在しない場合は
.Pa /etc/ssh/sshrc
が実行されます。これも存在しない場合は、
.Xr xauth 1
がクッキーを格納するために使われます。
.Pp
このファイルは、そのユーザにのみ書き込み可能にしておいてください。
他人が読めるようにしておく必要はありません。
.It Pa /etc/ssh/sshrc
.Pa $HOME/.ssh/rc
に似ています。これはそのマシン固有の大域的な
ログイン時の初期化を指定するのに使われます。これは
root のみ書き込み可能にしておき、誰からも読めるようにしておくべきです。
.El
.Sh 作者
OpenSSH は Tatu Ylonen によってリリースされたオリジナルの (フリー)
ssh 1.2.12 から派生したものです。しかしバグがとり除かれ、より新しい機能が
追加されています。1.2.12 がリリースされるとすぐに、オリジナルの ssh は
だんだんと制限されたライセンスになっていき、フリーのバージョンに対する
要求が生まれました。
.Pp
このバージョンの OpenSSH は…
.Bl -bullet
.It
何らかの制限的事項 (つまり特許など。
.Xr ssl 8
を参照) がついているコンポーネントはすべて、
ソースコードから直接削除されています。
かわりにライセンスあるいは特許つきのコンポーネントは、
外部ライブラリから取り込まれます。
.It
SSH プロトコル 1.5 と 2 をサポートするようにアップデートされました。
これで他のすべての SSH クライアントやサーバと互換になります。
.It
.Xr kerberos 8
認証とチケットパスの追加サポートが含まれています。
.It
.Xr skey 1
を用いた、使い捨てパスワード (one-time password)
認証をサポートしています。
.El
.Pp
OpenSSH は以下の人々によって製作されました: Aaron Campbell, Bob Beck, 
Markus Friedl, Niels Provos, Theo de Raadt, そして Dug Song。
.Pp
SSH プロトコル 2 のサポートは Markus Friedl の手によるものです。
.Sh 日本語訳
新山 祐介 (euske@cl.cs.titech.ac.jp) 2000/11/23
.Pp
当マニュアルページは氏のご好意により
.Fx
日本語マニュアルに収録させていただいています。
翻訳についてのご意見、ご指摘がありましたら新山氏
<euske@cl.cs.titech.ac.jp>、および
.Fx
jpman プロジェクト <man-jp@jp.FreeBSD.org> までお送りください。
.Sh 関連項目
.Xr scp 1 ,
.Xr sftp-server 8 ,
.Xr ssh 1 ,
.Xr ssh-add 1 ,
.Xr ssh-agent 1 ,
.Xr ssh-keygen 1 ,
.Xr ssl 8 ,
.Xr rlogin 1 ,
.Xr rsh 1
