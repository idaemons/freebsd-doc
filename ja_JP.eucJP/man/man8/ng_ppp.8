.\" Copyright (c) 1996-1999 Whistle Communications, Inc.
.\" All rights reserved.
.\" 
.\" Subject to the following obligations and disclaimer of warranty, use and
.\" redistribution of this software, in source or object code forms, with or
.\" without modifications are expressly permitted by Whistle Communications;
.\" provided, however, that:
.\" 1. Any and all reproductions of the source or object code must include the
.\"    copyright notice above and the following disclaimer of warranties; and
.\" 2. No rights are granted, in any manner or form, to use Whistle
.\"    Communications, Inc. trademarks, including the mark "WHISTLE
.\"    COMMUNICATIONS" on advertising, endorsements, or otherwise except as
.\"    such appears in the above copyright notice or in the software.
.\" 
.\" THIS SOFTWARE IS BEING PROVIDED BY WHISTLE COMMUNICATIONS "AS IS", AND
.\" TO THE MAXIMUM EXTENT PERMITTED BY LAW, WHISTLE COMMUNICATIONS MAKES NO
.\" REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, REGARDING THIS SOFTWARE,
.\" INCLUDING WITHOUT LIMITATION, ANY AND ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT.
.\" WHISTLE COMMUNICATIONS DOES NOT WARRANT, GUARANTEE, OR MAKE ANY
.\" REPRESENTATIONS REGARDING THE USE OF, OR THE RESULTS OF THE USE OF THIS
.\" SOFTWARE IN TERMS OF ITS CORRECTNESS, ACCURACY, RELIABILITY OR OTHERWISE.
.\" IN NO EVENT SHALL WHISTLE COMMUNICATIONS BE LIABLE FOR ANY DAMAGES
.\" RESULTING FROM OR ARISING OUT OF ANY USE OF THIS SOFTWARE, INCLUDING
.\" WITHOUT LIMITATION, ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
.\" PUNITIVE, OR CONSEQUENTIAL DAMAGES, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES, LOSS OF USE, DATA OR PROFITS, HOWEVER CAUSED AND UNDER ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF WHISTLE COMMUNICATIONS IS ADVISED OF THE POSSIBILITY
.\" OF SUCH DAMAGE.
.\" 
.\" Author: Archie Cobbs <archie@whistle.com>
.\"
.\" %FreeBSD: src/sys/modules/netgraph/ppp/ng_ppp.8,v 1.7 1999/12/21 01:25:14 julian Exp %
.\" $Whistle: ng_ppp.8,v 1.3 1999/01/25 23:46:27 archie Exp $
.\"
.\" jpman %Id: ng_ppp.8,v 1.3 2000/01/18 07:47:05 kuma Exp %
.Dd January 19, 1999
.Dt NG_PPP 8
.Os FreeBSD
.Sh 名称
.Nm ng_ppp
.Nd PPP プロトコル netgraph ノードタイプ
.Sh 書式
.Fd #include <netgraph/ng_ppp.h>
.Sh 解説
.Nm ppp
ノードタイプは PPP プロトコルのために多重化を行います。
データを持つパケットのみを扱い、
プロトコルネゴシエーションや制御のパケットは別の制御実体
(例えば、ユーザランドのデーモン) へ転送します。
このアプローチは、
カーネルにおける高速ディスパッチの実装と、
ユーザランドにおける柔軟な設定の実装とを組み合わせます。
PPP ノードタイプは、マルチリンク PPP、Van Jacobson 圧縮、
PPP 圧縮、PPP 暗号化、そして IP, IPX, AppleTalk の各プロトコルを
直接サポートします。
1 個の PPP ノードが 1 個の PPP マルチリンクバンドルに対応します。
.Pp
バンドル中の各 PPP リンクには別々のフックがあり、
それに加えて、
直接サポートされているプロトコルに対応して別々のフックがあります。
圧縮と暗号化のためには、別に接続されたノードが実際の仕事を行う必要があります。
使用されるノードタイプは、当然、ネゴシエートされるアルゴリズムに依存します。
また
.Dv bypass
フックがあり、本ノードが直接サポートしないプロトコルを扱うために、
使用されます。
これにはすべての制御プロトコル、LCP, IPCP, CCP 等が含まれます。
典型的には、本ノードはユーザランドデーモンと
.Xr ng_socket 8
タイプノードを介して接続されます。
.Sh 機能の有効化
一般的には、PPP ノードは特定のリンクまたは機能を、次の場合に有効化します:
それは
(a) これを有効にするための
.Dv NGM_PPP_SET_CONFIG
メッセージが届き、かつ
(b) 対応するフック (複数可) が接続されている場合です。
これにより、制御実体が (a) または (b) (または両方) を使用し、
ノードの振舞いを制御できるようになります。
リンクが接続されているが無効な場合、
.Dv bypass
フック (後述) により、リンク上にトラッフィックを流せます。
.Sh リンクフック
通常動作中、個々の PPP リンクはフック
.Dv link0 ,
.Dv link1
等に接続されます。
.Dv NG_PPP_MAX_LINKS
個までのリンクがサポートされています。
これらのデバイス独立なフックは、完全な PPP フレームを送受信します。
このフレームは、
PPP プロトコルと、アドレスと、制御と、情報の各フィールドを含みますが、
チェックサムと他のリンク固有のフィールドは含みません。
.Pp
出力フレームでは、
プロトコル圧縮が有効かつプロトコル番号が圧縮用の場合、
プロトコルフィールドが圧縮されます
(すなわち、2 バイトでなく 1 バイトで送出されます)。
入力フレームでは、
圧縮されたプロトコルフィールドも非圧縮のプロトコルフィールドも
受け付けられます。
同様に、アドレスおよび制御のフィールドの圧縮がこのリンクで有効な場合、
アドレスと制御のフィールドは省略されます
(規格で必須であると規定されているので、LCP フレームは例外です)。
入力フレームにアドレスと制御のフィールドが付いている場合には、
自動的に取り除かれます。
.Pp
全ネゴシエーションは PPP ノード外で扱われるため、
リンクを接続して有効にするのは、
対応するリンクがネットワークフェーズになり
(すなわち LCP ネゴシエーションと認証が成功裏に完了し)、
PPP ノードがリンクパラメータを
.Dv NGM_PPP_LINK_CONFIG
メッセージにより通知されてからにすべきです。
.Pp
リンクが接続されているが無効化の状態のときには、
全受信フレームは
.Dv bypass
フックに直接送出されます。
また、
.Dv bypass
フックを通じてフレームを送信することも可能です。
このモードはリンク認証フェーズ用です。
リンクが有効になるとすぐに、
PPP ノードは、リンクから受信するフレームに対する処理を開始します。
.Sh 圧縮と暗号化
圧縮は 2 個のフック
.Dv compress
と
.Dv decompress
でサポートしています。
有効になり接続されると、PPP ノードは出力フレームを
.Dv compress
フックに書き込み、
同じフックから圧縮されたフレームを受け取るものと期待します。
同様に、
伸長がネゴシエートされた場合
(圧縮と伸長は独立にネゴシエート可能です)、
.Dv decompress
フックは入力フレームを伸長するために使用されます。
これらのフックに接続されたノードのタイプは、
ネゴシエートされた圧縮タイプに、
例えば Deflate, Predictor-1 等に対応すべきです。
.Pp
暗号化は、これとまさに同様に
.Dv encrypt
と
.Dv decrypt
のノードで行われます。
データは常に暗号化前に圧縮され、伸長後に暗号解読されます。
.Pp
バンドルレベルでの圧縮と暗号化だけが直接サポートされています。
リンクレベルの圧縮と暗号化は、downstream ノードで透過的に扱えます。
.Sh VAN JACOBSEN 圧縮
フック
.Dv vjc_ip ,
.Dv vjc_vjcomp ,
.Dv vjc_vjuncomp ,
.Dv vjc_vjip
すべてが接続され、対応する設定フラグが有効であるとき、
Van Jacobsen 圧縮と伸長が活性化されます。
通常これらのフックは、単一の
.Xr ng_vjc 8
ノードの対応するフックに接続されます。
PPP ノードは
.Xr ng_vjc 8
ノードタイプの
.Dq 通過
モードと互換です。
.Sh バイパスフック
リンク上で未サポートまたは無効化されたプロトコルのフレームを受信するか、
対応するフックが接続されていないフレームを受信すると、
PPP ノードはこのフレームの前に 4 バイトのプレフィックスを付けて
.Dv bypass
フックから送出します。
プレフィックスの最初の 2 バイトは、
フレームを受信したリンク番号 (ネットワーク順) を示します。
バンドルで受信したフレーム
(すなわちマルチリンクプロトコルでカプセル化されたフレーム) では、
特殊リンク番号
.Dv NG_PPP_BUNDLE_LINKNUM
が使用されます。
2 バイトのリンク番号の後は、2 バイトの PPP プロトコル番号
(これもネットワーク順) です。
元のフレームがプロトコル圧縮されていたとしても、
PPP プロトコル番号は 2 バイト長です。
.Pp
一方、
.Dv bypass
に書き込まれた全データは同じフォーマットであると見倣されます。
前述の 4 バイトのヘッダが取り除かれ、
PPP プロトコル番号が前に付けられ (圧縮されているかもしれません)、
指定されたリンクからこのフレームが配送されます。
リンク番号が
.Dv NG_PPP_BUNDLE_LINKNUM
の場合、フレームはマルチリンクバンドルを介して配送されます。
マルチリンクが無効化されている場合は (単一の) PPP リンクを介して
配送されます。
.Pp
典型的には、制御実体がバイパスフックからパケットを受信したとき、
このフレームを落す (プロトコルに対して準備ができていないとき) という対応か、
LCP プロトコル拒否 (プロトコルを理解できないか期待しなかったとき) という
対応を行います。
.Sh マルチリンク動作
マルチリンク PPP を有効にするには、
対応する設定フラグをセットし、
少なくとも 1 個のリンクが接続されていることが必要です。
マルチリンクが有効になっていないと、
PPP ノードは複数のリンクの接続を許しません。
また、マルチリンク動作が活性化されている間は、
マルチリンクの設定には変更を許さないものがあります
(例えば短シーケンス番号ヘッダフォーマット)。
.Pp
パケットはフラグメントとして複数の独立したリンクから送られるので、
リンクがダウンするときには、
対応するフックの切断か、
.Dv NGM_PPP_SET_CONFIG
制御メッセージによるリンク無効化により、
PPP ノードへすぐに通知することが重要です。
.Pp
各リンクは、遅延 (ミリ秒で指定) とバンド幅 (秒あたりに何 10 バイトで指定)
の設定パラメータを持ちます。
PPP ノードは、
.Em ラウンドロビン
または
.Em 最適化
のパケット配送に設定可能です。
.Pp
ラウンドロビン配送に設定すると、
遅延とバンド幅の値は無視され、
PPP ノードは、
バンドル内の全リンクにわたってフレームを変えながら、
単に各フレームを単一フラグメントとして送信します。
この方式の利点は、あるリンクが黙ったまま壊れた場合においても、
いくらかのパケットはまだ通過できることです。
欠点は、
対話応答時間にとって重要なバンドル全体の遅延が準最適であり、
バンドル内のリンクのバンド幅が異なる場合には
バンドル全体のバンド幅が準最適であることです。
.Pp
最適配送に設定すると、
末端がパケット全体を受信するのにかかる時間が最小化されるように、
PPP ノードはパケットをリンクに分散します。
この計算には、
各リンクの遅延、バンド幅、現在のキューの長さを考慮に入れます。
それゆえ、これらの数値は可能な限り正確に設定すべきです。
本アルゴリズムは計算を要しますので、
非常に遅いマシンや非常に高速なリンクには向きません。
.Pp
特別な場合として、全リンクが同じ遅延とバンド幅の場合、
上述のアルゴリズムは無効化され (不要という理由です)、
PPP ノードは単にフラグメントを等長に分割して全リンクに振り分けます。
.Sh フック
本ノードタイプは次のフックをサポートします:
.Pp
.Bl -tag -compact -width vjc_vjuncomp
.It Dv link<N>
個々の PPP リンク番号
.Dv <N>
.It Dv compress
圧縮エンジンへの接続
.It Dv decompress
伸長エンジンへの接続
.It Dv encrypt
暗号化エンジンへの接続
.It Dv decrypt
暗号解読エンジンへの接続
.It Dv vjc_ip
.Xr ng_vjc 8
.Dv ip
フックへの接続
.It Dv vjc_vjcomp
.Xr ng_vjc 8
.Dv vjcomp
フックへの接続
.It Dv vjc_vjuncomp
.Xr ng_vjc 8
.Dv vjuncomp
フックへの接続
.It Dv vjc_vjip
.Xr ng_vjc 8
.Dv vjip
フックへの接続
.It Dv inet
IP パケットデータ
.It Dv atalk
AppleTalk パケットデータ
.It Dv ipx
IPX パケットデータ
.It Dv bypass
バイパスフック。
フレームは、リンク番号と PPP プロトコル番号からなる
4 バイトヘッダを持ちます。
.El
.Pp
.Sh 制御メッセージ
本ノードタイプは、汎用制御メッセージをサポートし、
更に次のものもサポートします:
.Bl -tag -width foo
.It Dv NGM_PPP_SET_CONFIG
本コマンドは、本ノードのすべての側面を設定します。
これには、
マルチリンク PPP、暗号化、圧縮、Van Jacobsen 圧縮のそれぞれの有効化と、
IP, AppleTalk, IPX の各パケットの配送が含まれます。
またリンク毎の設定も含み、これには
リンクの有効化、遅延とバンド幅のパラメータの設定、
プロトコルフィールド圧縮の有効化が含まれます。
リンクや機能が活性化されるのは、
対応するフックが接続されてからであることに注意してください。
本コマンドは、引数として
.Dv "struct ng_ppp_node_config"
を取ります:
.Bd -literal -offset 0
/* リンク毎の設定構造体 */
struct ng_ppp_link_config {
  u_char    enableLink;     /* 本リンクの有効化 */
  u_char    enableProtoComp;/* プロトコルフィールド圧縮の有効化 */
  u_char    enableACFComp;  /* アドレス/制御フィールド圧縮の有効化 */
  u_int16_t mru;            /* 対向 MRU */
  u_int32_t latency;        /* リンク遅延 (ミリ秒単位) */
  u_int32_t bandwidth;      /* リンクバンド幅 (バイト/秒単位) */
};

/* ノード設定構造体 */
struct ng_ppp_node_config {
  u_int16_t mrru;                   /* マルチリンクの対向 MRRU */
  u_char    enableMultilink;        /* マルチリンクの有効化 */
  u_char    recvShortSeq;           /* 受信マルチリンクの
                                       短シーケンス番号 */
  u_char    xmitShortSeq;           /* 送信マルチリンクの
                                       短シーケンス番号 */
  u_char    enableRoundRobin;       /* パケット全体の送信 */
  u_char    enableIP;               /* IP データフロー有効化 */
  u_char    enableAtalk;            /* AppleTalk データフロー有効化 */
  u_char    enableIPX;              /* IPX データフロー有効化 */
  u_char    enableCompression;      /* PPP 圧縮有効化 */
  u_char    enableDecompression;    /* PPP 伸長有効化 */
  u_char    enableEncryption;       /* PPP 暗号化有効化 */
  u_char    enableDecryption;       /* PPP 暗号解読有効化 */
  u_char    enableVJCompression;    /* VJ 圧縮有効化 */
  u_char    enableVJDecompression;  /* VJ 伸長有効化 */
  struct ng_ppp_link_config         /* リンク毎の設定パラメータ */
            links[NG_PPP_MAX_LINKS];
};
.Ed
.Pp
.It Dv NGM_PPP_GET_CONFIG
現在の設定を
.Dv "struct ng_ppp_node_config"
で返します。
.It Dv NGM_PPP_GET_LINK_STATS
本コマンドは 2 バイトのリンク番号を単一の引数として取り、
対応するリンクの統計情報を含む
.Dv "struct ng_ppp_link_stat"
を返します。
ここで
.Dv NG_PPP_BUNDLE_LINKNUM
は、マルチリンクバンドルに対応する有効なリンク番号です。
.It Dv NGM_PPP_CLR_LINK_STATS
本コマンドは 2 バイトのリンク番号を単一の引数として取り、
対応するリンクの統計情報をクリアします。
.It Dv NGM_PPP_GETCLR_LINK_STATS
.Dv NGM_PPP_GET_LINK_STATS
と同様ですが、不可分に統計情報のクリアも行います。
.El
.Pp
本ノードタイプは、
.Xr ng_vjc 8
ノードタイプが受け付ける制御メッセージも受け付けます。
これらのメッセージを受信すると、隣接する
.Xr ng_vjc 8
ノードがあれば、そこへ単に転送します。
個々の PPP リンクが
.Dv NGM_VJC_RECV_ERROR
メッセージを生成可能である場合に、これは特に有効です (解説については
.Xr ng_vjc 8
を参照してください)。
.Sh シャットダウン
本ノードは、
.Dv NGM_SHUTDOWN
制御メッセージの受信時か、全フックが切断されたときに、シャットダウンします。
.Sh 関連項目
.Xr netgraph 4 ,
.Xr ng_async 8 ,
.Xr ng_iface 8 ,
.Xr ng_vjc 8 ,
.Xr ng_pppoe 8 ,
.Xr ngctl 8
.Rs
.%A W. Simpson
.%T "The Point-to-Point Protocol (PPP)"
.%O RFC 1661
.Re
.Rs
.%A K. Sklower
.%A B. Lloyd
.%A G. McGregor
.%A D. Carr
.%A T. Coradetti
.%T "The PPP Multilink Protocol (MP)"
.%O RFC 1990
.Re
.Sh 歴史
.Nm
ノードタイプは
.Fx 4.0
で実装されました。
.Sh 作者
.An Archie Cobbs Aq archie@whistle.com
