.\" $FreeBSD: doc/ja_JP.eucJP/man/man1/troff.1,v 1.12 2001/07/29 05:14:53 horikawa Exp $
.ig \"-*- nroff -*-
Copyright (C) 1989-2000, 2001 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be included in
translations approved by the Free Software Foundation instead of in
the original English.
..
.
.\" jpman $Id: troff.1,v 1.13 2001-08-06 02:56:32 horikawa Exp $
.\" define a string tx for the TeX logo
.ie t .ds tx T\h'-.1667m'\v'.224m'E\v'-.224m'\h'-.125m'X
.el .ds tx TeX
.
.de TQ
.br
.ns
.TP \\$1
..
.
.\" Like TP, but if specified indent is more than half
.\" the current line-length - indent, use the default indent.
.de Tp
.ie \\n(.$=0:((0\\$1)*2u>(\\n(.lu-\\n(.iu)) .TP
.el .TP "\\$1"
..
.
.\" The BSD man macros can't handle " in arguments to font change macros,
.\" so use \(ts instead of ".
.tr \(ts"
.
.
.TH TROFF 1 "26 April 2001" "Groff Version 1.17"
.
.
.SH 名称
.
.
troff \- 文書をフォーマットする
.
.
.SH 書式
.
.
.nr a \n(.j
.ad l
.nr i \n(.i
.in +\w'\fBtroff 'u
.ti \niu
.B troff
.de OP
.ie \\n(.$-1 .RI "[\ \fB\\$1\fP" "\\$2" "\ ]"
.el .RB "[\ " "\\$1" "\ ]"
..
.OP \-abivzCERU
.OP \-w name
.OP \-W name
.OP \-d cs
.OP \-f fam
.OP \-m name
.OP \-n num
.OP \-o list
.OP \-r cn
.OP \-T name
.OP \-F dir
.OP \-M dir
.RI "[\ " files\|.\|.\|. "\ ]"
.br
.ad \na
.PP
コマンドラインオプションとパラメータの間に空白を含めることが可能です。
.
.
.SH 解説
.
.
本マニュアルでは、groff ドキュメントフォーマットシステムの一部である
GNU バージョンの
.B troff
について記述します。本コマンドは UNIX troff と
高い互換性を持ちます。通常 troff は groff コマンドから起動されます。
groff はまた、適切な前処理プログラムと後処理プログラムを適切なオプショ
ンで、適切な順序で起動します。
.
.
.SH オプション
.
.
.TP \w'\-dname=s'u+2n
.B \-a
.SM ASCII
文字のみの近似的な出力を行います。
.TP
.B \-b
各警告とエラーメッセージに対するバックトレースを表示します。これは、
警告やエラーの原因を調べるのに有用です。出力される行番号は必ずしも正し
くはありません。
.B as
や
.B am
リクエストにより、
.B troff
が行番号を誤認する可能性があるからです。
.TP
.B \-i
指定されたファイルをすべて処理したあとに、標準入力も読み込み、処理します。
.TP
.B \-v
バージョン番号を表示します。
.TP
.BI \-w name
.I name
で指定した分類の警告を行います。指定できる
.I name
は、後述の警告のサブセクションを参照してください。
.B \-w
オプションは複数指定できます。
.TP
.BI \-W name
.I name で指定した分類の警告を行いません。
.B \-W
オプションは複数指定することが
できます。
.TP
.B \-E
エラーメッセージを一切出力しません。
.TP
.B \-z
フォーマットした結果を出力しません。
.TP
.B \-C
互換モードにします。
.TP
.BI \-d cs
.TQ
.BI \-d name = s
マクロ
.I c
または
.I name
を文字列
.I s
と定義します。
.I c
は 1 文字のマクロ名です。
.TP
.BI \-f fam
.I fam
をデフォルトのフォントファミリとして使用します。
.TP
.BI \-m name
マクロファイル
.IB name .tmac\fR
を読み込みます。見つからなければ、かわりに
.BI tmac. name
を試みます。
まず最初に
.B \-M
コマンドラインオプションで指定されたディレクトリ、
続いて
.B GROFF_TMAC_PATH
環境変数で指定されたディレクトリ、
そして現在のディレクトリ (安全でないモードの
場合のみ)、ホームディレクトリ、/usr/share/tmac/、/usr/share/tmac/、
.B /usr/share/tmac
の順に検索します。
.TP
.B \-U
安全でないモード。
これによって以下のリクエストが有効になります:
.BR .open ,
.BR .opena ,
.BR .pso ,
.BR .sy ,
.BR .pi .
そうでなければ、セキュリティのためにこれらの危険性のあるリクエストは
禁止されています。また現在のディレクトリをマクロ検索パスに加えます。
.TP
.B \-R
.B troffrc
と
.BR troffrc-end
を読みません。
.TP
.BI \-n num
最初のページ番号を
.I num
とします。
.TP
.BI \-o list
.I list
で指定したページのみを出力します。
.I list
は、コンマで区切られ
たページ範囲の列です。ページ範囲の指定方法は以下のとおりです:
.I n
は
.I n
ペー
ジの出力、
.IB m \- n
は
.I m
ページから
.I n
ページまでの出力、
.B \-n
は
.I n
ページまでの
出力、
. IB n \-
は
.I n
ページ以降の出力を意味します。
.B troff
はリストの最後のページを印刷し終えると終了します。
.TP
.BI \-r cn
.TQ
.BI \-r name = n
数値レジスタ
.I c
または
.I name
の値を
.I n
とします。
.I c
は 1 文字の名前です。
.I n
は troff で扱える数式です。
.TP
.BI \-T name
デバイス
.I name
用の出力を生成します。デフォルトは ps です。
.TP
.BI \-F dir
フォントファイルと
.B DESC
ファイルを検索するのに、ディレクトリ (またはディレクトリパス)
.I dir
以下の
.BI dev name
.RI ( name
は出力デバイス名) を探します。
他のすべてのフォントディレクトリより前に
.I dir
を調べます。
.TP
.BI \-M dir
指定したディレクトリ (またはディレクトリパス)
.I dir
からマクロファイルを検索します。
他のすべてのマクロディレクトリより前に調べます。
.
.
.SH 使用法
.
.
ここでは UNIX troff には無い機能のみを説明します。
.
.SS 長い名前
.
数値レジスタ、フォント、文字列/マクロ/転換、
特殊文字のそれぞれの名前の長さは任意です。
エスケープシーケンス中、すなわち
2 文字の名前
.BI ( xx
を使用可能な場所で、
任意の長さの名前
.BI [ xxx ]
を使用可能です。
.TP
.BI \e[ xxx ]
.IR xxx
で呼ばれる特殊文字を表示します。
.TP
.BI \ef[ xxx ]
フォント
.IR xxx
を設定します。
.TP
.BI \e*[ xxx ]
文字列
.IR xxx
を挿入する。
.TP
.BI \en[ xxx ]
数値レジスタ
.IR xxx
を挿入する。
.
.SS 分数のポイントサイズ
.
.I
スケールドポイントは 1/sizescale
ポイントです。ここで
sizescale は
.B DESC
ファイルで指定されます (デフォルト値は 1 です)。
また、新しいスケールインジケータ
.B z
があります。
これは sizescale 倍する効果があります。
troff におけるリクエストおよびエスケープシーケンスは
ポイントサイズを表す引数をスケールドポイント単位で表されているとして
解釈しますが、
このような引数の評価はデフォルトのスケールインジケータ
.BR z
にて行います。
このように取り扱われる引数には、
.B ps
リクエストの引数、
.B cs
リクエストの 3 番目の引数、
.B tkf
リクエストの 2 番目および 4 番目の引数、
.B \eH
エスケープシーケンスの引数、
.B \es
エスケープシーケンスの変形で数値式を引数として取るものとがあります。
.LP
.\" 例えばサイズスケールを 1000 とします;
例えば sizescale を 1000 とします;
この場合スケールドポイントはミリポイントとなります;
リクエスト
.B .ps 10.25
は
.B .ps 10.25z
と同じですし、ポイントサイズは 10250 スケールドポイントに設定されます。
これは 10.25 ポイントと等しい値です。
.LP
数値レジスタ
.B \en[.s]
はポイントサイズを 10 進数分数のポイント単位で返します。
新しい数値レジスタ
.B \en[.ps]
もあり、これはスケールドポイント単位でのポイントサイズを返します。
.LP
デフォルトのスケールインジケータが
.BR u ,
.B z
のどちらでもない数式中で
.B z
スケールインジケータを使用するのは無意味でしょう。
.B troff
はこのようなことを禁止します。
同様に、
.BR z
がデフォルトのスケールインジケータであった数式において
.BR z ,
.B u
のどちらでもないスケールインジケータを使用するのは無意味でしょう。
.B troff
はこのようなことを禁止します。
.LP
また、新しいスケールインジケータ
.B s
があります。これはもとの値をスケールドポイントの単位数で逓倍します。
例えば、
.B \en[.ps]s
は
.B 1m
と同じです。
.BI s,
.B z
スケールインジケータを混同しないようにして下さい。
.
.SS 数値式
.
.LP
括弧内の数式中に空白を含めることが許されます。
.LP
.B M
は em の 1/100 を意味します。
.TP
.IB e1 >? e2
.I e1
と
.I e2
とで小さくない方。
.TP
.IB e1 <? e2
.I e1
と
.IR e2
とで大きくない方。
.TP
.BI ( c ; e )
.I c
をデフォルトのスケールインジケータとして
.I e
を評価します。
.I c
が指定されない場合は
.I e
の評価においてスケールインジケータは無視されます。
.
.SS 新しいエスケープシーケンス
.
.TP
.BI \eA' anything '
.B 1
または
.B 0
に展開されます。
これは
.I anything
が文字列、マクロ、展開、数値レジスタ、環境、フォントのいずれかとして
受理可能か否かに依存します。
.I anything
が空の場合には
.B 0
が返されます。
連想表のようなものからユーザの入力を取り出すような場合に有効です。
.TP
.BI \eB' anything '
これは数値式
.I anything
が正当か否かに応じて
.B 1
または
.B 0
に展開されます。
.I anything
が空の場合は
.B 0
を返します。
.TP
.BI \eC' xxx '
.IR xxx
という名前の文字をタイプセットします。
通常、
.BI \e[ xxx ]\fR
を使用する方が便利です。
しかし
.B \eC
の優位点は、最近の
.SM UNIX
と互換性があり
互換モードにおいて使用可能であることです。
.TP
.B \eE
エスケープ文字と等価ですが、コピーモードでは解釈されません。
例えば、上付き文字の始まりと終りの文字列は次のように定義できます:
.RS
.IP
\&.ds { \ev'\-.3m'\es'\eEn[.s]*6u/10u'
.br
\&.ds } \es0\ev'.3m'
.LP
.B \eE
を使用すると、
例え
.B \e*{
がコピーモードにおいて解釈されるような場合でも、
これらの定義がうまく作用することを保証できます
(例えばマクロの引数で使用される場合)。
.RE
.TP
.BI \eN' n '
コード
.I n
の文字を現在のフォントでタイプセットします。
.I n
は任意の整数値です。
ほとんどのデバイスは文字コードが 0 から 255 までしかありません。
現在のフォントが対応するコードの文字を持たない場合、
スペシャルフォントは探されません。
.B \eN
エスケープシーケンスは
.B char
リクエストとの組み合わせにより便利に使えます:
.RS
.IP
.B
\&.char \e[phone] \ef(ZD\eN'37'
.RE
.IP
各文字のコードは、フォント記述ファイルで、
.B charset
コマンドの後の 4 番目のカラムに書かれています。
文字の名前として
.BR \-\-\-
を使うことで、名前の無い文字をフォント記述ファイルに組み込むことが可能です。
これらの文字を使用するには、
.B \eN
エスケープシーケンスを使う方法しかありません。
.TP
.BI \eR' name\ \(+-n '
これは、次のものと同じ効果です。
.RS
.IP
.BI .nr\  name\ \(+-n
.RE
.TP
.BI \es( nn
.TQ
.BI \es\(+-( nn
ポイントサイズを
.I nn
ポイントに設定します;
.I nn
は正確に 2 桁の 10 進数である必要があります。
.TP
.BI \es[\(+- n ]
.TQ
.BI \es\(+-[ n ]
.TQ
.BI \es'\(+- n '
.TQ
.BI \es\(+-' n '
ポイントサイズを
.I n
スケールドポイントにします;
.I n
は数値式であり、デフォルトスケールインジケータは
.BR z
です。
.TP
.BI \eV x
.TQ
.BI \eV( xx
.TQ
.BI \eV[ xxx ]
.BR getenv (3)
で返される環境変数
.I xxx
の内容を挿入します。
.B \eV
はコピーモードで解釈されます。
.TP
.BI \eY x
.TQ
.BI \eY( xx
.TQ
.BI \eY[ xxx ]
これは
.BI \eX'\e*[ xxx ]'\fR
とほとんど同一です。
しかし文字列/マクロ
.I xxx
は解釈されません;
また
.I xxx
がマクロととして定義されることが許されており、改行文字を含んでも良いです
(
.B \eX
の引数は改行文字を含んではなりません)。
改行文字を含む場合には UNIX troff 出力フォーマットが
拡張されている必要があります。
また、この拡張を知らないドライバーを混乱させてしまいます。
.TP
.BI \eZ' anything '
anything を表示したあと水平位置及び垂直位置を元に戻します;
.I anything
はタブやリーダーを含んではなりません。
.TP
.B \e$0
現在のマクロが呼び出された名前です。
.B als
リクエストはマクロに複数の名前を持たせることができます。
.TP
.B \e$*
.\" マクロ中で、全ての引数を空白で区切って結合します。
マクロ中で、全ての引数を空白で区切って結合した文字列になります。
.TP
.B \e$@
.\" マクロ中で、各引数をダブルクォート括り、
.\" その全てを空白で区切って結合します。
マクロ中で、各引数をダブルクォートで括り、
その全てを空白で区切って結合した文字列になります。
.TP
.BI \e$( nn
.TQ
.BI \e$[ nnn ]
マクロ中で、
.IR nn 番目
もしくは
.IR nnn 番目の
引数を与えます。
マクロの取りうる引数の数には制限はありません。
.TP
.BI \e? anything \e?
転換中で使用すると、
.I anything
を転換中に透過的に埋め込みます。
.I anything
はコピーモードで読まれます。
転換の内容が後で読み込まれる時、
.I anything
は解釈されます。
.I anything
は改行文字を含んではなりません;
転換中に改行文字を埋め込みたい場合には
.B \e!\&
を使用して下さい。
エスケープシーケンス
.B \e?\&
はコピーモードにおいて認識され、単一の内部コードに変換されます;
.IR anything
の終了を表すのがこのコードです。
それゆえ、
.RS
.RS
.ft B
.nf
.ne 15
\&.nr x 1
\&.nf
\&.di d
\e?\e\e?\e\e\e\e?\e\e\e\e\e\e\e\enx\e\e\e\e?\e\e?\e?
\&.di
\&.nr x 2
\&.di e
\&.d
\&.di
\&.nr x 3
\&.di f
\&.e
\&.di
\&.nr x 4
\&.f
.fi
.ft
.RE
.RE
.IP
は
.BR 4
を表示します。
.TP
.B \e/
先行する文字の幅を増やします。
その結果、継続する文字がローマン文字の場合、
先行する文字と継続する文字との間隔が正しくなります。
例えば、イタリックの f の直後にローマンの右括弧が続く場合、
ほとんどのフォントにおいて f の右上の部分が右括弧の左上の部分とが重なり
\fIf\fR)\fR となります。
これは醜いです。
.B \e/
を挿入することにより
.ie \n(.g \fIf\/\fR)\fR
.el \fIf\|\fR)\fR
となりこの問題を防ぎます。
このエスケープシーケンスを、
イタリック文字の直後に空白をはさまずにローマン文字が続く場合には
常に使用することは良い考えです。
.TP
.B \e,
後続する文字の空白を修正します。
その結果、先行する文字がローマン文字の場合、
その文字と先行する文字との間の空白が正しくなります。
例えば
.B \e,
を括弧と f の間に挿入することにより、
\fR(\fIf\fR は
.ie \n(.g \fR(\,\fIf\fR
.el \fR(\^\fIf\fR
となります。
ローマン文字の直後に空白をはさまずにイタリック文字が続く場合には
常に使用することは良い考えです。
.TP
.B \e)
.B \e&
に似ていますが、
.B cflags
リクエストにより宣言された文字として動作します。
このは文の終了判定のために使用します。
.TP
.B \e~
行分割されないが、行内部の空白調整において普通の単語間空白と同様に伸び
縮みする空白を生成します。
.TP
.B \e:
幅が 0 のブレークポイントを挿入します。
.B \e%
と等価ですがソフトハイフン文字を挿入しません。
.TP
.B \e#
次の改行文字 (これを含みます) までの全てを無視します。
コピーモードで解釈されています。
これは
.B \e"
に似ていますが、
.B \e"
は最後の改行文字を無視しないところが違います。
.
.SS 新しいリクエスト
.
.TP
.BI .aln\  xx\ yy
数値レジスタオブジェクトで名前が
.IR yy
のものへのエイリアス
.I xx
を作成します。
新しい名前と古い名前は完全に等価になります。
もし
.I yy
が未定義の場合、タイプ
.B reg
.\" のが生成され、リクエストは無視されます。
の警告が生成され、リクエストは無視されます。
.TP
.BI .als\  xx\ yy
.IR yy
という名前のリクエスト/文字列/マクロ/転換の各オブジェクトに対する
エイリアス
.I xx
を作成します。
新しい名前と古い名前は完全に等価になります
(ソフトリンクに対するハードリンクのようなものです)。
.I yy
が未定義なら、タイプ
.B mac
の警告が生成され、リクエストは無視されます。
マクロ/転換/文字列転換が現在未定義である場合、
もしくはリクエストとして定義されている場合には、
.BR de ,
.BR am ,
.BR di ,
.BR da ,
.BR ds ,
.B as
リクエストは新しいオブジェクトを生成するだけです;
これらは通常は既に存在するオブジェクトの値を変更します。
.TP
.BI .asciify\  xx
このリクエストは、転換
.I xx
を以下のように `アンフォーマット' します。
すなわちフォーマットされ
.I xx
に転換格納された
.SM ASCII
と空白文字 (そしていくつかのエスケープシーケンス) が、
.I xx
が再度読み込まれる時に、普通に入力された文字として扱われます。
.B .writem
リクエストと組み合わせた転換で有用です。
また大々的なハックにも利用できます。
例えば、
.RS
.IP
.ne 7v+\n(.Vu
.ft B
.nf
\&.tr @.
\&.di x
\&@nr n 1
\&.br
\&.di
\&.tr @@
\&.asciify x
\&.x
.fi
.RE
.IP
はレジスタ
.B n
を 1 に設定します。
グリフ情報 (フォント、フォントサイズ等々) は保存されません。
代わりに
.B .unformat
を使ってください。
.TP
.B .backtrace
入力スタックのバックトレースを標準エラー出力に出力します。
.TP
.BI .blm\  xx
空行マクロを
.IR xx
に設定します。
空行マクロが存在する場合、
空行に出会った時に、
通常の troff の振舞とは異なり、
このマクロを呼び出します。
.TP
.BI .box\  xx
.TQ
.BI .boxa\  xx
これらのリクエストは、
途中まで行詰めされた行が転換の一部にならず (つまり転換は常に
改行から始まります)、しかし転換の終了後に戻され、転換から
生じたであろう途中まで行詰めされた行を
破棄するという点を除いて、
.B di
と
.B da
リクエストと同様です。
.TP
.B .break
while ループを抜けます。
.BR while ,
.B continue
リクエストも見て下さい。
.B br
リクエストと混同しないようにして下さい。
.TP
.BI .cflags\  n\ c1\ c2\|.\|.\|.
文字
.IR c1 ,
.IR c2 ,\|.\|.\|.
は、
.I n
で定義されるプロパティを持ちます。
ここで
.I n
は以下のものを OR したものです。
.RS
.TP
1
この文字で文が終ります。
(初期状態では文字
.B .?!\&
がこのプロパティを持ちます);
.TP
2
この文字の前でラインブレイク可能です
(初期状態ではこのプロパティを持つ文字はありません);
両側の文字が非 0 のハイフネーションコードを持つ場合を除き、
このプロパティを持つ文字の場所で
ラインブレイクはしません。
.TP
4
この文字の後でラインブレイク可能です
(初期状態では文字
.B \-\e(hy\e(em
がこのプロパティを持ちます);
両側の文字が非 0 のハイフネーションコードを持つ場合を除き、
このプロパティを持つ文字の場所で
ラインブレイクはしません。
.TP
8
この文字は水平にオーバラップします。
(初期状態では文字
.B \e(ul\e(rn\e(ru
がこのプロパティを持ちます);
.TP
16
この文字は垂直にオーバラップします。
(初期状態では文字
.B \e(br
がこのプロパティを持ちます);
.TP
32
このプロパティを持つ文字が任意数後続し
その後に改行もしくは 2 つの空白が後続するような文の終りを表す文字は、
文の終りとして扱われます;
言い替えると、この文字は文の終りの認識において透過です;
\*(tx においてゼロ空白ファクタを持つのと同じです
(初期状態では文字
.B \(ts')]*\e(dg\e(rq
がこのプロパティを持ちます)。
.RE
.TP
.BI .char\  c\ string
文字
.I c
を
.IR string
と定義します。
文字
.I c
が表示される必要がある時はいつでも、
一時的な環境で
.I string
が処理され、結果が単一のオブジェクトして生成されます。
.I string
の処理中は、
互換モードはオフにされ
エスケープ文字は
.B \e
に設定されます。
太字化/定空白化/カーニングは、
.IR string
の各文字ではなくこのオブジェクトに対して適用されます。
このリクエストによって定義された文字は、
出力デバイスによって提供される通常の文字のように使用できます。
特に、他の文字はこの文字に
.B tr
リクエストによって変換可能です;
この文字は
.B lc
リクエストによってリーダ文字とすることが可能です;
.BR \el ,
.B \eL
エスケープシーケンスによって、この文字を繰り返しパタンで
使用することが可能です;
.B hcode
リクエストによってこの文字がハイフネーションコードを持てば、
この文字を含む語は正確にハイフネーション可能です。
また特殊な非再帰機能があります:
文字の定義中にいて使用される文字は、
通常の文字として扱われ、
.B char
では定義されたものではありません。
文字の定義は
.B rchar
リクエストにて除去可能です。
.TP
.BI .chop\  xx
マクロ/文字列/転換
.IR xx
から最後の文字を切り落とします。
文字列として挿入される転換から最後の改行文字を除去するのに有効です。
.TP
.BI .close\  stream
.I stream
という名前のストリームをクローズします;
.I stream
は
.B write
リクエストの引数とはなりえなくなります。
.B open
リクエストを見て下さい。
.TP
.B .continue
while ループの現在の繰り返しを終了します。
.BR while ,
.B break
リクエストも見て下さい。
.TP
.BI .cp\  n
.I n
が非ゼロか存在しない場合、
互換モードを有効にします。
そうでない場合は互換モードを無効にします。
互換モードでは、長い名前は理解されず、
長い名前に起因する非互換性の問題は発生しません。
.TP
.BI .dei\  xx\ yy
間接的にマクロを定義します。
次の例は
.RS
.IP
.ne 2v+\n(.Vu
.ft B
.nf
\&.ds xx aa
\&.ds yy bb
\&.dei xx yy
.fi
.RE
.IP
以下と等価です。
.RS
.IP
.B
\&.de aa bb
.RE
.TP
.BI .do\  xxx
.I .xxx
を互換モードを無効にして解釈します。
例えば
.RS
.IP
.B
\&.do fam T
.LP
は、互換モードが有効であっても機能することを除けば、
.IP
.B
\&.fam T
.LP
と同じ効果を持ちます。
.I xxx
で使用するファイルを解釈する前に互換モードは元に戻されることに注意して
下さい。
.RE
.TP
.B .ecs
現在のエスケープ文字を保存します。
.TP
.B .ecr
.BR ecs
で保存したエスケープ文字を復帰します。
事前に
.BR ecs
を呼び出していないと
.RB ` \e '
が新しいエスケープ文字になります。
.TP
.BI .evc\  xx
環境
.I xx
の内容を、現在の環境へコピーします。
環境のプッショおよびポップは行いません。
.TP
.BI .fam\  xx
現在のフォントファミリを
.IR xx
に設定します。
現在のフォントファミリは現在の環境の一部です。
.I xx
が無い場合は以前のフォントファミリに戻ります。
フォントファミリに関するさらなる情報は、
.B sty
リクエストの解説を見て下さい。
.TP
.BI .fspecial\  f\ s1\ s2\|.\|.\|.
現在のフォントが
.IR f
の場合、
フォント
.IR s1 ,
.IR s2 ,\|.\|.\|.
がスペシャルとなります。
すなわち、現在のフォントで存在しない文字が
スペシャルフォントにおいて探されます。
.B special
リクエストで指定されたフォントは
.B fspecial
リクエストで指定されたフォントの後に探されます。
.TP
.BI .ftr\  f\ g
フォント
.I f
を
.IR g
に変換します。
.B \ef
エスケープシーケンス中、
.BR ft ,
.BR ul ,
.BR bd ,
.BR cs ,
.BR tkf ,
.BR special ,
.BR fspecial ,
.BR fp ,
.BR sty
リクエスト中で、
名前
.I f
で参照されるフォントに関して、フォント
.I g
が使用されます。
.I g
が指定されない場合および
.I f
と等しい場合は、
フォント
.I f
は変換されません。
.TP
.BI .hcode \ c1\ code1\ c2\ code2\|.\|.\|.
ハイフネーションコードの設定を、
文字
.I c1
に対し
.I code1
、文字
.I c2
に対し
.IR code2
というふうに行います。
ハイフネーションコードは、
数字もしくは空白以外の単一入力文字 (非スペシャルな文字) である必要があります。
初期状態では、
各小文字はハイフネーションコードをそれ自体の文字として持ち、
各大文字はハイフネーションコードを各小文字として持ちます。
.B hpf
リクエストも見て下さい。
.TP
.BI .hla\  lang
現在のハイフネーション言語を
.IR lang
に設定します。
.B hw
リクエストで指定されるハイフネーション例外
および
.B hpf
リクエストで指定されるハイフネーションパタンは
現在のハイフネーション言語に関連づけられます。
.B hla
リクエストは通常
.B troffrc
ファイルから起動されます。
.TP
.BI .hlm\  n
ハイフネーションされた行が連続できる行数の最大値を
.IR n
に設定します。
.I n
が負の場合、最大値はありません。
デフォルト値は \-1 です。
この値は現在の環境と関連づけられています。
行数のカウントは、一つの環境の中でその環境での最大値まで行われます。
.B \e%
の結果のハイフンはカウントされます; 明示的なハイフンはカウントされません。
.TP
.BI .hpf\  file
ハイフネーションパタンを
.IR file
から読み込みます;
ファイルの探索は、
.BI \-m name
オプションが指定された時に
.IB name .tmac
が探されるのと同じ方法で行われます。
このパタンは
\*(tx における \epatterns プリミティブの引数と
同じフォーマットである必要があります;
このファイル中の文字はハイフネーションコードとして解釈されます。
パタンファイル中の
.B %
文字は行末までのコメントを表します。
ハイフネーションパタンのセットは
.B hla
リクエストにより指定される言語に関連づけられます。
.B hpf
リクエストは通常
.B troffrc
ファイルにより起動されます。
.TP
.BI .hym\  n
.I ハイフネーションマージン
を
.IR n
に設定します:
現在の修正モードが
.BR b
ではない時、
行が
.I n
より短い場合には行はハイフネーションされません。
デフォルトのハイフネーションマージンは 0 です。
このリクエストに対するデフォルトのスケーリングインジケータは
.IR m
です。
ハイフネーションマージンは現在の環境と関連づけられています。
現在のハイフネーションマージンは
.B \en[.hym]
レジスタを介して利用可能です。
.TP
.BI .hys\  n
.I ハイフネーション空白を
.IR n
に設定します:
現在の修正モードが
.B b
の場合、
各単語の間の間隔に追加する間隔の幅を
.I n
.\" 以下のエクストラ空白を追加することで行を調整できる場合、
以下で行調整が済ませられる場合、その
行はハイフネーションされません。
デフォルトのハイフネーション空白は 0 です。
このリクエストに対するデフォルトのスケーリングインジケータは
.BR m
です。
ハイフネーション空白は現在の環境と関連づけられています。
現在のハイフネーション空白は
.B \en[.hys]
レジスタを介して利用可能です。
.TP
.BI .kern\  n
.I n
が非 0 か指定されない場合、文字ペア間カーニングを有効にします。
そうでない場合は文字ペア間のカーニングを無効にします。
.TP
.BI .length\  xx\ string
.I string
の長さを計算し、これを数値レジスタ
.I xx
(前もって定義する必要はありません) に入れて返します。
.TP
.BI .linetabs\  n
.I n
が 0 でないか省略されるとライン-タブモードが有効になり、
そうでない場合は無効にします (デフォルトは無効です)。
ライン-タブモードではタブの幅が (現在の) 出力行に応じて
計算されます。そうでない場合は入力行に応じて計算されます。
例えば次のソース
.RS
.IP
.ne 6v+\n(.Vu
.ft B
.nf
\&.ds x a\et\ec
\&.ds y b\et\ec
\&.ds z c
\&.ta 1i 3i
\e*x
\e*y
\e*z
.fi
.RE
.IP
は以下を生成します。
.RS
.IP
a         b         c
.RE
.IP
ライン-タブモードでは同じコードが以下のようになります。
.RS
.IP
a         b                   c
.RE
.IP
ライン-タブモードは現在の環境に関連づけられます。ライン-タブモードでは
読み出し専用の数値レジスタ
.B \\en[.linetabs]
が \~1 にセットされ、そうでなければ 0 にセットされます。
.TP
.BI .mso\  file
.B \-m
コマンドラインオプションが指定された場合に
マクロファイルを検索するのと同じディレクトリで
.I file
を検索する点を除いて
.B so
リクエストと同じです。
インクルードするファイル名が
.IB name .tmac
の形式で、見つからない場合は、代わりに
.B mso
は
.BI tmac. name
をインクルードしようとします。
逆もまた同様です。
.TP
.BI .nop \ anything
.IR anything
を実行します。
これは `.if\ 1' と同様です。
.TP
.B .nroff
.B n
ビルトイン条件を真にし、
.B t
ビルトイン条件を偽にします。
.B troff
リクエストを使用することで、逆にできます。
.TP
.BI .open\  stream\ filename
.I filename
を書き込みのためにオープンし、
.I stream
という名前のストリームと関連づけます。
.BR close ,
.B write
リクエストも見て下さい。
.TP
.BI .opena\  stream\ filename
.BR open
と同様ですが、
.I filename
が存在する場合、縮小することはせずに、アペンドします。
.TP
.B .pnr
現在定義されている数値レジスタの名前と内容を標準エラー出力に出力します。
.TP
.BI .psbb \ filename
PostScript イメージ
.IR filename
のバウンディングボックスを得ます。
このファイルは、
Adobe の Document Structuring Conventions に従うことが必要です。
このコマンドは、
.B %%BoundingBox
コメントを探し、バウンディングボックス値を得ます。
呼び出しに成功すると、
左下と右上の角の座標が (PostScript 単位で)、レジスタ
.BR \en[llx] ,
.BR \en[lly] ,
.BR \en[urx] ,
.BR \en[ury]
にそれぞれ設定されます。
なんらかのエラーが発生すると、4 個のレジスタは 0 に設定されます。
.TP
.BI .pso \ command
入力が
.IR command
の標準出力であることを除けば、
.B so
リクエストのように動作します。
.TP
.B .ptr
全てのトラップ (入力行のトラップと転換のトラップは除きます)
の名前と位置を標準エラー出力に出力します。
ページトラップリストの空のスロットも出力されます。
なぜなら、後で設置されるトラップの優先度に影響を与え得るからです。
.TP
.BI .rchar\  c1\ c2\|.\|.\|.
文字
.IR c1 ,
.IR c2 ,\|.\|.\|.
の定義を取り除きます。
.B char
リクエストの影響を取り除きます。
.TP
.B .return
マクロ中であれば即座に復帰します。
それ以外では何もしません。
.TP
.B .rj
.TQ
.BI .rj\  n
後続する
.I n
入力行を右揃えします。
引数が無い場合、次の行を右揃えします。
右揃えされる行の数は
.B \en[.rj]
レジスタを介して利用可能です。
本リクエストにより暗黙的に
.BR .ce\ 0
となります。
.B ce
リクエストは暗黙的に
.BR .rj\ 0
します。
.TP
.BI .rnn \ xx\ yy
数値レジスタ
.I xx
を
.IR yy
にリネームします。
.TP
.BI .shc\  c
ソフトハイフン文字を
.IR c
にします。
.I c
が省略された場合、
ソフトハイフン文字はデフォルトの
.BR \e(hy
になります。
ソフトハイフン文字は、語がラインブレイクによってハイフネーションされる時に
挿入される文字です。
ブレイクすべき位置の直前の文字のフォントにソフトハイフン文字が存在しない場合、
そのような位置ではブレイクしません。
ソフトハイフン文字を見付ける時には、
定義 (
.B char
リクエストで指定) も変換 (
.B tr
リクエストで指定) も解釈されません。
.TP
.BI .shift\  n
マクロ中で引数を
.I n
ポジションだけシフトします:
引数
.I i
は引数
.IR i \- n
となります;
引数 1 から
.I n
は使用不能となります。
.I n
が指定されない場合、
引数は 1 シフトされます。
負のシフトは現在未定義です。
.TP
.BI .special\  s1\ s2\|.\|.\|.
フォント
.IR s1 ,
.IR s2 ,
はスペシャルであり、
現在のフォントには無い文字が探されます。
.TP
.BI .sty\  n\ f
スタイル
.I f
をフォント位置
.IR n
と関連づけます。
フォント位置はフォントもしくはスタイルと関連づけ可能です。
現在のフォントはフォント位置のインデックスであり、
つまり、フォントもしくはスタイルです。
現在のフォントがスタイルである場合、
実際に使用されるフォントは、
現在のファミリ名と現在のスタイル名とを結合した名前をもつものとなります。
例えば現在のフォントが 1 であり、フォント位置 1 がスタイル
.B R
と関連づけられており、
現在のフォントファミリが
.BR T
である場合、
フォント
.BR TR
が使用されます。
現在のフォントがスタイルではない場合、
現在のファミリは無視されます。
リクエスト
.BR cs ,
.BR bd ,
.BR tkf ,
.BR uf ,
.B fspecial
がスタイルに適用される場合、
実際は当該スタイルに対応する現在のファミリのメンバに対して適用されます。
デフォルトファミリは
.B \-f
オプションで設定できます。
.SM DESC
ファイル中のスタイルコマンドが、
(もし存在すれば) どのフォント位置が初期状態において
フォントではなくスタイルに関連づけられているのかを制御します。
.TP
.BI .substring\  xx\ n1\  [ n2 ]
レジスタ
.I xx
中の文字列を、インデックス
.I n1
と
.IR n2
で指定されるサブ文字列で置き換えます。
文字列の最初の文字はインデックス 1 です。
.I n2
が省略されると、文字列の長さとみなされます。
インデックス値
.I n1
または
.I n2
が負または 0 である場合、文字列の末尾から後ろ向きに数えます。
すなわち、最後の文字がインデックス 0 であり、
最後の文字の前の文字が -1 などとなります。
.TP
.BI .tkf\  f\ s1\ n1\ s2\ n2
フォント
.IR f
に対しトラックカーニングを有効にします。
現在のフォントが
.I f
である場合、
全ての文字の幅が
.I n1
から
.IR n2
の範囲で増加します;
現在のポイントサイズが
.I s1
以下の場合、幅は
.IR n1
増えます;
現在のポイントサイズが
.I s2
以上の場合、幅は
.IR n2
増えます;
ポイントサイズが
.I s1
以上かつ
.I s2
以下の場合は、
増加する幅はポイントサイズの線形関数となります。
.TP
.BI .tm1\  string
.B tm
リクエストと同様です。
.I string
がコピーモードで読み込まれて標準エラーに書き出されます。
ただし先頭に空白を置けるようにするために、
.I string
の最初のダブルクォートは取り除かれます。
.TP
.BI .tmc\  string
.BR tm1
と同様ですが最後の改行を出力しません。
.TP
.BI .trf\  filename
透過的にファイル
.IR filename
の内容を出力します。
各行の出力は各行の先頭に
.BR \e!
ついたものとして出力されます。
しかし、
行はコピーモードにおける解釈の対象とはなりません。
ファイルが改行文字で終らない場合、改行文字が追加されます。
例えば、ファイル
.IR f
の内容を含むマクロ
.I x
を定義するには、
.RS
.IP
.BI .di\  x
.br
.BI .trf\  f
.br
.B .di
.LP
とします。
.B cf
リクエストとは異なり、
ファイル中には
.SM NUL
といった troff 入力文字として不正なものを含むことはできません。
.RE
.TP
.B .trnt abcd
.BR \e!
により転換へ透過的に取り込まれるテキストに対して適用されないことを除いて、
.B tr
リクエストと同じです。
例えば、
.RS
.IP
.nf
.ft B
\&.tr ab
\&.di x
\e!.tm a
\&.di
\&.x
.fi
.ft
.LP
は
.BR b
を表示します;
.B trnt
が
.B tr
のかわりに使われた場合、
.BR a
を表示します。
.RE
.TP
.B .troff
.B n
ビルトイン状態を偽に、
.B t
ビルトイン状態を真にします。
.B nroff
リクエストの効果を打ち消します。
.TP
.BI .unformat\  xx
このリクエストは、転換
.IR xx
を `アンフォーマット' します。
転換の整形済み要素を可能な限り入力トークンに復元しようと試みる
.B .asciify
リクエストとは逆に、
.B .unformat
は単語間のタブとスペース (通常、入力中のスペースか改行で生じる) のみ
特別扱いします。
前者はそれらが入力トークンであるかのように扱われます。そして後者は
再び伸び縮み可能と扱われます。
行の垂直方向のサイズが保存されないことに注意してください。
グリフ情報 (フォント、フォントサイズ、スペース幅等々) は
保たれます。
.B .box
と
.B .boxa
リクエストと組み合わせると便利です。
.TP
.BI .vpt\  n
.I n
が非 0 の場合
垂直位置トラップを有効にします。
そうでない場合、垂直位置トラップを無効にします。
垂直位置トラップは
.B wh ,
.B dt
リクエストにより設定されるトラップです。
.B it
リクエストにより設定されるトラップは垂直位置トラップではありません。
垂直位置トラップが発生するか否かを制御するこのパラメータは大域的です。
初期状態では垂直位置トラップは有効です。
.TP
.BI .warn\  n
警告を制御します。
.I n
は有効とされるべき警告と関連づけられた数の和です;
その他の警告は無効となります。
警告と関連づけられる数のリストは`警告'の章に記載します。
例えば
.B .warn 0
は全ての警告を無効にします。
また、
.B .warn 1
は存在しない文字に関する警告のみを有効にします。
.I n
が与えられない場合、
全ての警告が有効になります。
.TP
.BI .while \ c\ anything
条件
.I c
が真の間、
.I anything
を入力として受け付けます;
.I c
は
.B if
リクエストとして受理可能な任意の条件です;
最初の行が
.B \e{
で開始され最後の行が
.BR \e}
で終了する場合、
.I anything
は複数行となり得ます。
.BR break ,
.B continue
リクエストも見て下さい。
.TP
.BI .write\  stream\ anything
.I anything
を
.IR stream
という名前のストリームに書き込みます。
.I stream
はすでに
.B open
リクエストの対象であったはずです。
.I anything
がコピーモードで読まれます;
先行する
.B \(ts
は取り除かれます。
.TP
.BI .writem\  stream\ xx
マクロまたは文字列
.I xx
の内容を
.IR stream
で指定されたストリームへ書き出します。
.I stream
は事前に
.B open
リクエストでオープンされていなければなりません。
.I xx
はコピーモードで読まれます。
.
.SS 拡張されたリクエスト
.
.TP
.BI .cf\  filename
転換の中で使用された場合は、後でその転換が読み込まれるときに、
.I filename
の内容が透過的に出力にコピーされるようなオブジェクトを
その転換の中に埋め込みます。
UNIX troff では、
現在、転換の中かどうかにかかわらず
.I filename
の内容はすぐに出力にコピーされます;
この動作は変則的でありバグに違いありません。
.TP
.BI .ev\  xx
.I xx
が数でない場合、
.IR xx
で呼ばれる名前付き環境に切り替えます。
引数なしの
.B ev
リクエストに対しては、番号付き環境の場合と同様に、
対応する環境がポップされます。
名前のある環境の数には制限はありません;
最初に参照される時に生成されます。
.TP
.BI .fp\  n\ f1\ f2
.B fp
リクエストはオプションで 3 番目の引数を取ります。
この引数はフォントの外部名を与えます。
この名前でフォント記述ファイルを探します。
2 番目の引数はフォントの内部名であり、
フォントをマウントした後に troff 中でフォントを参照するのに使用します。
3 番目の引数が無い場合は内部名を外部名として使用します。
この機能により、互換モードにて長い名前のフォントを使用できます。
.TP
.BI .ss\  m\ n
.B ss
リクエストに対し 2 つの引数が与えられる場合、
2 番目の引数は
.IR "文の空白サイズ"
を与えます。
2 番目の引数が与えられない場合、
文の空白サイズは語の空白サイズと同じになります。
語の空白サイズと同様、文の空白サイズは
現在のフォントの空白幅パラメータの 1/12 を単位とします。
語の空白サイズと文の空白サイズの初期値はともに 12 です。
UNIX troff に反して GNU troff はこのリクエストも nroff モードで
扱います (互換モードでない場合)。
それから指定された値は \~12 の倍数で最も近い値に丸められます。
文の空白サイズは 2 つの状況にて使用されます:
行詰めモードにて文の終りとなった場合、
語間の空白と文の空白がともに追加されます;
行の途中にて、文の終りに引続き 2 つの空白が後続する場合、
2 番目の空白は文の空白となります。
.ss
リクエストの 2 番目の引数を与えなければ、
GNU troff の動作は UNIX troff の動作と完全に同じになります。
GNU troff では UNIX troff と同様、
改行及び 2 つの空白にて文を追跡します。
.TP
.BI .ta\  n1\ n2\|.\|.\|.nn \ T\  r1\ r2\|.\|.\|.\|rn
タブ位置を
.IR n1 ,
.IR n2 ,\|.\|.\|.\|,
.I nn
とし、その後タブ位置を
.IR nn + r1 ,
.IR nn + r2 ,\|.\|.\|.\|.\|,
.IR nn + rn
とし、その後タブ位置を
.IR nn + rn + r1 ,
.IR nn + rn + r2 ,\|.\|.\|.\|,
.IR nn + rn + rn ,
とし…ということを繰り返します。
例えば、
.RS
.IP
.B
\&.ta T .5i
.LP
は 1/2 インチ毎にタブ位置とします。
.RE
.
.SS 新しい数値レジスタ
.
以下の読み取り専用レジスタが利用可能です:
.TP
.B \en[.C]
互換モード時に 1 に、そうでない場合は 0 になります。
.TP
.B \en[.cdp]
現在の環境に付加されている最後の文字の深さ。
文字がベースラインより下にいく場合に正になります。
.TP
.B \en[.ce]
中央寄せされるべき残りの行数。
この値は
.B ce
リクエストでセットされます。
.TP
.B \en[.cht]
現在の環境に付加されている最後の文字の高さ。
文字がベースラインの上にいく場合に正になります。
.TP
.B \en[.csk]
現在の環境に付加されている最後の文字のスキュー値。
文字の
.I スキュー
は、その文字の上に付くアクセントが
その文字の中央からどれだけ右によって配置されるかを表します。
.TP
.B \en[.ev]
現在の環境の名前もしくは番号。
これは文字列で値を保持するレジスタです。
.TP
.B \en[.fam]
現在のフォントファミリ。
これは文字列で値を保持するレジスタです。
.TP
.B \en[.fp]
次のフリーフォント位置の数を表します。
.TP
.B \en[.g]
常に 1 です。
マクロ中で GNU troff 下で動作しているかどうかを判定するには、この値を
使用すること。
.TP
.B \en[.hla]
.B hla
リクエストにより設定された現在のハイフネーション言語。
.TP
.B \en[.hlc]
連続してハイフネーション処理した行数。
.TP
.B \en[.hlm]
連続してハイフネーション処理して良い最大値。
この値は、
.B hlm
リクエストで設定されます。
.TP
.B \en[.hy]
現在のハイフネーションフラグ (
.B hy
リクエストにて設定されます)。
.TP
.B \en[.hym]
現在のハイフネーションマージン (
.B hym
リクエストにて設定されます)。
.TP
.B \en[.hys]
現在のハイフネーション空白 (
.B hys
リクエストにて設定されます)。
.TP
.B \en[.in]
現在の出力行に適用されているインデント。
.TP
.B \en[.int]
直前の出力行が割り込まれた場合に正の値に設定されます (つまり
.IR \ec
を含んでいる場合です)。
.TP
.B \en[.kern]
文字ペア間カーニングが有効なら
.B 1、
そうでないなら
.B 0
です。
.TP
.B \en[.lg]
現在のリガチャモードを表します (
.B lg
リクエストにて設定されます)。
.TP
.B \en[.linetabs]
現在のライン-タブモード (
.B linetabs
リクエストで設定された)。
.TP
.B \en[.ll]
現在の出力行に適用する行の長さ。
.TP
.B \en[.lt]
.B lt
リクエストにより設定されたタイトル長。
.TP
.B \en[.ne]
最後にトラップを起こした
.B ne
リクエストに必要だった空白の量。
.B \en[.trunc]
レジスタとともに使用します。
.TP
.B \en[.pn]
次のページ番号:
.B pn
リクエストにて設定されるか、現在のページ番号に 1 を加えたものです。
.TP
.B \en[.ps]
スケールドポイント単位で表した現在のポイントサイズです。
.TP
.B \en[.psr]
スケールドポイント単位で表した最後にリクエストされたポイントサイズです。
.TP
.B \en[.rj]
右揃えすべき行数。
.B rj
リクエストにより設定されます。
.TP
.B \en[.sr]
最後にリクエストされた10進数分数ポイントで表すポイントサイズ。
これは文字列で値を保持するレジスタです。
.TP
.B \en[.tabs]
現在のタブ設定の文字列表記であり、
.B ta
リクエストの引数としてそのまま利用可能です。
.TP
.B \en[.trunc]
最後に発生した垂直位置トラップにより縮められた垂直空白の量。
トラップが
.B ne
リクエストにて生じた場合、
.B ne
リクエストにより垂直位置位置の移動分は差し引かれます。
言い替えるなら、
トラップが発生した場所で、トラップがなかったとした場合の垂直位置と、
実際の垂直位置との差を表します。
.B \en[.ne]
レジスタとともに使用すると効果があります。
.TP
.B \en[.ss]
.TQ
.B \en[.sss]
.B ss
リクエストの最初の引数および 2 番目の引数により設定された値を与えます。
.TP
.B \en[.vpt]
垂直位置トラップが有効の場合 1、そうでない場合は 0 です。
.TP
.B \en[.warn]
現在有効となっている警告に関連づけられている数の和です。
警告に関連づけられている数字のリストは`警告'節に記載されています。
.TP
.B \en[.x]
メジャーバージョン番号。
例えばバージョン番号が
.B 1.03
の場合、
.B \en[.x]
は
.BR 1
です。
.TP
.B \en[.y]
マイナバージョン番号。
例えばバージョン番号が
.B 1.03
の場合、
.B \en[.y]
は
.BR 03
です。
.TP
.B \en[.Y]
groff のバージョン番号。
.TP
.B \en[llx]
.TQ
.B \en[lly]
.TQ
.B \en[urx]
.TQ
.B \en[ury]
これらの 4 個のレジスタは、
.B \&.psbb
リクエストによって設定され、指定された PostScript イメージに対する
(PostScript 単位での) バウンディングボックス情報を保持します。
.LP
以下の読み書き可能レジスタは
.B \ew
エスケープシーケンスで設定されます:
.TP
.B \en[rst]
.TQ
.B \en[rsb]
.BR st ,
.B sb
レジスタと同様ですが、文字の高さと深さも考慮に入れます。
.TP
.B \en[ssc]
最後の文字から下付き文字までに加えられる水平空白の量。
負も取り得ます。
.TP
.B \en[skw]
.B \ew
引数における最後の文字の中央からどれほど右にずれて、
ローマンフォントのアクセントの中央がその文字上に配置されるかを表します。
.LP
他に利用可能な読み書き可能の数値レジスタとして以下があります:
.TP
.B \en[c.]
現在の入力行番号。
.B \en[.c]
はこのレジスタの別名であり、読み出し専用です。
.TP
.B \en[hp]
入力行での現在の水平位置です。
.TP
.B \en[systat]
.B sy
リクエストにより
最後に実行された system() の戻り値。
.TP
.B \en[slimit]
0 より大きい場合、入力スタックの最大オブジェクト数を表します。
0 以下の場合、入力スタック上のオブジェクト数に制限はありません。
制限が無い場合、仮想記憶を使い果たすまで再帰が続くことがあります。
.TP
.B \en[year]
現在の年。
伝統的な
.B troff
数値レジスタ
.B \en[yr]
は、現在の年から 1900 を減じた値であることに注意してください。
.
.SS その他
.
.B troff
は、(読み書き用) 文字列ベースのレジスタ
.BR \e*(.T
を前もって定義しており、これには
.B -T
コマンドラインオプションに与えられた引数、
すなわち現在の出力デバイスを保持しています (例えば
.I latin1
や
.I ascii
)。
これは、(読み込み専用の) 数値レジスタ
.B \en[.T]
が、
.B troff
が
.B -T
コマンドラインオプション付で呼び出されたときに 1 に定義され、
そうでないときに 0 に定義されるのとは同じではありません。
この動作は、UNIX troff とは異なります。
.LP
.SM DESC
ファイルに記述されていないフォントは、
参照された時点で自動的に次の利用可能なフォント位置にマウントされます。
フォントを明示的に
.B fp
リクエストにて未使用のフォント位置にマウントする場合、
最初の未使用のフォント位置にマウントしなければなりません。
この位置は
.B \en[.fp]
レジスタにて参照できます;
しかしながら、
.B troff
はこれを厳密には強いません。
現在使用されている位置よりも
多大に大きくずれる位置にマウントされることは許されません。
.LP
文字列の挿入は既に存在するマクロ引数を隠しはしません。
それゆえマクロ中で
.IP
.BI . xx\  \e\e$@
.LP
をより効率良く行うためには、
.IP
.BI \e\e*[ xx ]\e\e
.LP
とします。
.LP
フォント記述ファイルに文字ペア間カーニング情報が含まれる場合、
このフォントから出力される文字はカーニングされます。
.B \e&
を 2 つの文字間に置くことで、その文字間のカーニングを禁止できます。
.LP
条件において文字列を比較する場合、
最初のデリミタと異なる入力レベルにおいて出現する文字は
2 番目 3 番目のデリミタとして認識されません。
これは
.B tl
リクエストにも当てはまります。
.B \ew
エスケープシーケンスにおいて、
最初のデリミタ文字とは異なる入力レベルにある閉じる方のデリミタ文字は、
認識されません。
マクロ引数をデコードする時に、
マクロ引数がダブルクォートで区切られる場合、
最初のデリミタ文字とは異なる入力レベルにある文字は、
閉じる方のデリミタ文字とは認識されません。
.B \e$@
の実装では、引数を括るダブルクォートは同じレベルとなることが保証されています。
このレベルは引数の入力レベルとは異なります。
長いエスケープ名中では
.B ]
は
開く方の
.BR ]
の入力レベルと同じである場合を除き、
閉じる方のデリミタとは認識されません。
互換モードでは入力レベルに対する注意は払われません。
.LP
条件が増えました:
.TP
.BI .if\ r xxx
数値レジスタ
.IR xxx
が存在する場合に真となります。
.TP
.BI .if\ d xxx
文字列/マクロ/転換/リクエストに
.IR xxx
という名前のものがあった場合に真になります。
.TP
.BI .if\ c ch
文字
.IR ch
が使用可能な場合に真になります;
.I ch
は
.SM ASCII
文字でもスペシャル文字
.BI \e( xx \fR,
.BI \e[ xxx ]\fR
でもかまいません;
.I ch
が
.B char
リクエストにて定義された場合にも真になります。
.LP
.B tr
リクエストは文字を
.BR \e~
にマップできるようになりました。
.
.SS 警告
.
.B troff
が出力する警告は以下のカテゴリに分類されます。
各警告に関連する名前は
.BI \-w ,
.B \-W
オプションで使用可能です;
また番号は、
.B warn
リクエストおよび
.B .warn
レジスタが使用します。
.nr x \w'\fBright-brace'+1n+\w'0000'u
.ta \nxuR
.TP \nxu+3n
.BR char \t1
存在しない文字。
デフォルトで有効です。
.TP
.BR number \t2
不正な数式。
デフォルトで有効です。
.TP
.BR break \t4
行詰めモードにて、行を分割できなかったため、
行の長さよりも短くなってしまいました。
デフォルトで有効です。
.TP
.BR delim \t8
閉じる方のデリミタが無いもしくはマッチしません。
.TP
.BR el \t16
対応する
.B ie
リクエストの無い、
.B el
リクエスト。
.TP
.BR scale \t32
意味の無いスケーリングインジゲータ。
.TP
.BR range \t64
引数が範囲を越えています。
.TP
.BR syntax \t128
数式中の曖昧な文法。
.TP
.BR di \t256
現在転換が無いにもかかわらず、
引数無しで
.BR di ,
.B da
を使用した。
.TP
.BR mac \t512
未定義の文字列、マクロ、転換を使用した。
未定義の文字列、マクロ、転換を使用した場合、
文字列が自動的に空に定義されます。
このため各名前に対する警告は大概最大 1 回だけです。
.TP
.BR reg \t1024
未定義の数値レジスタを使用した。
未定義の数値レジスタを使用した場合、
レジスタが自動的に値 0 に定義されます。
定義は自動的に値 0 にて行われます。
このため各名前に対する警告は大概最大 1 回だけです。
.TP
.BR tab \t2048
タブ文字の使用が不適切でした。
数字が期待される場所でタブを使用したか、
クォートされいてないマクロの引数中でタブ文字を使用したかの
どちらかでしょう。
.TP
.BR right-brace \t4096
数字が期待される場所で
.B \e}
が使用された。
.TP
.BR missing \t8192
非オプション引数が足りないリクエスト。
.TP
.BR input \t16384
不正な入力文字。
.TP
.BR escape \t32768
認識できないエスケープシーケンス。
認識できないエスケープシーケンスに会った場合は、
そのエスケープ文字は無視されます。
.TP
.BR space \t65536
リクエストもしくはマクロとそれらの引数の間に空白がありません。
この警告は、2 文字より長い未定義の文字に会った場合で
最初の 2 文字が定義された名前のときに起こり得ます。
このときリクエストもしくはマクロは起動されません。
この警告が発せられる時、どのようなマクロも自動的には定義されません。
デフォルトで有効です。
この警告は互換モードでは起こり得ません。
.TP
.BR font \t131072
存在しないフォント。
デフォルトで有効です。
.TP
.BR ig \t262144
.B ig
リクエストにより無視されたテキストの中にある不正なエスケープ。
これらは無視されたテキストの中では発生しないエラーです。
.LP
警告のグループを指定する名前もあります:
.TP
.B all
すべて、ただし
.BR di ,
.BR mac ,
.BR reg
を除きます。
伝統的なマクロパッケージを使用する際に有用な警告の全てをカバーする
ように導入されました。
.TP
.B w
全ての警告。
.
.SS 非互換性
.
.LP
長い名前を使用すると非互換性の問題が起こる場合があります。
UNIX troff は
.IP
.B
\&.dsabcd
.LP
を文字列
.B ab
の定義であり、その内容が
.BR cd
であると解釈します。
通常、GNU troff はこれをマクロ
.BR dsabcd
の呼び出しであると解釈します。
また、UNIX troff は
.B \e*[
と
.B \en[
を、文字列/数値レジスタ
.BR [
の参照であると解釈します。
しかし、GNU troff では、これは通常長い名前の始まりであると解釈します。
.I 互換モード
では
GNU troff はこれらを伝統的な方法で解釈します。
また長い名前は認識されません。
互換モードは
.B \-C
コマンドラインオプションにて有効に出来、
.B cp
リクエストにて有効無効の切替えが出来ます。
互換モードが有効の場合には数値レジスタ
.B \en[.C]
が 1 となり、そうでない場合は 0 となります。
.LP
GNU troff は文字列/マクロ/展開/数値レジスタ/フォント/環境の名前において、
エスケープシーケンス
.BR \\e\e|\e^\e&\e}\e{\e (space) \e'\e`\e-\e_\e!\e%\ec
を使用することを許しません; 一方 UNIX troff では出来ます。
名前中でのこれらのエスケープシーケンスの使用を避けるには、
.B \eA
エスケープシーケンスが役に立つかもしれません。
.LP
分数のポイントサイズは顕著な非互換性を引き起こします。
UNIX troff では
.B ps
リクエストはスケールインジケータを無視するため
.IP
.B .ps\ 10u
.LP
はポイントサイズを 10 ポイントに設定しますが、
GNU troff ではポイントサイズを 10 スケールドポイントに設定します。
.LP
GNU torff では、
フォーマットされていない入力文字と
フォーマットされた出力文字との間に基本的な違いがあります。
出力文字がどのように出力されるのかに影響することがらは全て、
その文字に記録されています。
一度出力文字が構成されたならば、
その出力文字はその後に実行されるリクエストの影響を受けません。
このリクエストには
.BR bd ,
.BR cs ,
.BR tkf ,
.BR tr ,
.B fp
リクエストが含まれます。
通常、
出力文字が入力文字から構成されるのは、
出力文字が現在の出力行に追加される直前です。
マクロ/転換/文字列は実際同じタイプのオブジェクトです;
すなわち入力文字のリストと出力の文字の任意の組み合わせのリストを保持しています。
マクロ処理においては出力文字は入力文字のようには振舞いません;
出力文字は、その元の入力文字が持っていた特殊なプロパティを
一切継承しません。
例えば、
.IP
.nf
.ft B
\&.di x
\e\e\e\e
\&.br
\&.di
\&.x
.ft
.fi
.LP
は GNU groff では
.B \e\e
を表示します;
各
.BR \e
のペアは単一の出力
.B \e
になり、出力結果の複数の
.BR \e
は、再読み込みの時にはエスケープ文字としては解釈されません。
UNIX troff では再読み込みの時にはエスケープ文字として解釈されるため、
最終的な結果は単一の
.BR \e
となります。
表示可能な
.B \e
を得る正しい方法は、
.B \ee
エスケープシーケンスを使用することです:
このエスケープシーケンスは、
転換の中であるか否にかかわらず、
常に現在のエスケープ文字実体を一つ表示します;
これは GNU troff でも UNIX troff でも動作します。
転換中に、
転換が再読み込みされた時に解釈されるような
エスケープシーケンスを埋め込みたい場合、
伝統的な
.B \e!\&
透過出力機構を使用するか、これが適当でないなら新しい
.B \e?\&
エスケープシーケンスを使用して下さい。
.
.
.SH 環境変数
.
.
.TP
.SM
.B GROFF_TMAC_PATH
.B \&:
で区切られた、マクロファイルを検索すべきディレクトリ名のリスト。
.B troff
は、それらの前に
.B \-M
オプションで指定されたディレクトリを調べ、
そららの後で標準のディレクトリ (安全でないモードでは
現在のディレクトリ、ホームディレクトリ、
.BR /usr/share/tmac/ ,
.BR /usr/share/tmac/ ,
.BR /usr/share/tmac/ )
を調べます。
.TP
.SM
.B GROFF_TYPESETTER
デフォルトの出力デバイス
.TP
.SM
.B GROFF_FONT_PATH
.B \&:
で区切られた、フォントを検索すべきディレクトリ名のリスト。
troff は、まず -F オプションで指定されたディレクトリを検索し、次に本環
境変数で指定されたディレクトリ、最後に標準のディレクトリ
(
.B /usr/share/groff_font
) を検索します。
.
.
.SH 関連ファイル
.
.
.Tp \w'/usr/share/groff_font/devname/DESC'u+3n
.B /usr/share/tmac/troffrc
初期化ファイル (他のマクロパッケージの前に呼び出されます)
.TP
.B /usr/share/tmac/troffrc-end
初期化ファイル (他のマクロパッケージの後に呼び出されます)
.TP
.BI /usr/share/tmac/ name .tmac
.TQ
.BI /usr/share/tmac/tmac. name
マクロファイル
.TP
.BI /usr/share/groff_font/dev name /DESC
デバイス
.I name
のデバイス記述ファイル
.TP
.BI /usr/share/groff_font/dev name / F
デバイス
.I name
におけるフォント
.I F
のフォント記述ファイル
.LP
.B troffrc
と
.B troffrc-end
は、セキュリティのためデフォルトで現在のディレクトリと
ホームディレクトリのいずれでも検索されない事に注意してください (
.B \-U
オプションが指定されていても)。
必要な場合は
.B \-M
コマンドラインオプションか
.B GROFF_TMAC_PATH
環境変数を使ってそれらのディレクトリを検索パスに加えられます。
.
.
.SH 関連項目
.
.
.BR groff (1),
.BR tbl (1),
.BR pic (1),
.BR eqn (1),
.BR refer (1),
.BR soelim (1),
.BR grn (1),
.BR grops (1),
.BR grodvi (1),
.BR grotty (1),
.BR grohtml (1),
.BR grolj4 (1),
.BR groff_font (5),
.BR groff_out (5),
.BR groff_char (7)
.\" Kazuo HORIKAWA <horikawa@jp.freebsd.org>
.\" USAGE から Incompatibilities まで訳出 (Dec 23, 1996)
.\" Norihiro Kumagai <kuma@slab.tnr.sharp.co.jp>
.\" 訳チェック (Jan 5, 1997)
