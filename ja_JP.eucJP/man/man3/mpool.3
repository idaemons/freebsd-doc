.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)mpool.3	8.1 (Berkeley) 6/4/93
.\"	%Id: mpool.3,v 1.4 1997/02/22 14:57:51 peter Exp %
.\"
.TH MPOOL 3 "June 4, 1993"
.UC 7
.SH 名称
mpool \- 共有メモリバッファプール
.SH 書式
.nf
.ft B
#include <db.h>
#include <mpool.h>

MPOOL *
mpool_open (DBT *key, int fd, pgno_t pagesize, pgno_t maxcache);

void
mpool_filter (MPOOL *mp, void (*pgin)(void *, pgno_t, void *),
.ti +5
void (*pgout)(void *, pgno_t, void *), void *pgcookie);

void *
mpool_new (MPOOL *mp, pgno_t *pgnoaddr);

void *
mpool_get (MPOOL *mp, pgno_t pgno, u_int flags);

int
mpool_put (MPOOL *mp, void *pgaddr, u_int flags);

int
mpool_sync (MPOOL *mp);

int
mpool_close (MPOOL *mp);
.ft R
.fi
.SH 解説
.IR Mpool
は、ページを基準にした、ファイルのバッファ管理を行なう
ライブラリインタフェースです。バッファはプロセス間で共有できます。
.PP
関数
.I mpool_open
はメモリプールを初期化します。引数
.I key
は、バッファ
を共有する複数のプロセス間でネゴシエートするために使われるバイトストリングです。
ファイルバッファが共有メモリにマップされた場合は、同じキーを
使用しているすべてのプロセスがバッファを共有します。
.I key
がヌルである場合、バッファはプライベートメモリにマップされます。
引数
.I fd
は、基礎となる
ファイルのファイル記述子で、検索可能になっている必要があります。
.I key
がヌルではなく、すでにマップされているファイルと一致する場合、引数
.I fd
は無視されます。
.PP
引数
.I pagesize
は、ファイルを分割するページのサイズ (バイト単位) です。引数
.I maxcach
は、一度にキャッシュする、基礎となるファイルの最大ページ数です。
この値は、ファイルのバッファを共有するプロセス数とは
関係ありませんが、ファイルを共有するプロセスが指定した最大値になります。
.PP
関数
.I mpool_filter
は、ページの透過的入出力処理を行ないます。
.I pgin
関数が指定されると、保存ファイルからメモリプールにバッファを
読み込むたびに呼び出されます。
.I pgout
関数が指定されると、保存ファイルにバッファが書き込まれるたびに
呼び出されます。どちらの関数も、
.I pgcookie
ポインタ、ページ番号、読み書きを行なうページのポインタで呼び出されます。
.PP
関数
.I mpool_new
は、MPOOL ポインタとアドレスを引数として取ります。
新しいページを割り振ることができる場合は、ページのポインタが返され、ページ番号が
.I pgnoaddr
アドレスに保存されます。割り振ることができない場合はヌルが返され、
.I errno
が設定されます。
.PP
関数
.I mpool_get
は、MPOOL ポインタとページ番号を引数として取ります。
ページが存在する場合は、ページのポインタが返されます。
ページが存在しない場合はヌルが返され、
.I errno
がセットされます。フラグパラメータは、今のところ使用されていません。
.PP
関数
.I mpool_put
は、
.I pgaddr
が参照するページを解放します。
.I pgaddr
は、あらかじめ
.I mpool_get
または
.I mpool_new
が返したアドレスでなければなりません。フラグの値は
以下の値の論理和によって指定されます。
.TP
MPOOL_DIRTY ページが修正されており、保存ファイルに書き込む必要があります。
.PP
関数
.I mpool_put
は、正常終了時には 0 を返し、エラーのときは -1 を返します。
.PP
関数
.I mpool_sync
は、MPOOL ポインタに対して、変更されたすべてのページを
保存ファイルに書き込みます。
.I mpool_sync
は、正常終了時には 0 を返し、エラーのときは -1 を返します。
.PP
関数
.I mpool_close
は、メモリプールクッキーに対して割り振られたメモリを解放します。
修正されたページは、保存ファイルに書き込まれません。
.I mpool_close
は、正常終了時には 0 を返し、エラーのときは -1 を返します。
.SH エラー
関数
.I mpool_open
でエラーが発生すると、ライブラリルーチン
.IR malloc (3)
で指定されたエラーの
.I errno
がセットされます。
.PP
関数
.I mpool_get
でエラーが発生すると、以下の
.I errno
がセットされます。
.TP 15
[EINVAL]
要求されたレコードが存在しない。
.PP
関数
.I mpool_new
と
.I mpool_get
でエラーが発生すると、ライブラリルーチン
.IR read (2) ,
.IR write (2) ,
.IR malloc (3)
で指定されたエラーの
.I errno
がセットされます。
.PP
関数
.I mpool_sync
でエラーが発生すると、ライブラリルーチン
.IR write (2)
で指定されたエラーの
.I errno
がセットされます。
.PP
関数
.I mpool_close
でエラーが発生すると、ライブラリルーチン
.IR free(3)
で
指定したエラーの
.I errno
がセットされます。
.SH 関連項目
.IR dbopen (3),
.IR btree (3),
.IR hash (3),
.IR recno (3)
