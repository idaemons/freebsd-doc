This will be the location of the DocBook version of the FreeBSD Handbook,
which will eventually obsolete the version currently in doc/handbook/.

Interested parties should examine

  <URL:http://www.nothing-going-on.demon.co.uk/FreeBSD/docbook-migration.html>

and get in touch with Nik Clayton (either to nik@FreeBSD.ORG or via the
FreeBSD-doc mailing list) if they have specific questions.

   ------------------------------------------------------------------------
    The Handbook is midway through the conversion process. It will almost
		certainly not convert to other formats cleanly
   ------------------------------------------------------------------------


				   Actions

  This list explains what's been done so far, so the Japanese team can
  track my changes. All actions took place on freefall.

  1. Initial conversion to DocBook

     Checked out a copy of the doc repository to ~/cvs/. Then used 2 scripts
     to convert the handbook to its initial DocBook format. The 2 scripts are
     2docbook.sh and entity-cdata.pl, both of which can be found in ~nik/bin/.

     2docbook.sh calls entity-cdata.pl as necessary.

         % cd ~/cvs/doc/handbook
	 % 2docbook.sh

     This created handbook-db.sgml in ~/cvs/doc/handbook. This file contains
     syntactically valid (but quite ugly) SGML. This file was then moved to
     the doc/en/handbook directory and renamed to handbook.sgml. The
     conversion process left a few spurious changes in the old handbook files
     which I don't want to commit, so I removed them and updated the
     repository.

     The new file was then committed.

         % mv handbook-db.sgml ~/cvs/doc/en/handbook/handbook.sgml
	 % rm *.sgml
	 % cvs update
	 % cd ~/cvs/doc/en/handbook
	 % cvs add handbook.sgml
	 % cvs commit

  2. handbook.sgml was loaded into XEmacs 20.30 (straight from the ports
     collection) and sgml-mode was turned on. My .emacs file contains the
     following hook:

         (add-hook 'sgml-mode-hook
              (function
               (lambda()
                 (setq sgml-omittag nil)
                 (setq sgml-indent-data t))))

     This configures psgml to not omit any tags that the DTD lists as
     omittable, and to indent data in the same way that markup is indented.

     The following function was pasted into the *scratch* buffer, and then
     "M-x eval-current-buffer" was run.

         (defun sgml-indent-buffer
            "Indents the current buffer, one line at a time"
            (interactive "*")
            (save-excursion
              (goto-char (point-min))
              (while (= (forward-line 1) 0)
                (sgml-indent-or-tab))))

     In the handbook.sgml buffer, the point was placed on the first character
     of the first line, and "M-x sgml-indent-buffer" was run.

     The changes were then committed.
