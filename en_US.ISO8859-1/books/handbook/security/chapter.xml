<?xml version="1.0" encoding="iso-8859-1"?>
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="security">
  <info><title>Security</title>
    <authorgroup>
      <author>
	<personname>
	  <firstname>Tom</firstname>
	  <surname>Rhodes</surname>
	</personname>
	<contrib>Rewritten by </contrib>
      </author>
    </authorgroup>
  </info>

  

  <indexterm><primary>security</primary></indexterm>

  <sect1 xml:id="security-synopsis">
    <title>Synopsis</title>

    <para>Security, whether physical or virtual, is a topic
      so broad that an entire industry has grown up around it.
      Hundreds of standard practices have been authored about
      how to secure systems and networks, and as a user of &os;,
      understanding how to protect against attacks and intruders
      is a must.</para>

    <para>In this chapter, several fundamentals and techniques will
      be discussed.  The &os; system comes with multiple layers of
      security, and many more third party utilities may be added to
      enhance security.</para>

    <para>After reading this chapter, you will know:</para>

    <itemizedlist>
      <listitem>
	<para>Basic &os; system security concepts.</para>
      </listitem>

      <listitem>
	<para>The various crypt mechanisms available in &os;.</para>
      </listitem>

      <listitem>
	<para>How to set up one-time password authentication.</para>
      </listitem>

      <listitem>
	<para>How to configure <acronym>TCP</acronym> Wrappers for use
	  with &man.inetd.8;.</para>
      </listitem>

      <listitem>
	<para>How to set up <application>Kerberos</application> on
	  &os;.</para>
      </listitem>

      <listitem>
	<para>How to configure IPsec and create a
	  <acronym>VPN</acronym>.</para>
      </listitem>

      <listitem>
	<para>How to configure and use
	  <application>OpenSSH</application> on &os;.</para>
      </listitem>

      <listitem>
	<para>How to use filesystem <acronym>ACL</acronym>s.</para>
      </listitem>

      <listitem>
	<para>How to use <application>portaudit</application> to
	  audit third party software packages installed from the
	  Ports Collection.</para>
      </listitem>

      <listitem>
	<para>How to utilize &os; security advisories.</para>
      </listitem>

      <listitem>
	<para>What Process Accounting is and how to enable it on
	  &os;.</para>
      </listitem>

      <listitem>
	<para>Understand the resource limits database and
	  how to utilize it to control user resources.</para>
      </listitem>
    </itemizedlist>

    <para>Before reading this chapter, you should:</para>

    <itemizedlist>
      <listitem>
	<para>Understand basic &os; and Internet concepts.</para>
      </listitem>
    </itemizedlist>

    <para>Additional security topics are covered elsewhere in this
      Handbook.  For example, Mandatory Access Control is discussed in
      <xref linkend="mac"/> and Internet firewalls are discussed in
      <xref linkend="firewalls"/>.</para>
  </sect1>

  <sect1 xml:id="security-intro">
    <title>Introduction</title>

    <para>Security is everyone's responsibility.  A weak entry point
      in any system could allow intruders to gain access to critical
      information and cause havoc on an entire network.  In most
      security training, they discuss the security triad
      <acronym>CIA</acronym> which stands for the confidentiality,
      integrity, and availability of information systems.</para>

    <para>The <acronym>CIA</acronym> triad is a bedrock concept of
      computer security, customers and end users expect privacy
      of their data.  They expect orders they place to not be changed
      or their information altered behind the scenes. They also expect
      access to information at all times.  Together they make up the
      confidentiality, integrity, and availability of the
      system.</para>

    <para>To protect <acronym>CIA</acronym>, security professionals
      apply a defense in depth strategy.  The idea of defense in
      depth is to add several layers of security to prevent one single
      layer failing and the entire security system collapsing.  A
      systems administrator cannot simply turn on a firewall and
      consider the network or system secure, they must audit accounts,
      check the integrity of binaries, and ensure malicious tools are
      not installed.  To do this, they must understand what the
      threats are.</para>

    <sect2 xml:id="security-threats">
      <title>Threats</title>

      <para>What is a threat as pertaining to computer security?  For
	years it was assumed that threats are remote attackers, people
	whom will attempt to access the system without permission, from
	a remote location.  In today's world, this definition has been
	expanded to include employees, malicious software, rogue
	network devices, natural disasters, security vulnerabilities,
	and even competing corporations.</para>

      <para>Every day thousands of systems and networks are attacked and
	several hundred are accessed without permission.  Sometimes
	by simple accident, others by remote attackers, and in some
	cases, corporate espionage or former employees.  As a system
	user, it is important to prepare for and admit when a mistake
	has lead to a security breach and report possible issues to
	the security team.  As an administrator, it is important to
	know of the threats and be prepared to mitigate them.</para>
      </sect2>

    <sect2 xml:id="security-groundup">
      <title>A Ground Up Approach</title>

      <para>In security, it is sometimes best to take a ground up
	approach, whereas the administrator begins with the basic
	accounts, system configuration, and then begins to work with
	third party utilities and work up to the network layer.  It
	is in these latter configuration aspects that system policy
	and procedures should take place.</para>

      <para>Many places of business already have a security policy that
	covers the configuration technology devices in use.  They
	should contain, at minimal, the security configuration of end
	user workstations and desktops, mobile devices such as phones
	and laptops, and both production and development servers.  In
	many cases, when applying computer security, standard operating
	procedures (<acronym>SOP</acronym>s) already exist.  When in
	doubt, ask the security team.</para>
    </sect2>

    <sect2 xml:id="security-accounts">
      <title>System and User Accounts</title>

      <para>In securing a system, the best starting point is auditing
	accounts.  Ensure that the root account has a strong password,
	disable accounts that do not need shell access, for users who
	need to augment their privileges, install the
	<package>security/sudo</package> and only allow them access
	to applications they need.  The root user password should
	never be shared.</para>

      <para>To deny access to accounts, two methods exist.  The first
	one is to lock an account, for example, to lock the toor
	account:</para>

      <screen>&prompt.root; <userinput>pw lock toor</userinput></screen>

      <para>This command will change the account from this
	<quote>toor:*:0:0::0:0:Bourne-again Superuser:/root:</quote>
	to <quote>toor:*LOCKED**:0:0::0:0:Bourne-again
	Superuser:/root:</quote></para>

      <para>In some cases, this is not possible, perhaps because of
	an additional service.  In those cases, login access
	could be prevented by changing the shell to /sbin/nologin
	like in this example:</para>

      <screen>&prompt.root; <userinput>chsh -s /usr/sbin/nologin toor</userinput></screen>

      <note>
        <para>Only super users are able to change the shell for
	  other users.  Attempting to perform this as a regular user
	  will fail.</para>
      </note>

      <para>The account structure will now look like this, with
	the <quote>nologin</quote> shell as the last entry:</para>

      <programlisting>toor:*:0:0::0:0:Bourne-again Superuser:/root:/usr/sbin/nologin</programlisting>

      <para>The <filename>/usr/sbin/nologin</filename> shell will block
	the &man.login.1; command from assigning a shell to this
	user.</para>
      </sect2>

    <sect2 xml:id="security-sudo">
      <title>Permitted Account Escalation</title>

      <para>In some cases, system administration access needs to
	be shared with other users.  &os; has two methods to
	handle this.  The first one, which is not recommended,
	is a shared root password and adding users to the
	<systemitem class="groupname">wheel</systemitem> group.
	To achieve this, edit the <filename>/etc/group</filename>
	and add the user to the end of the first group.  This
	user must be separated by a comma character.</para>

      <para>The correct way to permit this privilege escalation is
	using the <package>security/sudo</package> port which will
	provide additional auditing, more fine grained user
	control, and even lock users into running only single,
	privileged commands such as &man.service.8;</para>

      <para>After installation, edit the
	<filename>/usr/local/etc/sudoers</filename> file by using
	the <command>visudo</command> interface.  In this example,
	a new webadmin group will be added, the user
	<systemitem class="username">trhodes</systemitem> to that
	group, and then give the user
	access to restart <package>apache24</package>, the following
	procedure may be followed:</para>

      <screen>&prompt.root; <userinput>pw groupadd webadmin -M trhodes -g 6000</userinput></screen>

      <screen>&prompt.root; <userinput>visudo</userinput></screen>

      <programlisting>%webadmin ALL=(ALL) /usr/sbin/service apache24 *</programlisting>

      <para>The <package>security/sudo</package> provides an
	invaluable resource when it comes to local user management.
	It is also possible to not require passwords and just default
	to the &man.ssh.1; key method.  To disable password login
	via &man.sshd.8; and only use local passwords for
	<command>sudo</command>, see <xref linkend="openssh"/>.</para>
    </sect2>

    <sect2 xml:id="security-passwords">
      <title>Passwords</title>

      <para>Passwords are a necessary evil of technology.  In the cases
	they must be used, not only should the password be extremely
	complex, but also use a powerful hash mechanism to protect it.
	At the time of this writing, &os; supports
	<acronym>DES</acronym>, <acronym>MD</acronym>5, Blowfish,
	<acronym>SHA</acronym>256, and <acronym>SHA</acronym>512 in
	the <function>crypt()</function> library.  The default is
	<acronym>SHA</acronym>512 and should not be changed backwards;
	however, some users like to use the Blowfish option.  Each
	mechanism, aside from <acronym>DES</acronym>, has a unique
	beginning to designate the hash mechanism assigned.  For the
	<acronym>MD</acronym>5 mechanism, the symbol is a
	<quote>$</quote> sign.  For the <acronym>SHA</acronym>256 or
	<acronym>SHA</acronym>512, the symbol is <quote>$6$</quote>
	and Blowfish uses <quote>$2a$</quote>.  Any weaker passwords
	should be re-hashed by asking the user to run &man.passwd.1;
	during their next login.</para>

      <note>
	<para>At the time of this writing, Blowfish is not part of
	  <acronym>AES</acronym> nor is it considered compliant
	  with any <acronym>FIPS</acronym> (Federal Information
	  Processing Standards) standard and its use may not be
	  permitted in some environments.</para>
      </note>

      <para>For any system connected to the network, two factor
	authentication should be used.  This is normally considered
	something you have and something you know.  With
	<application>OpenSSH</application> being part of the &os;
	base system and the use of ssh-keys being available for some
	time, all network logins should avoid the use of passwords in
	exchange for this two factor authentication method.  For
	more information see the <xref linkend="openssh"/> section of
	the handbook.  Kerberose users may need to make additional
	changes to implement <application>OpenSSH</application> in
	their network.</para>

      <sect3 xml:id="security-pwpolicy">
        <title>Password Policy and Enforcement</title>

	<para>Enforcing a strong password policy for local accounts
	  is a fundamental aspect of local system security and policy.
	  During password enforcement, things like password length,
	  password strength, and the likelihood the password could be
	  guessed or cracked can be implemented through the system
	  &man.pam.8; modules.</para>

	<para>The <acronym>PAM</acronym> system, or Pluggable
	  Authentication Modules, will enforce the password policy by
	  setting a minimum and maximum password length.  They will
	  also enforce mixed characters.  In particular the
	  &man.pam.passwdqc.8; will be discussed.</para>

	<para>To proceed, open the
	  <filename>/etc/pam.d/passwd</filename> file and add the
	  following line to the file.</para>

	<programlisting>password        requisite       pam_passwdqc.so         min=disabled,disabled,disabled,12,10 similar=deny retry=3 enforce=users</programlisting>

	<para>There is already a commented out line for this module and
	  it may be altered to the version above.  This statement
	  basically sets several requirements.  First, a minimal
	  password length is disabled, allowing for a password of any
	  length.  Using only two character classes are disabled,
	  which means that all classes, including special, will be
	  considered valid.  The next entry requires that passwords
	  be twelve characters in length with characters from three
	  classes or ten byte (or more) passwords with characters from
	  four character classes.  This also denies passwords that
	  are similar to the previously used password.  A user is
	  provided three opportunities to enter a new password and
	  finally only enforce this requirement on users.  That is,
	  exempt super users.  This statement is probably confusing
	  so reading the manual page is highly recommended, in
	  particular to understand what character classes are.</para>

	<para>After this change is made and the file saved, any user
          changing their password will see a message similar to the
	  following.  This message might also clear up some confusion
	  about the configuration.</para>

	<screen>&prompt.user; <userinput>passwd</userinput></screen>

	<programlisting>Changing local password for trhodes
Old Password:

You can now choose the new password.
A valid password should be a mix of upper and lower case letters,
digits and other characters.  You can use a 12 character long
password with characters from at least 3 of these 4 classes, or
a 10 character long password containing characters from all the
classes.  Characters that form a common pattern are discarded by
the check.
Alternatively, if noone else can see your terminal now, you can
pick this as your password: "trait-useful&amp;knob".
Enter new password:</programlisting>

	<para>If a weak password is entered, it will be rejected with
	  a warning and the user will have an opportunity to try
	  again</para>

	<para>In most password policies, a password aging requirement
	  is normally set.  This means that a every password must expire
	  after so many days after it has been set.  To set a password
	  age time in &os;, set the <option>passwordtime</option> in
	  <filename>/etc/login.conf</filename>.  Most users when added
	  to the system just fall into the <option>default</option>
	  default group which is where this variable could be added and
	  the database rebuilt using:</para>

	<screen>&prompt.root; <userinput>cap_mkdb /etc/login.conf</userinput></screen>

	<para>To set the expiration on individual users, provide a day
	  count to &man.pw.8; and a username like:</para>

	<screen>&prompt.root; <userinput>pw usermod -p 30-apr-2014 -n trhodes</userinput></screen>

	<para>As seen here, an expiration date is set in the form of day,
	  month, year.  For more information, see &man.pw.8;</para>
      </sect3>
    </sect2>

    <sect2 xml:id="security-rkhunter">
      <title>Backdoors and Rootkits</title>

      <para>Backdoors and rootkits are only a threat after they have
	been installed.  Once installed, this malicious software will
	normally open up another avenue of entry for an attacker.
	Realistically, once a system has been compromised, and an
	investigation has been performed, it should be erased.  There
	is tremendous risk that even the most prudent security or
	systems engineer will miss something an attacker left
	behind.</para>

      <para>A backdoor or rootkit software does do one thing useful
	for administrators - once detected, it is a sign that a
	compromise happened at some point.  But normally these types
	types of applications are hidden very well.  Tools do exist
	to detect backdoors and rootkits, one of them is
	<package>security/rkhunter</package>.</para>

      <para>After installation the system may be checked using the
	following command which will produce a lot of
	information:</para>

      <screen>&prompt.root; <userinput>rkhunter -c</userinput></screen>

      <para>After the process complete, which will require some manual
	pressing of the <keycap>ENTER</keycap> key, a status message
	will be printed to the screen.  This message will include the
	amount of files checked, suspect files, possible rootkits,
	and more.  During the check, some generic security warnings may
	be produced about hidden files, the
	<application>OpenSSH</application> protocol selection, and
	occasionally known vulnerable versions of installed software.
	These can be handled now or later after a more detailed
	analysis has been performed.</para>

      <para>Every administrator should know what is running on the
	systems they are responsible for.  Using tools like
	<application>rkhunter</application>,
	<application>lsof</application> and native commands such
	as &man.netstat.1; and &man.ps.1; can show a great deal of
	information on the system.  Take notes on what is normal,
	ask questions when something seems out of place and be
	paranoid.  And remember, preventing a compromise is ideal
	but detecting a compromise is a must.</para>
    </sect2>

    <sect2 xml:id="security-ids">
      <title>Binary Verification</title>

      <para>Verification of system files and binaries is important
	because it provides the system administration and security
	team with information about system changes.  In any system,
	no internal command or application should change without
	the system admin team knowing.  A software application that
	monitors the system for changes is called an Intrusion
	Detection System or <acronym>IDS</acronym>.</para>

      <para>&os; provides native support for a basic
	<acronym>IDS</acronym> system.  In fact, as part of the nightly
	&man.periodic.8; security emails will notify an administrator
	of changes.  Since the information is stored locally, there is
	a change a malicious user could modify and <quote>spoof</quote>
	the information.  As such, it is recommended to create a
	separate set of binary signatures and store them on a read
	only, root owned directory or, preferably, off system such
	as a <acronym>USB</acronym> disk or
	<application>rsync</application> server.</para>

      <para>To being, a seed needs to be generated.  This is a numeric
	constant that will be used as to help generate the hash values
	and to check the hash values.  Lacking this seed value will make
	faking or checking the checksum values of files difficult it not
	impossible.  In the following example, the key will be passed
	with the <option>-s</option> flag.  First, generate a set of
	hashes and checksums for <filename>/bin</filename> using the
	following command:</para>

      <screen>&prompt.root; <userinput>mtree -s 3483151339707503 -c -K cksum,sha256digest -p /bin &gt; bin_chksum_mtree</userinput></screen>

      <para>This should have produced something similar to:</para>

      <screen>&prompt.root; mtree: /bin checksum: 3427012225</screen>

      <para>Viewing the <filename>bin_cksum_mtree</filename> file
	should yield output similar to the following as well:</para>

      <programlisting>#          user: root
#       machine: dreadnaught
#          tree: /bin
#          date: Mon Feb  3 10:19:53 2014

# .
/set type=file uid=0 gid=0 mode=0555 nlink=1 flags=none
.               type=dir mode=0755 nlink=2 size=1024 \
                time=1380277977.000000000
    \133        nlink=2 size=11704 time=1380277977.000000000 \
                cksum=484492447 \
                sha256digest=6207490fbdb5ed1904441fbfa941279055c3e24d3a4049aeb45094596400662a
    cat         size=12096 time=1380277975.000000000 cksum=3909216944 \
                sha256digest=65ea347b9418760b247ab10244f47a7ca2a569c9836d77f074e7a306900c1e69
    chflags     size=8168 time=1380277975.000000000 cksum=3949425175 \
                sha256digest=c99eb6fc1c92cac335c08be004a0a5b4c24a0c0ef3712017b12c89a978b2dac3
    chio        size=18520 time=1380277975.000000000 cksum=2208263309 \
                sha256digest=ddf7c8cb92a58750a675328345560d8cc7fe14fb3ccd3690c34954cbe69fc964
    chmod       size=8640 time=1380277975.000000000 cksum=2214429708 \
                sha256digest=a435972263bf814ad8df082c0752aa2a7bdd8b74ff01431ccbd52ed1e490bbe7</programlisting>

      <para>Notice the machine's hostname, the current date and time,
	and the user who executed &man.mtree.8; are all included in
	this report.  There is also a checksum, size, time and
	<acronym>SHA</acronym>256 digest for each binary that was
	found.</para>

      <para>To verify binary signatures, the following command will
	read in the current list of signatures and provide an
	output:</para>

      <screen>&prompt.root; <userinput>mtree -s 3483151339707503 -p /bin &lt; bin_chksum_mtree &gt;&gt; bin_chksum_output</userinput></screen>

      <para>This should produce the same checksum for
	<filename>/bin</filename> that was produced when the command
	was originally ran.  Since no changes occurred in the time these
	commands were ran, the <filename>bin_chksum_output</filename>
	output will be empty.  To simulate a change, change the date
	on the <filename>/bin/cat</filename> file using
	&man.touch.1; and run the verification command again:</para>

      <screen>&prompt.root; <userinput>touch /bin/cat</userinput></screen>
      <screen>&prompt.root; <userinput>mtree -s 3483151339707503 -p /bin &lt; bin_chksum_mtree &gt;&gt; bin_chksum_output</userinput></screen>
      <screen>&prompt.root; <userinput>cat bin_chksum_output</userinput></screen>
      <programlisting>cat changed
	modification time expected Fri Sep 27 06:32:55 2013 found Mon Feb  3 10:28:43 2014</programlisting>

      <para>More advanced <acronym>IDS</acronym> systems exist, such as
	<package>security/aide</package> but in most cases,
	&man.mtree.8; provides the functionality administrators need.
	It is important to keep the seed value and the checksum output
	hidden from malicious users.</para>
    </sect2>

    <sect2 xml:id="security-tuning">
      <title>System Tuning for Security</title>

      <para>Many of the systems features may be tuned through the use
	of &man.sysctl.8;.  This is also true for a few security
	features which could be used to prevent denial of service
	(<acronym>DOS</acronym>) style attacks.  Some of the more
	important will be covered here.  Any time a setting is changed
	with &man.sysctl.8;, the chance to cause undesired harm is
	increased affecting the availability of the system.  Considering
	the <acronym>CIA</acronym> of the system should be done during
	any system-wide configuration change.</para>

      <para>The following is a list of &man.sysctl.8;'s and a short
	description of what effects the changes will have on the
	system.</para>

      <para>By default, the &os; kernel boots with a security level of
	-1.  This is called <quote>insecure mode</quote> because
	immutable file flags may be turned off and all devices may be
	read from or written to.  The security level will remain at -1
	unless it is altered, either by the administrator or by
	&man.init.8;, because of a setting in the startup scripts.
	The security level may be raised during system startup by
	setting <varname>kern_securelevel_enable</varname> to
	<literal>YES</literal> in <filename>/etc/rc.conf</filename>,
	and the value of <varname>kern_securelevel</varname> to the
	desired security level.  See &man.security.7; and &man.init.8;
	for more information on these settings.</para>

      <warning>
	<para>Increasing the <varname>securelevel</varname> can break
	  <application>Xorg</application> and cause other issues.  Be
	  prepared to do some debugging.</para>
      </warning>

      <para>Next &man.sysctl.8;s to change is the
	net.inet.tcp.blackhole and net.inet.udp.blackhole.  When these
	are set, incoming <acronym>SYN</acronym> packets on closed
	ports will be dropped with no return <acronym>RST</acronym>
	response.  The normal behavior is to return an
	<acronym>RST</acronym> to show a port is closed.  These will
	provide some level of protection against <quote>stealth</quote>
	scans against a system.  Set the net.inet.tcp.blackhole to
	<quote>2</quote> and the net.inet.udp.blackhole to
	<quote>1</quote> and review the information in &man.blackhole.4;
	for more information.</para>

      <para>Additionally the net.inet.icmp.drop_redirect and
	net.inet.ip.redirect should be set as well.  These two
	&man.sysctl.8;s will help prevent against what are called
	redirect attacks.  Redirect attacks are the purposeful mass
	issuing of <acronym>ICMP</acronym> type 5 packets which should
	not be required in a normal network.  As such, set
	net.inet.icmp.drop_redirect to <quote>1</quote> and set
	net.inet.ip.redirect to <quote>0</quote>.</para>

      <para>Source routing is method of detecting and accessing
	non-routable addresses on the internal network.  This should
	probably be disabled as non-routable addresses are normally
	not routable on purpose.  To disable this feature, set
	net.inet.ip.sourceroute and net.inet.ip.accept_sourceroute
	to <quote>0</quote>.</para>

      <para>Drop all <acronym>ICMP</acronym> echo requests to the
	broadcast address.  When machine on the network need to
	send messages to all hosts on a subnet, the message is sent
	to the broadcast address.  There is no reason an external
	host should need to perform such an action so set
	net.inet.icmp.bmcastecho to <quote>0</quote> to reject
	all external broadcast requests.</para>

      <para>Some additional &man.sysctl.8;s are documented in
	&man.security.7; and it is recommended it be consulted for
	additional information.</para>
    </sect2> 
  </sect1>

  <sect1 xml:id="one-time-passwords">
    <title>One-time Passwords</title>

    <indexterm><primary>one-time passwords</primary></indexterm>
    <indexterm>
      <primary>security</primary>
      <secondary>one-time passwords</secondary>
    </indexterm>

    <para>By default, &os; includes support for One-time Passwords In
      Everything (<acronym>OPIE</acronym>).  <acronym>OPIE</acronym>
      is designed to prevent replay attacks, in which an attacker
      discovers a user's password and uses it to access a system.
      Since a password is only used once in <acronym>OPIE</acronym>, a
      discovered password is of little use to an attacker.
      <acronym>OPIE</acronym> uses a secure hash and a
      challenge/response system to manage passwords.  The &os;
      implementation uses the <acronym>MD5</acronym> hash by
      default.</para>

    <para><acronym>OPIE</acronym> uses three different types of passwords.  The first is
      the usual &unix; or Kerberos password.  The second is the
      one-time password which is generated by <command>opiekey</command>.
      The third
      type of password is the <quote>secret password</quote> which is used
      to generate
      one-time passwords.  The secret password has nothing to do with,
      and should be different from, the &unix;
      password.</para>

    <para>There are two other pieces of data
      that are important to <acronym>OPIE</acronym>.  One is the
      <quote>seed</quote> or <quote>key</quote>, consisting of two
      letters and five digits.  The other is the <quote>iteration
	count</quote>, a number between 1 and 100.
      <acronym>OPIE</acronym> creates the one-time password by
      concatenating the seed and the secret password, applying the <acronym>MD5</acronym>
      hash as many times as specified by the iteration count, and
      turning the result into six short English words which represent
      the one-time password.  The authentication
      system keeps track of the last one-time password
      used, and the user is authenticated if the hash of the
      user-provided password is equal to the previous password.
      Because a one-way hash is used, it is impossible to generate
      future one-time passwords if a successfully used password is
      captured.  The iteration count is decremented after each
      successful login to keep the user and the login program in sync.
      When the iteration count gets down to <literal>1</literal>,
      <acronym>OPIE</acronym> must be reinitialized.</para>

    <para>There are a few programs involved in this process.
      A one-time password, or a consecutive
      list of one-time passwords, is generated by passing an iteration
      count, a seed, and a secret
      password to &man.opiekey.1;.  In addition to initializing
      <acronym>OPIE</acronym>, &man.opiepasswd.1; is used to change
      passwords, iteration counts, or seeds.  The relevant credential files in
      <filename>/etc/opiekeys</filename> are examined by
      &man.opieinfo.1; which prints out the invoking user's current
      iteration count and seed.</para>

    <para>This section describes four different sorts of operations.  The first is
      how to set up
      one-time-passwords for the first time
      over a secure connection.  The second is how to use <command>opiepasswd</command> over
      an insecure connection.  The third is how to
      log in over an insecure connection.  The
      fourth is how to generate a number of keys
      which can be written down or printed out to use at insecure
      locations.</para>

    <sect2>
      <title>Initializing <acronym>OPIE</acronym></title>

      <para>To initialize <acronym>OPIE</acronym> for the first time,
	run this command from a secure location:</para>

      <screen>&prompt.user; <userinput>opiepasswd -c</userinput>
[grimreaper] ~ $ opiepasswd -f -c
Adding unfurl:
Only use this method from the console; NEVER from remote. If you are using
telnet, xterm, or a dial-in, type ^C now or exit with no password.
Then run opiepasswd without the -c parameter.
Using MD5 to compute responses.
Enter new secret pass phrase:
Again new secret pass phrase:

ID unfurl OTP key is 499 to4268
MOS MALL GOAT ARM AVID COED</screen>

      <para>The <option>-c</option> sets console mode which assumes
	that the command is being run from a secure location, such as
	a computer under the user's control or a
	<acronym>SSH</acronym> session to a computer under the user's
	control.</para>

      <para>When prompted, enter the secret
	password which will be
	used to generate the one-time login keys.  This password
	should be difficult to guess and should be different than the
	password which is associated with the user's login
	account.  It must be between 10 and 127 characters long.
	Remember this password.</para>

      <para>The
	<literal>ID</literal> line lists
	the login name (<literal>unfurl</literal>), default iteration count
	(<literal>499</literal>), and default seed
	(<literal>to4268</literal>).  When logging in,
	the system will remember these parameters and display them,
	meaning that they do not have to be memorized.  The last line
	lists the generated one-time password which corresponds to
	those parameters and the secret password.  At the next login,
	use this one-time password.</para>
    </sect2>

    <sect2>
      <title>Insecure Connection Initialization</title>

      <para>To initialize or change the secret password on an
	insecure system, a secure connection is needed to some
	place where <command>opiekey</command> can be run.  This might be a shell
	prompt on a trusted machine.  An iteration count is needed,
	where 100 is probably a good value, and the seed can either be
	specified or the randomly-generated one used.  On the insecure
	connection, the machine being initialized, use
	&man.opiepasswd.1;:</para>

      <screen>&prompt.user; <userinput>opiepasswd</userinput>

Updating unfurl:
You need the response from an OTP generator.
Old secret pass phrase:
	otp-md5 498 to4268 ext
	Response: GAME GAG WELT OUT DOWN CHAT
New secret pass phrase:
	otp-md5 499 to4269
	Response: LINE PAP MILK NELL BUOY TROY

ID mark OTP key is 499 gr4269
LINE PAP MILK NELL BUOY TROY</screen>

      <para>To accept the default seed, press <keycap>Return</keycap>.
	Before entering an access password, move over to the secure
	connection and give it the same parameters:</para>

      <screen>&prompt.user; <userinput>opiekey 498 to4268</userinput>
Using the MD5 algorithm to compute response.
Reminder: Do not use opiekey from telnet or dial-in sessions.
Enter secret pass phrase:
GAME GAG WELT OUT DOWN CHAT</screen>

      <para>Switch back over to the insecure connection, and copy
	the generated one-time password over to the relevant
	program.</para>
    </sect2>

    <sect2>
      <title>Generating a Single One-time Password</title>

      <para>After initializing <acronym>OPIE</acronym> and logging in,
	a prompt like this will be displayed:</para>

      <screen>&prompt.user; <userinput>telnet example.com</userinput>
Trying 10.0.0.1...
Connected to example.com
Escape character is '^]'.

FreeBSD/i386 (example.com) (ttypa)

login: <userinput>&lt;username&gt;</userinput>
otp-md5 498 gr4269 ext
Password: </screen>

      <para>The <acronym>OPIE</acronym> prompts provides a useful
	feature.  If <keycap>Return</keycap> is pressed at the
	password prompt, the prompt will turn echo on and display
	what is typed.  This can be useful when attempting to type in
	a password by hand from a printout.</para>

      <indexterm><primary>MS-DOS</primary></indexterm>
      <indexterm><primary>Windows</primary></indexterm>
      <indexterm><primary>MacOS</primary></indexterm>

      <para>At this point, generate the one-time password to answer
	this login prompt.  This must be done on a trusted system
	where it is safe to run &man.opiekey.1;.  There are versions
	of this command for &windows;, &macos; and &os;.  This command
	needs the iteration count and the seed as command line
	options.  Use cut-and-paste from the login prompt on the
	machine being logged in to.</para>

      <para>On the trusted system:</para>

      <screen>&prompt.user; <userinput>opiekey 498 to4268</userinput>
Using the MD5 algorithm to compute response.
Reminder: Do not use opiekey from telnet or dial-in sessions.
Enter secret pass phrase:
GAME GAG WELT OUT DOWN CHAT</screen>

      <para>Once the one-time password is generated, continue to log
	in.</para>
    </sect2>

    <sect2>
      <title>Generating Multiple One-time Passwords</title>

      <para>Sometimes there is no access to a trusted machine or
	secure connection.  In this case, it is possible to use
	&man.opiekey.1; to generate a number of one-time passwords
	beforehand.  For example:</para>

      <screen>&prompt.user; <userinput>opiekey -n 5 30 zz99999</userinput>
Using the MD5 algorithm to compute response.
Reminder: Do not use opiekey from telnet or dial-in sessions.
Enter secret pass phrase: <userinput>&lt;secret password&gt;</userinput>
26: JOAN BORE FOSS DES NAY QUIT
27: LATE BIAS SLAY FOLK MUCH TRIG
28: SALT TIN ANTI LOON NEAL USE
29: RIO ODIN GO BYE FURY TIC
30: GREW JIVE SAN GIRD BOIL PHI</screen>

      <para>The <option>-n 5</option> requests five keys in sequence,
	and <option>30</option> specifies what the last iteration
	number should be.  Note that these are printed out in
	<emphasis>reverse</emphasis> order of use.  The really
	paranoid might want to write the results down by hand;
	otherwise, print the list.  Each line shows both the iteration
	count and the one-time password.  Scratch off the passwords as
	they are used.</para>
    </sect2>

    <sect2>
      <title>Restricting Use of &unix; Passwords</title>

      <para><acronym>OPIE</acronym> can restrict the use of &unix;
	passwords based on the IP address of a login session.  The
	relevant file is <filename>/etc/opieaccess</filename>, which
	is present by default.  Refer to &man.opieaccess.5; for more
	information on this file and which security considerations to
	be aware of when using it.</para>

      <para>Here is a sample <filename>opieaccess</filename>:</para>

      <programlisting>permit 192.168.0.0 255.255.0.0</programlisting>

      <para>This line allows users whose IP source address (which is
	vulnerable to spoofing) matches the specified value and mask,
	to use &unix; passwords at any time.</para>

      <para>If no rules in <filename>opieaccess</filename> are
	matched, the default is to deny non-<acronym>OPIE</acronym>
	logins.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="tcpwrappers">
    <info><title>TCP Wrappers</title>
      <authorgroup>
	<author><personname><firstname>Tom</firstname><surname>Rhodes</surname></personname><contrib>Written by </contrib></author>
      </authorgroup>
    </info>

    

    <indexterm><primary>TCP Wrappers</primary></indexterm>

    <para><acronym>TCP</acronym> Wrappers extends the abilities of
      <xref linkend="network-inetd"/> to provide support for every
      server daemon under its control.  It can be configured
      to provide logging support, return messages to connections, and
      permit a daemon to only accept internal connections.  While some
      of these features can be provided by implementing a firewall,
      <acronym>TCP</acronym> Wrappers adds an extra layer of
      protection and goes beyond the amount of control a firewall can
      provide.</para>

    <para><acronym>TCP</acronym> Wrappers should not be considered a
      replacement for a properly configured firewall.
      <acronym>TCP</acronym> Wrappers should be used in conjunction
      with a firewall and other security enhancements.</para>

    <sect2>
      <title>Initial Configuration</title>

      <para>To enable <acronym>TCP</acronym> Wrappers in &os;, ensure
	the &man.inetd.8; server is started from
	<filename>/etc/rc.conf</filename> with
	<option>-Ww</option>.  Then, properly configure
	<filename>/etc/hosts.allow</filename>.</para>

      <note>
	<para>Unlike other implementations of <acronym>TCP</acronym>
	  Wrappers, the use of <filename>hosts.deny</filename> has
	  been deprecated.  All configuration options should be placed
	  in <filename>/etc/hosts.allow</filename>.</para>
      </note>

      <para>In the simplest configuration, daemon connection policies
	are set to either be permitted or blocked depending on the
	options in <filename>/etc/hosts.allow</filename>.  The default
	configuration in &os; is to allow a connection to every daemon
	started with &man.inetd.8;.</para>

      <para>Basic configuration usually takes the form of
	<literal>daemon : address : action</literal>, where
	<literal>daemon</literal> is the daemon which &man.inetd.8;
	started, <literal>address</literal> is a valid hostname,
	<acronym>IP</acronym> address, or an IPv6 address enclosed in
	brackets ([&nbsp;]), and <literal>action</literal> is
	either <literal>allow</literal> or <literal>deny</literal>.
	<acronym>TCP</acronym> Wrappers uses a first rule match
	semantic, meaning that the configuration file is scanned in
	ascending order for a matching rule.  When a match is found,
	the rule is applied and the search process stops.</para>

      <para>For example, to allow <acronym>POP</acronym>3 connections
	via the <package>mail/qpopper</package>
	daemon, the following lines should be appended to
	<filename>hosts.allow</filename>:</para>

      <programlisting># This line is required for POP3 connections:
qpopper : ALL : allow</programlisting>

      <para>After adding this line, &man.inetd.8; needs to be
	restarted:</para>

	<screen>&prompt.root; <userinput>service inetd restart</userinput></screen>
    </sect2>

    <sect2>
      <title>Advanced Configuration</title>

      <para><acronym>TCP</acronym> Wrappers provides advanced options
	to allow more control over the way connections are handled.
	In some cases, it may be appropriate to return a comment to
	certain hosts or daemon connections.  In other cases, a log
	entry should be recorded or an email sent to the
	administrator.  Other situations may require the use of a
	service for local connections only.  This is all possible
	through the use of configuration options known as
	<literal>wildcards</literal>, expansion characters and
	external command execution.</para>

      <sect3>
	<title>External Commands</title>

	<para>Suppose that a situation occurs where a connection
	  should be denied yet a reason should be sent to the
	  individual who attempted to establish that connection.  That
	  action is possible with <option>twist</option>.  When a
	  connection attempt is made, <option>twist</option> executes
	  a shell command or script.  An example exists in
	  <filename>hosts.allow</filename>:</para>

	<programlisting># The rest of the daemons are protected.
ALL : ALL \
	: severity auth.info \
	: twist /bin/echo "You are not welcome to use %d from %h."</programlisting>

	<para>In this example, the message <quote>You are not allowed
	    to use <literal>daemon</literal> from
	    <literal>hostname</literal>.</quote> will be returned for
	  any daemon not previously configured in the access file.
	  This is useful for sending a reply back to the connection
	  initiator right after the established connection is dropped.
	  Any message returned <emphasis>must</emphasis> be wrapped in
	  quote (<literal>"</literal>) characters.</para>

	<warning>
	  <para>It may be possible to launch a denial of service
	    attack on the server if an attacker, or group of
	    attackers, could flood these daemons with connection
	    requests.</para>
	</warning>

	<para>Another possibility is to use <option>spawn</option>.
	  Like <option>twist</option>, <option>spawn</option>
	  implicitly denies the connection and may be used to run
	  external shell commands or scripts.  Unlike
	  <option>twist</option>, <option>spawn</option> will not send
	  a reply back to the individual who established the
	  connection.  For example, consider the following
	  configuration line:</para>

	<programlisting># We do not allow connections from example.com:
ALL : .example.com \
	: spawn (/bin/echo %a from %h attempted to access %d &gt;&gt; \
	  /var/log/connections.log) \
	: deny</programlisting>

	<para>This will deny all connection attempts from <systemitem class="fqdomainname">*.example.com</systemitem> and log the hostname,
	  <acronym>IP</acronym> address, and the daemon to which
	  access was attempted to
	  <filename>/var/log/connections.log</filename>.</para>

	<para>This example uses the substitution characters
	  <literal>%a</literal> and <literal>%h</literal>.  Refer to
	  &man.hosts.access.5; for the complete list.</para>
      </sect3>

      <sect3>
	<title>Wildcard Options</title>

	<para>The <literal>ALL</literal> option may be used to match
	  every instance of a daemon, domain, or an
	  <acronym>IP</acronym> address.  Another wildcard is
	  <literal>PARANOID</literal> which may be used to match
	  any host which provides an <acronym>IP</acronym> address
	  that may be forged.  For example,
	  <literal>PARANOID</literal> may be used to define an action
	  to be taken whenever a connection is made from an
	  <acronym>IP</acronym> address that differs from its
	  hostname.  In this example, all connection requests to
	  &man.sendmail.8; which have an <acronym>IP</acronym> address
	  that varies from its hostname will be denied:</para>

	<programlisting># Block possibly spoofed requests to sendmail:
sendmail : PARANOID : deny</programlisting>

	<caution>
	  <para>Using the <literal>PARANOID</literal> wildcard may
	    severely cripple servers if the client or server has a
	    broken <acronym>DNS</acronym> setup.  Administrator
	    discretion is advised.</para>
	</caution>

	<para>To learn more about wildcards and their associated
	  functionality, refer to &man.hosts.access.5;.</para>

	<para>Before any of the specific configuration lines above
	  will work, the first configuration line should be commented
	  out in <filename>hosts.allow</filename>.</para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 xml:id="kerberos5">
    <info><title><application>Kerberos5</application></title>
      <authorgroup>
	<author><personname><firstname>Tillman</firstname><surname>Hodgson</surname></personname><contrib>Contributed by </contrib></author>
      </authorgroup>
      <authorgroup>
	<author><personname><firstname>Mark</firstname><surname>Murray</surname></personname><contrib>Based on a contribution by </contrib></author>
      </authorgroup>
    </info>

    

    <para><application>Kerberos</application> is a network add-on
      system/protocol that allows users to authenticate themselves
      through the services of a secure server.
      <application>Kerberos</application> can be described as an
      identity-verifying proxy system.  It can also be described as a
      trusted third-party authentication system.  After a user
      authenticates with <application>Kerberos</application>, their
      communications can be encrypted to assure privacy and data
      integrity.</para>

    <para>The only function of <application>Kerberos</application> is
      to provide the secure authentication of users on the network.
      It does not provide authorization functions (what users are
      allowed to do) or auditing functions (what those users did).  It
      is recommended that <application>Kerberos</application> be used
      with other security methods which provide authorization and
      audit services.</para>

    <para>This section provides a guide on how to set up
      <application>Kerberos</application> as distributed for &os;.
      Refer to the relevant manual pages for more complete
      descriptions.</para>

    <para>For purposes of demonstrating a
      <application>Kerberos</application> installation, the various
      name spaces will be as follows:</para>

    <itemizedlist>
      <listitem>
	<para>The <acronym>DNS</acronym> domain (<quote>zone</quote>)
	  will be <systemitem class="fqdomainname">example.org</systemitem>.</para>
      </listitem>

      <listitem>
	<para>The <application>Kerberos</application> realm will be
	  <literal>EXAMPLE.ORG</literal>.</para>
      </listitem>
    </itemizedlist>

    <note>
      <para>Use real domain names when setting up
	<application>Kerberos</application> even if it will run
	internally.  This avoids <acronym>DNS</acronym> problems
	and assures inter-operation with other
	<application>Kerberos</application> realms.</para>
    </note>

    <sect2>
      <title>History</title>

      <indexterm>
	<primary>Kerberos5</primary>
	<secondary>history</secondary>
      </indexterm>

      <para><application>Kerberos</application> was created by
	<acronym>MIT</acronym> as a solution to network security
	problems.  The <application>Kerberos</application> protocol
	uses strong cryptography so that a client can prove its
	identity to a server (and vice versa) across an insecure
	network connection.</para>

      <para><application>Kerberos</application> is both the name of a
	network authentication protocol and an adjective to describe
	programs that implement it, such as
	<application>Kerberos</application> telnet.  The current
	version of the protocol is version 5, described in
	<acronym>RFC</acronym>&nbsp;1510.</para>

      <para>Several free implementations of this protocol are
	available, covering a wide range of operating systems.  The
	Massachusetts Institute of Technology
	(<acronym>MIT</acronym>), where
	<application>Kerberos</application> was originally developed,
	continues to develop their <application>Kerberos</application>
	package.  It is commonly used in the <acronym>US</acronym> as
	a cryptography product, and has historically been affected by
	<acronym>US</acronym> export regulations.  The
	<acronym>MIT</acronym> <application>Kerberos</application> is
	available as the <package>security/krb5</package> package or port.
	Heimdal <application>Kerberos</application> is another version
	5 implementation, and was explicitly developed outside of the
	<acronym>US</acronym> to avoid export regulations.  The
	Heimdal <application>Kerberos</application> distribution is
	available as a the <package>security/heimdal</package> package or port,
	and a minimal installation is included in the base &os;
	install.</para>

      <para>These instructions assume the use of the Heimdal
	distribution included in &os;.</para>
    </sect2>

    <sect2>
      <title>Setting up a Heimdal <acronym>KDC</acronym></title>

      <indexterm>
	<primary>Kerberos5</primary>
	<secondary>Key Distribution Center</secondary>
      </indexterm>

      <para>The Key Distribution Center (<acronym>KDC</acronym>) is
	the centralized authentication service that
	<application>Kerberos</application> provides.  It is the
	computer that issues <application>Kerberos</application>
	tickets.  The <acronym>KDC</acronym> is considered
	<quote>trusted</quote> by all other computers in the
	<application>Kerberos</application> realm, and thus has
	heightened security concerns.</para>

      <para>While running the <application>Kerberos</application>
	server requires very few computing resources, a dedicated
	machine acting only as a <acronym>KDC</acronym> is recommended
	for security reasons.</para>

      <para>To begin setting up a <acronym>KDC</acronym>, ensure that
	<filename>/etc/rc.conf</filename> contains the correct
	settings to act as a <acronym>KDC</acronym>.  As required,
	adjust paths to reflect the system:</para>

      <programlisting>kerberos5_server_enable="YES"
kadmind5_server_enable="YES"</programlisting>

      <para>Next, edit <filename>/etc/krb5.conf</filename> as
	follows:</para>

      <programlisting>[libdefaults]
    default_realm = EXAMPLE.ORG
[realms]
    EXAMPLE.ORG = {
        kdc = kerberos.example.org
        admin_server = kerberos.example.org
    }
[domain_realm]
    .example.org = EXAMPLE.ORG</programlisting>

      <para>This <filename>/etc/krb5.conf</filename> implies that the
	<acronym>KDC</acronym> will use the fully-qualified hostname
	<systemitem class="fqdomainname">kerberos.example.org</systemitem>.  Add a
	CNAME (alias) entry to the zone file to accomplish this
	if the <acronym>KDC</acronym> has a different hostname.</para>

      <note>
	<para>For large networks with a properly configured
	  <acronym>DNS</acronym> server, the above example could be
	  trimmed to:</para>

	<programlisting>[libdefaults]
      default_realm = EXAMPLE.ORG</programlisting>

	<para>With the following lines being appended to the
	  <systemitem class="fqdomainname">example.org</systemitem> zone file:</para>

	<programlisting>_kerberos._udp      IN  SRV     01 00 88 kerberos.example.org.
_kerberos._tcp      IN  SRV     01 00 88 kerberos.example.org.
_kpasswd._udp       IN  SRV     01 00 464 kerberos.example.org.
_kerberos-adm._tcp  IN  SRV     01 00 749 kerberos.example.org.
_kerberos           IN  TXT     EXAMPLE.ORG</programlisting>
      </note>

      <note>
	<para>For clients to be able to find the
	  <application>Kerberos</application> services, it
	  <emphasis>must</emphasis> have either a fully configured
	  <filename>/etc/krb5.conf</filename> or a minimally
	  configured <filename>/etc/krb5.conf</filename>
	  <emphasis>and</emphasis> a properly configured DNS
	  server.</para>
      </note>

      <para>Next, create the <application>Kerberos</application>
	database which contains the keys of all principals encrypted
	with a master password.  It is not required to remember this
	password as it will be stored in
	<filename>/var/heimdal/m-key</filename>.  To create the
	master key, run &man.kstash.8; and enter a password.</para>

      <para>Once the master key has been created, initialize the
	database using <command>kadmin -l</command>.  This option
	instructs &man.kadmin.8; to modify the local database files
	directly rather than going through the &man.kadmind.8; network
	service.  This handles the chicken-and-egg problem of trying
	to connect to the database before it is created.  At the
	&man.kadmin.8; prompt, use <command>init</command> to create
	the realm's initial database.</para>

      <para>Lastly, while still in &man.kadmin.8;, create the first
	principal using <command>add</command>.  Stick to the default
	options for the principal for now, as these can be changed
	later with <command>modify</command>.  Type
	<literal>?</literal> at the &man.kadmin.8; prompt to see the
	available options.</para>

      <para>A sample database creation session is shown below:</para>

      <screen>&prompt.root; <userinput>kstash</userinput>
Master key: <userinput>xxxxxxxx</userinput>
Verifying password - Master key: <userinput>xxxxxxxx</userinput>

&prompt.root; <userinput>kadmin -l</userinput>
kadmin&gt; <userinput>init EXAMPLE.ORG</userinput>
Realm max ticket life [unlimited]:
kadmin&gt; <userinput>add tillman</userinput>
Max ticket life [unlimited]:
Max renewable life [unlimited]:
Attributes []:
Password: <userinput>xxxxxxxx</userinput>
Verifying password - Password: <userinput>xxxxxxxx</userinput></screen>

      <para>Next, start the <acronym>KDC</acronym> services.  Run
	<command>service kerberos start</command> and
	<command>service kadmind start</command> to bring up the
	services.  While there will not be any kerberized daemons
	running at this point, it is possible to confirm that the
	<acronym>KDC</acronym> is functioning by obtaining and
	listing a ticket for the principal (user) that was just
	created from the command-line of the <acronym>KDC</acronym>
	itself:</para>

      <screen>&prompt.user; <userinput>kinit tillman</userinput>
tillman@EXAMPLE.ORG's Password:

&prompt.user; <userinput>klist</userinput>
Credentials cache: FILE:<filename>/tmp/krb5cc_500</filename>
	Principal: tillman@EXAMPLE.ORG

  Issued           Expires          Principal
Aug 27 15:37:58  Aug 28 01:37:58  krbtgt/EXAMPLE.ORG@EXAMPLE.ORG</screen>

      <para>The ticket can then be revoked when finished:</para>

      <screen>&prompt.user; <userinput>kdestroy</userinput></screen>
    </sect2>

    <sect2>
      <title><application>Kerberos</application> Enabling a Server
	with Heimdal Services</title>

      <indexterm>
	<primary>Kerberos5</primary>
	<secondary>enabling services</secondary>
      </indexterm>

      <para>First, copy
	<filename>/etc/krb5.conf</filename> from the
	<acronym>KDC</acronym> to the client computer in a secure
	fashion, such as &man.scp.1;, or physically via removable
	media.</para>

      <para>Next, create <filename>/etc/krb5.keytab</filename>.
	This is the major difference between a server providing
	<application>Kerberos</application> enabled daemons and a
	workstation:  the server must have a
	<filename>keytab</filename>.  This file contains the
	server's host key, which allows it and the
	<acronym>KDC</acronym> to verify each others identity.  It
	must be transmitted to the server in a secure fashion, as
	the security of the server can be broken if the key is made
	public.</para>

      <para>Typically, the <filename>keytab</filename> is transferred
	to the server using &man.kadmin.8;.  This is handy because the
	host principal, the <acronym>KDC</acronym> end of the
	<filename>krb5.keytab</filename>, is also created using
	&man.kadmin.8;.</para>

      <para>A ticket must already be obtained and this ticket must be
	allowed to use the &man.kadmin.8; interface in the
	<filename>kadmind.acl</filename>.  See the section titled
	<quote>Remote administration</quote> in<command>info
	  heimdal</command> for details on designing access control
	lists.  Instead of enabling remote &man.kadmin.8; access, the
	administrator can securely connect to the
	<acronym>KDC</acronym> via the local console or &man.ssh.1;,
	and perform administration locally using
	<command>kadmin -l</command>.</para>

      <para>After installing <filename>/etc/krb5.conf</filename>,
	use <command>add --random-key</command> from the
	<application>Kerberos</application> server.  This adds
	the server's host principal.  Then, use <command>ext</command>
	to extract the server's host principal to its own keytab.  For
	example:</para>

      <screen>&prompt.root; <userinput>kadmin</userinput>
kadmin&gt;<userinput> add --random-key host/myserver.example.org</userinput>
Max ticket life [unlimited]:
Max renewable life [unlimited]:
Attributes []:
kadmin&gt;<userinput> ext host/myserver.example.org</userinput>
kadmin&gt;<userinput> exit</userinput></screen>

      <para>Note that <command>ext</command> stores the extracted key
	in <filename>/etc/krb5.keytab</filename> by default.</para>

      <para>If &man.kadmind.8; is not running on the
	<acronym>KDC</acronym> and there is no access to
	&man.kadmin.8; remotely, add the host principal
	(<systemitem class="username">host/myserver.EXAMPLE.ORG</systemitem>) directly on
	the <acronym>KDC</acronym> and then extract it to a
	temporary file to avoid overwriting the
	<filename>/etc/krb5.keytab</filename> on the
	<acronym>KDC</acronym>, using something like this:</para>

      <screen>&prompt.root; <userinput>kadmin</userinput>
kadmin&gt;<userinput> ext --keytab=/tmp/example.keytab host/myserver.example.org</userinput>
kadmin&gt;<userinput> exit</userinput></screen>

      <para>The keytab can then be securely copied to the server
	using &man.scp.1; or a removable media.  Be sure to specify a
	non-default keytab name to avoid overwriting the keytab on the
	<acronym>KDC</acronym>.</para>

      <para>At this point, the server can communicate with the
	<acronym>KDC</acronym> using
	<filename>krb5.conf</filename> and it can prove its
	own identity with <filename>krb5.keytab</filename>.  It is now
	ready for the <application>Kerberos</application> services to
	be enabled.  For this example, the &man.telnetd.8; service
	is enabled in <filename>/etc/inetd.conf</filename> and
	&man.inetd.8; has been restarted with <command>service inetd
	  restart</command>:</para>

      <programlisting>telnet    stream  tcp     nowait  root    /usr/libexec/telnetd  telnetd -a user</programlisting>

      <para>The critical change is that the <option>-a</option>
	authentication type is set to user.  Refer to &man.telnetd.8;
	for more details.</para>
    </sect2>

    <sect2>
      <title><application>Kerberos</application> Enabling a Client
	with Heimdal</title>

      <indexterm>
	<primary>Kerberos5</primary>
	<secondary>configure clients</secondary>
      </indexterm>

      <para>Setting up a client computer is easy as only
	<filename>/etc/krb5.conf</filename> is needed.  Securely copy
	this file over to the client computer from the
	<acronym>KDC</acronym>.</para>

      <para>Test the client by attempting to use &man.kinit.1;,
	&man.klist.1;, and &man.kdestroy.1; from the client to obtain,
	show, and then delete a ticket for the principal created
	above.  <application>Kerberos</application> applications
	should also be able to connect to
	<application>Kerberos</application> enabled servers.  If that
	does not work but obtaining a ticket does, the problem is
	likely with the server and not with the client or the
	<acronym>KDC</acronym>.</para>

      <para>When testing a Kerberized application, try using a packet
	sniffer such as &man.tcpdump.1; to confirm that the password
	is not sent in the clear.</para>

      <para>Various non-core <application>Kerberos</application>
	client applications are available.  The <quote>minimal</quote>
	installation in &os; installs &man.telnetd.8; as the only
	<application>Kerberos</application> enabled service.</para>

      <para>The Heimdal port installs
	<application>Kerberos</application> enabled versions of
	&man.ftpd.8;, &man.rshd.8;, &man.rcp.1;, &man.rlogind.8;, and
	a few other less common programs.  The <acronym>MIT</acronym>
	port also contains a full suite of
	<application>Kerberos</application> client
	applications.</para>
    </sect2>

    <sect2>
      <title>User Configuration Files: <filename>.k5login</filename>
	and <filename>.k5users</filename></title>

      <indexterm>
	<primary><filename>.k5login</filename></primary>
      </indexterm>

      <indexterm>
	<primary><filename>.k5users</filename></primary>
      </indexterm>

      <para>Users within a realm typically have their
	<application>Kerberos</application> principal mapped to a
	local user account.  Occasionally, one needs to grant access
	to a local user account to someone who does not have a
	matching <application>Kerberos</application> principal.  For
	example, <systemitem class="username">tillman@EXAMPLE.ORG</systemitem> may need
	access to the local user account
	<systemitem class="username">webdevelopers</systemitem>.  Other principals may also
	need access to that local account.</para>

      <para>The <filename>.k5login</filename> and
	<filename>.k5users</filename> files, placed in a user's home
	directory, can be used to solve this problem.  For example, if
	<filename>.k5login</filename> with the following contents is
	placed in the home directory of
	<systemitem class="username">webdevelopers</systemitem>, both principals listed
	will have access to that account without requiring a shared
	password.:</para>

      <screen>tillman@example.org
jdoe@example.org</screen>

      <para>Refer to &man.ksu.1; for more information about
	<filename>.k5users</filename>.</para>
    </sect2>

    <sect2>
      <title><application>Kerberos</application> Tips, Tricks, and
	Troubleshooting</title>

      <itemizedlist>
	<listitem>
	  <para>When using either the Heimdal or
	    <acronym>MIT</acronym>
	    <application>Kerberos</application><indexterm><primary>Kerberos5</primary><secondary>troubleshooting</secondary></indexterm> ports, ensure that
	    the <envar>PATH</envar> lists the
	    <application>Kerberos</application> versions of the
	    client applications before the system versions.</para>
	</listitem>

	<listitem>
	  <para>If all the computers in the realm do not have
	    synchronized time settings, authentication may fail.
	    <xref linkend="network-ntp"/> describes how to synchronize
	    clocks using <acronym>NTP</acronym>.</para>
	</listitem>

	<listitem>
	  <para><acronym>MIT</acronym> and Heimdal interoperate
	    except for &man.kadmin.8;, which is not
	    standardized.</para>
	</listitem>

	<listitem>
	  <para>If the hostname is changed, the
	    <systemitem class="username">host/</systemitem> principal must be changed and
	    the keytab updated.  This also applies to special keytab
	    entries like the <systemitem class="username">www/</systemitem> principal
	    used for Apache's <package>www/mod_auth_kerb</package>.</para>
	</listitem>

	<listitem>
	  <para>All hosts in the realm must be both forward and
	    reverse resolvable in <acronym>DNS</acronym> or, at a
	    minimum, in <filename>/etc/hosts</filename>.  CNAMEs
	    will work, but the A and PTR records must be correct and
	    in place.  The error message for unresolvable hosts is not
	    intuitive: <errorname>Kerberos5 refuses authentication
	      because Read req failed: Key table entry not
	      found</errorname>.</para>
	</listitem>

	<listitem>
	  <para>Some operating systems that act as clients to the
	    <acronym>KDC</acronym> do not set the permissions for
	    &man.ksu.1; to be setuid <systemitem class="username">root</systemitem>.  This
	    means that &man.ksu.1; does not work.  This is not a
	    <acronym>KDC</acronym> error.</para>
	</listitem>

	<listitem>
	  <para>With <acronym>MIT</acronym>
	    <application>Kerberos</application>, in order to allow a
	    principal to have a ticket life longer than the default
	    ten hours, use <command>modify_principal</command> at the
	    &man.kadmin.8; prompt to change the maxlife of both the
	    principal in question and the
	    <systemitem class="username">krbtgt</systemitem> principal.  Then the
	    principal can use <command>kinit -l</command> to request a
	    ticket with a longer lifetime.</para>
	</listitem>

	<listitem>
	  <note>
	    <para>When running a packet sniffer on the
	      <acronym>KDC</acronym> to aid in troubleshooting while
	      running &man.kinit.1; from a workstation, the Ticket
	      Granting Ticket (<acronym>TGT</acronym>) is sent
	      immediately upon running &man.kinit.1;, even before the
	      password is typed.  This is because the
	      <application>Kerberos</application> server freely
	      transmits a <acronym>TGT</acronym> to any unauthorized
	      request.  However, every <acronym>TGT</acronym> is
	      encrypted in a key derived from the user's password.
	      When a user types their password, it is not sent to the
	      <acronym>KDC</acronym>, it is instead used to decrypt
	      the <acronym>TGT</acronym> that &man.kinit.1; already
	      obtained.  If the decryption process results in a valid
	      ticket with a valid time stamp, the user has valid
	      <application>Kerberos</application> credentials.
	      These credentials include a session key for
	      establishing secure communications with the
	      <application>Kerberos</application> server in the
	      future, as well as the actual <acronym>TGT</acronym>,
	      which is encrypted with the
	      <application>Kerberos</application> server's own key.
	      This second layer of encryption allows the
	      <application>Kerberos</application> server to verify
	      the authenticity of each <acronym>TGT</acronym>.</para>
	  </note>
	</listitem>

	<listitem>
	  <para>To use long ticket lifetimes, such as a week, when
	    using <application>OpenSSH</application> to connect to the
	    machine where the ticket is stored, make sure that
	    <application>Kerberos</application>
	    <option>TicketCleanup</option> is set to
	    <literal>no</literal> in
	    <filename>sshd_config</filename> or else tickets will be
	    deleted at log out.</para>
	</listitem>

	<listitem>
	  <para>Host principals can have a longer ticket lifetime.  If
	    the user principal has a lifetime of a week but the host
	    being connected to has a lifetime of nine hours, the user
	    cache will have an expired host principal and the ticket
	    cache will not work as expected.</para>
	</listitem>

	<listitem>
	  <para>When setting up <filename>krb5.dict</filename> to
	    prevent specific bad passwords from being used as
	    described in &man.kadmind.8;, remember that it only
	    applies to principals that have a password policy assigned
	    to them.  The format used in
	    <filename>krb5.dict</filename> is one string per line.
	    Creating a symbolic link to
	    <filename>/usr/share/dict/words</filename> might be
	    useful.</para>
	</listitem>
      </itemizedlist>
    </sect2>

    <sect2>
      <title>Differences with the <acronym>MIT</acronym>
	Port</title>

      <para>The major difference between <acronym>MIT</acronym> and
	Heimdal relates to &man.kadmin.8; which has a different, but
	equivalent, set of commands and uses a different protocol.
	If the <acronym>KDC</acronym> is <acronym>MIT</acronym>, the
	Heimdal version of &man.kadmin.8; cannot be used to administer
	the <acronym>KDC</acronym> remotely, and vice versa.</para>

      <para>The client applications may also use slightly different
	command line options to accomplish the same tasks.
	Following the instructions on the <acronym>MIT</acronym>
	<application>Kerberos</application> <link xlink:href="http://web.mit.edu/Kerberos/www/">web site</link> is
	recommended.  Be careful of path issues: the
	<acronym>MIT</acronym> port installs into <filename>/usr/local/</filename> by default, and the
	<quote>normal</quote> system applications run instead of
	<acronym>MIT</acronym> versions if <envar>PATH</envar> lists
	the system directories first.</para>

      <note>
	<para>With the &os; <acronym>MIT</acronym> <package>security/krb5</package> port, be sure to
	  read
	  <filename>/usr/local/share/doc/krb5/README.FreeBSD</filename>
	  installed by the port to understand why logins via
	  &man.telnetd.8; and <command>klogind</command> behave
	  somewhat oddly.  Correcting the <quote>incorrect permissions
	  on cache file</quote> behavior requires that the
	  <command>login.krb5</command> binary be used for
	  authentication so that it can properly change ownership for
	  the forwarded credentials.</para>
      </note>

      <para>The following edits should also be made to
	<filename>rc.conf</filename>:</para>

      <programlisting>kerberos5_server="/usr/local/sbin/krb5kdc"
kadmind5_server="/usr/local/sbin/kadmind"
kerberos5_server_flags=""
kerberos5_server_enable="YES"
kadmind5_server_enable="YES"</programlisting>

      <para>This is done because the applications for
	<acronym>MIT</acronym> Kerberos installs binaries in the
	<filename>/usr/local</filename>
	hierarchy.</para>
    </sect2>

    <sect2>
      <title>Mitigating Limitations Found in
	<application>Kerberos</application></title>

      <indexterm>
	<primary>Kerberos5</primary>
	<secondary>limitations and shortcomings</secondary>
      </indexterm>

      <sect3>
	<title><application>Kerberos</application> is an
	  All or Nothing Approach</title>

	<para>Every service enabled on the network must be modified
	  to work with <application>Kerberos</application>, or be
	  otherwise secured against network attacks, or else the
	  user's credentials could be stolen and re-used.  An example
	  of this would be <application>Kerberos</application>
	  enabling all remote shells but not converting the
	  <acronym>POP3</acronym> mail server which sends passwords in
	  plain text.</para>
      </sect3>

      <sect3>
	<title><application>Kerberos</application> is Intended for
	  Single-User Workstations</title>

	<para>In a multi-user environment,
	  <application>Kerberos</application> is less secure.  This is
	  because it stores the tickets in <filename>/tmp</filename>, which is readable by
	  all users.  If a user is sharing a computer with other
	  users, it is possible that the user's tickets can be stolen
	  or copied by another user.</para>

	<para>This can be overcome with the <literal>-c</literal>
	  command-line option or, preferably, the
	  <envar>KRB5CCNAME</envar> environment variable.  Storing
	  the ticket in the user's home directory and using file
	  permissions are commonly used to mitigate this
	  problem.</para>
      </sect3>

      <sect3>
	<title>The KDC is a Single Point of Failure</title>

	<para>By design, the <acronym>KDC</acronym> must be as secure
	  as its master password database.  The <acronym>KDC</acronym>
	  should have absolutely no other services running on it and
	  should be physically secure.  The danger is high because
	  <application>Kerberos</application> stores all passwords
	  encrypted with the same <quote>master</quote> key which is
	  stored as a file on the <acronym>KDC</acronym>.</para>

	<para>A compromised master key is not quite as bad as one
	  might fear.  The master key is only used to encrypt the
	  <application>Kerberos</application> database and as a seed
	  for the random number generator.  As long as access to the
	  <acronym>KDC</acronym> is secure, an attacker cannot do much
	  with the master key.</para>

	<para>Additionally, if the <acronym>KDC</acronym> is
	  unavailable, network services are unusable as authentication
	  cannot be performed.  This can be alleviated with a single
	  master <acronym>KDC</acronym> and one or more slaves, and
	  with careful implementation of secondary or fall-back
	  authentication using <acronym>PAM</acronym>.</para>
      </sect3>

      <sect3>
	<title><application>Kerberos</application>
	  Shortcomings</title>

	<para><application>Kerberos</application> allows users, hosts
	  and services to authenticate between themselves.  It does
	  not have a mechanism to authenticate the
	  <acronym>KDC</acronym> to the users, hosts or services.
	  This means that a trojanned &man.kinit.1; could record all
	  user names and passwords.  Filesystem integrity checking
	  tools like <package>security/tripwire</package> can alleviate
	  this.</para>
      </sect3>
    </sect2>

    <sect2>
      <title>Access Issues with Kerberos and &man.ssh.1;</title>

      <indexterm><primary>&man.ssh.1;</primary></indexterm>

      <para>There are a few issues with both Kerberos and &man.ssh.1;
	that need to be addressed if they are used.  Kerberos is an
	excellent authentication protocol, but there are bugs in the
	kerberized versions of &man.telnet.1; and &man.rlogin.1; that
	make them unsuitable for dealing with binary streams.  By
	default, Kerberos does not encrypt a session unless
	<option>-x</option> is used whereas  &man.ssh.1; encrypts
	everything.</para>

      <para>While &man.ssh.1; works well, it forwards encryption keys
	by default.  This introduces a security risk to a user who
	uses &man.ssh.1; to access an insecure machine from a secure
	workstation.  The keys themselves are not exposed, but
	&man.ssh.1; installs a forwarding port for the duration of the
	login.  If an attacker has broken
	<systemitem class="username">root</systemitem> on
	the insecure machine, he can utilize that port to gain access
	to any other machine that those keys unlock.</para>

      <para>It is recommended that &man.ssh.1; is used in combination
	with Kerberos whenever possible for staff logins and
	&man.ssh.1; can be compiled with Kerberos support.  This
	reduces reliance on potentially exposed <acronym>SSH</acronym>
	keys while protecting passwords via Kerberos.  Keys should
	only be used for automated tasks from secure machines as this
	is something that Kerberos is unsuited to.  It is recommended
	to either turn off key-forwarding in the
	<acronym>SSH</acronym> configuration, or to make use
	of <literal>from=IP/DOMAIN</literal> in
	<filename>authorized_keys</filename> to make the key only
	usable to entities logging in from specific machines.</para>
    </sect2>

    <sect2>
      <title>Resources and Further Information</title>

      <indexterm>
	<primary>Kerberos5</primary>
	<secondary>external resources</secondary>
      </indexterm>

      <itemizedlist>
	<listitem>
	  <para><link xlink:href="http://www.faqs.org/faqs/Kerberos-faq/general/preamble.html">
	      The <application>Kerberos</application>
	      FAQ</link></para>
	</listitem>

	<listitem>
	  <para><link xlink:href="http://web.mit.edu/Kerberos/www/dialogue.html">Designing
	      an Authentication System: a Dialog in Four
	      Scenes</link></para>
	</listitem>

	<listitem>
	  <para><link xlink:href="http://www.ietf.org/rfc/rfc1510.txt?number=1510">RFC
	      1510, The <application>Kerberos</application> Network
	      Authentication Service (V5)</link></para>
	</listitem>

	<listitem>
	  <para><link xlink:href="http://web.mit.edu/Kerberos/www/"><acronym>MIT</acronym>
	      <application>Kerberos</application> home
	      page</link></para>
	</listitem>

	<listitem>
	  <para><link xlink:href="http://www.pdc.kth.se/heimdal/">Heimdal
	      <application>Kerberos</application> home
	      page</link></para>
	</listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 xml:id="openssl">
    <info><title>OpenSSL</title>
      <authorgroup>
	<author><personname><firstname>Tom</firstname><surname>Rhodes</surname></personname><contrib>Written by </contrib></author>
      </authorgroup>
    </info>

    

    <indexterm>
      <primary>security</primary>
      <secondary>OpenSSL</secondary>
    </indexterm>

    <para>The
      <application>OpenSSL</application> toolkit is included in &os;.
      It provides an encryption transport layer on top of the normal
      communications layer, allowing it to be intertwined with many
      network applications and services.</para>

    <para>Some uses of <application>OpenSSL</application> may include
      encrypted authentication of mail clients and web based
      transactions such as credit card payments.  Many ports such as
      <package>www/apache22</package>, and
      <package>mail/claws-mail</package> offer
      compilation support for building with
      <application>OpenSSL</application>.</para>

    <note>
      <para>In most cases, the Ports Collection will attempt to build
	the <package>security/openssl</package>
	port unless <varname>WITH_OPENSSL_BASE</varname> is explicitly
	set to <quote>yes</quote>.</para>
    </note>

    <para>The version of <application>OpenSSL</application> included
      in &os; supports Secure Sockets Layer v2/v3 (SSLv2/SSLv3) and
      Transport Layer Security v1 (TLSv1) network security protocols
      and can be used as a general cryptographic library.</para>

    <note>
      <para>While <application>OpenSSL</application> supports the
	<acronym>IDEA</acronym> algorithm, it is disabled by default
	due to United States patents.  To use it, the license should
	be reviewed and, if the restrictions are acceptable, the
	<varname>MAKE_IDEA</varname> variable must be set in
	<filename>/etc/make.conf</filename>.</para>
    </note>

    <para>One of the most common uses of
      <application>OpenSSL</application> is to provide certificates
      for use with software applications.  These certificates ensure
      that the credentials of the company or individual are valid
      and not fraudulent.  If the certificate in question has not
      been verified by a <quote>Certificate Authority</quote>
      (<acronym>CA</acronym>), a warning is produced.  A
      <acronym>CA</acronym> is a company, such as <link xlink:href="http://www.verisign.com">VeriSign</link>, signs
      certificates in order to validate the credentials of individuals
      or companies.  This process has a cost associated with it and is
      not a requirement for using certificates; however, it can put
      users at ease.</para>

    <sect2>
      <title>Generating Certificates</title>

      <indexterm>
	<primary>OpenSSL</primary>
	<secondary>certificate generation</secondary>
      </indexterm>

      <para>To generate a certificate, the following command is
	available:</para>

      <screen>&prompt.root; <userinput>openssl req -new -nodes -out req.pem -keyout cert.pem</userinput>
Generating a 1024 bit RSA private key
................++++++
.......................................++++++
writing new private key to 'cert.pem'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:<userinput>US</userinput>
State or Province Name (full name) [Some-State]:<userinput>PA</userinput>
Locality Name (eg, city) []:<userinput>Pittsburgh</userinput>
Organization Name (eg, company) [Internet Widgits Pty Ltd]:<userinput>My Company</userinput>
Organizational Unit Name (eg, section) []:<userinput>Systems Administrator</userinput>
Common Name (eg, YOUR name) []:<userinput>localhost.example.org</userinput>
Email Address []:<userinput>trhodes@FreeBSD.org</userinput>

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:<userinput>SOME PASSWORD</userinput>
An optional company name []:<userinput>Another Name</userinput></screen>

      <para>Notice the response directly after the <quote>Common
	  Name</quote> prompt shows a domain name.  This prompt
	requires a server name to be entered for verification
	purposes and placing anything but a domain name yields a
	useless certificate.  Other options, such as the expire
	time and alternate encryption algorithms, are available.  A
	complete list of options is described in
	&man.openssl.1;.</para>

      <para>Two files should now exist in the directory in which this
	command was issued.  The certificate request,
	<filename>req.pem</filename>, may be sent to a
	<acronym>CA</acronym> who will validate the entered
	credentials, sign the request, and return the signed
	certificate.  The second file is named
	<filename>cert.pem</filename> and is the private key for the
	certificate and should be protected at all costs.  If this
	falls in the hands of others it can be used to impersonate
	the user or the server.</para>

      <para>In cases where a signature from a <acronym>CA</acronym>
	is not required, a self signed certificate can be created.
	First, generate the <acronym>RSA</acronym> key:</para>

      <screen>&prompt.root; <userinput>openssl dsaparam -rand -genkey -out myRSA.key 1024</userinput></screen>

      <para>Next, generate the <acronym>CA</acronym> key:</para>

      <screen>&prompt.root; <userinput>openssl gendsa -des3 -out myca.key myRSA.key</userinput></screen>

      <para>Use this key to create the certificate:</para>

      <screen>&prompt.root; <userinput>openssl req -new -x509 -days 365 -key myca.key -out new.crt</userinput></screen>

      <para>Two new files should appear in the directory: a
	certificate authority signature file,
	<filename>myca.key</filename> and the certificate itself,
	<filename>new.crt</filename>.  These should be placed in a
	directory, preferably under <filename>/etc</filename>, which is readable only by
	<systemitem class="username">root</systemitem>.  Permissions of 0700 are
	appropriate and can be set using &man.chmod.1;.</para>
    </sect2>

    <sect2>
      <title>Using Certificates</title>

      <para>One use for a certificate is to encrypt connections to the
	<application>Sendmail</application> <acronym>MTA</acronym>.
	This prevents the use of clear text authentication for users
	who send mail via the local <acronym>MTA</acronym>.</para>

      <note>
	<para>Some <acronym>MUA</acronym>s will display error if the
	  user has not installed the certificate locally.  Refer to
	  the documentation included with the software for more
	  information on certificate installation.</para>
      </note>

      <para>To configure <application>Sendmail</application>, the
	following lines should be placed in the local
	<filename>.mc</filename> file:</para>

      <programlisting>dnl SSL Options
define(`confCACERT_PATH',`/etc/certs')dnl
define(`confCACERT',`/etc/certs/new.crt')dnl
define(`confSERVER_CERT',`/etc/certs/new.crt')dnl
define(`confSERVER_KEY',`/etc/certs/myca.key')dnl
define(`confTLS_SRV_OPTIONS', `V')dnl</programlisting>

      <para>In this example,  <filename>/etc/certs/</filename>
	stores the certificate and key files locally.  After saving
	the edits, rebuild the local <filename>.cf</filename> file by
	typing
	<command>make install</command>
	within <filename>/etc/mail</filename>.
	Follow that up with <command>make
	  restart</command> which should
	start the <application>Sendmail</application> daemon.</para>

      <para>If all went well, there will be no error messages in
	<filename>/var/log/maillog</filename> and
	<application>Sendmail</application> will show up in the
	process list.</para>

      <para>For a simple test, connect to the mail server using
	&man.telnet.1;:</para>

      <screen>&prompt.root; <userinput>telnet example.com 25</userinput>
Trying 192.0.34.166...
Connected to <systemitem class="fqdomainname">example.com</systemitem>.
Escape character is '^]'.
220 <systemitem class="fqdomainname">example.com</systemitem> ESMTP Sendmail 8.12.10/8.12.10; Tue, 31 Aug 2004 03:41:22 -0400 (EDT)
<userinput>ehlo example.com</userinput>
250-example.com Hello example.com [192.0.34.166], pleased to meet you
250-ENHANCEDSTATUSCODES
250-PIPELINING
250-8BITMIME
250-SIZE
250-DSN
250-ETRN
250-AUTH LOGIN PLAIN
250-STARTTLS
250-DELIVERBY
250 HELP
<userinput>quit</userinput>
221 2.0.0 <systemitem class="fqdomainname">example.com</systemitem> closing connection
Connection closed by foreign host.</screen>

      <para>If the <quote>STARTTLS</quote> line appears in the
	output, everything is working correctly.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="ipsec">
    <info><title><acronym>VPN</acronym> over IPsec</title>
      <authorgroup>
	<author><personname><firstname>Nik</firstname><surname>Clayton</surname></personname><affiliation>
	    <address><email>nik@FreeBSD.org</email></address>
	  </affiliation><contrib>Written by </contrib></author>
      </authorgroup>
    </info>

    

    <indexterm>
      <primary>IPsec</primary>
    </indexterm>

    <sect2>
      <info><title>Understanding IPsec</title>
	<authorgroup>
	  <author><personname><firstname>Hiten M.</firstname><surname>Pandya</surname></personname><affiliation>
	      <address><email>hmp@FreeBSD.org</email></address>
	    </affiliation><contrib>Written by </contrib></author>
	</authorgroup>
      </info>

      

      <para>This section demonstrates the process of setting up IPsec.
	It assumes familiarity with the concepts of building a custom
	kernel (see <xref linkend="kernelconfig"/>).</para>

      <para><emphasis>IPsec</emphasis> is a protocol which sits on
	top of the Internet Protocol (<acronym>IP</acronym>) layer.
	It allows two or more hosts to communicate in a secure manner.
	The &os; IPsec <quote>network stack</quote> is based on the
	<link xlink:href="http://www.kame.net/">KAME</link> implementation,
	which has support for both IPv4 and IPv6.</para>

      <indexterm>
	<primary>IPsec</primary>
	<secondary>ESP</secondary>
      </indexterm>

      <indexterm>
	<primary>IPsec</primary>
	<secondary>AH</secondary>
      </indexterm>

      <para>IPsec consists of two sub-protocols:</para>

      <itemizedlist>
	<listitem>
	  <para><emphasis>Encapsulated Security Payload
	      <acronym>ESP</acronym>)</emphasis>: this protocol
	    protects the IP packet data from third party interference
	    by encrypting the contents using symmetric cryptography
	    algorithms such as Blowfish and 3DES.</para>
	</listitem>

	<listitem>
	  <para><emphasis>Authentication Header
	      (<acronym>AH</acronym>)</emphasis>: this protocol
	    protects the IP packet header from third party
	    interference and spoofing by computing a cryptographic
	    checksum and hashing the IP packet header fields with a
	    secure hashing function.  This is then followed by an
	    additional header that contains the hash, to allow the
	    information in the packet to be authenticated.</para>
	</listitem>
      </itemizedlist>

      <para><acronym>ESP</acronym> and <acronym>AH</acronym> can
	either be used together or separately, depending on the
	environment.</para>

      <indexterm>
	<primary>VPN</primary>
      </indexterm>

      <indexterm>
	<primary>virtual private network</primary>
	<see>VPN</see>
      </indexterm>

      <para>IPsec can either be used to directly encrypt the traffic
	between two hosts using <emphasis>Transport Mode</emphasis> or
	to build <quote>virtual tunnels</quote> using
	<emphasis>Tunnel Mode</emphasis>.  The latter mode is more
	commonly known as a <emphasis>Virtual Private Network
	(<acronym>VPN</acronym>)</emphasis>.  Consult &man.ipsec.4;
	for detailed information on the IPsec subsystem in
	&os;.</para>

      <para>To add IPsec support to the kernel, add the following
	options to the custom kernel configuration file:</para>

      <indexterm>
	<primary>kernel options</primary>
	<secondary>IPSEC</secondary>
      </indexterm>

      <screen>options   IPSEC        #IP security
device    crypto</screen>

      <indexterm>
	<primary>kernel options</primary>
	<secondary>IPSEC_DEBUG</secondary>
      </indexterm>

      <para>If IPsec debugging support is desired, the following
	kernel option should also be added:</para>

      <screen>options   IPSEC_DEBUG  #debug for IP security</screen>
    </sect2>

    <sect2>
      <title><acronym>VPN</acronym> Between a Home and Corporate
	Network</title>

      <indexterm>
	<primary>VPN</primary>
	<secondary>creating</secondary>
      </indexterm>

      <para>There is no standard for what constitutes a
	<acronym>VPN</acronym>.  <acronym>VPN</acronym>s can be
	implemented using a number of different technologies, each
	of which has their own strengths and weaknesses.  This
	section presents the strategies used for implementing a
	<acronym>VPN</acronym> for the following scenario:</para>

      <itemizedlist>
	<listitem>
	  <para>There are at least two sites where each site is using
	    IP internally.</para>
	</listitem>

	<listitem>
	  <para>Both sites are connected to the Internet through a
	    gateway that is running &os;.</para>
	</listitem>

	<listitem>
	  <para>The gateway on each network has at least one public
	    IP address.</para>
	</listitem>

	<listitem>
	  <para>The internal addresses of the two networks can be
	    either public or private IP addresses.  However, the
	    address space must not collide.  For example, both
	    networks cannot use
	    <systemitem class="ipaddress">192.168.1.x</systemitem>.</para>
	</listitem>
      </itemizedlist>

      <sect3>
	<info><title>Configuring IPsec on &os;</title>
	  <authorgroup>
	    <author><personname><firstname>Tom</firstname><surname>Rhodes</surname></personname><affiliation>
		<address><email>trhodes@FreeBSD.org</email></address>
	      </affiliation><contrib>Written by </contrib></author>
	  </authorgroup>
	</info>

	

	<para>To begin,
	  <package>security/ipsec-tools</package>
	  must be installed from the Ports Collection.  This software
	  provides a number of applications which support the
	  configuration.</para>

	<para>The next requirement is to create two &man.gif.4;
	  pseudo-devices which will be used to tunnel packets and
	  allow both networks to communicate properly.  As
	  <systemitem class="username">root</systemitem>, run the following commands,
	  replacing <replaceable>internal</replaceable> and
	  <replaceable>external</replaceable> with the real IP
	  addresses of the internal and external interfaces of the two
	  gateways:</para>

	<screen>&prompt.root; <userinput>ifconfig gif0 create</userinput></screen>

	<screen>&prompt.root; <userinput>ifconfig gif0 internal1 internal2</userinput></screen>

	<screen>&prompt.root; <userinput>ifconfig gif0 tunnel external1 external2</userinput></screen>

	<para>In this example, the corporate <acronym>LAN</acronym>'s
	  external <acronym>IP</acronym> address is
	  <systemitem class="ipaddress">172.16.5.4</systemitem> and its internal
	  <acronym>IP</acronym> address is
	  <systemitem class="ipaddress">10.246.38.1</systemitem>.  The home
	  <acronym>LAN</acronym>'s external <acronym>IP</acronym>
	  address is <systemitem class="ipaddress">192.168.1.12</systemitem> and
	  its internal private <acronym>IP</acronym> address is
	  <systemitem class="ipaddress">10.0.0.5</systemitem>.</para>

	<para>If this is confusing, review the following example
	  output from &man.ifconfig.8;:</para>

	<programlisting>Gateway 1:

gif0: flags=8051 mtu 1280
tunnel inet 172.16.5.4 --&gt; 192.168.1.12
inet6 fe80::2e0:81ff:fe02:5881%gif0 prefixlen 64 scopeid 0x6
inet 10.246.38.1 --&gt; 10.0.0.5 netmask 0xffffff00

Gateway 2:

gif0: flags=8051 mtu 1280
tunnel inet 192.168.1.12 --&gt; 172.16.5.4
inet 10.0.0.5 --&gt; 10.246.38.1 netmask 0xffffff00
inet6 fe80::250:bfff:fe3a:c1f%gif0 prefixlen 64 scopeid 0x4</programlisting>

	<para>Once complete, both internal <acronym>IP</acronym>
	  addresses should be reachable using &man.ping.8;:</para>

	<programlisting>priv-net# ping 10.0.0.5
PING 10.0.0.5 (10.0.0.5): 56 data bytes
64 bytes from 10.0.0.5: icmp_seq=0 ttl=64 time=42.786 ms
64 bytes from 10.0.0.5: icmp_seq=1 ttl=64 time=19.255 ms
64 bytes from 10.0.0.5: icmp_seq=2 ttl=64 time=20.440 ms
64 bytes from 10.0.0.5: icmp_seq=3 ttl=64 time=21.036 ms
--- 10.0.0.5 ping statistics ---
4 packets transmitted, 4 packets received, 0% packet loss
round-trip min/avg/max/stddev = 19.255/25.879/42.786/9.782 ms

corp-net# ping 10.246.38.1
PING 10.246.38.1 (10.246.38.1): 56 data bytes
64 bytes from 10.246.38.1: icmp_seq=0 ttl=64 time=28.106 ms
64 bytes from 10.246.38.1: icmp_seq=1 ttl=64 time=42.917 ms
64 bytes from 10.246.38.1: icmp_seq=2 ttl=64 time=127.525 ms
64 bytes from 10.246.38.1: icmp_seq=3 ttl=64 time=119.896 ms
64 bytes from 10.246.38.1: icmp_seq=4 ttl=64 time=154.524 ms
--- 10.246.38.1 ping statistics ---
5 packets transmitted, 5 packets received, 0% packet loss
round-trip min/avg/max/stddev = 28.106/94.594/154.524/49.814 ms</programlisting>

	<para>As expected, both sides have the ability to send and
	  receive <acronym>ICMP</acronym> packets from the privately
	  configured addresses.  Next, both gateways must be told how
	  to route packets in order to correctly send traffic from
	  either network.  The following command will achieve this
	  goal:</para>

	<screen>&prompt.root; <userinput>corp-net# route add 10.0.0.0 10.0.0.5 255.255.255.0</userinput></screen>

	<screen>&prompt.root; <userinput>corp-net# route add net 10.0.0.0: gateway 10.0.0.5</userinput></screen>

	<screen>&prompt.root; <userinput>priv-net# route add 10.246.38.0 10.246.38.1 255.255.255.0</userinput></screen>

	<screen>&prompt.root; <userinput>priv-net# route add host 10.246.38.0: gateway 10.246.38.1</userinput></screen>

	<para>At this point, internal machines should be reachable
	  from each gateway as well as from machines behind the
	  gateways.  Again, use &man.ping.8; to confirm:</para>

	<programlisting>corp-net# ping 10.0.0.8
PING 10.0.0.8 (10.0.0.8): 56 data bytes
64 bytes from 10.0.0.8: icmp_seq=0 ttl=63 time=92.391 ms
64 bytes from 10.0.0.8: icmp_seq=1 ttl=63 time=21.870 ms
64 bytes from 10.0.0.8: icmp_seq=2 ttl=63 time=198.022 ms
64 bytes from 10.0.0.8: icmp_seq=3 ttl=63 time=22.241 ms
64 bytes from 10.0.0.8: icmp_seq=4 ttl=63 time=174.705 ms
--- 10.0.0.8 ping statistics ---
5 packets transmitted, 5 packets received, 0% packet loss
round-trip min/avg/max/stddev = 21.870/101.846/198.022/74.001 ms

priv-net# ping 10.246.38.107
PING 10.246.38.1 (10.246.38.107): 56 data bytes
64 bytes from 10.246.38.107: icmp_seq=0 ttl=64 time=53.491 ms
64 bytes from 10.246.38.107: icmp_seq=1 ttl=64 time=23.395 ms
64 bytes from 10.246.38.107: icmp_seq=2 ttl=64 time=23.865 ms
64 bytes from 10.246.38.107: icmp_seq=3 ttl=64 time=21.145 ms
64 bytes from 10.246.38.107: icmp_seq=4 ttl=64 time=36.708 ms
--- 10.246.38.107 ping statistics ---
5 packets transmitted, 5 packets received, 0% packet loss
round-trip min/avg/max/stddev = 21.145/31.721/53.491/12.179 ms</programlisting>

	<para>Setting up the tunnels is the easy part.  Configuring a
	  secure link is a more in depth process.  The following
	  configuration uses pre-shared (<acronym>PSK</acronym>)
	  <acronym>RSA</acronym> keys.  Other than the
	  <acronym>IP</acronym> addresses, the
	  <filename>/usr/local/etc/racoon/racoon.conf</filename> on
	  both gateways will be identical and look similar to:</para>

	<programlisting>path    pre_shared_key  "/usr/local/etc/racoon/psk.txt"; #location of pre-shared key file
log     debug;	#log verbosity setting: set to 'notify' when testing and debugging is complete

padding	# options are not to be changed
{
        maximum_length  20;
        randomize       off;
        strict_check    off;
        exclusive_tail  off;
}

timer	# timing options. change as needed
{
        counter         5;
        interval        20 sec;
        persend         1;
#       natt_keepalive  15 sec;
        phase1          30 sec;
        phase2          15 sec;
}

listen	# address [port] that racoon will listen on
{
        isakmp          172.16.5.4 [500];
        isakmp_natt     172.16.5.4 [4500];
}

remote  192.168.1.12 [500]
{
        exchange_mode   main,aggressive;
        doi             ipsec_doi;
        situation       identity_only;
        my_identifier   address 172.16.5.4;
        peers_identifier        address 192.168.1.12;
        lifetime        time 8 hour;
        passive         off;
        proposal_check  obey;
#       nat_traversal   off;
        generate_policy off;

                        proposal {
                                encryption_algorithm    blowfish;
                                hash_algorithm          md5;
                                authentication_method   pre_shared_key;
                                lifetime time           30 sec;
                                dh_group                1;
                        }
}

sainfo  (address 10.246.38.0/24 any address 10.0.0.0/24 any)	# address $network/$netmask $type address $network/$netmask $type ( $type being any or esp)
{								# $network must be the two internal networks you are joining.
        pfs_group       1;
        lifetime        time    36000 sec;
        encryption_algorithm    blowfish,3des,des;
        authentication_algorithm        hmac_md5,hmac_sha1;
        compression_algorithm   deflate;
}</programlisting>

	<para>For descriptions of each available option, refer to the
	  manual page for <filename>racoon.conf</filename>.</para>

	<para>The Security Policy Database (<acronym>SPD</acronym>)
	  needs to be configured so that &os; and
	  <application>racoon</application> are able to encrypt and
	  decrypt network traffic between the hosts.</para>

	<para>This can be achieved with a shell script, similar to the
	  following, on the corporate gateway.  This file will be used
	  during system initialization and should be saved as
	  <filename>/usr/local/etc/racoon/setkey.conf</filename>.</para>

	<programlisting>flush;
spdflush;
# To the home network
spdadd 10.246.38.0/24 10.0.0.0/24 any -P out ipsec esp/tunnel/172.16.5.4-192.168.1.12/use;
spdadd 10.0.0.0/24 10.246.38.0/24 any -P in ipsec esp/tunnel/192.168.1.12-172.16.5.4/use;</programlisting>

	<para>Once in place, <application>racoon</application> may be
	  started on both gateways using the following command:</para>

	<screen>&prompt.root; <userinput>/usr/local/sbin/racoon -F -f /usr/local/etc/racoon/racoon.conf -l /var/log/racoon.log</userinput></screen>

	<para>The output should be similar to the following:</para>

	<programlisting>corp-net# /usr/local/sbin/racoon -F -f /usr/local/etc/racoon/racoon.conf
Foreground mode.
2006-01-30 01:35:47: INFO: begin Identity Protection mode.
2006-01-30 01:35:48: INFO: received Vendor ID: KAME/racoon
2006-01-30 01:35:55: INFO: received Vendor ID: KAME/racoon
2006-01-30 01:36:04: INFO: ISAKMP-SA established 172.16.5.4[500]-192.168.1.12[500] spi:623b9b3bd2492452:7deab82d54ff704a
2006-01-30 01:36:05: INFO: initiate new phase 2 negotiation: 172.16.5.4[0]192.168.1.12[0]
2006-01-30 01:36:09: INFO: IPsec-SA established: ESP/Tunnel 192.168.1.12[0]-&gt;172.16.5.4[0] spi=28496098(0x1b2d0e2)
2006-01-30 01:36:09: INFO: IPsec-SA established: ESP/Tunnel 172.16.5.4[0]-&gt;192.168.1.12[0] spi=47784998(0x2d92426)
2006-01-30 01:36:13: INFO: respond new phase 2 negotiation: 172.16.5.4[0]192.168.1.12[0]
2006-01-30 01:36:18: INFO: IPsec-SA established: ESP/Tunnel 192.168.1.12[0]-&gt;172.16.5.4[0] spi=124397467(0x76a279b)
2006-01-30 01:36:18: INFO: IPsec-SA established: ESP/Tunnel 172.16.5.4[0]-&gt;192.168.1.12[0] spi=175852902(0xa7b4d66)</programlisting>

	<para>To ensure the tunnel is working properly, switch to
	  another console and use &man.tcpdump.1; to view network
	  traffic using the following command.  Replace
	  <literal>em0</literal> with the network interface card as
	  required:</para>

	<screen>&prompt.root; <userinput>tcpdump -i em0 host 172.16.5.4 and dst 192.168.1.12</userinput></screen>

	<para>Data similar to the following should appear on the
	  console.  If not, there is an issue and debugging the
	  returned data will be required.</para>

	<programlisting>01:47:32.021683 IP corporatenetwork.com &gt; 192.168.1.12.privatenetwork.com: ESP(spi=0x02acbf9f,seq=0xa)
01:47:33.022442 IP corporatenetwork.com &gt; 192.168.1.12.privatenetwork.com: ESP(spi=0x02acbf9f,seq=0xb)
01:47:34.024218 IP corporatenetwork.com &gt; 192.168.1.12.privatenetwork.com: ESP(spi=0x02acbf9f,seq=0xc)</programlisting>

	<para>At this point, both networks should be available and
	  seem to be part of the same network.  Most likely both
	  networks are protected by a firewall.  To allow traffic to
	  flow between them, rules need to be added to pass packets.
	  For the &man.ipfw.8; firewall, add the following lines to
	  the firewall configuration file:</para>

	<programlisting>ipfw add 00201 allow log esp from any to any
ipfw add 00202 allow log ah from any to any
ipfw add 00203 allow log ipencap from any to any
ipfw add 00204 allow log udp from any 500 to any</programlisting>

	<note>
	  <para>The rule numbers may need to be altered depending on
	    the current host configuration.</para>
	</note>

	<para>For users of &man.pf.4; or &man.ipf.8;, the following
	  rules should do the trick:</para>

	<programlisting>pass in quick proto esp from any to any
pass in quick proto ah from any to any
pass in quick proto ipencap from any to any
pass in quick proto udp from any port = 500 to any port = 500
pass in quick on gif0 from any to any
pass out quick proto esp from any to any
pass out quick proto ah from any to any
pass out quick proto ipencap from any to any
pass out quick proto udp from any port = 500 to any port = 500
pass out quick on gif0 from any to any</programlisting>

	<para>Finally, to allow the machine to start support for the
	  <acronym>VPN</acronym> during system initialization, add the
	  following lines to <filename>/etc/rc.conf</filename>:</para>

	<programlisting>ipsec_enable="YES"
ipsec_program="/usr/local/sbin/setkey"
ipsec_file="/usr/local/etc/racoon/setkey.conf" # allows setting up spd policies on boot
racoon_enable="yes"</programlisting>
      </sect3>
    </sect2>
  </sect1>

  <sect1 xml:id="openssh">
    <info><title>OpenSSH</title>
      <authorgroup>
	<author><personname><firstname>Chern</firstname><surname>Lee</surname></personname><contrib>Contributed by </contrib></author>
	<!-- 21 April 2001 -->
      </authorgroup>
    </info>

    

    <indexterm><primary>OpenSSH</primary></indexterm>
    <indexterm>
      <primary>security</primary>
      <secondary>OpenSSH</secondary>
    </indexterm>

    <para><application>OpenSSH</application> is a set of network
      connectivity tools used to access remote machines securely.
      Additionally, TCP/IP connections can be tunneled/forwarded
      securely through <acronym>SSH</acronym> connections.
      <application>OpenSSH</application> encrypts all traffic to
      effectively eliminate eavesdropping, connection hijacking, and
      other network-level attacks.</para>

    <para><application>OpenSSH</application> is maintained by the
      OpenBSD project and is installed by default in &os;.  It is
      compatible with both <acronym>SSH</acronym> version 1 and 2
      protocols.</para>

    <sect2>
      <title>Advantages of Using
	<application>OpenSSH</application></title>

      <para>When data is sent over the network in an unencrypted form,
	network sniffers anywhere in between the client and server
	can steal user/password information or data transferred
	during the session.  <application>OpenSSH</application> offers
	a variety of authentication and encryption methods to prevent
	this from happening.</para>
    </sect2>

    <sect2>
      <title>Enabling the SSH Server</title>

      <indexterm>
	<primary>OpenSSH</primary>
	<secondary>enabling</secondary>
      </indexterm>

      <para>To see if &man.sshd.8; is enabled, check
	<filename>/etc/rc.conf</filename> for this line:</para>

      <programlisting>sshd_enable="YES"</programlisting>

      <para>This will start &man.sshd.8;, the daemon program for
	<application>OpenSSH</application>, the next time the system
	initializes.  Alternatively, it is possible to use
	&man.service.8; to start <application>OpenSSH</application>
	now:</para>

      <screen>&prompt.root; <userinput>service sshd start</userinput></screen>
    </sect2>

    <sect2>
      <title>The SSH Client</title>

      <indexterm>
	<primary>OpenSSH</primary>
	<secondary>client</secondary>
      </indexterm>

      <para>To use &man.ssh.1; to connect to a system running
	&man.sshd.8;, specify the username and host to log
	into:</para>

      <screen>&prompt.root; <userinput>ssh user@example.com</userinput>
Host key not found from the list of known hosts.
Are you sure you want to continue connecting (yes/no)? <userinput>yes</userinput>
Host 'example.com' added to the list of known hosts.
user@example.com's password: <userinput>*******</userinput></screen>

      <para><acronym>SSH</acronym> utilizes a key fingerprint system
	to verify the authenticity of the server when the client
	connects.  The user is prompted to type
	<literal>yes</literal> when connecting for the first time.
	Future attempts to login are verified against the saved
	fingerprint key and the &man.ssh.1; client will display an
	alert if the saved fingerprint differs from the received
	fingerprint on future login attempts.  The fingerprints are
	saved in <filename>~/.ssh/known_hosts</filename>.</para>

      <para>By default, recent versions of &man.sshd.8; only accept
	<acronym>SSH</acronym> v2 connections.  The client will use
	version 2 if possible and will fall back to version 1.  The
	client can also be forced to use one or the other by passing
	it the <option>-1</option> or <option>-2</option> for version
	1 or version 2, respectively.  The version 1 compatibility is
	maintained in the client for backwards compatibility with
	older versions.</para>
    </sect2>

    <sect2>
      <title>Secure Copy</title>

      <indexterm>
	<primary>OpenSSH</primary>
	<secondary>secure copy</secondary>
      </indexterm>
      <indexterm>
	<primary>&man.scp.1;</primary>
      </indexterm>

      <para>Use &man.scp.1; to copy a file to or from a remote machine
	in a secure fashion.</para>

      <screen>&prompt.root; <userinput> scp user@example.com:/COPYRIGHT COPYRIGHT</userinput>
user@example.com's password: <userinput>*******</userinput>
COPYRIGHT            100% |*****************************|  4735
00:00
&prompt.root;</screen>

      <para>Since the fingerprint was already saved for this host in
	the previous example, it is verified when using &man.scp.1;
	here.</para>

      <para>The arguments passed to &man.scp.1; are similar to
	&man.cp.1;, with the file or files to copy in the first
	argument, and the destination in the second.  Since the file
	is fetched over the network, through an
	<acronym>SSH</acronym>, connection, one or more of the file
	arguments takes the form
	<option>user@host:&lt;path_to_remote_file&gt;</option>.</para>
    </sect2>

    <sect2>
      <title>Configuration</title>

      <indexterm>
	<primary>OpenSSH</primary>
	<secondary>configuration</secondary>
      </indexterm>

      <para>The system-wide configuration files for both the
	<application>OpenSSH</application> daemon and client reside
	in <filename>/etc/ssh</filename>.</para>

      <para><filename>ssh_config</filename> configures the client
	settings, while <filename>sshd_config</filename> configures
	the daemon.  Each file has its own manual page which describes
	the available configuration options.</para>
    </sect2>

    <sect2 xml:id="security-ssh-keygen">
      <title>&man.ssh-keygen.1;</title>

      <para>Instead of using passwords, &man.ssh-keygen.1; can be used
	to generate <acronym>DSA</acronym> or <acronym>RSA</acronym>
	keys to authenticate a user:</para>

      <screen>&prompt.user; <userinput>ssh-keygen -t dsa</userinput>
Generating public/private dsa key pair.
Enter file in which to save the key (/home/user/.ssh/id_dsa):
Created directory '/home/user/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/user/.ssh/id_dsa.
Your public key has been saved in /home/user/.ssh/id_dsa.pub.
The key fingerprint is:
bb:48:db:f2:93:57:80:b6:aa:bc:f5:d5:ba:8f:79:17 user@host.example.com</screen>

      <para>&man.ssh-keygen.1; will create a public and private key
	pair for use in authentication.  The private key is stored
	in <filename>~/.ssh/id_dsa</filename> or
	<filename>~/.ssh/id_rsa</filename>, whereas the public key
	is stored in <filename>~/.ssh/id_dsa.pub</filename> or
	<filename>~/.ssh/id_rsa.pub</filename>, respectively for the
	<acronym>DSA</acronym> and <acronym>RSA</acronym> key types.
	The public key must be placed in
	<filename>~/.ssh/authorized_keys</filename> on the
	remote machine for both <acronym>RSA</acronym> or
	<acronym>DSA</acronym> keys in order for the setup to
	work.</para>

      <para>This setup allows connections to the remote machine based
	upon <acronym>SSH</acronym> keys instead of passwords.</para>

      <warning>
	<para>Many users believe that keys are secure by design and
	  will use a key without a passphrase.  This is
	  <emphasis>dangerous</emphasis> behavior and the method
	  an administrator may use to verify keys have a passphrase
	  is to view the key manually.  If the private key file
	  contains the word <literal>ENCRYPTED</literal> the key
	  owner is using a passphrase.  While it may still be a weak
	  passphrase, at least if the system is compromised, access
	  to other sites will still require some level of password
	  guessing.  In addition, to better secure end users, the
	  <literal>from</literal> may be placed in the public key
	  file.  For example, adding
	  <literal>from="192.168.10.5</literal> in the front of
	  <literal>ssh-rsa</literal> or <literal>rsa-dsa</literal>
	  prefix will only allow that specific user to login from
	  that host <acronym>IP</acronym>.</para>
      </warning>

      <para>If a passphrase is used in &man.ssh-keygen.1;, the user
	will be prompted for the passphrase each time in order to use
	the private key.  &man.ssh-agent.1; can alleviate the strain
	of repeatedly entering long passphrases, and is explored in
	<xref linkend="security-ssh-agent"/>.</para>

      <warning>
	<para>The various options and files can be different according
	  to the <application>OpenSSH</application> version.  To avoid
	  problems, consult &man.ssh-keygen.1;.</para>
      </warning>
    </sect2>

    <sect2 xml:id="security-ssh-agent">
      <title>Using SSH Agent to Cache Keys</title>

      <para>To load <acronym>SSH</acronym> keys into memory for use,
	without needing to type the passphrase each time, use
	&man.ssh-agent.1; and &man.ssh-add.1;.</para>

      <para>Authentication is handled by &man.ssh-agent.1;, using the
	private key(s) that are loaded into it.  Then,
	&man.ssh-agent.1; should be used to launch another
	application.  At the most basic level, it could spawn a shell
	or a window manager.</para>

      <para>To use &man.ssh-agent.1; in a shell, start it with a shell
	as an argument.  Next, add the identity by running
	&man.ssh-add.1; and providing it the passphrase for the
	private key.  Once these steps have been completed, the user
	will be able to &man.ssh.1; to any host that has the
	corresponding public key installed.  For example:</para>

      <screen>&prompt.user; ssh-agent <replaceable>csh</replaceable>
&prompt.user; ssh-add
Enter passphrase for /home/user/.ssh/id_dsa:
Identity added: /home/user/.ssh/id_dsa (/home/user/.ssh/id_dsa)
&prompt.user;</screen>

      <para>To use &man.ssh-agent.1; in
	<application>&xorg;</application>, a call to &man.ssh-agent.1;
	needs to be placed in <filename>~/.xinitrc</filename>.  This
	provides the &man.ssh-agent.1; services to all programs
	launched in <application>&xorg;</application>.  An example
	<filename>~/.xinitrc</filename> might look like
	this:</para>

      <programlisting>exec ssh-agent <replaceable>startxfce4</replaceable></programlisting>

      <para>This launches &man.ssh-agent.1;, which in turn launches
	<application>XFCE</application>, every time
	<application>&xorg;</application> starts.  Once
	<application>&xorg;</application> has been restarted so that
	the changes can take effect, run &man.ssh-add.1; to load all
	of the <acronym>SSH</acronym> keys.</para>
    </sect2>

    <sect2 xml:id="security-ssh-tunneling">
      <title><acronym>SSH</acronym> Tunneling</title>

      <indexterm>
	<primary>OpenSSH</primary>
	<secondary>tunneling</secondary>
      </indexterm>

      <para><application>OpenSSH</application> has the ability to
	create a tunnel to encapsulate another protocol in an
	encrypted session.</para>

      <para>The following command tells &man.ssh.1; to create a
	tunnel for &man.telnet.1;:</para>

      <screen>&prompt.user; <userinput>ssh -2 -N -f -L 5023:localhost:23 user@foo.example.com</userinput>
&prompt.user;</screen>

      <para>This example uses the following options:</para>

      <variablelist>
	<varlistentry>
	  <term><option>-2</option></term>

	  <listitem>
	    <para>Forces &man.ssh.1; to use version 2 to connect to
	      the server.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>-N</option></term>

	  <listitem>
	    <para>Indicates no command, or tunnel only.  If omitted,
	      &man.ssh.1; initiates a normal session.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>-f</option></term>

	  <listitem>
	    <para>Forces &man.ssh.1; to run in the background.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>-L</option></term>

	  <listitem>
	    <para>Indicates a local tunnel in
	      <replaceable>localport:remotehost:remoteport</replaceable>
	      format.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>user@foo.example.com</option></term>

	  <listitem>
	    <para>The login name to use on the specified remote
	      <acronym>SSH</acronym> server.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <para>An <acronym>SSH</acronym> tunnel works by creating a
	listen socket on <systemitem>localhost</systemitem> on the specified
	port.  It then forwards any connections received on the local
	host/port via the <acronym>SSH</acronym> connection to the
	specified remote host and port.</para>

      <para>In the example, port <replaceable>5023</replaceable> on
	<systemitem>localhost</systemitem> is forwarded to port
	<replaceable>23</replaceable> on <systemitem>localhost</systemitem>
	of the remote machine.  Since <replaceable>23</replaceable>
	is used by &man.telnet.1;, this creates an encrypted
	&man.telnet.1; session through an
	<acronym>SSH</acronym> tunnel.</para>

      <para>This can be used to wrap any number of insecure TCP
	protocols such as SMTP, POP3, and FTP.</para>

      <example>
	<title>Using &man.ssh.1; to Create a Secure Tunnel
	  for SMTP</title>

	<screen>&prompt.user; <userinput>ssh -2 -N -f -L 5025:localhost:25 user@mailserver.example.com</userinput>
user@mailserver.example.com's password: <userinput>*****</userinput>
&prompt.user; <userinput>telnet localhost 5025</userinput>
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 mailserver.example.com ESMTP</screen>

	<para>This can be used in conjunction with &man.ssh-keygen.1;
	  and additional user accounts to create a more seamless
	  <acronym>SSH</acronym> tunneling environment.  Keys can be
	  used in place of typing a password, and the tunnels can be
	  run as a separate user.</para>
      </example>

      <sect3>
	<title>Practical <acronym>SSH</acronym> Tunneling
	  Examples</title>

	<sect4>
	  <title>Secure Access of a POP3 Server</title>

	  <para>In this example, there is an <acronym>SSH</acronym>
	    server that accepts connections from the outside.  On the
	    same network resides a mail server running a POP3 server.
	    To check email in a secure manner, create an
	    <acronym>SSH</acronym> connection to the
	    <acronym>SSH</acronym> server, and tunnel through to the
	    mail server.</para>

	  <screen>&prompt.user; <userinput>ssh -2 -N -f -L 2110:mail.example.com:110 user@ssh-server.example.com</userinput>
user@ssh-server.example.com's password: <userinput>******</userinput></screen>

	  <para>Once the tunnel is up and running, point the email
	    client to send POP3 requests to <systemitem>localhost</systemitem>
	    on port 2110.  This connection will be forwarded securely
	    across the tunnel to
	    <systemitem>mail.example.com</systemitem>.</para>
	</sect4>

	<sect4>
	  <title>Bypassing a Draconian Firewall</title>

	  <para>Some network administrators impose firewall rules
	    which filter both incoming and outgoing connections.  For
	    example, it might limit access from remote machines to
	    ports 22 and 80 to only allow &man.ssh.1; and web surfing.
	    This prevents access to any other service which uses a
	    port other than 22 or 80.</para>

	  <para>The solution is to create an <acronym>SSH</acronym>
	    connection to a machine outside of the network's firewall
	    and use it to tunnel to the desired service.</para>

	  <screen>&prompt.user; <userinput>ssh -2 -N -f -L 8888:music.example.com:8000 user@unfirewalled-system.example.org</userinput>
user@unfirewalled-system.example.org's password: <userinput>*******</userinput></screen>

	  <para>In this example, a streaming Ogg Vorbis client can now
	    be pointed to <systemitem>localhost</systemitem> port 8888, which
	    will be forwarded over to
	    <systemitem>music.example.com</systemitem> on port 8000,
	    successfully bypassing the firewall.</para>
	</sect4>
      </sect3>
    </sect2>

    <sect2>
      <title>The <varname>AllowUsers</varname> Option</title>

      <para>It is often a good idea to limit which users can log in
	and from where using <literal>AllowUsers</literal>.  For
	example, to only allow <systemitem class="username">root</systemitem> to log in
	from <systemitem class="ipaddress">192.168.1.32</systemitem>, add this
	line to <filename>/etc/ssh/sshd_config</filename>:</para>

      <programlisting>AllowUsers root@192.168.1.32</programlisting>

      <para>To allow <systemitem class="username">admin</systemitem> to log in from
	anywhere, list that username by itself:</para>

      <programlisting>AllowUsers admin</programlisting>

      <para>Multiple users should be listed on the same line, like
	so:</para>

      <programlisting>AllowUsers root@192.168.1.32 admin</programlisting>

      <note>
	<para>It is important to list each user that needs to log into
	  this machine; otherwise, they will be locked out.</para>
      </note>

      <para>After making changes to
	<filename>/etc/ssh/sshd_config</filename>, tell &man.sshd.8;
	to reload its configuration file by running:</para>

      <screen>&prompt.root; <userinput>service sshd reload</userinput></screen>
    </sect2>

    <sect2>
      <title>Further Reading</title>

      <para>The <link xlink:href="http://www.openssh.com/">OpenSSH</link>
	website.</para>

      <para>&man.ssh.1;, &man.scp.1;, &man.ssh-keygen.1;,
	&man.ssh-agent.1;, &man.ssh-add.1;, and &man.ssh.config.5; for
	client options.</para>

      <para>&man.sshd.8;, &man.sftp-server.8;, and &man.sshd.config.5;
	for server options.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="fs-acl">
    <info><title>Filesystem Access Control Lists
      (<acronym>ACL</acronym>)s</title>
      <authorgroup>
	<author><personname><firstname>Tom</firstname><surname>Rhodes</surname></personname><contrib>Contributed by </contrib></author>
      </authorgroup>
    </info>

    

    <indexterm>
      <primary>ACL</primary>
    </indexterm>

    <para>Filesystem Access Control Lists (<acronym>ACL</acronym>s)
      extend the standard &unix; permission model in a &posix;.1e
      compatible way.  This permits an administrator to make use of
      and take advantage of a more sophisticated security
      model.</para>

    <para>The &os; <filename>GENERIC</filename> kernel provides
      <acronym>ACL</acronym> support for <acronym>UFS</acronym> file
      systems.  Users who prefer to compile a custom kernel must
      include the following option in their custom kernel
      configuration file:</para>

    <programlisting>options UFS_ACL</programlisting>

    <para>If this option is not compiled in, a warning message will be
      displayed when attempting to mount a filesystem supporting
      <acronym>ACL</acronym>s.  <acronym>ACL</acronym>s rely on
      extended attributes being enabled on the filesystem.  Extended
      attributes are natively supported in
      <acronym>UFS2</acronym>.</para>

    <note>
      <para>A higher level of administrative overhead is required to
	configure extended attributes on <acronym>UFS1</acronym>
	than on <acronym>UFS2</acronym>.  The performance of
	extended attributes on <acronym>UFS2</acronym> is also
	substantially higher.  As a result, <acronym>UFS2</acronym>
	is recommended for use with <acronym>ACL</acronym>s.</para>
    </note>

    <para><acronym>ACL</acronym>s are enabled by the mount-time
      administrative flag, <option>acls</option>, which may be added
      to <filename>/etc/fstab</filename>.  The mount-time flag can
      also be automatically set in a persistent manner using
      &man.tunefs.8; to modify a superblock <acronym>ACL</acronym>s
      flag in the filesystem header.  In general, it is preferred
      to use the superblock flag for several reasons:</para>

    <itemizedlist>
      <listitem>
	<para>The mount-time <acronym>ACL</acronym>s flag cannot be
	  changed by a remount using <option>mount -u</option>.  It
	  requires a complete &man.umount.8; and fresh &man.mount.8;.
	  This means that <acronym>ACL</acronym>s cannot be enabled on
	  the root filesystem after boot.  It also means that the
	  disposition of a filesystem cannot be changed once it is in
	  use.</para>
      </listitem>

      <listitem>
	<para>Setting the superblock flag will cause the filesystem
	  to always be mounted with <acronym>ACL</acronym>s enabled,
	  even if there is not an <filename>fstab</filename> entry
	  or if the devices re-order.  This prevents accidental
	  mounting of the filesystem without <acronym>ACL</acronym>s
	  enabled, which can result in the security problem of
	  <acronym>ACL</acronym>s being improperly enforced.</para>
      </listitem>
    </itemizedlist>

    <note>
      <para>It is desirable to discourage accidental mounting without
	<acronym>ACL</acronym>s enabled, because nasty things can
	happen if <acronym>ACL</acronym>s are enabled, then disabled,
	then re-enabled without flushing the extended attributes.  In
	general, once <acronym>ACL</acronym>s are enabled on a
	filesystem, they should not be disabled, as the resulting file
	protections may not be compatible with those intended by the
	users of the system, and re-enabling <acronym>ACL</acronym>s
	may re-attach the previous <acronym>ACL</acronym>s to files
	that have since had their permissions changed, resulting in
	unpredictable behavior.</para>
    </note>

    <para>Filesystems with <acronym>ACL</acronym>s enabled will
      show a <literal>+</literal> (plus) sign in their permission
      settings when viewed.  For example:</para>

    <programlisting>drwx------  2 robert  robert  512 Dec 27 11:54 private
drwxrwx---+ 2 robert  robert  512 Dec 23 10:57 directory1
drwxrwx---+ 2 robert  robert  512 Dec 22 10:20 directory2
drwxrwx---+ 2 robert  robert  512 Dec 27 11:57 directory3
drwxr-xr-x  2 robert  robert  512 Nov 10 11:54 public_html</programlisting>

    <para>In this example,
      <filename>directory1</filename>,
      <filename>directory2</filename>, and
      <filename>directory3</filename>
      are all taking advantage of <acronym>ACL</acronym>s, whereas
      <filename>public_html</filename>
      is not.</para>

    <sect2>
      <title>Making Use of <acronym>ACL</acronym>s</title>

      <para>Filesystem <acronym>ACL</acronym>s can be viewed using
	&man.getfacl.1;.  For instance, to view the
	<acronym>ACL</acronym> settings on
	<filename>test</filename>:</para>

      <screen>&prompt.user; <userinput>getfacl test</userinput>
	#file:test
	#owner:1001
	#group:1001
	user::rw-
	group::r--
	other::r--</screen>

      <para>To change the <acronym>ACL</acronym> settings on this
	file, use &man.setfacl.1;:</para>

      <screen>&prompt.user; <userinput>setfacl -k test</userinput></screen>

      <para>To remove all of the currently defined
	<acronym>ACL</acronym>s from a file or filesystem, one can use
	<option>-k</option>.  However, the preferred method is to use
	<option>-b</option> as it leaves the basic fields required
	for <acronym>ACL</acronym>s to work.</para>

      <screen>&prompt.user; <userinput>setfacl -m u:trhodes:rwx,group:web:r--,o::--- test</userinput></screen>

      <para>In this example, <option>-m</option> is used to modify the
	default <acronym>ACL</acronym> entries.  Since there were no
	pre-defined entries, as they were removed by the previous
	command, it restores the default options and assign the
	options listed.  If a user or group is added which does not
	exist on the system, an <errorname>Invalid
	  argument</errorname> error will be displayed.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="security-portaudit">
    <info><title>Monitoring Third Party Security Issues</title>
      <authorgroup>
	<author><personname><firstname>Tom</firstname><surname>Rhodes</surname></personname><contrib>Contributed by </contrib></author>
      </authorgroup>
    </info>

    

    <indexterm>
      <primary>portaudit</primary>
    </indexterm>

    <para>In recent years, the security world has made many
      improvements to how vulnerability assessment is handled.  The
      threat of system intrusion increases as third party utilities
      are installed and configured for virtually any operating
      system available today.</para>

    <para>Vulnerability assessment is a key factor in security.
      While &os; releases advisories for the base system, doing so
      for every third party utility is beyond the &os; Project's
      capability.  There is a way to mitigate third party
      vulnerabilities and warn administrators of known security
      issues.  A &os; add on utility known as
      <application>portaudit</application> exists solely for this
      purpose.</para>

    <para>The
      <package>ports-mgmt/portaudit</package>
      port polls a database, which is updated and maintained by the
      &os; Security Team and ports developers, for known security
      issues.</para>

    <para>To install <application>portaudit</application> from the
      Ports Collection:</para>

    <screen>&prompt.root; <userinput>cd /usr/ports/ports-mgmt/portaudit &amp;&amp; make install clean</userinput></screen>

    <para>During the installation, the configuration files for
      &man.periodic.8; will be updated, permitting
      <application>portaudit</application> output in the daily
      security runs.  Ensure that the daily security run emails, which
      are sent to <systemitem class="username">root</systemitem>'s email account, are
      being read.  No other configuration is required.</para>

    <para>After installation, an administrator can update the
      database and view known vulnerabilities in installed packages
      by invoking the following command:</para>

    <screen>&prompt.root; <userinput>portaudit -Fda</userinput></screen>

    <note>
      <para>The database is automatically updated during the
	&man.periodic.8; run.  The above command is optional and can
	be used to manually update the database now.</para>
    </note>

    <para>To audit the third party utilities installed as part of
      the Ports Collection at anytime, an administrator can run the
      following command:</para>

    <screen>&prompt.root; <userinput>portaudit -a</userinput></screen>

    <para><application>portaudit</application> will display messages
      for any installed vulnerable packages:</para>

    <programlisting>Affected package: cups-base-1.1.22.0_1
Type of problem: cups-base -- HPGL buffer overflow vulnerability.
Reference: &lt;http://www.FreeBSD.org/ports/portaudit/40a3bca2-6809-11d9-a9e7-0001020eed82.html&gt;

1 problem(s) in your installed packages found.

You are advised to update or deinstall the affected package(s) immediately.</programlisting>

    <para>By pointing a web browser to the displayed
      <acronym>URL</acronym>, an administrator may obtain more
      information about the vulnerability.  This will include the
      versions affected, by &os; port version, along with other web
      sites which may contain security advisories.</para>

    <para><application>portaudit</application> is a powerful utility
      and is extremely useful when coupled with the
      <application>portmaster</application> port.</para>
  </sect1>

  <sect1 xml:id="security-advisories">
    <info><title>&os; Security Advisories</title>
      <authorgroup>
	<author><personname><firstname>Tom</firstname><surname>Rhodes</surname></personname><contrib>Contributed by </contrib></author>
      </authorgroup>
    </info>

    

    <indexterm>
      <primary>&os; Security Advisories</primary>
    </indexterm>

    <para>Like many producers of quality operating systems, the &os;
      Project has a security team which is responsible for
      determining the End-of-Life (<acronym>EoL</acronym>) date for each
      &os; release and to provide security updates for supported
      releases which have not yet reached their
      <acronym>EoL</acronym>.  More information about the &os;
      security team and the supported releases is available on the
      <link xlink:href="&url.base;/security">&os; security
	page</link>.</para>

    <para>One task of the security team is to respond to reported
      security vulnerabilities in the &os; operating system.  Once a
      vulnerability is confirmed, the security team verifies the steps
      necessary to fix the vulnerability and updates the source code
      with the fix.  It then publishes the details as a
      <quote>Security Advisory</quote>.  Security
      advisories are published on the <link
	xlink:href="&url.base;/security/advisories.html">&os; website</link>
      and mailed to the &a.security-notifications.name;,
      &a.security.name;, and &a.announce.name; mailing lists.</para>  

      <para>This section describes the format of a &os;
	security advisory.</para>

    <sect2>
      <title>Format of a Security Advisory</title>

      <para>Here is an example of a &os; security advisory:</para>

      <programlisting>=============================================================================
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

=============================================================================
FreeBSD-SA-14:04.bind                                       Security Advisory
                                                          The FreeBSD Project

Topic:          BIND remote denial of service vulnerability

Category:       contrib
Module:         bind
Announced:      2014-01-14
Credits:        ISC
Affects:        FreeBSD 8.x and FreeBSD 9.x
Corrected:      2014-01-14 19:38:37 UTC (stable/9, 9.2-STABLE)
                2014-01-14 19:42:28 UTC (releng/9.2, 9.2-RELEASE-p3)
                2014-01-14 19:42:28 UTC (releng/9.1, 9.1-RELEASE-p10)
                2014-01-14 19:38:37 UTC (stable/8, 8.4-STABLE)
                2014-01-14 19:42:28 UTC (releng/8.4, 8.4-RELEASE-p7)
                2014-01-14 19:42:28 UTC (releng/8.3, 8.3-RELEASE-p14)
CVE Name:       CVE-2014-0591

For general information regarding FreeBSD Security Advisories,
including descriptions of the fields above, security branches, and the
following sections, please visit &lt;URL:http://security.FreeBSD.org/&gt;.

I.   Background

BIND 9 is an implementation of the Domain Name System (DNS) protocols.
The named(8) daemon is an Internet Domain Name Server.

II.  Problem Description

Because of a defect in handling queries for NSEC3-signed zones, BIND can
crash with an "INSIST" failure in name.c when processing queries possessing
certain properties.  This issue only affects authoritative nameservers with
at least one NSEC3-signed zone.  Recursive-only servers are not at risk.

III. Impact

An attacker who can send a specially crafted query could cause named(8)
to crash, resulting in a denial of service.

IV.  Workaround

No workaround is available, but systems not running authoritative DNS service
with at least one NSEC3-signed zone using named(8) are not vulnerable.

V.   Solution

Perform one of the following:

1) Upgrade your vulnerable system to a supported FreeBSD stable or
release / security branch (releng) dated after the correction date.

2) To update your vulnerable system via a source code patch:

The following patches have been verified to apply to the applicable
FreeBSD release branches.

a) Download the relevant patch from the location below, and verify the
detached PGP signature using your PGP utility.

[FreeBSD 8.3, 8.4, 9.1, 9.2-RELEASE and 8.4-STABLE]
# fetch http://security.FreeBSD.org/patches/SA-14:04/bind-release.patch
# fetch http://security.FreeBSD.org/patches/SA-14:04/bind-release.patch.asc
# gpg --verify bind-release.patch.asc

[FreeBSD 9.2-STABLE]
# fetch http://security.FreeBSD.org/patches/SA-14:04/bind-stable-9.patch
# fetch http://security.FreeBSD.org/patches/SA-14:04/bind-stable-9.patch.asc
# gpg --verify bind-stable-9.patch.asc

b) Execute the following commands as root:

# cd /usr/src
# patch &lt; /path/to/patch

Recompile the operating system using buildworld and installworld as
described in &lt;URL:http://www.FreeBSD.org/handbook/makeworld.html&gt;.

Restart the applicable daemons, or reboot the system.

3) To update your vulnerable system via a binary patch:

Systems running a RELEASE version of FreeBSD on the i386 or amd64
platforms can be updated via the freebsd-update(8) utility:

# freebsd-update fetch
# freebsd-update install

VI.  Correction details

The following list contains the correction revision numbers for each
affected branch.

Branch/path                                                      Revision
- -------------------------------------------------------------------------
stable/8/                                                         r260646
releng/8.3/                                                       r260647
releng/8.4/                                                       r260647
stable/9/                                                         r260646
releng/9.1/                                                       r260647
releng/9.2/                                                       r260647
- -------------------------------------------------------------------------

To see which files were modified by a particular revision, run the
following command, replacing NNNNNN with the revision number, on a
machine with Subversion installed:

# svn diff -cNNNNNN --summarize svn://svn.freebsd.org/base

Or visit the following URL, replacing NNNNNN with the revision number:

&lt;URL:http://svnweb.freebsd.org/base?view=revision&amp;revision=NNNNNN&gt;

VII. References

&lt;URL:https://kb.isc.org/article/AA-01078&gt;

&lt;URL:http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0591&gt;

The latest revision of this advisory is available at
&lt;URL:http://security.FreeBSD.org/advisories/FreeBSD-SA-14:04.bind.asc&gt;
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJS1ZTYAAoJEO1n7NZdz2rnOvQP/2/68/s9Cu35PmqNtSZVVxVG
ZSQP5EGWx/lramNf9566iKxOrLRMq/h3XWcC4goVd+gZFrvITJSVOWSa7ntDQ7TO
XcinfRZ/iyiJbs/Rg2wLHc/t5oVSyeouyccqODYFbOwOlk35JjOTMUG1YcX+Zasg
ax8RV+7Zt1QSBkMlOz/myBLXUjlTZ3Xg2FXVsfFQW5/g2CjuHpRSFx1bVNX6ysoG
9DT58EQcYxIS8WfkHRbbXKh9I1nSfZ7/Hky/kTafRdRMrjAgbqFgHkYTYsBZeav5
fYWKGQRJulYfeZQ90yMTvlpF42DjCC3uJYamJnwDIu8OhS1WRBI8fQfr9DRzmRua
OK3BK9hUiScDZOJB6OqeVzUTfe7MAA4/UwrDtTYQ+PqAenv1PK8DZqwXyxA9ThHb
zKO3OwuKOVHJnKvpOcr+eNwo7jbnHlis0oBksj/mrq2P9m2ueF9gzCiq5Ri5Syag
Wssb1HUoMGwqU0roS8+pRpNC8YgsWpsttvUWSZ8u6Vj/FLeHpiV3mYXPVMaKRhVm
067BA2uj4Th1JKtGleox+Em0R7OFbCc/9aWC67wiqI6KRyit9pYiF3npph+7D5Eq
7zPsUdDd+qc+UTiLp3liCRp5w6484wWdhZO6wRtmUgxGjNkxFoNnX8CitzF8AaqO
UWWemqWuz3lAZuORQ9KX
=OQzQ
-----END PGP SIGNATURE-----</programlisting>

      <para>Every security advisory uses the following format:</para>

      <itemizedlist>
	<listitem>
	  <para>Each security advisory is signed by the
	    <acronym>PGP</acronym> key of the Security Officer.  The
	    public key for the Security Officer can be verified at
	    <xref linkend="pgpkeys"/>.</para>
	</listitem>

	<listitem>
	  <para>The name of the security advisory always begins with
	    <literal>FreeBSD-SA-</literal> (for FreeBSD Security
	    Advisory), followed by the year in two digit format
	    (<literal>14:</literal>), followed by the advisory number
	    for that year (<literal>04.</literal>), followed by the
	    name of the affected application or subsystem
	    (<literal>bind</literal>).  The advisory shown here is the
	    fourth advisory for 2014 and it affects
	    <application>BIND</application>.</para>
	</listitem>

	<listitem>
	<para>The <literal>Topic</literal> field summarizes the
	    vulnerability.</para>
	</listitem>

	<listitem>
	  <para>The <literal>Category</literal> refers to the
	    affected part of the system which may be one of
	    <literal>core</literal>, <literal>contrib</literal>, or
	    <literal>ports</literal>.  The <literal>core</literal>
	    category means that the vulnerability affects a core
	    component of the &os; operating system.  The
	    <literal>contrib</literal> category means that the
	    vulnerability affects software included with  &os;,
	    such as <application>BIND</application>.
	    The <literal>ports</literal> category indicates that the
	    vulnerability affects software available through
	    the Ports Collection.</para>
	</listitem>

	<listitem>
	  <para>The <literal>Module</literal> field refers to the
	    component location.  In this example, the
	    <literal>bind</literal> module is affected; therefore, this
	    vulnerability affects an application installed with the
	    operating system.</para>
	</listitem>

	<listitem>
	  <para>The <literal>Announced</literal> field reflects the
	    date the security advisory was published.  This means
	    that the security team has
	    verified that the problem exists and that a patch has
	    been committed to the &os; source code repository.</para>
	</listitem>

	<listitem>
	  <para>The <literal>Credits</literal> field gives credit to
	    the individual or organization who noticed the
	    vulnerability and reported it.</para>
	</listitem>

	<listitem>
	  <para>The <literal>Affects</literal> field explains which
	    releases of &os; are affected by this vulnerability.</para>
	  </listitem>

	<listitem>
	  <para>The <literal>Corrected</literal> field indicates the
	    date, time, time offset, and releases that were
	    corrected.</para>
	</listitem>

	<listitem>
	  <para>The <literal>CVE Name</literal> field lists the
	    advisory number, if one exists, in the public <link
	      xlink:href="http://cve.mitre.org">cve.mitre.org</link>
	    security vulnerabilities database.</para>
	</listitem>

	<listitem>
	  <para>The <literal>Background</literal> field provides a
	    description of the affected module.</para>
	</listitem>

	<listitem>
	  <para>The <literal>Problem Description</literal> field
	    explains the vulnerability.  This can include
	    information about the flawed code and how the utility
	    could be maliciously used.</para>
	</listitem>

	<listitem>
	  <para>The <literal>Impact</literal> field describes what
	    type of impact the problem could have on a system.</para>
	</listitem>

	<listitem>
	  <para>The <literal>Workaround</literal> field indicates if
	    a workaround is available to system administrators who cannot
	    immediately patch the system .</para>
	</listitem>

	<listitem>
	  <para>The <literal>Solution</literal> field provides the
	    instructions for patching the affected system.  This is a
	    step by step tested and verified method for getting a
	    system patched and working securely.</para>
	</listitem>

	<listitem>
	  <para>The <literal>Correction Details</literal> field
	    displays each affected Subversion branch with
	    the revision number that contains the corrected code.</para>
	</listitem>

	<listitem>
	  <para>The <literal>References</literal> field
	    offers sources of additional information regarding the
	    vulnerability.</para>
	</listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 xml:id="security-accounting">
    <info><title>Process Accounting</title>
      <authorgroup>
	<author><personname><firstname>Tom</firstname><surname>Rhodes</surname></personname><contrib>Contributed by </contrib></author>
      </authorgroup>
    </info>

    

    <indexterm>
      <primary>Process Accounting</primary>
    </indexterm>

    <para>Process accounting is a security method in which an
      administrator may keep track of system resources used and
      their allocation among users, provide for system monitoring,
      and minimally track a user's commands.</para>

    <para>This indeed has both positive and negative points.  One
      of the positives is that an intrusion may be narrowed down to
      the point of entry.  A negative is the amount of logs
      generated by process accounting, and the disk space they may
      require.  This section walks an administrator through the
      basics of process accounting.</para>

    <sect2>
      <title>Enabling and Utilizing Process Accounting</title>

      <para>Before using process accounting, it must be enabled using
	the following commands:</para>

      <screen>&prompt.root; <userinput>touch /var/account/acct</userinput>
&prompt.root; <userinput>chmod 600 /var/account/acct</userinput>
&prompt.root; <userinput>accton /var/account/acct</userinput>
&prompt.root; <userinput>echo 'accounting_enable="YES"' &gt;&gt; /etc/rc.conf</userinput></screen>

      <para>Once enabled, accounting will begin to track information
	such as <acronym>CPU</acronym> statistics and executed
	commands.  All accounting logs are in a non-human readable
	format which can be viewed using &man.sa.8;.  If issued
	without any options, &man.sa.8; prints information relating to
	the number of per-user calls, the total elapsed time in
	minutes, total <acronym>CPU</acronym> and user time in
	minutes, and the average number of I/O operations.</para>

      <para>To view information about commands being issued, use
	&man.lastcomm.1;.  This command displays the commands issued
	by users on specific &man.ttys.5;.  For example, this command
	prints out all known usage of &man.ls.1; by
	<systemitem class="username">trhodes</systemitem> on the <literal>ttyp1</literal>
	terminal:</para>

      <screen>&prompt.root; <userinput>lastcomm ls trhodes ttyp1</userinput></screen>

      <para>Many other useful options exist and are explained in
	&man.lastcomm.1;, &man.acct.5;, and &man.sa.8;.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="security-resourcelimits">
    <info><title>Resource Limits</title>
      <authorgroup>
	<author><personname><firstname>Tom</firstname><surname>Rhodes</surname></personname><contrib>Contributed by </contrib></author>
      </authorgroup>
    </info>

    

    <indexterm>
      <primary>Resource limits</primary>
    </indexterm>

    <para>For years, &os; has used a resource limits
      database controlled through a flat file,
      <filename>/etc/login.conf</filename>.  While it has
      been discussed previously and is still supported, it
      is not the most optimal method of controlling resources.
      The flat file requires users to be divided into various
      group labels known as classes, which require changes not
      only to this flat file but also the password database.
      Potentially a single, more constrained user would require
      an additional label to be added, the resource database
      rebuilt using <command>cap_mkdb</command>, and edits made to
      <filename>/etc/master.passwd</filename>.  In
      addition, the password database must be rebuilt using
      <command>pwd_mkdb</command>.  This multi-step process could be
      very time consuming depending on how many users must be
      singled out.</para>

    <para>A new command in &os;, &man.rctl.8;, allows for a more
      fine grained method of controlling resources limits for
      users.  This command will support much more than users,
      it will also set resource constraints on processes, jails,
      and the original login class.  These advanced features
      provide administrators and users with methods to control
      resources through the command line and set rules on
      system initialization using a configuration
      file.</para>

    <para>To enable this feature, add these lines to
      <filename>GENERIC</filename>, or the custom kernel
      configuration file, and rebuild.:</para>

    <programlisting>options         RACCT
options         RCTL</programlisting>

    <para>The entire system will need rebuilt.  See
      <xref linkend="kernelconfig"/>, which will provide instructions
      for the process.  Once this is complete,
      <command>rctl</command> may be used to set rules for the
      system.</para>

    <para>Rule syntax is simple, controlled through the use of
      a <emphasis>subject</emphasis>, a
      <emphasis>subject-id</emphasis>, <emphasis>resource</emphasis>,
      and <emphasis>action</emphasis>.  Take the following example
      rule:</para>

    <programlisting>user:trhodes:<literal>maxproc</literal>:<literal>deny</literal>=10/user</programlisting>

    <para>This rule shows a basic premise of a rule, here the subject
      is <literal>user</literal> and the subject-id is
      <literal>trhodes</literal>.  The maxproc is, of course, max
      number of processes, which is considered the resource.  The
      action here is set to <literal>deny</literal>, which blocks any
      new processes from being created.  In the previous example, the
      user, <literal>trhodes</literal> will be constrained to
      <literal>10</literal> (ten) processes and no greater.  Other
      actions are available and could be log to the console, pass a
      notification to &man.devd.8;, or send a sigterm to the
      process.</para>

    <para>Some care must be taken while adding rules.  The one above
      will unfortunately block my user from doing the most simple
      tasks after I have logged in and executed a
      <command>screen</command> session.  When a resource limit has
      been hit, an error will be printed, as in this example:</para>

    <screen>&prompt.user; <userinput>man test</userinput>
    /usr/bin/man: Cannot fork: Resource temporarily unavailable
eval: Cannot fork: Resource temporarily unavailable</screen>

    <para>For another example, &man.rctl.8; can be used to prevent
      a jail from exceeding a memory limit.  This rule could be
      written as:</para>

    <screen>&prompt.root; <userinput>rctl -a jail:httpd:memoryuse:deny=2G/jail</userinput></screen>

    <para>Rules may also persist across reboots if they have been
      added to <filename>/etc/rctl.conf</filename>.  The format is a
      rule, without the preceding command.  For example, the previous
      rule could be added like the following:</para>

    <programlisting># Block jail from using more than 2G memory:
jail:httpd:memoryuse:deny=2G/jail</programlisting>

    <para>To remove a rule, just ask <command>rctl</command> to
      remove it from the list:</para>

    <screen>&prompt.root; <userinput>rctl -r user:trhodes:maxproc:deny=10/user</userinput></screen>

    <para>The manual page shows a method for removing all rules;
      however, if removing all rules for a single user is required,
      this command may be issued:</para>

    <screen>&prompt.root; <userinput>rctl -r user:trhodes</userinput></screen>

    <para>Many other resources exist which can be used to exert
      additional control over various <literal>subjects</literal>.
      See &man.rctl.8; to learn about them.</para>
  </sect1>
</chapter>
