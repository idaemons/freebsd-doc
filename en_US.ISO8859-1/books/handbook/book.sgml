<!DOCTYPE BOOK PUBLIC "-//Davenport//DTD DocBook V3.0//EN">
<book>
  
  <bookinfo>
    <bookbiblio>
      <title>FreeBSD Handbook</title>
      
      <authorgroup>
	<author>
	  <surname>The FreeBSD Documentation Project</surname>
	</author>
      </authorgroup>
      
      <pubdate>March 1998</pubdate>
      
      <abstract><para>Welcome to FreeBSD!  This handbook covers the
	  installation and day to day use of <emphasis remap=bf>FreeBSD
	    Release &rel.current;</emphasis>. This manual is a <emphasis
	    remap=bf>work in progress</emphasis> and is the work of many
	  individuals.  Many sections do not yet exist and some of those that
	  do exist need to be updated.  If you are interested in helping with
	  this project, send email to the &a.doc; The latest version of this
	  document is always available from the <ulink
	    URL="http://www.FreeBSD.ORG/">FreeBSD World Wide Web
	    server</ulink>.  It may also be downloaded in plain text,
	  postscript or HTML from the <ulink
	    URL="ftp://ftp.FreeBSD.ORG/pub/FreeBSD/docs">FreeBSD FTP
	    server</ulink> or one of the numerous
	  <xref linkend="mirrors-ftp" remap="mirror sites">.  You may also
	  want to <ulink URL="/search.html">Search the Handbook</ulink>.
	</para></abstract>
      
    </bookbiblio>
  </bookinfo>
  
  <part>
    <title>Getting Started</title>
    
    
    <chapter>
      <title>Introduction</title>
      
      <para>FreeBSD is a 4.4BSD-Lite based operating system for Intel
	architecture (x86) based PCs.  For an overview of FreeBSD, see
	<xref linkend="nutshell" remap="FreeBSD in a nutshell">.  For a
	history of the project, read <xref linkend="history" remap="a brief
	  history of FreeBSD">.  To see a description of the latest release,
	read <xref linkend="relnotes" remap="about the current
	  release">.  If you're interested in contributing something to the
	FreeBSD project (code, equipment, sacks of unmarked bills), please see
	about <xref linkend="contrib"
	  remap="contributing to FreeBSD">.</para>
      
      
      <sect1
	id="nutshell">
	<title>FreeBSD in a Nutshell</title>
	
	<para>FreeBSD is a state of the art operating system for personal
	  computers based on the Intel CPU architecture, which includes the
	  386, 486 and Pentium processors (both SX and DX versions). Intel
	  compatible CPUs from AMD and Cyrix are supported as well. FreeBSD
	  provides you with many advanced features previously available only
	  on much more expensive computers.  These features include:</para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para><emphasis remap=bf>Preemptive multitasking</emphasis> with
		dynamic priority adjustment to ensure smooth and fair sharing
		of the computer between applications and users.</para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis remap=bf>Multiuser</emphasis> access means that
		many people can use a FreeBSD system simultaneously for a
		variety of things.  System peripherals such as printers and
		tape drives are also properly SHARED BETWEEN ALL users on the
		system.</para>
	    </listitem>
	    
	    <listitem>
	      <para>Complete <emphasis remap=bf>TCP/IP networking</emphasis>
		including SLIP, PPP, NFS and NIS support.  This means that
		your FreeBSD machine can inter-operate easily with other
		systems as well act as an enterprise server, providing vital
		functions such as NFS (remote file access) and e-mail services
		or putting your organization on the Internet with WWW, ftp,
		routing and firewall (security) services.</para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis remap=bf>Memory protection</emphasis> ensures
		that applications (or users) cannot interfere with each other.
		One application crashing will not affect others in any
		way.</para>
	    </listitem>
	    
	    <listitem>
	      <para>FreeBSD is a <emphasis remap=bf>32-bit</emphasis>
		operating system and was designed as such from the ground
		up.</para>
	    </listitem>
	    
	    <listitem>
	      <para>The industry standard <emphasis remap=bf>X Window
		  System</emphasis> (X11R6) provides a graphical user
		interface (GUI) for the cost of a common VGA card and monitor
		and comes with full sources.</para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis remap=bf>Binary compatibility</emphasis> with
		many programs built for SCO, BSDI, NetBSD, Linux and
		386BSD.</para>
	    </listitem>
	    
	    <listitem>
	      <para>Hundreds of <emphasis remap=bf>ready-to-run</emphasis>
		applications are available from the FreeBSD <emphasis
		  remap=bf>ports</emphasis> and <emphasis
		  remap=bf>packages</emphasis> collection.  Why search the net
		when you can find it all right here?</para>
	    </listitem>
	    
	    <listitem>
	      <para>Thousands of additional and <emphasis
		  remap=bf>easy-to-port</emphasis> applications available on
		the Internet.  FreeBSD is source code compatible with most
		popular commercial Unix systems and thus most applications
		require few, if any, changes to compile.</para>
	    </listitem>
	    
	    <listitem>
	      <para>Demand paged <emphasis remap=bf>virtual memory</emphasis>
		and `merged VM/buffer cache' design efficiently satisfies
		applications with large appetites for memory while still
		maintaining interactive response to other users.</para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis remap=bf>Shared libraries</emphasis> (the Unix
		equivalent of MS-Windows DLLs) provide for efficient use of
		disk space and memory.</para>
	    </listitem>
	    
	    <listitem>
	      <para>A full compliment of <emphasis remap=bf>C</emphasis>,
		<emphasis remap=bf>C++</emphasis> and <emphasis
		  remap=bf>Fortran</emphasis> development tools.  Many
		additional languages for advanced research and development are
		also available in the ports and packages collection.</para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis remap=bf>Source code</emphasis> for the entire
		system means you have the greatest degree of control over your
		environment.  Why be locked into a proprietary solution and at
		the mercy of your vendor when you can have a truly Open
		System?</para>
	    </listitem>
	    
	    <listitem>
	      <para>Extensive <emphasis remap=bf>on-line
		  documentation</emphasis>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis remap=bf>And many more!</emphasis></para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
	<para>FreeBSD is based on the 4.4BSD-Lite release from Computer
	  Systems Research Group (CSRG) at the University of California at
	  Berkeley, and carries on the distinguished tradition of BSD systems
	  development.  In addition to the fine work provided by CSRG, the
	  FreeBSD Project has put in many thousands of hours in fine tuning
	  the system for maximum performance and reliability in real-life load
	  situations.  As many of the commercial giants struggle to field PC
	  operating systems with such features, performance and reliability,
	  FreeBSD can offer them <emphasis remap=bf>now</emphasis>!</para>
	
	<para>The applications to which FreeBSD can be put are truly limited
	  only by your own imagination.  From software development to factory
	  automation, inventory control to azimuth correction of remote
	  satellite antennae; if it can be done with a commercial UNIX product
	  then it is more than likely that you can do it with FreeBSD, too!
	  FreeBSD also benefits significantly from the literally thousands of
	  high quality applications developed by research centers and
	  universities around the world, often available at little to no cost.
	  Commercial applications are also available and appearing in greater
	  numbers every day.</para>
	
	<para>Because the source code for FreeBSD itself is generally
	  available, the system can also be customized to an almost unheard of
	  degree for special applications or projects, and in ways not
	  generally possible with operating systems from most major commercial
	  vendors.  Here is just a sampling of some of the applications in
	  which people are currently using FreeBSD:</para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para><emphasis remap=bf>Internet Services:</emphasis> The
		robust TCP/IP networking built into FreeBSD makes it an ideal
		platform for a variety of Internet services such as:
		<itemizedlist>
		  
		  <listitem>
		    <para>FTP servers</para>
		  </listitem>
		  
		  <listitem>
		    <para>World Wide Web servers</para>
		  </listitem>
		  
		  <listitem>
		    <para>Gopher servers</para>
		  </listitem>
		  
		  <listitem>
		    <para>Electronic Mail servers</para>
		  </listitem>
		  
		  <listitem>
		    <para>USENET News</para>
		  </listitem>
		  
		  <listitem>
		    <para>Bulletin Board Systems</para>
		  </listitem>
		  
		  <listitem>
		    <para>And more...</para>
		  </listitem>
		  
		</itemizedlist> You can easily start out small with an
		inexpensive 386 class PC and upgrade as your enterprise
		grows.</para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis remap=bf>Education:</emphasis> Are you a student
		of computer science or a related engineering field?  There is
		no better way of learning about operating systems, computer
		architecture and networking than the hands on, under the hood
		experience that FreeBSD can provide.  A number of freely
		available CAD, mathematical and graphic design packages also
		make it highly useful to those whose primary interest in a
		computer is to get <emphasis>other</emphasis> work
		done!</para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis remap=bf>Research:</emphasis> With source code
		for the entire system available, FreeBSD is an excellent
		platform for research in operating systems as well as other
		branches of computer science.  FreeBSD's freely available
		nature also makes it possible for remote groups to collaborate
		on ideas or shared development without having to worry about
		special licensing agreements or limitations on what may be
		discussed in open forums.</para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis remap=bf>Networking:</emphasis> Need a new
		router?  A name server (DNS)?  A firewall to keep people out
		of your internal network?  FreeBSD can easily turn that unused
		386 or 486 PC sitting in the corner into an advanced router
		with sophisticated packet filtering capabilities. </para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis remap=bf>X Window workstation:</emphasis>
		FreeBSD is a fine choice for an inexpensive X terminal
		solution, either using the freely available XFree86 server or
		one of the excellent commercial servers provided by X Inside.
		Unlike an X terminal, FreeBSD allows many applications to be
		run locally, if desired, thus relieving the burden on a
		central server.  FreeBSD can even boot "diskless", making
		individual workstations even cheaper and easier to
		administer.</para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis remap=bf>Software Development:</emphasis> The
		basic FreeBSD system comes with a full compliment of
		development tools including  the renowned GNU C/C++ compiler
		and debugger. </para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
	<para>FreeBSD is available in both source and binary form on CDROM and
	  via anonymous ftp.  See <xref linkend="mirrors" remap="Obtaining
	    FreeBSD">  for more details.
	</para>
	
      </sect1>
      
      <sect1
	id="history">
	<title>A Brief History of FreeBSD</title>
	
	<para><emphasis>Contributed by &a.jkh;</emphasis>.</para>
	
	<para>The FreeBSD project had its genesis in the early part of 1993,
	  partially as an outgrowth of the "Unofficial 386BSD Patchkit" by the
	  patchkit's last 3 coordinators: Nate Williams, Rod Grimes and
	  myself.</para>
	
	<para>Our original goal was to produce an intermediate snapshot of
	  386BSD in order to fix a number of problems with it that the
	  patchkit mechanism just was not capable of solving.  Some of you may
	  remember the early working title for the project being "386BSD 0.5"
	  or "386BSD Interim" in reference to that fact.</para>
	
	<para>386BSD was Bill Jolitz's operating system, which had been up to
	  that point suffering rather severely from almost a year's worth of
	  neglect. As the patchkit swelled ever more uncomfortably with each
	  passing day, we were in unanimous agreement that something had to be
	  done and decided to try and assist Bill by providing this interim
	  "cleanup" snapshot.  Those plans came to a rude halt when Bill
	  Jolitz suddenly decided to withdraw his sanction from the project
	  and without any clear indication of what would be done
	  instead.</para>
	
	<para>It did not take us long to decide that the goal remained
	  worthwhile, even without Bill's support, and so we adopted the name
	  "FreeBSD", coined by David Greenman.  Our initial objectives were
	  set after consulting with the system's current users and, once it
	  became clear that the project was on the road to perhaps even
	  becoming a reality, I contacted Walnut Creek CDROM with an eye
	  towards improving FreeBSD's distribution channels for those many
	  unfortunates without easy access to the Internet.  Walnut Creek
	  CDROM not only supported the idea of distributing FreeBSD on CD but
	  went so far as to provide the project with a machine to work on and
	  a fast Internet connection. Without Walnut Creek CDROM's almost
	  unprecedented degree of faith in what was, at the time, a completely
	  unknown project, it is quite unlikely that FreeBSD would have gotten
	  as far, as fast, as it has today.</para>
	
	<para>The first CDROM (and general net-wide) distribution was FreeBSD
	  1.0, released in December of 1993.  This was based on the
	  4.3BSD-Lite ("Net/2") tape from U.C. Berkeley, with many components
	  also provided by 386BSD and the Free Software Foundation.  It was a
	  fairly reasonable success for a first offering, and we followed it
	  with the highly successful FreeBSD 1.1 release in May of
	  1994.</para>
	
	<para>Around this time, some rather unexpected storm clouds formed on
	  the horizon as Novell and U.C. Berkeley settled their long-running
	  lawsuit over the legal status of the Berkeley Net/2 tape.  A
	  condition of that settlement was U.C. Berkeley's concession that
	  large parts of Net/2 were "encumbered" code and the property of
	  Novell, who had in turn acquired it from AT&amp;T some time
	  previously.  What Berkeley got in return was Novell's "blessing"
	  that the 4.4BSD-Lite release, when it was finally released, would be
	  declared unencumbered and all existing Net/2 users would be strongly
	  encouraged to switch.  This included FreeBSD, and the project was
	  given until the end of July 1994 to stop shipping its own Net/2
	  based product.  Under the terms of that agreement, the project was
	  allowed one last release before the deadline, that release being
	  FreeBSD 1.1.5.1.</para>
	
	<para>FreeBSD then set about the arduous task of literally
	  re-inventing itself from a completely new and rather incomplete set
	  of 4.4BSD-Lite bits.  The "Lite" releases were light in part because
	  Berkeley's CSRG had removed large chunks of code required for
	  actually constructing a bootable running system (due to various
	  legal requirements) and the fact that the Intel port of 4.4 was
	  highly incomplete.  It took the project until December of 1994 to
	  make this transition, and in January of 1995 it released FreeBSD 2.0
	  to the net and on CDROM.  Despite being still more than a little
	  rough around the edges, the release was a significant success and
	  was followed by the more robust and easier to install FreeBSD 2.0.5
	  release in June of 1995.</para>
	
	<para>We released FreeBSD 2.1.5 in August of 1996, and it appeared to
	  be popular enough among the ISP and commercial communities that
	  another release along the 2.1-stable branch was merited.  This was
	  FreeBSD 2.1.7.1, released in February 1997 and capping the end of
	  mainstream development on 2.1-stable.  Now in maintenance mode, only
	  security enhancements and other critical bug fixes will be done on
	  this branch (RELENG_2_1_0).</para>
	
	<para>FreeBSD 2.2 was branched from the development mainline
	  ("-current") in November 1996 as the RELENG_2_2 branch, and the
	  first full release (2.2.1) was released in April, 1997.  Further
	  releases along the 2.2 branch were done in the Summer and Fall of
	  '97, the latest being 2.2.6 which appeared in late March of '98.
	  The first official 3.0 release will appear later in 1998.</para>
	
	<para>Long term development projects for everything from SMP to DEC
	  ALPHA support will continue to take place in the 3.0-current branch
	  and SNAPshot releases of 3.0 on CDROM (and, of course, on the net).
	</para>
	
      </sect1>
      
      <sect1
	id="goals">
	<title>FreeBSD Project Goals</title>
	
	<para><emphasis>Contributed by &a.jkh;</emphasis>.</para>
	
	<para>The goals of the FreeBSD Project are to provide software that
	  may be used for any purpose and without strings attached.  Many of
	  us have a significant investment in the code (and project) and would
	  certainly not mind a little financial compensation now and then, but
	  we're definitely not prepared to insist on it.  We believe that our
	  first and foremost "mission" is to provide code to any and all
	  comers, and for whatever purpose, so that the code gets the widest
	  possible use and provides the widest possible benefit. This is, I
	  believe, one of the most fundamental goals of Free Software and one
	  that we enthusiastically support.</para>
	
	<para>That code in our source tree which falls under the GNU Public
	  License (GPL) or GNU Library Public License (GLPL) comes with
	  slightly more strings attached, though at least on the side of
	  enforced access rather than the usual opposite.  Due to the
	  additional complexities that can evolve in the commercial use of GPL
	  software, we do, however, endeavor to replace such software with
	  submissions under the more relaxed BSD copyright whenever possible.
	</para>
	
      </sect1>
      
      <sect1
	id="development">
	<title>The FreeBSD Development Model</title>
	
	<para><emphasis>Contributed by &a.asami;</emphasis>.</para>
	
	<para>The development of FreeBSD is a very open and flexible process,
	  FreeBSD being literally built from the contributions of hundreds of
	  people around the world, as can be seen from our <xref
	    linkend="staff" remap="list of contributors">. We are constantly
	  on the lookout for new developers and ideas, and those interested in
	  becoming more closely involved with the project need simply contact
	  us at the &a.hackers;.  Those who prefer to work more independently
	  are also accommodated, and they are free to use our FTP facilities
	  at <ulink
	    URL="ftp://ftp.freebsd.org/pub/FreeBSD/incoming">ftp.freebsd.org</ulink> to distribute their own patches or work-in-progress sources.  The &a.announce; is also available to those wishing to make other FreeBSD users aware of major areas of work.</para>
	
	<para>Useful things to know about the FreeBSD project and its
	  development process, whether working independently or in close
	  cooperation:</para>
	
	<para>
	  <variablelist>
	    <varlistentry><term><emphasis remap=bf>The CVS
		  repository</emphasis><anchor
		  id="development-cvs-repository"></term>
	      <listitem>
		<para>The central source tree for FreeBSD is maintained by
		  <ulink
		    URL="http://www.cyclic.com/cyclic-pages/CVS-sheet.html">CVS</ulink> (Concurrent Version System), a freely available source code control tool which comes bundled with FreeBSD.  The primary <ulink URL="http://www.freebsd.org/cgi/cvsweb.cgi">CVS repository</ulink> resides on a machine in Concord CA, USA from where it is replicated to numerous mirror machines throughout the world.  The CVS tree, as well as the <xref linkend="current" remap="-current"> and <xref
		    linkend="stable" remap="-stable"> trees which are checked
		  out of it, can be easily replicated to your own machine as
		  well.  Please refer to the
		  <xref linkend="synching" remap="Synchronizing your source
		    tree"> section for more information on doing this.</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><emphasis remap=bf>The committers
		  list</emphasis><anchor id="development-committers"></term>
	      
	      <listitem>
		<para>The <xref linkend="staff-committers" remap="committers">
		  are the people who have <emphasis>write</emphasis> access to
		  the CVS tree, and are thus authorized to make modifications
		  to the FreeBSD source (the term ``committer'' comes from the
		  <command>cvs(1)</command> ``<emphasis
		    remap=tt>commit</emphasis>'' command, which is used to
		  bring new changes into the CVS repository). The best way of
		  making submissions for review by the committers list is to
		  use the <ulink
		    URL="http://www.freebsd.org/send-pr.html">send-pr(1)</ulink> command, though if something appears to be jammed in the system then you may also reach them by sending mail to <ulink URL="mailto:committers@freebsd.org">committers@freebsd.org</ulink>.</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><emphasis remap=bf>The FreeBSD core
		  team</emphasis><anchor id="development-core"></term>
	      
	      <listitem>
		<para>The <xref linkend="staff-core" remap="FreeBSD core
		    team"> would be equivalent to the board of directors if
		  the FreeBSD Project were a company.  The primary task of the
		  core team is to make sure the project, as a whole, is in
		  good shape and is heading in the right directions.  Inviting
		  dedicated and responsible developers to join our group of
		  committers is one of the functions of the core team, as is
		  the recruitment of new core team members as others move on.
		  Most current members of the core team started as committers
		  who's addiction to the project got the better of
		  them.</para>

		<para>Some core team members also have specific <xref
		    linkend="staff-who" remap="areas of responsibility">,
		  meaning that they are committed to ensuring that some large
		  portion of the system works as advertised. Note that most
		  members of the core team are volunteers when it comes to
		  FreeBSD development and do not benefit from the project
		  financially, so "commitment" should also not be misconstrued
		  as meaning "guaranteed support."  The ``board of directors''
		  analogy above is not actually very accurate, and it may be
		  more suitable to say that these are the people who gave up
		  their lives in favor of FreeBSD against their better
		  judgement! <emphasis remap=tt>;)</emphasis></para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><emphasis remap=bf>Outside
		  contributors</emphasis></term>
	      
	      <listitem>
		<para>Last, but definitely not least, the largest group of
		  developers are the users themselves who provide feedback and
		  bug-fixes to us on an almost constant basis.  The primary
		  way of keeping in touch with FreeBSD's more non-centralized
		  development is to subscribe to the &a.hackers; (see <xref
		    linkend="eresources-mail" remap="mailing list
		    info">) where such things are discussed.</para>

		<para><xref linkend="contrib-additional" remap="The list"> of
		  those who have contributed something which made its way into
		  our source tree is a long and growing one, so why not join
		  it by contributing something back to FreeBSD today?
		  <emphasis remap=tt>:-)</emphasis></para>

		<para>Providing code is not the only way of contributing to
		  the project; for a more complete list of things that need
		  doing, please refer to the <xref linkend="contrib"
		    remap="how to
		    contribute"> section in this handbook.</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
	
	<para>In summary, our development model is organized as a loose set of
	  concentric circles.  The centralized model is designed for the
	  convenience of the <emphasis>users</emphasis> of FreeBSD, who are
	  thereby provided with an easy way of tracking one central code base,
	  not to keep potential contributors out!  Our desire is to present a
	  stable operating system with a large set of coherent <xref
	    linkend="ports"
	    remap="application programs"> that the users can easily install
	  and use, and this model works very well in accomplishing
	  that.</para>
	
	<para>All we ask of those who would join us as FreeBSD developers is
	  some of the same dedication its current people have to its continued
	  success!
	</para>
	
      </sect1>
      
      <sect1
	id="relnotes">
	<title>About the Current Release</title>
	
	<para>FreeBSD is a freely available, full source 4.4BSD-Lite based
	  release for Intel i386/i486/Pentium/PentiumPro/Pentium II (or
	  compatible) based PC's.  It is based primarily on software from U.C.
	  Berkeley's CSRG group, with some enhancements from NetBSD, OpenBSD,
	  386BSD, and the Free  Software Foundation.</para>
	
	<para>Since our release of FreeBSD 2.0 in January of 95, the
	  performance, feature set, and stability of FreeBSD has improved
	  dramatically.  The largest change is a revamped virtual memory
	  system with a merged VM/file buffer  cache that not only increases
	  performance, but reduces FreeBSD's memory footprint, making a 5MB
	  configuration a more acceptable minimum.  Other enhancements include
	  full NIS client and server support, transaction TCP support,
	  dial-on-demand PPP, an improved SCSI subsystem, early ISDN support,
	  support for FDDI and Fast Ethernet (100Mbit) adapters, improved
	  support for the Adaptec 2940 (WIDE and narrow) and many hundreds of
	  bug fixes.</para>
	
	<para>We have also taken the comments and suggestions of many of our
	  users to heart and have attempted to provide what we hope is a more
	  sane and easily understood installation process.  Your feedback on
	  this (constantly evolving) process is especially welcome!</para>
	
	<para>In addition to the base distributions, FreeBSD offers a new
	  ported software collection with hundreds of commonly sought-after
	  programs. At the end of March 1998 there were more than 1300 ports!
	  The list of ports ranges from http (WWW) servers, to games,
	  languages, editors and almost everything in between. The entire
	  ports collection requires approximately 26MB of storage, all ports
	  being  expressed as ``deltas'' to their original sources.  This
	  makes  it much easier for us to update ports, and greatly reduces
	  the disk space demands made by the older 1.0 ports collection.  To
	  compile a port, you simply change to the directory of the program
	  you wish to install, type ``make all'' followed by ``make install''
	  after successful compilation and let the system do the rest.  The
	  full original distribution for each port you build is retrieved
	  dynamically off the CDROM or a local ftp site, so you need only
	  enough disk space to build the ports you want. (Almost) every port
	  is also provided as a pre-compiled "package" which can be installed
	  with a simple command (pkg_add) by those who do not wish to compile
	  their own ports from source.</para>
	
	<para>A number of additional documents which you may find very helpful
	  in the process of installing and using FreeBSD may now also be found
	  in the <filename>/usr/share/doc</filename> directory on any machine
	  running FreeBSD 2.1 or later.  You may view the locally installed
	  manuals with any HTML capable browser using the following
	  URLs:</para>
	
	<para>
	  <variablelist>
	    <varlistentry><term>The FreeBSD handbook</term>
	      <listitem>
		<para><ulink
		    URL="file:/usr/share/doc/handbook/handbook.html">file:/usr/share/doc/handbook/handbook.html</ulink></para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>The FreeBSD FAQ</term>
	      
	      <listitem>
		<para><ulink
		    URL="file:/usr/share/doc/FAQ/FAQ.html">file:/usr/share/doc/FAQ/FAQ.html</ulink></para>
		
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
	
	<para>You can also visit the master (and most frequently updated)
	  copies at <ulink
	    URL="http://www.freebsd.org">http://www.freebsd.org</ulink>.</para>
	
	<para>The core of FreeBSD does not contain DES code which would
	  inhibit its being exported outside the United States.  There is an
	  add-on package to the core distribution, for use only in the United
	  States, that contains the programs that normally use DES.  The
	  auxiliary packages provided separately can be used by anyone.  A
	  freely (from outside the U.S.) exportable European distribution of
	  DES for our non-U.S. users also exists and is described in the
	  <ulink URL="../FAQ/FAQ.html">FreeBSD FAQ</ulink>.</para>
	
	<para>If password security for FreeBSD is all you need, and you have
	  no requirement for copying encrypted passwords from different hosts
	  (Suns, DEC machines, etc) into FreeBSD password entries, then
	  FreeBSD's MD5 based security may be all you require!  We feel that
	  our default security model is more than a match for DES, and without
	  any messy export issues to deal with.  If you are outside (or even
	  inside) the U.S., give it a try!</para>
	
      </sect1>
    </chapter>
    
    <chapter
      id="install">
      <title>Installing FreeBSD</title>
      
      <para>So, you would like to try out FreeBSD on your system? This section
	is a quick-start guide for what you need to do.  FreeBSD can be
	installed from a variety of media including CD-ROM, floppy disk,
	magnetic tape, an MS-DOS partition and, if you have a network
	connection, via anonymous ftp or NFS.  </para>
      
      <para>Regardless of the installation media you choose, you can get
	started by creating the <emphasis remap=bf>installation
	  disk</emphasis> as described below.  Booting your computer into the
	FreeBSD installer, even if you aren't planning on installing FreeBSD
	right away, will provide important information about compatibility
	between FreeBSD and your hardware which may, in turn, dictate which
	installation options are even possible.  It can also provide early
	clues to any compatibility problems which could prevent FreeBSD
	running on your system at all.  If you plan on installing via
	anonymous FTP then this installation disk is all you need to download
	(the installation will handle any further required downloading
	itself).</para>
      
      <para>For more information on obtaining the latest FreeBSD
	distributions, please see <xref linkend="mirrors" remap="Obtaining
	  FreeBSD"> in the
	Appendix.</para>
      
      <para>So, to get the show on the road, follow these steps:
	<orderedlist>
	  
	  <listitem>
	    <para>Review the <xref linkend="install-hw" remap="supported
		configurations"> section of this installation guide to be sure
	      that your hardware is supported by FreeBSD.  It may be helpful
	      to make a list of any special cards you have installed, such as
	      SCSI controllers, Ethernet adapters or sound cards.  This list
	      should include relevant configuration parameters such as
	      interrupts (IRQ) and IO port addresses.</para>
	  </listitem>
	  
	  <listitem>
	    <para>If you're installing FreeBSD from CDROM media then you have
	      several different installation options:
	      <itemizedlist>
		
		<listitem>
		  <para>If the CD has been mastered with El Torrito boot
		    support and your system supports direct booting from CDROM
		    (and many older systems do <emphasis>not</emphasis>),
		    simply insert the CD into the drive and boot directly from
		    it.</para>
		</listitem>
		
		<listitem>
		  <para>If you're running DOS and have the proper drivers to
		    access your CD, run the install.bat script provided on the
		    CD.  This will attempt to boot into the FreeBSD
		    installation straight from DOS (<emphasis>note: You must
		      do this from actual DOS and not a Windows DOS
		      box</emphasis>).  If you also want to install FreeBSD
		    from your DOS partition (perhaps because your CDROM drive
		    is completely unsupported by FreeBSD) then run the setup
		    program first to copy the appropriate files from the CD to
		    your DOS partition, afterwards running install.</para>
		</listitem>
		
		<listitem>
		  <para>If either of the two proceeding methods work then you
		    can simply skip the rest of this section, otherwise your
		    final option is to create a boot floppy from the
		    <filename>floppies\boot.flp</filename> image - proceed to
		    step 4 for instructions on how to do this.</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	  </listitem>
	  
	  <listitem>
	    <para>If you don't have a CDROM distribution then simply download
	      the <ulink
		URL="ftp://ftp.FreeBSD.ORG/pub/FreeBSD/&rel.current;-RELEASE/floppies/boot.flp">installation boot disk image</ulink> file to your hard drive, being sure to tell your browser to <emphasis>save</emphasis> rather than <emphasis>display</emphasis> the file. <emphasis remap=bf>Note:</emphasis> This disk image can only be used with 1.44 megabyte 3.5 inch floppy disks.</para>
	  </listitem>
	  
	  <listitem>
	    <para>Make the installation boot disk from the image file:
	      <itemizedlist>
		
		<listitem>
		  <para>If you are using MS-DOS then download  <ulink
		      URL="ftp://ftp.FreeBSD.ORG/pub/FreeBSD/tools/fdimage.exe">fdimage.exe</ulink> or get it from <filename>tools\fdimage.exe</filename> on the CDROM and then run it like so:
		    <informalexample>
		      <screen>E:\&gt; tools\fdimage floppies\boot.flp
			a:</screen>
		    </informalexample> The <emphasis>fdimage</emphasis>
		    program will format the A: drive and then copy the
		    boot.flp image onto it (assuming that you're at the top
		    level of a FreeBSD distribution and the floppy images live
		    in the floppies subdirectory, as is typically the
		    case).</para>
		</listitem>
		
		<listitem>
		  <para>If you are using a UNIX system to create the floppy
		    image:
		    <informalexample>
		      <screen>% dd if=boot.flp
			of=<symbol>disk_device</symbol></screen>
		    </informalexample> where <symbol>disk_device</symbol> is
		    the <filename>/dev</filename> entry for the floppy drive.
		    On FreeBSD systems, this is <filename>/dev/rfd0</filename>
		    for the A: drive and <filename>/dev/rfd1</filename> for
		    the B: drive.</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	  </listitem>
	  
	  <listitem>
	    <para>With the installation disk in the A: drive, reboot your
	      computer.  You should get a boot prompt something like this:
	      <informalexample>
		<screen>&gt;&gt; FreeBSD BOOT ...<!-- <br> --> Usage:
		  [[[0:][wd](0,a)]/kernel][-abcCdhrsv]<!-- <br> --> Use
		  1:sd(0,a)kernel to boot sd0 if it is BIOS drive 1<!-- <br>
		  --> Use ? for file list or press Enter for defaults<!-- <br>
		  --> Boot: </screen>
	      </informalexample> If you do <emphasis>not</emphasis> type
	      anything, FreeBSD will automatically boot with its default
	      configuration after a delay of about five seconds.  As FreeBSD
	      boots, it probes your computer to determine what hardware is
	      installed.  The results of this probing is displayed on the
	      screen.</para>
	  </listitem>
	  
	  <listitem>
	    <para>When the booting process is finished, The main FreeBSD
	      installation menu will be displayed.</para>
	  </listitem>
	  
	</orderedlist>
      </para>
      
      <para><emphasis remap=bf>If something goes wrong...</emphasis></para>
      
      <para>Due to limitations of the PC architecture, it is impossible for
	probing to be 100 percent reliable.  In the event that your hardware
	is incorrectly identified, or that the probing causes your computer to
	lock up, first check the
	<xref linkend="install-hw" remap="supported       configurations">
	section of this installation guide to be sure that your hardware is
	indeed supported by FreeBSD.  </para>
      
      <para>If your hardware is supported, reset the computer and when the
	<emphasis remap=tt>Boot:</emphasis> prompt comes up, type
	<option>-c</option>.  This puts FreeBSD into a configuration mode
	where you can supply hints about your hardware.  The FreeBSD kernel on
	the installation disk is configured assuming that most hardware
	devices are in their factory default configuration in terms of IRQs,
	IO addresses and DMA channels.  If your hardware has been
	reconfigured, you will most likely need to use the <option>-c</option>
	option at boot to tell FreeBSD where things are.</para>
      
      <para>It is also possible that a probe for a device not present will
	cause a later probe for another device that is present to fail.  In
	that case, the probes for the conflicting driver(s) should be
	disabled.</para>
      
      <para>In the configuration mode, you can:</para>
      
      <para>
	<itemizedlist>
	  
	  <listitem>
	    <para>List the device drivers installed in the kernel.</para>
	  </listitem>
	  
	  <listitem>
	    <para>Disable device drivers for hardware not present in your
	      system.</para>
	  </listitem>
	  
	  <listitem>
	    <para>Change the IRQ, DRQ, and IO port addresses used by a device
	      driver.</para>
	  </listitem>
	  
	</itemizedlist>
      </para>
      
      <para>While at the <emphasis remap=tt>config&gt;</emphasis> prompt, type
	<emphasis remap=tt>help</emphasis> for more information on the
	available commands.  After adjusting the kernel to match how you have
	your hardware configured, type <emphasis remap=tt>quit</emphasis> at
	the <emphasis remap=tt>config&gt;</emphasis> prompt to continue
	booting with the new settings.  </para>
      
      <para>After FreeBSD has been installed, changes made in the
	configuration mode will be permanent so you do not have to reconfigure
	every time you boot.  Even so, it is likely that you will want to
	build a custom kernel to optimize the performance of your system.  See
	<xref linkend="kernelconfig"
	  remap="Kernel configuration"> for more information on creating
	custom kernels.</para>
      
      
      <sect1
	id="install-hw">
	<title>Supported Configurations</title>
	
	<para>FreeBSD currently runs on a wide variety of ISA, VLB, EISA and
	  PCI bus based PC's, ranging from 386sx to Pentium class machines
	  (though the 386sx is not recommended).  Support for generic IDE or
	  ESDI drive configurations, various SCSI controller, network and
	  serial cards is also provided.</para>
	
	<para>A minimum of four megabytes of RAM is required to run FreeBSD.
	  To run the X Window System, eight megabytes of RAM is the
	  recommended minimum.</para>
	
	<para>Following is a list of all disk controllers and Ethernet cards
	  currently known to work with FreeBSD.  Other configurations may very
	  well work, and we have simply not received any indication of
	  this.</para>
	
	
	<sect2>
	  <title>Disk Controllers</title>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para>WD1003 (any generic MFM/RLL)</para>
	      </listitem>
	      
	      <listitem>
		<para>WD1007 (any generic IDE/ESDI)</para>
	      </listitem>
	      
	      <listitem>
		<para>IDE</para>
	      </listitem>
	      
	      <listitem>
		<para>ATA
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Adaptec 1505 ISA SCSI controller</para>
	      </listitem>
	      
	      <listitem>
		<para>Adaptec 152x series ISA SCSI controllers</para>
	      </listitem>
	      
	      <listitem>
		<para>Adaptec 1535 ISA SCSI controllers</para>
	      </listitem>
	      
	      <listitem>
		<para>Adaptec 154x series ISA SCSI controllers</para>
	      </listitem>
	      
	      <listitem>
		<para>Adaptec 174x series EISA SCSI controller in standard and
		  enhanced mode.</para>
	      </listitem>
	      
	      <listitem>
		<para>Adaptec 274x/284x/2940/2940U/3940 (Narrow/Wide/Twin)
		  series EISA/VLB/PCI SCSI controllers</para>
	      </listitem>
	      
	      <listitem>
		<para>Adaptec AIC7850 on-board SCSI controllers</para>
	      </listitem>
	      
	      <listitem>
		<para>Adaptec AIC-6360 based boards, which includes the
		  AHA-152x and SoundBlaster SCSI cards. <emphasis
		    remap=bf>Note:</emphasis> You cannot boot from the
		  SoundBlaster cards as they have no on-board BIOS, which is
		  necessary for mapping the boot device into the system BIOS
		  I/O vectors.  They are perfectly usable for external tapes,
		  CDROMs, etc, however. The same goes for any other AIC-6x60
		  based card without a boot ROM.  Some systems DO have a boot
		  ROM, which is generally indicated by some sort of message
		  when the system is first powered up or reset.  Check your
		  system/board documentation for more details.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Buslogic 545S &amp; 545c <emphasis
		    remap=bf>Note:</emphasis> that Buslogic was formerly known
		  as "Bustek".</para>
	      </listitem>
	      
	      <listitem>
		<para>Buslogic 445S/445c VLB SCSI controller</para>
	      </listitem>
	      
	      <listitem>
		<para>Buslogic 742A/747S/747c EISA SCSI controller.</para>
	      </listitem>
	      
	      <listitem>
		<para>Buslogic 946c PCI SCSI controller</para>
	      </listitem>
	      
	      <listitem>
		<para>Buslogic 956c PCI SCSI controller
		</para>
	      </listitem>
	      
	      <listitem>
		<para>NCR 53C810/53C815/53C825/53C860/53C875 PCI SCSI
		  controller.</para>
	      </listitem>
	      
	      <listitem>
		<para>NCR5380/NCR53400 (``ProAudio Spectrum'') SCSI
		  controller. 
		</para>
	      </listitem>
	      
	      <listitem>
		<para>DTC 3290 EISA SCSI controller in 1542 emulation mode.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>UltraStor 14F/24F/34F SCSI controllers.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Seagate ST01/02 SCSI controllers.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Future Domain 8xx/950 series SCSI controllers.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>WD7000 SCSI controllers.
		</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para>With all supported SCSI controllers, full support is provided
	    for SCSI-I &amp; SCSI-II peripherals, including Disks, tape drives
	    (including DAT) and CD ROM drives.</para>
	  
	  <para>The following CD-ROM type systems are supported at this
	    time:</para>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para>SoundBlaster SCSI and ProAudio Spectrum SCSI (<emphasis
		    remap=tt>cd</emphasis>)</para>
	      </listitem>
	      
	      <listitem>
		<para>Mitsumi (all models) proprietary interface (<emphasis
		    remap=tt>mcd</emphasis>)</para>
	      </listitem>
	      
	      <listitem>
		<para>Matsushita/Panasonic (Creative) CR-562/CR-563
		  proprietary interface (<emphasis remap=tt>matcd</emphasis>)
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Sony proprietary interface (<emphasis
		    remap=tt>scd</emphasis>)</para>
	      </listitem>
	      
	      <listitem>
		<para>ATAPI IDE interface  (experimental and should be
		  considered ALPHA quality!)  (<emphasis
		    remap=tt>wcd</emphasis>)</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	</sect2>
	
	<sect2
	  id="install-nics">
	  <title>Ethernet cards</title>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para>Allied-Telesis AT1700 and RE2000 cards
		</para>
	      </listitem>
	      
	      <listitem>
		<para>SMC Elite 16 WD8013 Ethernet interface, and most other
		  WD8003E, WD8003EBT, WD8003W, WD8013W, WD8003S, WD8003SBT and
		  WD8013EBT based clones.  SMC Elite Ultra and 9432TX based
		  cards are also supported.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>DEC EtherWORKS III NICs (DE203, DE204, and DE205)</para>
	      </listitem>
	      
	      <listitem>
		<para>DEC EtherWORKS II NICs (DE200, DE201, DE202, and
		  DE422)</para>
	      </listitem>
	      
	      <listitem>
		<para>DEC DC21040/DC21041/DC21140 based NICs:
		  <itemizedlist>
		    
		    <listitem>
		      <para>ASUS		PCI-L101-TB</para>
		    </listitem>
		    
		    <listitem>
		      <para>Accton		ENI1203</para>
		    </listitem>
		    
		    <listitem>
		      <para>Cogent		EM960PCI</para>
		    </listitem>
		    
		    <listitem>
		      <para>Compex 		CPXPCI/32C</para>
		    </listitem>
		    
		    <listitem>
		      <para>D-Link		DE-530</para>
		    </listitem>
		    
		    <listitem>
		      <para>DEC		DE435</para>
		    </listitem>
		    
		    <listitem>
		      <para>Danpex		EN-9400P3</para>
		    </listitem>
		    
		    <listitem>
		      <para>JCIS		Condor JC1260</para>
		    </listitem>
		    
		    <listitem>
		      <para>Kingston		KNE100TX</para>
		    </listitem>
		    
		    <listitem>
		      <para>Linksys		EtherPCI</para>
		    </listitem>
		    
		    <listitem>
		      <para>Mylex		LNP101</para>
		    </listitem>
		    
		    <listitem>
		      <para>SMC		EtherPower 10/100 (Model 9332)</para>
		    </listitem>
		    
		    <listitem>
		      <para>SMC		EtherPower (Model 8432)</para>
		    </listitem>
		    
		    <listitem>
		      <para>SMC		EtherPower (2)</para>
		    </listitem>
		    
		    <listitem>
		      <para>Zynx		ZX314</para>
		    </listitem>
		    
		    <listitem>
		      <para>Zynx		ZX342</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	      
	      <listitem>
		<para>DEC FDDI (DEFPA/DEFEA) NICs
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Fujitsu FMV-181 and FMV-182
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Fujitsu MB86960A/MB86965A
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Intel EtherExpress
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Intel EtherExpress Pro/100B 100Mbit.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Isolan AT 4141-0 (16 bit)</para>
	      </listitem>
	      
	      <listitem>
		<para>Isolink 4110     (8 bit)
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Lucent WaveLAN wireless networking interface.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Novell NE1000, NE2000, and NE2100 ethernet interface.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>3Com 3C501 cards
		</para>
	      </listitem>
	      
	      <listitem>
		<para>3Com 3C503 Etherlink II
		</para>
	      </listitem>
	      
	      <listitem>
		<para>3Com 3c505 Etherlink/+
		</para>
	      </listitem>
	      
	      <listitem>
		<para>3Com 3C507 Etherlink 16/TP
		</para>
	      </listitem>
	      
	      <listitem>
		<para>3Com 3C509, 3C579, 3C589 (PCMCIA) Etherlink III
		</para>
	      </listitem>
	      
	      <listitem>
		<para>3Com 3C590, 3C595 Etherlink III
		</para>
	      </listitem>
	      
	      <listitem>
		<para>3Com 3C90x cards.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>HP PC Lan Plus (27247B and 27252A)
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Toshiba ethernet cards
		</para>
	      </listitem>
	      
	      <listitem>
		<para>PCMCIA ethernet cards from IBM and National
		  Semiconductor are also supported.</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para><emphasis>Note:</emphasis> FreeBSD does not currently support
	    PnP (plug-n-play) features present on some ethernet cards.  If
	    your card has PnP and is giving you problems, try disabling its
	    PnP features.</para>
	  
	</sect2>
	
	<sect2
	  id="install-misc">
	  <title>Miscellaneous devices</title>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para>AST 4 port serial card using shared IRQ.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>ARNET 8 port serial card using shared IRQ.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>BOCA IOAT66 6 port serial card using shared IRQ.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>BOCA 2016 16 port serial card using shared IRQ.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Cyclades Cyclom-y Serial Board.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>STB 4 port card using shared IRQ.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>SDL Communications Riscom/8 Serial Board.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>SDL Communications RISCom/N2 and N2pci sync serial
		  cards.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Digiboard Sync/570i high-speed sync serial card.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Decision-Computer Intl. "Eight-Serial" 8 port serial
		  cards  using shared IRQ.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Adlib, SoundBlaster, SoundBlaster Pro, ProAudioSpectrum,
		  Gravis UltraSound, Gravis UltraSound MAX and Roland MPU-401
		  sound cards.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Matrox Meteor video frame grabber.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Creative Labs Video spigot frame grabber.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Omnimedia Talisman frame grabber.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Brooktree BT848 chip based frame grabbers.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>X-10 power controllers.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>PC joystick and speaker.</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para>FreeBSD does not currently support IBM's microchannel (MCA)
	    bus.</para>
	  
	</sect2>
      </sect1>
      
      <sect1>
	<title>Preparing for the Installation</title>
	
	<para>There are a number of different methods by which FreeBSD can be
	  installed.  The following describes what preparation needs to be
	  done for each type.</para>
	
	
	<sect2>
	  <title>Before installing from CDROM</title>
	  
	  <para>If your CDROM is of an unsupported type, then please skip to
	    <xref linkend="install-msdos" remap="MS-DOS
	      Preparation">.</para>
	  
	  <para>There is not a lot of preparatory work that needs to be done
	    to successfully install from one of Walnut Creek's FreeBSD CDROMs
	    (other CDROM distributions may work as well, though we cannot say
	    for certain as we have no hand or say in how they are created).
	    You can either boot into the CD installation directly from DOS
	    using Walnut Creek's supplied ``install.bat'' batch file or you
	    can make a boot floppy with the ``makeflp.bat'' command.  [NOTE:
	    If you are running FreeBSD 2.1-RELEASE and have an IDE CDROM, use
	    the inst_ide.bat or atapiflp.bat batch files instead].</para>
	  
	  <para>For the easiest interface of all (from DOS), type ``view''.
	    This will bring up a DOS menu utility that leads you through all
	    the available options.</para>
	  
	  <para>If you are creating the boot floppy from a UNIX machine, see
	    <xref linkend="install" remap="the beginning of this
	      guide"> for examples. of how to create the boot floppy.</para>
	  
	  <para>Once you have booted from DOS or floppy, you should then be
	    able to select CDROM as the media type in the Media menu and load
	    the entire distribution from CDROM.  No other types of
	    installation media should be required.</para>
	  
	  <para>After your system is fully installed and you have rebooted
	    from the hard disk, you can mount the CDROM at any time by typing:
	    <command>mount /cdrom</command></para>
	  
	  <para>Before removing the CD again, also note that it is necessary
	    to first type: <command>umount /cdrom</command>.  Do not just
	    remove it from the drive!</para>
	  
	  <para>
	    <blockquote>
	      <para><emphasis remap=bf>Special note:</emphasis> Before
		invoking the installation, be sure that the CDROM is in the
		drive so that the install probe can find it.  This is also
		true if you wish the CDROM to be added to the default system
		configuration automatically during the install (whether or not
		you actually use it as the installation media).</para>
	    </blockquote>
	  </para>
	  
	  <para>Finally, if you would like people to be able to FTP install
	    FreeBSD directly from the CDROM in your machine, you will find it
	    quite easy.  After the machine is fully installed, you simply need
	    to add the following line to the password file (using the vipw
	    command):</para>
	  
	  <para>
	    <informalexample>
	      <screen>ftp:*:99:99::0:0:FTP:/cdrom:/nonexistent</screen>
	    </informalexample>
	  </para>
	  
	  <para>Anyone with network connectivity to your machine (and
	    permission to log into it) can now chose a Media type of FTP and
	    type in: <filename>ftp://<replaceable>your
		machine</replaceable></filename> after picking ``Other'' in
	    the ftp sites menu.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Before installing from Floppy</title>
	  
	  <para>If you must install from floppy disks, either due to
	    unsupported hardware or simply because you enjoy doing things the
	    hard way, you must first prepare some floppies for the
	    install.</para>
	  
	  <para>You will need, at minimum, as many 1.44MB or 1.2MB floppies as
	    it takes to hold all files in the bin (binary distribution)
	    directory.  If you are preparing these floppies under DOS, then
	    THESE floppies *must* be formatted using the MS-DOS FORMAT
	    command.  If you are using Windows, use the Windows File Manager
	    format command.</para>
	  
	  <para>Do <emphasis>not</emphasis> trust Factory Preformatted
	    floppies!  Format them again yourself, just to make sure.  Many
	    problems reported by our users in the past have resulted from the
	    use of improperly formatted media, which is why I am taking such
	    special care to mention it here!</para>
	  
	  <para>If you are creating the floppies from another FreeBSD machine,
	    a format is still not a bad idea though you do not need to put a
	    DOS filesystem on each floppy.  You can use the `disklabel' and
	    `newfs' commands to put a UFS filesystem on them instead, as the
	    following sequence of commands (for a 3.5" 1.44MB floppy disk)
	    illustrates:</para>
	  
	  <para>
	    <informalexample>
	      <screen>        fdformat -f 1440 fd0.1440 disklabel -w -r
		fd0.1440 floppy3 newfs -t 2 -u 18 -l 1 -i 65536 /dev/rfd0 (Use
		"fd0.1200" and "floppy5" for 5.25" 1.2MB disks).</screen>
	    </informalexample>
	  </para>
	  
	  <para>Then you can mount and write to them like any other file
	    system.</para>
	  
	  <para>After you have formatted the floppies, you will need to copy
	    the files onto them.  The distribution files are split into chunks
	    conveniently sized so that 5 of them will fit on a conventional
	    1.44MB floppy.  Go through all your floppies, packing as many
	    files as will fit on each one, until you have got all the
	    distributions you want packed up in this fashion. Each
	    distribution should go into a subdirectory on the floppy, e.g.:
	    <filename>a:\bin\bin.aa</filename>,
	    <filename>a:\bin\bin.ab</filename>, and so on.</para>
	  
	  <para>Once you come to the Media screen of the install, select
	    ``Floppy'' and you will be prompted for the rest.</para>
	  
	</sect2>
	
	<sect2
	  id="install-msdos">
	  <title>Before installing from a MS-DOS partition</title>
	  
	  <para>To prepare for installation from an MS-DOS partition, copy the
	    files from the distribution into a directory called <emphasis
	      remap=tt>C:\FREEBSD</emphasis>.  The directory tree structure of
	    the CDROM must be partially reproduced within this directory so we
	    suggest using the DOS <emphasis remap=tt>xcopy</emphasis> command.
	    For example, to prepare for a minimal installation of FreeBSD:
	    <informalexample>
	      <screen>C&gt; MD C:\FREEBSD C&gt; XCOPY /S E:\BIN
		C:\FREEBSD\BIN\ C&gt; XCOPY /S E:\MANPAGES
		C:\FREEBSD\MANPAGES\</screen>
	    </informalexample> assuming that <emphasis remap=tt>C:</emphasis>
	    is where you have free space and <emphasis remap=tt>E:</emphasis>
	    is where your CDROM is mounted.</para>
	  
	  <para>For as many `DISTS' you wish to install from MS-DOS (and you
	    have free space for), install each one under <emphasis
	      remap=tt>C:\FREEBSD</emphasis> - the <acronym>BIN</acronym> dist
	    is only the minimal requirement.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Before installing from QIC/SCSI Tape</title>
	  
	  <para>Installing from tape is probably the easiest method, short of
	    an on-line install using FTP or a CDROM install.  The installation
	    program expects the files to be simply tar'ed onto the tape, so
	    after getting all of the files for distribution you are interested
	    in, simply tar them onto the tape with a command like:
	    <informalexample>
	      <screen>cd /freebsd/distdir<!-- <br> --> tar cvf /dev/rwt0 (or
		/dev/rst0) dist1 .. dist2</screen>
	    </informalexample>
	  </para>
	  
	  <para>When you go to do the installation, you should also make sure
	    that you leave enough room in some temporary directory (which you
	    will be allowed to choose) to accommodate the <emphasis
	      remap=bf>full</emphasis> contents of the tape you have created.
	    Due to the non-random access nature of tapes, this method of
	    installation requires quite a bit of temporary storage.  You
	    should expect to require as much temporary storage as you have
	    stuff written on tape.</para>
	  
	  <para>
	    <blockquote>
	      <para><emphasis remap=bf>Note:</emphasis> When going to do the
		installation, the tape must be in the drive
		<emphasis>before</emphasis> booting from the boot floppy.  The
		installation probe may otherwise fail to find it.</para>
	    </blockquote>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Before installing over a network</title>
	  
	  <para>You can do network installations over 3 types of
	    communications links:
	    <variablelist>
	      <varlistentry><term>Serial port</term>
		<listitem>
		  <para>SLIP or PPP </para>
		  
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>Parallel port</term>
		
		<listitem>
		  <para>PLIP (laplink cable) </para>
		  
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>Ethernet</term>
		
		<listitem>
		  <para>A standard ethernet controller (includes some
		    PCMCIA).</para>
		  
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	  <para>SLIP support is rather primitive, and limited primarily to
	    hard-wired links, such as a serial cable running between a laptop
	    computer and another computer.  The link should be hard-wired as
	    the SLIP installation does not currently offer a dialing
	    capability; that facility is provided with the PPP utility, which
	    should be used in preference to SLIP whenever possible.</para>
	  
	  <para>If you are using a modem, then PPP is almost certainly your
	    only choice.  Make sure that you have your service provider's
	    information handy as you will need to know it fairly soon in the
	    installation process.  You will need to know how to dial your ISP
	    using the ``AT commands'' specific to your modem, as the PPP
	    dialer provides only a very simple terminal emulator.  If you're
	    using PAP or CHAP, you'll need to type the necessary ``set
	    authname'' and ``set authkey'' commands before typing ``term''.
	    Refer to the user-ppp <xref linkend="userppp" remap="handbook">
	    and <ulink URL="../FAQ/userppp.html">FAQ</ulink> entries for
	    further information.  If you have problems, logging can be
	    directed to the screen using the command <emphasis remap=tt>set
	      log local ...</emphasis>.</para>
	  
	  <para>If a hard-wired connection to another FreeBSD (2.0R or later)
	    machine is available, you might also consider installing over a
	    ``laplink'' parallel port cable.  The data rate over the parallel
	    port is much higher than what is typically possible over a serial
	    line (up to 50k/sec), thus resulting in a quicker
	    installation.</para>
	  
	  <para>Finally, for the fastest possible network installation, an
	    ethernet adaptor is always a good choice!  FreeBSD supports most
	    common PC ethernet cards, a table of supported cards (and their
	    required settings) is provided in <xref linkend="install-hw"
	      remap="Supported
	      Hardware">.  If you are using one of the supported PCMCIA
	    ethernet cards, also be sure that it is plugged in
	    <emphasis>before</emphasis> the laptop is powered on!  FreeBSD
	    does not, unfortunately, currently support hot insertion of PCMCIA
	    cards during installation.</para>
	  
	  <para>You will also need to know your IP address on the network, the
	    netmask value for your address class, and the name of your
	    machine.  Your system administrator can tell you which values to
	    use for your particular network setup.  If you will be referring
	    to other hosts by name rather than IP address, you will also need
	    a name server and possibly the address of a gateway (if you are
	    using PPP, it is your provider's IP address) to use in talking to
	    it.  If you do not know the answers to all or most of these
	    questions, then you should really probably talk to your system
	    administrator <emphasis>first</emphasis> before trying this type
	    of installation.</para>
	  
	  <para>Once you have a network link of some sort working, the
	    installation can continue over NFS or FTP.</para>
	  
	  
	  <sect3>
	    <title>Preparing for NFS installation</title>
	    
	    <para>NFS installation is fairly straight-forward: Simply copy the
	      FreeBSD distribution files you want onto a server somewhere and
	      then point the NFS media selection at it.</para>
	    
	    <para>If this server supports only ``privileged port'' access (as
	      is generally the default for Sun workstations), you will need to
	      set this option in the Options menu before installation can
	      proceed.</para>
	    
	    <para>If you have a poor quality ethernet card which suffers from
	      very slow transfer rates, you may also wish to toggle the
	      appropriate Options flag.</para>
	    
	    <para>In order for NFS installation to work, the server must
	      support subdir mounts, e.g., if your FreeBSD &rel.current;
	      distribution directory lives on:
	      <filename>ziggy:/usr/archive/stuff/FreeBSD</filename> Then ziggy
	      will have to allow the direct mounting of
	      <filename>/usr/archive/stuff/FreeBSD</filename>, not just
	      <filename>/usr</filename> or
	      <filename>/usr/archive/stuff</filename>.</para>
	    
	    <para>In FreeBSD's <filename>/etc/exports</filename> file, this is
	      controlled by the ``<option>-alldirs</option>'' option.  Other
	      NFS servers may have different conventions.  If you are getting
	      `Permission Denied' messages from the server then it is likely
	      that you do not have this enabled properly.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Preparing for FTP Installation</title>
	    
	    <para>FTP installation may be done from any mirror site containing
	      a reasonably up-to-date version of FreeBSD &rel.current;.  A
	      full menu of reasonable choices from almost anywhere in the
	      world is provided by the FTP site menu.</para>
	    
	    <para>If you are installing from some other FTP site not listed in
	      this menu, or you are having troubles getting your name server
	      configured properly, you can also specify your own URL by
	      selecting the ``Other'' choice in that menu.  A URL can also be
	      a direct IP address, so the following would work in the absence
	      of a name server:</para>
	    
	    <para>
	      <informalexample>
		<screen>ftp://165.113.121.81/pub/FreeBSD/&rel.current;-RELEASE</screen>
	      </informalexample>
	    </para>
	    
	    <para>There are two FTP installation modes you can use:</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>FTP Active</term>
		  <listitem>
		    <para>For all FTP transfers, use ``Active'' mode.  This
		      will not work through firewalls, but will often work
		      with older ftp servers that do not support passive mode.
		      If your connection hangs with passive mode (the
		      default), try active!</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>FTP Passive</term>
		  
		  <listitem>
		    <para>For all FTP transfers, use ``Passive'' mode.  This
		      allows the user to pass through firewalls that do not
		      allow incoming connections on random port
		      addresses.</para>
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	    <para>
	      <blockquote>
		<para><emphasis remap=bf>Note:</emphasis> Active and passive
		  modes are not the same as a `proxy' connection, where a
		  proxy FTP server is listening and forwarding FTP
		  requests!</para>
	      </blockquote>
	    </para>
	    
	    <para>For a proxy FTP server, you should usually give name of the
	      server you really want as a part of the username, after an
	      @-sign.  The proxy server then 'fakes' the real server.  An
	      example: Say you want to install from ftp.freebsd.org, using the
	      proxy FTP server foo.bar.com, listening on port 1234.</para>
	    
	    <para>In this case, you go to the options menu, set the FTP
	      username to ftp@ftp.freebsd.org, and the password to your e-mail
	      address.  As your installation media, you specify FTP (or
	      passive FTP, if the proxy support it), and the URL
	      <informalexample>
		<screen>ftp://foo.bar.com:1234/pub/FreeBSD</screen>
	      </informalexample> /pub/FreeBSD from ftp.freebsd.org is proxied
	      under foo.bar.com, allowing you to install from _that_ machine
	      (which fetch the files from ftp.freebsd.org as your installation
	      requests them).</para>
	    
	  </sect3>
	</sect2>
      </sect1>
      
      <sect1>
	<title>Installing FreeBSD</title>
	
	<para>Once you have taken note of the appropriate preinstallation
	  steps, you should be able to install FreeBSD without any further
	  trouble.</para>
	
	<para>Should this not be true, then you may wish to go back and
	  re-read the relevant preparation section above for the installation
	  media type you are trying to use, perhaps there is a helpful hint
	  there that you missed the first time?  If you are having hardware
	  trouble, or FreeBSD refuses to boot at all, read the Hardware Guide
	  provided on the boot floppy for a list of possible solutions.</para>
	
	<para>The FreeBSD boot floppy contains all the on-line documentation
	  you should need to be able to navigate through an installation and
	  if it does not then we would like to know what you found most
	  confusing.  Send your comments to the &a.doc;. It is the objective
	  of the FreeBSD installation program (sysinstall) to be
	  self-documenting enough that painful ``step-by-step'' guides are no
	  longer necessary.  It may take us a little while to reach that
	  objective, but that is the objective!</para>
	
	<para>Meanwhile, you may also find the following ``typical
	  installation sequence'' to be helpful:</para>
	
	<para>
	  <orderedlist>
	    
	    <listitem>
	      <para>Boot the boot floppy.  After a boot sequence which can
		take anywhere from 30 seconds to 3 minutes, depending on your
		hardware, you should be presented with a menu of initial
		choices.  If the floppy does not boot at all, or the boot
		hangs at some stage, go read the Q&amp;A section of the
		Hardware Guide for possible causes.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>Press F1.  You should see some basic usage instructions on
		the menu system and general navigation.  If you have not used
		this menu system before then PLEASE read this thoroughly!
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>Select the Options item and set any special preferences
		you may have.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>Select a Novice, Custom or Express install, depending on
		whether or not you would like the installation to help you
		through a typical installation, give you a high degree of
		control over each step of the installation or simply whizz
		through it (using reasonable defaults when possible) as fast
		as possible.  If you have never used FreeBSD before then the
		Novice installation method is most recommended.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>The final configuration menu choice allows you to further
		configure your FreeBSD installation by giving you menu-driven
		access to various system defaults.  Some items, like
		networking, may be especially important if you did a
		CDROM/Tape/Floppy installation and have not yet configured
		your network interfaces (assuming you have any).  Properly
		configuring such interfaces here will allow FreeBSD to come up
		on the network when you first reboot from the hard
		disk.</para>
	    </listitem>
	    
	  </orderedlist>
	</para>
	
      </sect1>
      
      <sect1>
	<title>MS-DOS User's Questions and Answers</title>
	
	<para>Many FreeBSD users wish to install FreeBSD on PCs inhabited by
	  MS-DOS.  Here are some commonly asked questions about installing
	  FreeBSD on such systems.</para>
	
	<para><emphasis remap=bf>Help!  I have no space!  Do I need to delete
	    everything first?</emphasis></para>
	
	<para>If your machine is already running MS-DOS and has little or no
	  free space available for FreeBSD's installation, all is not lost!
	  You may find the FIPS utility, provided in the <emphasis
	    remap=tt>tools</emphasis> directory on the FreeBSD CDROM or on the
	  various FreeBSD ftp sites, to be quite useful.</para>
	
	<para>FIPS allows you to split an existing MS-DOS partition into two
	  pieces, preserving the original partition and allowing you to
	  install onto the second free piece.  You first defragment your
	  MS-DOS partition, using the DOS 6.xx DEFRAG utility or the Norton
	  Disk tools, then run FIPS.  It will prompt you for the rest of the
	  information it needs.  Afterwards, you can reboot and install
	  FreeBSD on the new free slice.  See the
	  <emphasis>Distributions</emphasis> menu for an estimation of how
	  much free space you will need for the kind of installation you
	  want.</para>
	
	<para><emphasis remap=bf>Can I use compressed MS-DOS filesystems from
	    FreeBSD?</emphasis></para>
	
	<para>No.  If you are using a utility such as Stacker(tm) or
	  DoubleSpace(tm), FreeBSD will only be able to use whatever portion
	  of the filesystem you leave uncompressed.  The rest of the
	  filesystem will show up as one large file (the stacked/dblspaced
	  file!).  <emphasis remap=bf>Do not remove that file!</emphasis> You
	  will probably regret it greatly!</para>
	
	<para>It is probably better to create another uncompressed MS-DOS
	  primary partition and use this for communications between MS-DOS and
	  FreeBSD.</para>
	
	<para><emphasis remap=bf>Can I mount my MS-DOS extended
	    partitions?</emphasis></para>
	
	<para>Yes. DOS extended partitions are mapped in at the end of the
	  other ``slices'' in FreeBSD, e.g. your D: drive might be /dev/sd0s5,
	  your E: drive /dev/sd0s6, and so on. This example assumes, of
	  course, that your extended partition is on SCSI drive 0. For IDE
	  drives, substitute ``wd'' for ``sd'' appropriately. You otherwise
	  mount extended partitions exactly like you would mount any other DOS
	  drive, e.g.:</para>
	
	<para>
	  <informalexample>
	    <screen>mount -t msdos /dev/sd0s5 /dos_d</screen>
	  </informalexample>
	</para>
	
	<para><emphasis remap=bf>Can I run MS-DOS binaries under
	    FreeBSD?</emphasis></para>
	
	<para>BSDI has donated their DOS emulator to the BSD world and this
	  has been ported to FreeBSD.</para>
	
	<para>There is also a (technically) nice application available in the
	  <xref linkend="ports" remap="The Ports Collection"> called pcemu
	  which allows you to run many basic MS-DOS text-mode binaries by
	  entirely emulating an 8088 CPU.</para>
	
      </sect1>
    </chapter>
    
    <chapter
      id="basics">
      <title>Unix Basics</title>
      
      
      <sect1
	id="basics-man">
	<title>The Online Manual</title>
	
	<para>The most comprehensive documentation on FreeBSD is in the form
	  of <emphasis>man pages</emphasis>.  Nearly every program on the
	  system comes with a short reference manual explaining the basic
	  operation and various arguments. These manuals can be view with the
	  <emphasis remap=tt><emphasis remap=bf>man</emphasis></emphasis>
	  command.  Use of the <emphasis remap=tt><emphasis
	      remap=bf>man</emphasis></emphasis> command is simple:
	  <informalexample>
	    <screen><emphasis remap=bf>man</emphasis> <emphasis
		remap=it>command</emphasis></screen>
	  </informalexample> where <emphasis remap=it>command</emphasis> is
	  the name of the command you wish to learn about.  For example, to
	  learn more about <emphasis remap=tt><emphasis
	      remap=bf>ls</emphasis></emphasis> command type:
	  <informalexample>
	    <screen>% <emphasis remap=bf>man ls</emphasis></screen>
	  </informalexample>
	</para>
	
	<para>The online manual is divided up into numbered sections:
	  <orderedlist>
	    
	    <listitem>
	      <para>User commands</para>
	    </listitem>
	    
	    <listitem>
	      <para>System calls and error numbers</para>
	    </listitem>
	    
	    <listitem>
	      <para>Functions in the C libraries</para>
	    </listitem>
	    
	    <listitem>
	      <para>Device drivers</para>
	    </listitem>
	    
	    <listitem>
	      <para>File formats</para>
	    </listitem>
	    
	    <listitem>
	      <para>Games and other diversions</para>
	    </listitem>
	    
	    <listitem>
	      <para>Miscellaneous information</para>
	    </listitem>
	    
	    <listitem>
	      <para>System maintenance and operation commands</para>
	    </listitem>
	    
	  </orderedlist> in some cases, the same topic may appear in more than
	  one section of the on-line manual.  For example, there is a
	  <emphasis remap=tt><emphasis remap=bf>chmod</emphasis></emphasis>
	  user command and a <emphasis
	    remap=tt><function>chmod()</function></emphasis> system call.  In
	  this case, you can tell the <emphasis remap=tt><emphasis
	      remap=bf>man</emphasis></emphasis> command which one you want by
	  specifying the section:
	  <informalexample>
	    <screen>% <emphasis remap=bf>man 1 chmod</emphasis></screen>
	  </informalexample> which will display the manual page for the user
	  command <emphasis remap=tt><emphasis
	      remap=bf>chmod</emphasis></emphasis>.  References to a
	  particular section of the on-line manual are traditionally placed in
	  parenthesis in written documentation, so <emphasis
	    remap=tt><command>chmod(1)</command></emphasis> refers to the
	  <emphasis remap=tt><emphasis remap=bf>chmod</emphasis></emphasis>
	  user command and <emphasis
	    remap=tt><function>chmod(2)</function></emphasis> refers to the
	  system call.</para>
	
	<para>This is fine if you know the name of the command and simply wish
	  to know how to use it, but what if you cannot recall the command
	  name?  You can use <emphasis remap=tt><emphasis
	      remap=bf>man</emphasis></emphasis> to search for keywords in the
	  command <emphasis>descriptions</emphasis> by using the <emphasis
	    remap=tt><option>-k</option></emphasis> switch:
	  <informalexample>
	    <screen>% <command>man -k mail</command></screen>
	  </informalexample> With this command you will be presented with a
	  list of commands that have the keyword `mail' in their descriptions.
	  This is actually functionally equivalent to using the <emphasis
	    remap=tt><emphasis remap=bf>apropos</emphasis></emphasis>
	  command.</para>
	
	<para>So, you are looking at all those fancy commands in
	  <filename>/usr/bin</filename> but do not even have the faintest idea
	  what most of them actually do?  Simply do a
	  <informalexample>
	    <screen>% <command>cd /usr/bin; man -f *</command></screen>
	  </informalexample> or
	  <informalexample>
	    <screen>% <command>cd /usr/bin; whatis *</command></screen>
	  </informalexample> which does the same thing.</para>
	
      </sect1>
      
      <sect1
	id="basics-info">
	<title>GNU Info Files</title>
	
	<para>FreeBSD includes many applications and utilities produced by the
	  Free Software Foundation (FSF).  In addition to man pages, these
	  programs come with more extensive hypertext documents called
	  <emphasis>info</emphasis> files which can be viewed with the
	  <emphasis remap=tt>info</emphasis> command or, if you installed
	  <emphasis remap=tt>emacs</emphasis>, the info mode of <emphasis
	    remap=tt>emacs</emphasis>.</para>
	
	<para>To use the <command>info(1)</command> command, simply type:
	  <informalexample>
	    <screen>% <emphasis remap=bf>info</emphasis></screen>
	  </informalexample> For a brief introduction, type <emphasis
	    remap=tt><emphasis remap=bf>h</emphasis></emphasis>.  For a quick
	  command reference, type <emphasis remap=tt><emphasis
	      remap=bf>?</emphasis></emphasis>.</para>
	
      </sect1>
    </chapter>
    
    <chapter
      id="ports">
      <title>Installing Applications: The Ports collection</title>
      
      <para><emphasis>Contributed by &a.jraynard;.</emphasis></para>
      
      <para>The FreeBSD Ports collection allows you to compile and install a
	very wide range of applications with a minimum of effort. </para>
      
      <para> For all the hype about open standards, getting a program to work
	on different versions of Unix in the real world can be a tedious and
	tricky business, as anyone who has tried it will know. You may be
	lucky enough to find that the program you want will compile cleanly on
	your system, install itself in all the right places and run flawlessly
	``out of the box'', but this is unfortunately rather rare. With most
	programs, you will find yourself doing a fair bit of head-scratching,
	and there are quite a few programs that will result in premature
	greying, or even chronic alopecia...</para>
      
      <para> Some software distributions have attacked this problem by
	providing configuration scripts. Some of these are very clever, but
	they have an unfortunate tendency to triumphantly announce that your
	system is something you have never heard of and then ask you lots of
	questions that sound like a final exam in system-level Unix
	programming (``Does your system's gethitlist function return a const
	pointer to a fromboz or a pointer to a const fromboz? Do you have
	Foonix style unacceptable exception handling? And if not, why
	not?'').</para>
      
      <para> Fortunately, with the Ports collection, all the hard work
	involved has already been done, and you can just type 'make install'
	and get a working program.</para>
      
      
      <sect1>
	<title>Why Have a Ports Collection?</title>
	
	<para>The base FreeBSD system comes with a very wide range of tools
	  and system utilities, but a lot of popular programs are not in the
	  base system, for good reasons:-</para>
	
	<para>
	  <orderedlist>
	    
	    <listitem>
	      <para>Programs that some people cannot live without and other
		people cannot stand, such as a certain Lisp-based editor.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>Programs which are too specialised to put in the base
		system (CAD, databases).
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>Programs which fall into the ``I must have a look at that
		when I get a spare minute'' category, rather than
		system-critical ones (some languages, perhaps).
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>Programs that are far too much fun to be supplied with a
		serious operating system like FreeBSD ;-)
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>However many programs you put in the base system, people
		will always want more, and a line has to be drawn somewhere
		(otherwise FreeBSD distributions would become absolutely
		enormous).</para>
	    </listitem>
	    
	  </orderedlist>
	</para>
	
	<para> Obviously it would be unreasonable to expect everyone to port
	  their favourite programs by hand (not to mention a tremendous amount
	  of duplicated work), so the FreeBSD Project came up with an
	  ingenious way of using standard tools that would automate the
	  process. </para>
	
	<para> Incidentally, this is an excellent illustration of how ``the
	  Unix way'' works in practice by combining a set of simple but very
	  flexible tools into something very powerful.</para>
	
      </sect1>
      
      <sect1>
	<title>How Does the Ports Collection Work?</title>
	
	<para>Programs are typically distributed on the Internet as a 
	  <xref linkend="ports-tarball" remap="tarball"> consisting of a
	  Makefile and the source code for the program and usually some
	  instructions (which are unfortunately not always as instructive as
	  they could be), with perhaps a configuration script. </para>
	
	<para>The standard scenario is that you FTP down the tarball, extract
	  it  somewhere, glance through the instructions, make any changes
	  that seem  necessary, run the configure script to set things up and
	  use the standard  `make' program to compile and install the program
	  from the source.</para>
	
	<para>FreeBSD ports still use the tarball mechanism, but use a 
	  <xref linkend="ports-skeleton" remap="skeleton"> to hold the
	  &quot;knowledge&quot;  of how to get the program working on FreeBSD,
	  rather than expecting the user to be able to work it out. They also
	  supply their own customised
	  <xref linkend="ports-makefile" remap="Makefile">, so that almost
	  every port can be built in the same way.</para>
	
	<para>If you look at a port skeleton (either on <ulink
	    URL="file://localhost/usr/ports/devel/ElectricFence">your FreeBSD
	    system</ulink> or <ulink
	    URL="ftp://ftp.freebsd.org/pub/FreeBSD/ports/devel/ElectricFence">the FTP site</ulink>) and expect to find all sorts of pointy-headed rocket science lurking there, you may be disappointed by the one or two rather unexciting-looking files and directories you find there. (We will discuss in a minute how to go about <xref
	    linkend="ports-getting" remap="Getting a port">).</para>
	
	<para>``How on earth can this do anything?'' I hear you cry. ``There
	  is no source code there!''</para>
	
	<para> Fear not, gentle reader, all will become clear (hopefully).
	  Let's see what happens if we try and install a port. I have chosen
	  `ElectricFence', a useful tool for developers, as the skeleton is
	  more straightforward than most.</para>
	
	<para><emphasis>Note</emphasis> if you are trying this at home, you
	  will need to be root.</para>
	
	<para>
	  <literallayout> # cd /usr/ports/devel/ElectricFence # make install
	    &gt;&gt; Checksum OK for ElectricFence-2.0.5.tar.gz. ===&gt;
	    Extracting for ElectricFence-2.0.5 ===&gt;  Patching for
	    ElectricFence-2.0.5 ===&gt;  Applying FreeBSD patches for
	    ElectricFence-2.0.5 ===&gt;  Configuring for ElectricFence-2.0.5
	    ===&gt;  Building for ElectricFence-2.0.5 [lots of compiler
	    output...] ===&gt;  Installing for ElectricFence-2.0.5 ===&gt;
	    Warning: your umask is "0002". If this is not desired, set it to
	    an appropriate value and install this port again by ``make
	    reinstall''. install -c -o bin -g bin -m 444
	    /usr/ports/devel/ElectricFence/work/ElectricFence-2.0.5/libefence.a /usr/local/lib install -c -o bin -g bin -m 444 /usr/ports/devel/ElectricFence/work/ElectricFence-2.0.5/libefence.3 /usr/local/man/man3 ===&gt;   Compressing manual pages for ElectricFence-2.0.5 ===&gt;  Registering installation for ElectricFence-2.0.5</literallayout>
	</para>
	
	<para> To avoid confusing the issue, I have completely removed the
	  build output.</para>
	
	<para>If you tried this yourself, you may well have got something like
	  this at the start:-</para>
	
	<para><anchor id="ports-fetch"> <literallayout># make install &gt;&gt;
	    ElectricFence-2.0.5.tar.gz doesn't seem to exist on this system.
	    &gt;&gt; Attempting to fetch from
	    ftp://ftp.doc.ic.ac.uk/Mirrors/sunsite.unc.edu/pub/Linux/devel/lang/c/.</literallayout>
	</para>
	
	<para> The `make' program has noticed that you did not have a local
	  copy of the source code and tried to FTP it down so it could get the
	  job done. I already had the source handy in my example, so it did
	  not need to fetch it.</para>
	
	<para> Let's go through this and see what the `make' program was
	  doing.</para>
	
	<para>
	  <orderedlist>
	    
	    <listitem>
	      <para> Locate the source code <xref linkend="ports-tarball"
		  remap="tarball."> If it is not available locally, try to
		grab it from an FTP site.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para> Run a <xref linkend="ports-checksum" remap="checksum">
		test on the tarball to make sure it has not been tampered
		with, accidentally truncated, downloaded in ASCII mode, struck
		by neutrinos while in transit, etc.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para> Extract the tarball into a temporary work directory.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para> Apply any <xref linkend="ports-patch" remap="patches">
		needed to get the source to compile and run under FreeBSD.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para> Run any configuration script required by the build
		process and correctly answer any questions it asks.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para> (Finally!) Compile the code.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para> Install the program executable and other supporting
		files, man pages, etc. under the /usr/local hierarchy, where
		they will not get mixed up with system programs. This also
		makes sure that all the ports you install will go in the same
		place, instead of being flung all over your system.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para> Register the installation in a database. This means that,
		if you do not like the program, you can cleanly <xref
		  linkend="ports-remove" remap="remove"> all traces of it from
		your system.
	      </para>
	    </listitem>
	    
	  </orderedlist>
	</para>
	
	<para> Scroll up to the make output and see if you can match these
	  steps to it. And if you were not impressed before, you should be by
	  now!</para>
	
      </sect1>
      
      <sect1
	id="ports-getting">
	<title>Getting a FreeBSD Port</title>
	
	<para>There are two ways of getting hold of the FreeBSD port for a
	  program. One requires a <xref linkend="ports-cd" remap="FreeBSD
	    CDROM">, the other involves using an <xref linkend="ports-inet"
	    remap="Internet Connection."></para>
	
	
	<sect2
	  id="ports-cd">
	  <title>Compiling ports from CDROM</title>
	  
	  <para>If you answered yes to the question ``Do you want to link the
	    ports  collection to your CDROM'' during the FreeBSD installation,
	    the initial setting up will already have been done for you.</para>
	  
	  <para>If not, make sure the <emphasis>FreeBSD</emphasis> CDROM is in
	    the drive and mounted on,  say, /cdrom. Then do</para>
	  
	  <para>
	    <literallayout> # mkdir /usr/ports # cd /usr/ports # ln -s
	      /cdrom/ports/distfiles distfiles</literallayout>
	  </para>
	  
	  <para>to enable the ports make mechanism to find the tarballs (it
	    expects to find them in /usr/ports/distfiles, which is why we
	    sym-linked the CDROM's tarball directory to that
	    directory).</para>
	  
	  <para>Now, suppose you want to install the gnats program from the
	    databases directory. Here is how to do it:-</para>
	  
	  <para>
	    <literallayout> # cd /usr/ports # mkdir databases # cp -R
	      /cdrom/ports/databases/gnats databases # cd databases/gnats #
	      make install</literallayout>
	  </para>
	  
	  <para>Or if you are a serious database user and you want to compare
	    all the ones available in the Ports collection, do</para>
	  
	  <para>
	    <literallayout> # cd /usr/ports # cp -R /cdrom/ports/databases . #
	      cd databases # make install</literallayout>
	  </para>
	  
	  <para>(yes, that really is a dot on its own after the cp command and
	    not a mistake. It is Unix-ese for ``the current
	    directory'')</para>
	  
	  <para>and the ports make mechanism will automatically compile and
	    install all the ports in the databases directory for you!</para>
	  
	  <para>If you do not like this method, here is a completely different
	    way of doing it:-</para>
	  
	  <para>Create a "link tree" to it using the
	    <command>lndir(1)</command> command that comes with the
	    <emphasis>XFree86</emphasis> distribution.  Find a location with
	    some free space, create a directory there and then cd to it.  Then
	    invoke the <command>lndir(1)</command> command with the full
	    pathname of the ``ports'' directory on the CDROM as the first
	    argument and . (the current directory) as the second.  This might
	    be, for example, something like: <literallayout>	lndir
	      /cdrom/ports .</literallayout>
	  </para>
	  
	  <para>Then you can build ports directly off the CDROM by building
	    them in the link tree you have created.</para>
	  
	  <para>Note that there are some ports for which we cannot provide the
	    original source in the CDROM due to licensing limitations.  In
	    that case, you will need to look at the section on <xref
	      linkend="ports-inet"
	      remap="Compiling ports using an Internet connection."></para>
	  
	</sect2>
	
	<sect2
	  id="ports-inet">
	  <title>Compiling ports from the Internet</title>
	  
	  <para>If you do not have a CDROM, or you want to make sure you get
	    the very latest version of the port you want, you will need to
	    download the
	    <xref linkend="ports-skeleton" remap="skeleton"> for the port. Now
	    this  might sound like rather a fiddly job full of pitfalls, but
	    it is actually very easy. </para>
	  
	  <para>The key to it is that the FreeBSD FTP server can create
	    on-the-fly
	    <xref linkend="ports-tarball" remap="tarballs"> for you. Here is
	    how it works, with the gnats program in the databases directory as
	    an example (the bits in square brackets are comments.  Do not type
	    them in if you are trying this yourself!):-</para>
	  
	  <para>
	    <literallayout> # cd /usr/ports # mkdir databases # cd databases #
	      ftp ftp.freebsd.org [log in as `ftp' and give your email address
	      when asked for a password. Remember to use binary (also known as
	      image) mode!] &gt; cd /pub/FreeBSD/ports/databases &gt; get
	      gnats.tar		[tars up the gnats skeleton for us] &gt; quit
	      # tar xf gnats.tar		[extract the gnats skeleton] #
	      cd gnats # make install			[build and install
	      gnats]</literallayout>
	  </para>
	  
	  <para>What happened here? We connected to the FTP server in the
	    usual way and went to its databases sub-directory. When we gave it
	    the command `get gnats.tar', the FTP server <xref
	      linkend="ports-tarball"
	      remap="tarred"> up the gnats directory for us.</para>
	  
	  <para>We then extracted the gnats skeleton and went into the gnats
	    directory to build the port. As we explained <xref
	      linkend="ports-fetch"
	      remap="earlier">, the make process noticed we did not have a
	    copy of the source locally, so it fetched one before extracting,
	    patching and building it.</para>
	  
	  <para>Let's try something more ambitious now. Instead of getting a
	    single port skeleton, let's get a whole sub-directory, for example
	    all the database skeletons in the ports collection. It looks
	    almost the same:-</para>
	  
	  <para>
	    <literallayout> # cd /usr/ports # ftp ftp.freebsd.org [log in as
	      `ftp' and give your email address when asked for a password.
	      Remember to use binary (also known as image) mode!] &gt; cd
	      /pub/FreeBSD/ports &gt; get databases.tar		[tars up the
	      databases directory for us] &gt; quit # tar xf databases.tar
	      [extract all the database skeletons] # cd databases # make
	      install			[build and install all the database
	      ports]</literallayout>
	  </para>
	  
	  <para>With half a dozen straightforward commands, we have now got a
	    set of database programs on our FreeBSD machine! All we did that
	    was different from getting a single port skeleton and building it
	    was that we got a whole directory at once, and compiled everything
	    in it at once. Pretty impressive, no?</para>
	  
	  <para>If you expect to be installing many ports, it is probably
	    worth downloading all the ports directories.</para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="ports-skeleton">
	<title>Skeletons</title>
	
	<para>A team of compulsive hackers who have forgotten to eat in a
	  frantic attempt to make a deadline? Something unpleasant lurking in
	  the FreeBSD  attic? No, a skeleton here is a minimal framework that
	  supplies everything needed to make the ports magic work.</para>
	
	
	<sect2
	  id="ports-makefile">
	  <title>Makefile</title>
	  
	  <para>The most important component of a skeleton is the Makefile.
	    This contains various statements that specify how the port should
	    be compiled and installed. Here is the Makefile for
	    ElectricFence:-</para>
	  
	  <para>
	    <literallayout># New ports collection makefile for:  Electric
	      Fence # Version required:	2.0.5 # Date created: 	13 November
	      1997 # Whom:			jraynard # # $Id:
	      handbook.sgml,v 1.1 1998/04/01 18:25:32 nik Exp $ # DISTNAME=
	      ElectricFence-2.0.5 CATEGORIES=	devel MASTER_SITES=
	      ${MASTER_SITE_SUNSITE} MASTER_SITE_SUBDIR=	devel/lang/c
	      MAINTAINER=	jraynard@freebsd.org MAN3=
	      libefence.3 do-install: ${INSTALL_DATA} ${WRKSRC}/libefence.a
	      ${PREFIX}/lib ${INSTALL_MAN} ${WRKSRC}/libefence.3
	      ${PREFIX}/man/man3 .include &lt;bsd.port.mk&gt;</literallayout>
	  </para>
	  
	  <para>The lines beginning with a &quot;#&quot; sign are comments for
	    the benefit of human readers (as in most Unix script
	    files).</para>
	  
	  <para>`DISTNAME&quot; specifies the name of the <xref
	      linkend="ports-tarball" remap="tarball">, but without the
	    extension.</para>
	  
	  <para>`CATEGORIES&quot; states what kind of program this is.  In
	    this case, a utility for developers.</para>
	  
	  <para>`MASTER_SITES&quot; is the URL(s) of the master FTP site,
	    which is used to retrieve the <xref linkend="ports-tarball"
	      remap="tarball"> if it is not available on the local system.
	    This is a site which is regarded as reputable, and is normally the
	    one from which the program is officially  distributed (in so far
	    as any software is &quot;officially&quot; distributed on the
	    Internet).</para>
	  
	  <para>`MAINTAINER&quot; is the email address of the person who is
	    responsible for updating the skeleton if, for example a new
	    version of the program comes out.</para>
	  
	  <para>Skipping over the next few lines for a minute, the line
	    <literallayout> .include &lt;bsd.port.mk&gt; </literallayout> says
	    that the other statements and commands  needed for this port are
	    in a standard file called  `bsd.port.mk&quot;. As these are the
	    same for all ports, there is no point in duplicating them all over
	    the place, so they are kept in a single standard file.</para>
	  
	  <para>This is probably not the place to go into a detailed
	    examination of how Makefiles work; suffice it to say that the line
	    starting with ``MAN3'' ensures that the ElectricFence man page is
	    compressed after installation, to help conserve your precious disk
	    space.  The original port did not provide an ``install'' target,
	    so the three lines from ``do-install'' ensure that the files
	    produced by this port are placed in the correct
	    destination.</para>
	  
	</sect2>
	
	<sect2>
	  <title>The files directory</title>
	  
	  <para>The file containing the <xref linkend="ports-checksum"
	      remap="checksum"> for the port is called &quot;md5&quot;, after
	    the MD5 algorithm used for ports checksums. It lives in a
	    directory with the slightly confusing name of
	    &quot;files&quot;.</para>
	  
	  <para>This directory can also contain other miscellaneous files that
	    are required by the port and do not belong anywhere else.</para>
	  
	</sect2>
	
	<sect2>
	  <title>The patches directory</title>
	  
	  <para>This directory contains the <xref linkend="ports-patch"
	      remap="patches"> needed to make everything work properly under
	    FreeBSD.</para>
	  
	</sect2>
	
	<sect2>
	  <title>The pkg directory</title>
	  
	  <para>This program contains three quite useful files:-</para>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para>COMMENT - a one-line description of the program.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>DESCR - a more detailed description.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>PLIST - a list of all the files that will be created
		  when the program is installed.</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="ports-troubleshooting">
	<title>What to do when a port does not work.</title>
	
	<para>Oh. You can do one of four (4) things :</para>
	
	<para>
	  <orderedlist>
	    
	    <listitem>
	      <para> Fix it yourself. Technical details on how ports work can
		be found in
		<xref linkend="porting" remap="Porting applications."></para>
	    </listitem>
	    
	    <listitem>
	      <para> Gripe. This is done by e-mail *ONLY*! Send such e-mail to
		the &a.ports; and please include the name/version of the port,
		where you got both the port source &amp; distfile(s) from, and
		what the text of the error was.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para> Forget it. This is the easiest for most - very few of the
		programs in ports can be classified as `essential'!
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para> Grab the pre-compiled package from a ftp server. The
		``master'' package collection is on FreeBSD's FTP server in
		the <ulink
		  URL="ftp://ftp.FreeBSD.org/pub/FreeBSD/packages/">packages
		  directory</ulink>, though check your local mirror first,
		please! These are more likely to work (on the whole) than
		trying to compile from source and a lot faster besides!  Use
		the <command>pkg_add(1)</command>  program to install a
		package file on your system.
	      </para>
	    </listitem>
	    
	  </orderedlist>
	</para>
	
      </sect1>
      
      <sect1>
	<title>I Want to Make a Port!</title>
	
	<para>Great! Please see the <xref linkend="porting"
	    remap="guidelines"> for detailed instructions on how to do
	  this.</para>
	
      </sect1>
      
      <sect1>
	<title>Some Questions and Answers</title>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>Q. I thought this was going to be a discussion about
		modems??!
	      </para>
	      
	      <para>A. Ah. You must be thinking of the serial ports on the
		back of your computer. We are using `port' here to mean the
		result of `porting' a program from one version of Unix to
		another. (It is an unfortunate bad habit of computer people to
		use the same word to refer to several completely different
		things).</para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. I thought you were supposed to use packages to install
		extra programs?
	      </para>
	      
	      <para>A. Yes, that is usually the quickest and easiest way of
		doing it.</para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. So why bother with ports then?
	      </para>
	      
	      <para>A. Several reasons:-</para>
	      
	      <para>
		<orderedlist>
		  
		  <listitem>
		    <para> The licensing conditions on some software
		      distributions require that they be distributed as source
		      code, not binaries.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para> Some people do not trust binary distributions. At
		      least with source code you can (in theory) read through
		      it and look for potential problems yourself.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para> If you have some local patches, you will need the
		      source to add them yourself.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para> You might have opinions on how a program should be
		      compiled that differ from the person who did the package
		      - some people have strong views on what optimisation
		      setting should be used, whether to build debug versions
		      and then strip them or not, etc. etc.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para> Some people like having code around, so they can
		      read it if they get bored, hack around with it, borrow
		      from it (licence terms permitting, of course!) and so
		      on.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para> If you ain't got the source, it ain't software!
		      ;-)</para>
		  </listitem>
		  
		</orderedlist>
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para><anchor id="ports-patch"> Q. What is a patch?
	      </para>
	      
	      <para>A. A patch is a small (usually) file that specifies how to
		go from one version of a file to another. It contains text
		that says, in effect, things like ``delete line 23'', ``add
		these two lines after line 468'' or ``change line 197 to
		this''. Also known as a `diff', since it is generated by a
		program of that name.</para>
	    </listitem>
	    
	    <listitem>
	      <para><anchor id="ports-tarball"> Q. What is all this about
		tarballs?
	      </para>
	      
	      <para>A. It is a file ending in .tar or .tar.gz (with variations
		like .tar.Z, or even .tgz if you are trying to squeeze the
		names into a DOS filesystem).</para>
	      
	      <para>Basically, it is a directory tree that has been archived
		into a single file (.tar) and optionally compressed (.gz).
		This technique was originally used for
		<emphasis>T</emphasis>ape <acronym>AR</acronym>chives (hence
		the name `tar'), but it is a widely used way of distributing
		program source code around the Internet.</para>
	      
	      <para>You can see what files are in them, or even extract them
		yourself, by using the standard Unix tar program, which comes
		with the base FreeBSD system, like this:-</para>
	      
	      <para>
		<literallayout> tar tvzf foobar.tar.gz		# View
		  contents of foobar.tar.gz tar xzvf foobar.tar.gz
		  # Extract contents into the current directory tar tvf
		  foobar.tar		# View contents of foobar.tar tar xvf
		  foobar.tar		# Extract contents into the current
		  directory</literallayout>
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para><anchor id="ports-checksum"> Q. And a checksum?
	      </para>
	      
	      <para>A. It is a number generated by adding up all the data in
		the file you want to check. If any of the characters change,
		the checksum will no longer be equal to the total, so a simple
		comparison will allow you to spot the difference. (In
		practice, it is done in a more complicated way to spot
		problems like position-swapping, which will not show up with a
		simplistic addition).</para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. I did what you said for <xref linkend="ports-cd"
		  remap="compiling ports from a CDROM"> and it worked great
		until I tried to install the kermit port:- <literallayout> #
		  make install &gt;&gt; cku190.tar.gz doesn't seem to exist on
		  this system. &gt;&gt; Attempting to fetch from
		  ftp://kermit.columbia.edu/kermit/archives/.</literallayout>
		Why can it not be found? Have I got a dud CDROM?
	      </para>
	      
	      <para>A. The licensing terms for kermit do not allow us to put
		the tarball for it on the CDROM, so you will have to fetch it
		by hand - sorry! The reason why you got all those error
		messages was because you were not connected to the Internet at
		the time. Once you have downloaded it from any of the sites
		above, you can re-start the process (try and choose the
		nearest site to you, though, to save your time and the
		Internet's bandwidth).</para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. I did that, but when I tried to put it into
		/usr/ports/distfiles I got some error about not having
		permission.
	      </para>
	      
	      <para>A. The ports mechanism looks for the tarball in
		/usr/ports/distfiles, but you will not be able to copy
		anything there because it is sym-linked to the CDROM, which is
		read-only. You can tell it to look somewhere else by
		doing</para>
	      
	      <para>
		<literallayout> DISTDIR=/where/you/put/it make
		  install</literallayout>
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. Does the ports scheme only work if you have everything
		in /usr/ports? My system administrator says I must put
		everything under /u/people/guests/wurzburger, but it does not
		seem to work.
	      </para>
	      
	      <para>A. You can use the PORTSDIR and PREFIX variables to tell
		the ports mechanism to use different directories. For
		instance,</para>
	      
	      <para>
		<literallayout> make
		  PORTSDIR=/u/people/guests/wurzburger/ports
		  install</literallayout>
	      </para>
	      
	      <para>will compile the port in /u/people/guests/wurzburger/ports
		and install everything under /usr/local. </para>
	      
	      <para>
		<literallayout>  make PREFIX=/u/people/guests/wurzburger/local
		  install</literallayout>
	      </para>
	      
	      <para>will compile it in /usr/ports and install it in
		/u/people/guests/wurzburger/local. </para>
	      
	      <para>And of course</para>
	      
	      <para>
		<literallayout> make PORTSDIR=.../ports PREFIX=.../local
		  install</literallayout>
	      </para>
	      
	      <para>will combine the two (it is too long to fit on the page if
		I write it in full, but I am sure you get the idea).</para>
	      
	      <para>If you do not fancy typing all that in every time you
		install a port (and to be honest, who would?), it is a good
		idea to put these variables into your environment.</para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. I do not have a FreeBSD CDROM, but I would like to have
		all the tarballs handy on my system so I do not have to wait
		for a download every time I install a port. Is there an easy
		way to get them all at once?
	      </para>
	      
	      <para>A. To get every single tarball for the ports collection,
		do</para>
	      
	      <para>
		<literallayout> # cd /usr/ports # make fetch</literallayout>
	      </para>
	      
	      <para>For all the tarballs for a single ports directory,
		do</para>
	      
	      <para>
		<literallayout> # cd /usr/ports/directory # make
		  fetch</literallayout>
	      </para>
	      
	      <para>and for just one port - well, I think you have guessed
		already.</para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. I know it is probably faster to fetch the tarballs from
		one of the FreeBSD mirror sites close by. Is there any way to
		tell the port to fetch them from servers other than ones
		listed in the MASTER_SITES?
	      </para>
	      
	      <para>A. Yes. If you know, for example, ftp.FreeBSD.ORG is much
		closer than sites listed in MASTER_SITES, do as following
		example. <literallayout> # cd /usr/ports/directory # make
		  MASTER_SITE_OVERRIDE=ftp://ftp.FreeBSD.ORG/pub/FreeBSD/distfiles/ fetch</literallayout>
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. I want to know what files make is going to need before
		it tries to pull them down.
	      </para>
	      
	      <para>A. 'make fetch-list' will display a list of the files
		needed for a port.</para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. Is there any way to stop the port from compiling? I
		want to do some hacking on the source before I install it, but
		it is a bit tiresome having  to watch it and hit control-C
		every time.
	      </para>
	      
	      <para>A. Doing 'make extract' will stop it after it has fetched
		and extracted the source code.</para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. I am trying to make my own port and I want to be able
		to stop it compiling until I have had a chance to see if my
		patches worked properly.  Is there something like 'make
		extract', but for patches?
	      </para>
	      
	      <para>A. Yep, 'make patch' is what you want.  You will probably
		find the PATCH_DEBUG option useful as well.  And by the way,
		thank you for your efforts!</para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. I have heard that some compiler options can cause bugs.
		Is this true? How can I make sure that I compile ports with
		the right settings?
	      </para>
	      
	      <para>A. Yes, with version 2.6.3 of gcc (the version shipped
		with FreeBSD 2.1.0 and 2.1.5), the -O2 option could result in
		buggy code unless you used the -fno-strength-reduce option as
		well. (Most of the ports don't use -O2). You
		<emphasis>should</emphasis> be able to specify the compiler
		options used by something like</para>
	      
	      <para>
		<literallayout> make CFLAGS='-O2 -fno-strength-reduce'
		  install</literallayout>
	      </para>
	      
	      <para>or by editing /etc/make.conf, but unfortunately not all
		ports respect this. The surest way is to do 'make configure',
		then go into the source directory and inspect the Makefiles by
		hand, but this can get tedious if the source has lots of
		sub-directories, each with their own Makefiles.</para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. There are so many ports it is hard to find the one I
		want. Is there a list anywhere of what ports are available?
	      </para>
	      
	      <para>A. Look in the INDEX file in /usr/ports.</para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. I went to install the 'foo' port but the system
		suddenly stopped compiling it and starting compiling the 'bar'
		port. What's going on?
	      </para>
	      
	      <para>A. The 'foo' port needs something that is supplied with
		'bar' - for instance, if 'foo' uses graphics, 'bar' might have
		a library with useful graphics processing routines. Or 'bar'
		might be a tool that is needed to compile the 'foo'
		port.</para>
	    </listitem>
	    
	    <listitem>
	      <para><anchor id="ports-remove">  Q. I installed the grizzle
		program from the ports and frankly it is a complete waste of
		disk space. I want to delete it but I do not know where it put
		all the files. Any clues?
	      </para>
	      
	      <para>A. No problem, just do</para>
	      
	      <para>
		<literallayout> pkg_delete grizzle-6.5</literallayout>
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>
		Q. Hang on a minute, you have to know the version number to
		use that command. You do not seriously expect me to remember
		that, do you??
	      </para>
	      
	      <para>A. Not at all, you can find it out by doing</para>
	      
	      <para>
		<literallayout> pkg_info -a | grep grizzle</literallayout>
	      </para>
	      
	      <para>And it will tell you:-</para>
	      
	      <para>
		<literallayout> Information for grizzle-6.5: grizzle-6.5 - the
		  combined piano tutorial, LOGO interpreter and shoot 'em up
		  arcade game.</literallayout>
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. Talking of disk space, the ports directory seems to be
		taking up an awful lot of room. Is it safe to go in there and
		delete things?
	      </para>
	      
	      <para>A. Yes, if you have installed the program and are fairly
		certain you will not need the source again, there is no point
		in keeping it hanging around. The best way to do this
		is</para>
	      
	      <para>
		<literallayout> # cd /usr/ports # make clean</literallayout>
	      </para>
	      
	      <para>which will go through all the ports subdirectories and
		delete everything except the skeletons for each port.</para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. I tried that and it still left all those tarballs or
		whatever you called them in the distfiles directory. Can I
		delete those as well?
	      </para>
	      
	      <para>A. Yes, if you are sure you have finished with them, those
		can go as well.</para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. I like having lots and lots of programs to play with.
		Is there any way of installing all the ports in one go?
	      </para>
	      
	      <para>A. Just do</para>
	      
	      <para>
		<literallayout> # cd /usr/ports # make install</literallayout>
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. OK, I tried that, but I thought it would take a very
		long time so I went to bed and left it to get on with it. When
		I looked at the computer this morning, it had only done three
		and a half ports. Did something go wrong?
	      </para>
	      
	      <para>A. No, the problem is that some of the ports need to ask
		you questions that we cannot answer for you (eg ``Do you want
		to print on A4 or US letter sized paper?'') and they need to
		have someone on hand to answer them.</para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. I really do not want to spend all day staring at the
		monitor. Any better ideas?
	      </para>
	      
	      <para>A. OK, do this before you go to bed/work/the local
		park:-</para>
	      
	      <para>
		<literallayout> # cd /usr/ports # make -DBATCH
		  install</literallayout>
	      </para>
	      
	      <para>This will install every port that does
		<emphasis>not</emphasis> require user input. Then, when you
		come back, do</para>
	      
	      <para>
		<literallayout> # cd /usr/ports # make -DIS_INTERACTIVE
		  install</literallayout>
	      </para>
	      
	      <para>to finish the job.</para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. At work, we are using frobble, which is in your ports
		collection, but we have altered it quite a bit to get it to do
		what we need. Is there any way of making our own packages, so
		we can distribute it more easily around our sites?
	      </para>
	      
	      <para>A. No problem, assuming you know how to make patches for
		your changes:-</para>
	      
	      <para>
		<literallayout> # cd /usr/ports/somewhere/frobble # make
		  extract # cd work/frobble-2.8 [Apply your patches] # cd
		  ../.. # make package</literallayout>
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>Q. This ports stuff is really clever. I am desperate to
		find out how you did it. What is the secret?
	      </para>
	      
	      <para>A. Nothing secret about it at all, just look at the
		bsd.ports.mk and bsd.ports.subdir.mk files in your <ulink
		  URL="file://localhost/usr/share/mk/">makefiles
		  directory.</ulink> (Note: readers with an aversion to
		intricate shell-scripts are advised not to follow this
		link...)</para>
	    </listitem>
	    
	  </itemizedlist>
	  
	</para>
	
	<para>	      </para>
	
      </sect1>
    </chapter>
  </part>
  
  <part>
    <title>System Administration</title>
    
    
    <chapter
      id="kernelconfig">
      <title>Configuring the FreeBSD Kernel</title>
      
      <para><emphasis>Contributed by &a.jehamby;.<!-- <br> -->6 October
	  1995.</emphasis></para>
      
      <para>This large section of the handbook discusses the basics of
	building your own custom kernel for FreeBSD.  This section is
	appropriate for both novice system administrators and those with
	advanced Unix experience.</para>
      
      
      <sect1>
	<title>Why Build a Custom Kernel?</title>
	
	<para>Building a custom kernel is one of the most important rites of
	  passage every Unix system administrator must endure.  This process,
	  while time-consuming, will provide many benefits to your FreeBSD
	  system.  Unlike the GENERIC kernel, which must support every
	  possible SCSI and network card, along with tons of other rarely used
	  hardware support, a custom kernel only contains support for
	  <emphasis>your</emphasis> PC's hardware.  This has a number of
	  benefits:</para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>It will take less time to boot because it does not have to
		spend time probing for hardware which you do not have.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>A custom kernel often uses less memory, which is important
		because the kernel is the one process which must always be
		present in memory, and so all of that unused code ties up
		pages of RAM that your programs would otherwise be able to
		use.  Therefore, on a system with limited RAM, building a
		custom kernel is of critical importance.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>Finally, there are several kernel options which you can
		tune to fit your needs, and device driver support for things
		like sound cards which you can include in your kernel but are
		<emphasis>not</emphasis> present in the GENERIC kernel.
	      </para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
      
      <sect1
	id="kernelconfig-building">
	<title>Building and Installing a Custom Kernel</title>
	
	<para>First, let us take a quick tour of the kernel build directory.
	  All directories mentioned will be relative to the main
	  <filename>/usr/src/sys</filename> directory, which is also
	  accessible through <filename>/sys</filename>.  There are a number of
	  subdirectories here representing different parts of the kernel, but
	  the most important, for our purposes, are
	  <filename>i386/conf</filename>, where you will edit your custom
	  kernel configuration, and <emphasis remap=tt>compile</emphasis>,
	  which is the staging area where your kernel will be built.  Notice
	  the logical organization of the directory tree, with each supported
	  device, filesystem, and option in its own subdirectory.  Also,
	  anything inside the <emphasis remap=tt>i386</emphasis> directory
	  deals with PC hardware only, while everything outside the <emphasis
	    remap=tt>i386</emphasis> directory is common to all platforms
	  which FreeBSD could potentially be ported to.</para>
	
	<para>
	  <blockquote>
	    <para><emphasis>Note:</emphasis> If there is
	      <emphasis>not</emphasis> a <filename>/usr/src/sys</filename>
	      directory on your system, then the kernel source has not been
	      been installed.  Follow the instructions for installing packages
	      to add this package to your system.</para>
	  </blockquote>
	</para>
	
	<para>Next, move to the <filename>i386/conf</filename> directory and
	  copy the GENERIC configuration file to the name you want to give
	  your kernel.  For example:
	  <informalexample>
	    <screen># cd /usr/src/sys/i386/conf # cp GENERIC MYKERNEL</screen>
	  </informalexample> Traditionally, this name is in all capital
	  letters and, if you are maintaining multiple FreeBSD machines with
	  different hardware, it is a good idea to name it after your
	  machine's hostname.  We will call it MYKERNEL for the purpose of
	  this example.</para>
	
	<para>
	  <blockquote>
	    <para><emphasis>Note:</emphasis> You must execute these and all of
	      the following commands under the root account or you will get
	      ``permission denied'' errors.</para>
	  </blockquote>
	</para>
	
	<para>Now, edit MYKERNEL with your favorite text editor.  If you are
	  just starting out, the only editor available will probably be
	  <emphasis remap=tt>vi</emphasis>, which is too complex to explain
	  here, but is covered well in many books in the <xref
	    linkend="bibliography" remap="bibliography">.  Feel free to change
	  the comment	lines at the top to reflect your configuration or the
	  changes you have made to differentiate it from GENERIC.</para>
	
	<para>If you have build a kernel under SunOS or some other BSD
	  operating system, much of this file will be very familiar to you.
	  If you are coming from some other operating system such as DOS, on
	  the other hand, the GENERIC configuration file might seem
	  overwhelming to you, so follow the descriptions in the <xref
	    linkend="kernelconfig-config"
	    remap="Configuration File"> section slowly and carefully.</para>
	
	<para>
	  <blockquote>
	    <para><emphasis>Note:</emphasis> If you are trying to upgrade your
	      kernel from an older version of FreeBSD, you will probably have
	      to get a new version of <command>config(8)</command> from the
	      same place you got the new kernel sources.  It is located in
	      <filename>/usr/src/usr.sbin</filename>, so you will need to
	      download those sources as well.  Re-build and install it before
	      running the next commands.</para>
	  </blockquote>
	</para>
	
	<para>When you are finished, type the following to compile and install
	  your kernel:
	  <informalexample>
	    <screen># /usr/sbin/config MYKERNEL # cd ../../compile/MYKERNEL #
	      make depend # make # make install</screen>
	  </informalexample> The new kernel will be copied to the root
	  directory as <filename>/kernel</filename> and the old kernel will be
	  moved to <filename>/kernel.old</filename>.  Now, shutdown the system
	  and reboot to use your kernel.  In case something goes wrong, there
	  are some <xref linkend="kernelconfig-trouble"
	    remap="troubleshooting"> instructions at the end of this document.
	  Be sure to read the section which explains how to recover in case
	  your new kernel <xref
	    linkend="kernelconfig-noboot" remap="does not boot">.</para>
	
	<para>
	  <blockquote>
	    <para><emphasis>Note:</emphasis> If you have added any new devices
	      (such as sound cards) you may have to add some <xref
		linkend="kernelconfig-nodes" remap="device nodes"> to your
	      <filename>/dev</filename> directory before you can use
	      them.</para>
	  </blockquote>
	</para>
	
      </sect1>
      
      <sect1
	id="kernelconfig-config">
	<title>The Configuration File</title>
	
	<para>The general format of a configuration file is quite simple. Each
	  line contains a keyword and one or more arguments.  For simplicity,
	  most lines only contain one argument.  Anything following a
	  <emphasis remap=tt>#</emphasis> is considered a comment and ignored.
	  The following sections describe each keyword, generally in the order
	  they are listed in GENERIC, although some related keywords have been
	  grouped together in a single section (such as Networking) even
	  though they are actually scattered throughout the GENERIC file.
	  <anchor id="kernelconfig-options"> An
	  exhaustive list of options and more detailed explanations of the
	  device lines is present in the LINT configuration file, located in
	  the same directory as GENERIC.  If you are in doubt as to the
	  purpose or necessity of a line, check first in LINT.</para>
	
	<para>The kernel is currently being moved to a better organization of
	  the option handling.  Traditionally, each option in the config file
	  was simply converted into a <option>-D</option> switch for the
	  <acronym>CFLAGS</acronym> line of the kernel Makefile.  Naturally,
	  this caused a creeping optionism, with nobody really knowing which
	  option has been referenced in what files.</para>
	
	<para>In the new scheme, every <emphasis remap=tt>#ifdef</emphasis>
	  that is intended to be dependent upon an option gets this option out
	  of an <filename>opt_<replaceable>foo</replaceable>.h</filename>
	  declaration file created in the compile directory by <emphasis
	    remap=tt>config</emphasis>.  The list of valid options for
	  <emphasis remap=tt>config</emphasis> lives in two files: options
	  that do not depend on the architecture are listed in
	  <filename>/sys/conf/options</filename>, architecture-dependent ones
	  in
	  <filename>/sys/<replaceable>arch</replaceable>/conf/options.<replaceable>arch</replaceable></filename>, with <emphasis>arch</emphasis> being for example <emphasis remap=tt>i386</emphasis>.</para>
	
	
	<sect2>
	  <title>Mandatory Keywords</title>
	  
	  <para>These keywords are required in every kernel you build.</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>machine ``i386''</term>
		<listitem>
		  <para>The first keyword is <emphasis
		      remap=tt>machine</emphasis>, which, since FreeBSD only
		    runs on Intel 386 and compatible chips, is i386.</para>
		  
		  <para>
		    <blockquote>
		      <para><emphasis>Note:</emphasis> that any keyword which
			contains numbers used as text must be enclosed in
			quotation marks, otherwise <emphasis
			  remap=tt>config</emphasis> gets confused and thinks
			you mean the actual number 386.</para>
		    </blockquote>
		  </para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>cpu ``<symbol>cpu_type</symbol>''</term>
		
		<listitem>
		  <para>The next keyword is <emphasis remap=tt>cpu</emphasis>,
		    which includes support for each CPU supported by FreeBSD.
		    The possible values of <emphasis
		      remap=tt><replaceable>cpu_type</replaceable></emphasis>
		    include:
		    <itemizedlist>
		      
		      <listitem>
			<para>I386_CPU</para>
		      </listitem>
		      
		      <listitem>
			<para>I486_CPU </para>
		      </listitem>
		      
		      <listitem>
			<para>I586_CPU</para>
		      </listitem>
		      
		      <listitem>
			<para>I686_CPU</para>
		      </listitem>
		      
		    </itemizedlist> and multiple instances of the <emphasis
		      remap=tt>cpu</emphasis> line may be present with
		    different values of <emphasis
		      remap=tt><replaceable>cpu_type</replaceable></emphasis>
		    as are present in the GENERIC kernel.  For a custom
		    kernel, it is best to specify only the cpu you have.  If,
		    for example, you have an Intel Pentium, use
		    <symbol>I586_CPU</symbol> for <emphasis
		      remap=tt><replaceable>cpu_type</replaceable></emphasis>.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>ident <symbol>machine_name</symbol></term>
		
		<listitem>
		  <para>Next, we have <emphasis remap=tt>ident</emphasis>,
		    which is the identification of the kernel.  You should
		    change this from GENERIC to whatever you named your
		    kernel, in this example, MYKERNEL.  The value you put in
		    <emphasis remap=tt>ident</emphasis> will print when you
		    boot up the kernel, so it is useful to give a kernel a
		    different name if you want to keep it separate from your
		    usual kernel (if you want to build an experimental kernel,
		    for example).  Note that, as with <emphasis
		      remap=tt>machine</emphasis> and <emphasis remap=tt>
		      cpu</emphasis>, enclose your kernel's name in quotation
		    marks if it contains any numbers.</para>
		  
		  <para>Since this name is passed to the C compiler as a
		    <option>-D</option> switch, do not use names like
		    <acronym>DEBUG</acronym>, or something that could be
		    confused with another machine or CPU name, like <emphasis
		      remap=tt>vax</emphasis>.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>maxusers <emphasis>number</emphasis></term>
		
		<listitem>
		  <para>This file sets the size of a number of important
		    system tables.  This number is supposed to be roughly
		    equal to the number of simultaneous users you expect to
		    have on your machine.  However, under normal
		    circumstances, you will want to set <emphasis
		      remap=tt>maxusers</emphasis> to at least four,
		    especially if you are using the X Window System or
		    compiling software.  The reason is that the most important
		    table set by <emphasis remap=tt>maxusers</emphasis> is the
		    maximum number of processes, which is set to <emphasis
		      remap=bf><emphasis remap=tt>20 + 16 *
			maxusers</emphasis></emphasis>, so if you set
		    <emphasis remap=tt>maxusers</emphasis> to one, then you
		    can only have 36 simultaneous processes, including the 18
		    or so that the system starts up at boot time, and the 15
		    or so you will probably create when you start the X Window
		    System.  Even a simple task like reading a <emphasis
		      remap=tt>man</emphasis> page will start up nine
		    processes to filter, decompress, and view it.  Setting
		    <emphasis remap=tt>maxusers</emphasis> to 4 will allow you
		    to have up to 84 simultaneous processes, which should be
		    enough for anyone.  If, however, you see the dreaded
		    ``proc table full'' error when trying to start another
		    program, or are running a server with a large number of
		    simultaneous users (like Walnut Creek CDROM's FTP site),
		    you can always increase this number and rebuild.</para>
		  
		  <para>
		    <blockquote>
		      <para><emphasis>Note:</emphasis> <emphasis
			  remap=tt>maxuser</emphasis> does
			<emphasis>not</emphasis> limit the number of users
			which can log into your machine.  It simply sets
			various table sizes to reasonable values considering
			the maximum number of users you will likely have on
			your system and how many processes each of them will
			be running.  One keyword which
			<emphasis>does</emphasis> limit the number of
			simultaneous <emphasis>remote logins</emphasis> is
			<xref
			  linkend="kernelconfig-ptys" remap="pseudo-device pty
			  16">.</para>
		    </blockquote>
		  </para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>config <symbol>kernel_name</symbol> root on
		  <symbol>root_device</symbol></term>
		
		<listitem>
		  <para>This line specifies the location and name of the
		    kernel.  Traditionally the kernel is called <emphasis
		      remap=tt>vmunix</emphasis> but in FreeBSD, it is aptly
		    named <emphasis remap=tt>kernel</emphasis>.  You should
		    always use <emphasis remap=tt>kernel</emphasis> for
		    <symbol>kernel_name</symbol> because changing it will
		    render numerous system utilities inoperative.  The second
		    part of the line specifies the disk and partition where
		    the root filesystem and kernel can be found.  Typically
		    this will be <emphasis remap=tt>wd0</emphasis> for systems
		    with non-SCSI drives, or <emphasis remap=tt>sd0</emphasis>
		    for systems with SCSI drives.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>General Options</title>
	  
	  <para>These lines provide kernel support for various filesystems and
	    other options.</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>options MATH_EMULATE</term>
		<listitem>
		  <para>This line allows the kernel to simulate a math
		    co-processor if your computer does not have one (386 or
		    486SX).  If you have a Pentium, a 486DX, or a 386 or 486SX
		    with a separate 387 or 487 chip, you can comment this line
		    out.</para>
		  
		  <para>
		    <blockquote>
		      <para><emphasis>Note:</emphasis> The normal math
			co-processor emulation routines that come with FreeBSD
			are <emphasis>not</emphasis> very accurate.  If you do
			not have a math co-processor, and you need the best
			accuracy, I recommend that you change this option to
			<symbol>GPL_MATH_EMULATE</symbol> to use the superior
			GNU math support, which is not included by default for
			licensing reasons.</para>
		    </blockquote>
		  </para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>options ``COMPAT_43''</term>
		
		<listitem>
		  <para>Compatibility with 4.3BSD.  Leave this in; some
		    programs will act strangely if you comment this
		    out.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>options BOUNCE_BUFFERS</term>
		
		<listitem>
		  <para>ISA devices and EISA devices operating in an ISA
		    compatibility mode can only perform DMA (Direct Memory
		    Access) to memory below 16 megabytes.  This option enables
		    such devices to work in systems with more than 16
		    megabytes of memory.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>options UCONSOLE</term>
		
		<listitem>
		  <para>Allow users to grab the console, useful for X Windows.
		    For example, you can create a console xterm by typing
		    <command>xterm -C</command>, which will display any
		    `write', `talk', and other messages you receive, as well
		    as any console messages sent by the kernel.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>options SYSVSHM</term>
		
		<listitem>
		  <para>This option provides for System V shared memory.  The
		    most common use of this is the XSHM extension in X
		    Windows, which many graphics-intensive programs (such as
		    the movie player XAnim, and Linux DOOM) will automatically
		    take advantage of for extra speed.  If you use the X
		    Window System, you will definitely want to include
		    this.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>options SYSVSEM</term>
		
		<listitem>
		  <para>Support for System V semaphores.  Less commonly used
		    but only adds a few hundred bytes to the kernel.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>options SYSVMSG</term>
		
		<listitem>
		  <para>Support for System V messages.  Again, only adds a few
		    hundred bytes to the kernel.</para>
		  
		  <para>
		    <blockquote>
		      <para><emphasis>Note:</emphasis> The
			<command>ipcs(1)</command> command will tell will list
			any processes using each of these System V
			facilities.</para>
		    </blockquote>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Filesystem Options</title>
	  
	  <para>These options add support for various filesystems. You must
	    include at least one of these to support the device you boot from;
	    typically this will be <acronym>FFS</acronym> if you boot from a
	    hard drive, or <acronym>NFS</acronym> if you are booting a
	    diskless workstation from Ethernet.  You can include other
	    commonly-used filesystems in the kernel, but feel free to comment
	    out support for filesystems you use less often (perhaps the MS-DOS
	    filesystem?), since they will be dynamically loaded from the
	    Loadable Kernel Module directory <filename>/lkm</filename> the
	    first time you mount a partition of that type.</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>options FFS</term>
		<listitem>
		  <para>The basic hard drive filesystem; leave it in if you
		    boot from the hard disk.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>options NFS</term>
		
		<listitem>
		  <para>Network Filesystem.  Unless you plan to mount
		    partitions from a Unix file server over Ethernet, you can
		    comment this out.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>options MSDOSFS</term>
		
		<listitem>
		  <para>MS-DOS Filesystem.  Unless you plan to mount a DOS
		    formatted hard drive partition at boot time, you can
		    safely comment this out.  It will be automatically loaded
		    the first time you mount a DOS partition, as described
		    above. Also, the excellent <emphasis
		      remap=tt>mtools</emphasis> software (in the ports
		    collection) allows you to access DOS floppies without
		    having to mount and unmount them (and does not require
		    MSDOSFS at all).</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>options ``CD9660''</term>
		
		<listitem>
		  <para>ISO 9660 filesystem for CD-ROMs.  Comment it out if
		    you do not have a CD-ROM drive or only mount data CD's
		    occasionally (since it will be dynamically loaded the
		    first time you mount a data CD).  Audio CD's do not need
		    this filesystem.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>options PROCFS</term>
		
		<listitem>
		  <para>Process filesystem.  This is a pretend filesystem
		    mounted on /proc which allows programs like
		    <command>ps(1)</command> to give you more information on
		    what processes are running.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>options MFS</term>
		
		<listitem>
		  <para>Memory-mapped file system. This is basically a RAM
		    disk for fast storage of temporary files, useful if you
		    have a lot of swap space that you want to take advantage
		    of.  A perfect place to mount an MFS partition is on the
		    <filename>/tmp</filename> directory, since many programs
		    store temporary data here.  To mount an MFS RAM disk on
		    <filename>/tmp</filename>, add the following line to
		    <filename>/etc/fstab</filename> and then reboot or type
		    <command>mount /tmp</command>: 
		    <informalexample>
		      <screen>/dev/wd1s2b   /tmp mfs rw 0 0 </screen>
		    </informalexample>
		  </para>
		  
		  <para>
		    <blockquote>
		      <para><emphasis>Note:</emphasis> Replace the
			<filename>/dev/wd1s2b</filename> with the name of your
			swap partition, which will be listed in your
			<filename>/etc/fstab</filename> as follows:
			<informalexample>
			  <screen>/dev/wd1s2b none swap sw 0 0</screen>
			</informalexample>
		      </para>
		    </blockquote>
		  </para>
		  
		  <para>
		    <blockquote>
		      <para><emphasis>Note:</emphasis>  Also, the
			<acronym>MFS</acronym> filesystem can
			<emphasis>not</emphasis> be dynamically loaded, so you
			<emphasis>must</emphasis> compile it into your kernel
			if you want to experiment with it.</para>
		    </blockquote>
		  </para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>options "EXT2FS"</term>
		
		<listitem>
		  <para>Linux's native file system. With ext2fs support you
		    are able to read and write to Linux partitions.  This is
		    useful if you dual-boot FreeBSD and Linux and want to
		    share data between the two systems.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>options QUOTA</term>
		
		<listitem>
		  <para>Enable disk quotas.  If you have a public access
		    system, and do not want users to be able to overflow the
		    <filename>/home</filename> partition, you can establish
		    disk quotas for each user.  Refer to the
		    <xref linkend="quotas" remap="Disk Quotas"> section for
		    more information.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Basic Controllers and Devices</title>
	  
	  <para>These sections describe the basic disk, tape, and CD-ROM
	    controllers supported by FreeBSD.  There are separate sections for
	    <xref linkend="kernelconfig-scsi"
	      remap="SCSI"> controllers and <xref
	      linkend="kernelconfig-network" remap="network"> cards.</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>controller isa0</term>
		<listitem>
		  <para>All PC's supported by FreeBSD have one of these.  If
		    you have an IBM PS/2 (Micro Channel Architecture), then
		    you cannot run FreeBSD at this time.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>controller pci0</term>
		
		<listitem>
		  <para>Include this if you have a PCI motherboard.  This
		    enables auto-detection of PCI cards and gatewaying from
		    the PCI to the ISA bus.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>controller fdc0</term>
		
		<listitem>
		  <para>Floppy drive controller: <emphasis
		      remap=tt>fd0</emphasis> is the ``A:'' floppy drive, and
		    <emphasis remap=tt>fd1</emphasis> is the ``B:'' drive.
		    <emphasis remap=tt>ft0</emphasis> is a QIC-80 tape drive
		    attached to the floppy controller.  Comment out any lines
		    corresponding to devices you do not have.</para>
		  
		  <para>
		    <blockquote>
		      <para><emphasis>Note:</emphasis> QIC-80 tape support
			requires a separate filter program called
			<command>ft(8)</command>, see the manual page for
			details.</para>
		    </blockquote>
		  </para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>controller wdc0</term>
		
		<listitem>
		  <para>This is the primary IDE controller.  <emphasis
		      remap=tt>wd0</emphasis> and <emphasis
		      remap=tt>wd1</emphasis> are the master and slave hard
		    drive, respectively. <emphasis remap=tt>wdc1</emphasis> is
		    a secondary IDE controller where you might have a third or
		    fourth hard drive, or an IDE CD-ROM.  Comment out the
		    lines which do not apply (if you have a SCSI hard drive,
		    you will probably want to comment out all six lines, for
		    example).</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device wcd0<anchor
		    id="kernelconfig-atapi"></term>
		
		<listitem>
		  <para>This device provides IDE CD-ROM support.  Be sure to
		    leave <emphasis remap=tt>wdc0</emphasis> uncommented, and
		    <emphasis remap=tt>wdc1</emphasis> if you have more than
		    one IDE controller and your CD-ROM is on the second one
		    card.  To use this, you must also include the line
		    <emphasis remap=tt>options ATAPI</emphasis>.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device npx0 at isa? port ``IO_NPX'' irq 13
		  vector npxintr</term>
		
		<listitem>
		  <para><emphasis remap=tt>npx0</emphasis> is the interface to
		    the floating point math unit in FreeBSD, either the
		    hardware co-processor or the software math emulator.  It
		    is <acronym>NOT</acronym> optional.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device wt0 at isa? port 0x300 bio irq 5 drq
		  1 vector wtintr</term>
		
		<listitem>
		  <para>Wangtek and Archive QIC-02/QIC-36 tape drive
		    support</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>Proprietary CD-ROM support</term>
		
		<listitem>
		  <para>The following drivers are for the so-called
		    <emphasis>proprietary</emphasis> CD-ROM drives.  These
		    drives have their own controller card or might plug into a
		    sound card such as the SoundBlaster 16.  They are
		    <emphasis>not</emphasis> IDE or SCSI.  Most older
		    single-speed and double-speed CD-ROMs use these
		    interfaces, while newer quad-speeds are likely to be <xref
		      linkend="kernelconfig-atapi" remap="IDE"> or <xref
		      linkend="kernelconfig-scsi" remap="SCSI">.</para>
		  
		  <para>
		    <variablelist>
		      <varlistentry><term>device mcd0 at isa? port 0x300 bio
			  irq 10 vector mcdintr</term>
			<listitem>
			  <para>Mitsumi CD-ROM (LU002, LU005, FX001D).</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>device scd0 at isa? port 0x230
			  bio</term>
			
			<listitem>
			  <para>Sony CD-ROM (CDU31, CDU33A).</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>controller matcd0 at isa? port ?
			  bio</term>
			
			<listitem>
			  <para>Matsushita/Panasonic CD-ROM (sold by Creative
			    Labs for SoundBlaster).</para>
			</listitem>
		      </varlistentry>
		    </variablelist>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
	
	<sect2
	  id="kernelconfig-scsi">
	  <title>SCSI Device Support</title>
	  
	  <para>This section describes the various SCSI controllers and
	    devices supported by FreeBSD.</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>SCSI Controllers</term>
		<listitem>
		  <para>The next ten or so lines include support for different
		    kinds of SCSI controllers.  Comment out all except for the
		    one(s) you have:</para>
		  
		  <para>
		    <variablelist>
		      <varlistentry><term>controller bt0 at isa? port
			  ``IO_BT0'' bio irq ? vector btintr</term>
			<listitem>
			  <para>Most Buslogic controllers</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>controller uha0 at isa? port
			  ``IO_UHA0'' bio irq ? drq 5 vector uhaintr</term>
			
			<listitem>
			  <para>UltraStor 14F and 34F</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>controller ahc0</term>
			
			<listitem>
			  <para>Adaptec 274x/284x/294x</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>controller ahb0    at isa? bio irq ?
			  vector ahbintr</term>
			
			<listitem>
			  <para>Adaptec 174x</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>controller aha0    at isa? port
			  ``IO_AHA0'' bio irq ? drq 5 vector ahaintr</term>
			
			<listitem>
			  <para>Adaptec 154x</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>controller aic0    at isa? port
			  0x340 bio irq 11 vector aicintr</term>
			
			<listitem>
			  <para>Adaptec 152x and sound cards using Adaptec
			    AIC-6360 (slow!)</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>controller nca0    at isa? port
			  0x1f88 bio irq 10 vector ncaintr</term>
			
			<listitem>
			  <para>ProAudioSpectrum cards using NCR 5380 or
			    Trantor T130</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>controller sea0    at isa? bio irq 5
			  iomem 0xc8000 iosiz 0x2000 vector seaintr</term>
			
			<listitem>
			  <para>Seagate ST01/02 8 bit controller
			    (slow!)</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>controller wds0    at isa? port
			  0x350 bio irq 15 drq 6 vector wdsintr</term>
			
			<listitem>
			  <para>Western Digital WD7000 controller</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>controller ncr0</term>
			
			<listitem>
			  <para>NCR 53C810, 53C815, 53C825, 53C860, 53C875 PCI
			    SCSI controller</para>
			</listitem>
		      </varlistentry>
		    </variablelist>
		  </para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>options ``SCSI_DELAY=15''</term>
		
		<listitem>
		  <para>This causes the kernel to pause 15 seconds before
		    probing each SCSI device in your system.  If you only have
		    IDE hard drives, you can ignore this, otherwise you will
		    probably want to lower this number, perhaps to 5 seconds,
		    to speed up booting.  Of course if you do this, and
		    FreeBSD has trouble recognizing your SCSI devices, you
		    will have to raise it back up.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>controller scbus0</term>
		
		<listitem>
		  <para>If you have any SCSI controllers, this line provides
		    generic SCSI support.  If you do not have SCSI, you can
		    comment this, and the following three lines, out.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device sd0</term>
		
		<listitem>
		  <para>Support for SCSI hard drives.  </para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device st0</term>
		
		<listitem>
		  <para>Support for SCSI tape drives.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device cd0</term>
		
		<listitem>
		  <para>Support for SCSI CD-ROM drives.</para>

		  <para>Note that the number <emphasis remap=bf>0</emphasis>
		    in the above entries is slightly misleading: all these
		    devices are automatically configured as they are found,
		    regardless of how many of them are hooked up to the SCSI
		    bus(es), and which target IDs they have.</para>
		  
		  <para>If you want to ``wire down'' specific target IDs to
		    particular devices, refer to the appropriate section of
		    the LINT kernel config file.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Console, Bus Mouse, and X Server Support</title>
	  
	  <para>You must choose one of these two console types, and, if you
	    plan to use the X Window System with the vt220 console, enable the
	    XSERVER option and optionally, a bus mouse or PS/2 mouse
	    device.</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>device sc0 at isa? port ``IO_KBD' tty irq 1
		  vector scintr</term>
		<listitem>
		  <para><emphasis remap=tt>sc0</emphasis> is the default
		    console driver, which resembles an SCO console. Since most
		    full-screen programs access the console through a terminal
		    database library like <emphasis>termcap</emphasis>, it
		    should not matter much whether you use this or <emphasis
		      remap=tt>vt0</emphasis>, the VT220 compatible console
		    driver.  When you log in, set your TERM variable to
		    ``scoansi'' if full-screen programs have trouble running
		    under this console.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device vt0 at isa? port ``IO_KBD'' tty irq 1
		  vector pcrint</term>
		
		<listitem>
		  <para>This is a VT220-compatible console driver, backwards
		    compatible to VT100/102. It works well on some laptops
		    which have hardware incompatibilities with <emphasis
		      remap=tt>sc0</emphasis>.  Also, set your TERM variable
		    to ``vt100'' or ``vt220'' when you log in.  This driver
		    might also prove useful when connecting to a large number
		    of different machines over the network, where the
		    <emphasis>termcap</emphasis> or
		    <emphasis>terminfo</emphasis> entries for the <emphasis
		      remap=tt>sc0</emphasis> device are often not available
		    -- ``vt100'' should be available on virtually any
		    platform.</para>
		  
		  <para>
		    <variablelist>
		      <varlistentry><term>options ``PCVT_FREEBSD=210''</term>
			<listitem>
			  <para>Required with the <emphasis
			      remap=tt>vt0</emphasis> console driver.</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>options XSERVER</term>
			
			<listitem>
			  <para>Only applicable with the <emphasis
			      remap=tt>vt0</emphasis> console driver. This
			    includes code required to run the <emphasis
			      remap=tt>XFree86</emphasis> X Window Server
			    under the <emphasis remap=tt>vt0</emphasis>
			    console driver.</para>
			</listitem>
		      </varlistentry>
		    </variablelist>
		  </para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device mse0 at isa? port 0x23c tty irq 5
		  vector ms</term>
		
		<listitem>
		  <para>Use this device if you have a Logitech or ATI InPort
		    bus mouse card.</para>
		  
		  <para>
		    <blockquote>
		      <para><emphasis>Note:</emphasis> If you have a serial
			mouse, ignore these two lines, and instead, make sure
			the appropriate <xref linkend="kernelconfig-serial"
			  remap="serial"> port is enabled (probably
			COM1).</para>
		    </blockquote>
		  </para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device psm0 at isa? port ``IO_KBD''
		  conflicts tty irq 12 vector psmintr</term>
		
		<listitem>
		  <para>Use this device if your mouse plugs into the PS/2
		    mouse port.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Serial and Parallel Ports</title>
	  
	  <para>Nearly all systems have these.  If you are attaching a printer
	    to one of these ports, the <xref linkend="printing"
	      remap="Printing"> section of the handbook is very useful.  If
	    you are using modem, <xref linkend="dialup"
	      remap="Dialup access"> provides extensive detail on serial port
	    configuration for use with such devices.</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>device sio0 at isa? port ``IO_COM1'' tty irq
		  4 vector siointr<anchor id="kernelconfig-serial"></term>
		<listitem>
		  <para><emphasis remap=tt>sio0</emphasis> through <emphasis
		      remap=tt>sio3</emphasis> are the four serial ports
		    referred to as COM1 through COM4 in the MS-DOS world.
		    Note that if you have an internal modem on COM4 and a
		    serial port at COM2 you will have to change the IRQ of the
		    modem to 2 (for obscure technical reasons IRQ 2 = IRQ 9)
		    in order to access it from FreeBSD.  If you have a
		    multiport serial card, check the manual page for <emphasis
		      remap=tt>sio(4)</emphasis> for more information on the
		    proper values for these lines.  Some video cards (notably
		    those based on S3 chips) use IO addresses of the form
		    <literal>0x*2e8</literal>, and since many cheap serial
		    cards do not fully decode the 16-bit IO address space,
		    they clash with these cards, making the COM4 port
		    practically unavailable.</para>
		  
		  <para>Each serial port is required to have a unique IRQ
		    (unless you are using one of the multiport cards where
		    shared interrupts are supported), so the default IRQs for
		    COM3 and COM4 cannot be used.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device lpt0 at isa? port? tty irq 7 vector
		  lptintr</term>
		
		<listitem>
		  <para><emphasis remap=tt>lpt0</emphasis> through <emphasis
		      remap=tt>lpt2</emphasis> are the three printer ports you
		    could conceivably have.  Most people just have one,
		    though, so feel free to comment out the other two lines if
		    you do not have them.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
	
	<sect2
	  id="kernelconfig-network">
	  <title>Networking</title>
	  
	  <para>FreeBSD, as with Unix in general, places a
	    <emphasis>big</emphasis> emphasis on networking.  Therefore, even
	    if you do not have an Ethernet card, pay attention to the
	    mandatory options and the dial-up networking support.</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>options INET</term>
		<listitem>
		  <para>Networking support.  Leave it in even if you do not
		    plan to be connected to a network.  Most programs require
		    at least loopback networking (i.e. making network
		    connections within your PC) so this is essentially
		    mandatory.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>Ethernet cards</term>
		
		<listitem>
		  <para>The next lines enable support for various Ethernet
		    cards.  If you do not have a network card, you can comment
		    out all of these lines.  Otherwise, you will want to leave
		    in support for your particular Ethernet card(s):</para>
		  
		  <para>
		    <variablelist>
		      <varlistentry><term>device de0</term>
			<listitem>
			  <para>Ethernet adapters based on Digital Equipment
			    DC21040, DC21041 or DC21140 chips</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>device fxp0</term>
			
			<listitem>
			  <para>Intel EtherExpress Pro/100B</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>device vx0</term>
			
			<listitem>
			  <para>3Com 3C590 and 3C595 (buggy)</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>device cx0 at isa? port 0x240 net
			  irq 15 drq 7 vector cxintr</term>
			
			<listitem>
			  <para>Cronyx/Sigma multiport sync/async (with Cisco
			    or PPP framing)</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>device ed0 at isa? port 0x280 net
			  irq 5 iomem 0xd8000 vector edintr</term>
			
			<listitem>
			  <para>Western Digital and SMC 80xx and 8216; Novell
			    NE1000 and NE2000; 3Com 3C503; HP PC Lan Plus
			    (HP27247B and HP27252A)</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>device el0 at isa? port 0x300 net
			  irq 9 vector elintr</term>
			
			<listitem>
			  <para>3Com 3C501 (slow!)</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>device eg0 at isa? port 0x310 net
			  irq 5 vector egintr</term>
			
			<listitem>
			  <para>3Com 3C505</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>device ep0 at isa? port 0x300 net
			  irq 10 vector epintr</term>
			
			<listitem>
			  <para>3Com 3C509 (buggy)</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>device fe0 at isa? port 0x240 net
			  irq ? vector feintr</term>
			
			<listitem>
			  <para>Fujitsu MB86960A/MB86965A Ethernet</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>device fea0 at isa? net irq ? vector
			  feaintr</term>
			
			<listitem>
			  <para>DEC DEFEA EISA FDDI adapter</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>device ie0 at isa? port 0x360 net
			  irq 7 iomem 0xd0000 vector ieintr</term>
			
			<listitem>
			  <para>AT&amp;T StarLAN 10 and EN100; 3Com 3C507;
			    unknown NI5210</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>device ix0 at isa? port 0x300 net
			  irq 10 iomem 0xd0000 iosiz 32768 vector
			  ixintr</term>
			
			<listitem>
			  <para>Intel EtherExpress 16</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>device le0 at isa? port 0x300 net
			  irq 5 iomem 0xd0000 vector le_intr</term>
			
			<listitem>
			  <para>Digital Equipment EtherWorks 2 and EtherWorks
			    3 (DEPCA, DE100, DE101, DE200, DE201, DE202,
			    DE203, DE204, DE205, DE422)</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>device lnc0 at isa? port 0x300 net
			  irq 10 drq 0 vector lncintr</term>
			
			<listitem>
			  <para>Lance/PCnet cards (Isolan, Novell NE2100,
			    NE32-VL)</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>device ze0 at isa? port 0x300 net
			  irq 5 iomem 0xd8000 vector zeintr</term>
			
			<listitem>
			  <para>IBM/National Semiconductor PCMCIA ethernet
			    controller.</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>device zp0 at isa? port 0x300 net
			  irq 10 iomem 0xd8000 vector zpintr</term>
			
			<listitem>
			  <para>3Com PCMCIA Etherlink III</para>
			</listitem>
		      </varlistentry>
		    </variablelist>
		  </para>
		  
		  <para>
		    <blockquote>
		      <para><emphasis>Note:</emphasis> With certain cards
			(notably the NE2000) you will have to change the port
			and/or IRQ since there is no ``standard'' location for
			these cards.</para>
		    </blockquote>
		  </para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>pseudo-device loop</term>
		
		<listitem>
		  <para><emphasis remap=tt>loop</emphasis> is the generic
		    loopback device for TCP/IP.  If you telnet or FTP to
		    <emphasis>localhost</emphasis> (a.k.a. <emphasis
		      remap=tt>127.0.0.1</emphasis>) it will come back at you
		    through this pseudo-device.  Mandatory.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>pseudo-device ether</term>
		
		<listitem>
		  <para><emphasis remap=tt>ether</emphasis> is only needed if
		    you have an Ethernet card and includes generic Ethernet
		    protocol code.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>pseudo-device sl
		  <emphasis>number</emphasis></term>
		
		<listitem>
		  <para><emphasis remap=tt>sl</emphasis> is for SLIP (Serial
		    Line Internet Protocol) support.  This has been almost
		    entirely supplanted by PPP, which is easier to set up,
		    better suited for modem-to-modem connections, as well as
		    more powerful.  The <emphasis>number</emphasis> after
		    <emphasis remap=tt>sl</emphasis> specifies how many
		    simultaneous SLIP sessions to support.  This handbook has
		    more information on setting up a SLIP <xref
		      linkend="slipc"
		      remap="client"> or <xref linkend="slips"
		      remap="server">.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>pseudo-device ppp
		  <emphasis>number</emphasis></term>
		
		<listitem>
		  <para><emphasis remap=tt>ppp</emphasis> is for kernel-mode
		    PPP (Point-to-Point Protocol) support for dial-up Internet
		    connections. There is also version of PPP implemented as a
		    user application that uses the <emphasis
		      remap=tt>tun</emphasis> and offers more flexibility and
		    features such as demand dialing.  If you still want to use
		    this PPP driver, read the <xref linkend="ppp"
		      remap="kernel-mode PPP">
		    section of the handbook.  As with the <emphasis
		      remap=tt>sl</emphasis> device,
		    <emphasis>number</emphasis> specifies how many
		    simultaneous PPP connections to support.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>pseudo-device tun
		  <emphasis>number</emphasis></term>
		
		<listitem>
		  <para><emphasis remap=tt>tun</emphasis> is used by the
		    user-mode PPP software. This program is easy to set up and
		    very fast.  It also has special features such as automatic
		    dial-on-demand.  The number after <emphasis
		      remap=tt>tun</emphasis> specifies the number of
		    simultaneous PPP sessions to support.  See the <xref
		      linkend="userppp"
		      remap="user-mode PPP"> section of the handbook for more
		    information.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>pseudo-device bpfilter
		  <emphasis>number</emphasis></term>
		
		<listitem>
		  <para>Berkeley packet filter. This pseudo-device allows
		    network interfaces to be placed in promiscuous mode,
		    capturing every packet on a broadcast network (e.g. an
		    ethernet).  These packets can be captured to disk and/or
		    examined with the <command>tcpdump(1)</command> program.
		    Note that implementation of this capability can seriously
		    compromise your overall network security. The
		    <emphasis>number</emphasis> after bpfilter is the number
		    of interfaces that can be examined simultaneously.
		    Optional, not recommended except for those who are fully
		    aware of the potential pitfalls.  Not all network cards
		    support this capability.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Sound cards</title>
	  
	  <para>This is the first section containing lines that are not in the
	    GENERIC kernel.  To include sound card support, you will have to
	    copy the appropriate lines from the LINT kernel (which contains
	    support for <emphasis>every</emphasis> device) as follows:</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>controller snd0</term>
		<listitem>
		  <para>Generic sound driver code. Required for all of the
		    following sound cards except <emphasis
		      remap=tt>pca</emphasis>.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device pas0 at isa? port 0x388 irq 10 drq 6
		  vector pasintr</term>
		
		<listitem>
		  <para>ProAudioSpectrum digital audio and MIDI.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device sb0 at isa? port 0x220 irq 7
		  conflicts drq 1 vector sbintr</term>
		
		<listitem>
		  <para>SoundBlaster digital audio.</para>
		  
		  <para>
		    <blockquote>
		      <para><emphasis>Note:</emphasis> If your SoundBlaster is
			on a different IRQ (such as 5), change <emphasis
			  remap=tt>irq 7</emphasis> to, for example, <emphasis
			  remap=tt>irq 5</emphasis> and remove the <emphasis
			  remap=tt>conflicts</emphasis> keyword.  Also, you
			must add the line: <literal>options
			  ``SBC_IRQ=5''</literal></para>
		    </blockquote>
		  </para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device sbxvi0 at isa? drq 5</term>
		
		<listitem>
		  <para>SoundBlaster 16 digital 16-bit audio.</para>
		  
		  <para>
		    <blockquote>
		      <para><emphasis>Note:</emphasis> If your SB16 is on a
			different 16-bit DMA channel (such as 6 or 7), change
			the <emphasis remap=tt>drq 5</emphasis> keyword
			appropriately, and then add the line: <literal>options
			  "SB16_DMA=6"</literal></para>
		    </blockquote>
		  </para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device sbmidi0 at isa? port 0x330</term>
		
		<listitem>
		  <para>SoundBlaster 16 MIDI interface.  If you have a
		    SoundBlaster 16, you must include this line, or the kernel
		    will not compile.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device gus0 at isa? port 0x220 irq 10 drq 1
		  vector gusintr</term>
		
		<listitem>
		  <para>Gravis Ultrasound.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device mss0 at isa? port 0x530 irq 10 drq 1
		  vector adintr</term>
		
		<listitem>
		  <para>Microsoft Sound System.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device opl0 at isa? port 0x388
		  conflicts</term>
		
		<listitem>
		  <para>AdLib FM-synthesis audio.  Include this line for
		    AdLib, SoundBlaster, and ProAudioSpectrum users, if you
		    want to play MIDI songs with a program such as <emphasis
		      remap=tt>playmidi</emphasis> (in the ports
		    collection).</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device mpu0 at isa? port 0x330 irq 6 drq
		  0</term>
		
		<listitem>
		  <para>Roland MPU-401 stand-alone card.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device uart0 at isa? port 0x330 irq 5 vector
		  ``m6850intr''</term>
		
		<listitem>
		  <para>Stand-alone 6850 UART for MIDI.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>device pca0 at isa? port ``IO_TIMER1''
		  tty<anchor id="kernelconfig-pcaudio"></term>
		
		<listitem>
		  <para>Digital audio through PC speaker.  This is going to be
		    very poor sound quality and quite CPU-intensive, so you
		    have been warned (but it does not require a sound
		    card).</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	  <para>
	    <blockquote>
	      <para><emphasis>Note:</emphasis> There is some additional
		documentation in
		<filename>/usr/src/sys/i386/isa/sound/sound.doc</filename>.
		Also, if you add any of these devices, be sure to create the
		sound <xref linkend="kernelconfig-nodes"
		  remap="device nodes">.</para>
	    </blockquote>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Pseudo-devices</title>
	  
	  <para>Pseudo-device drivers are parts of the kernel that act like
	    device drivers but do not correspond to any actual hardware in the
	    machine.  The <xref linkend="kernelconfig-network"
	      remap="network-related"> pseudo-devices are in that section,
	    while the remainder are here.</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>pseudo-device gzip</term>
		<listitem>
		  <para><emphasis remap=tt>gzip</emphasis> allows you to run
		    FreeBSD programs that have been compressed with <emphasis
		      remap=tt>gzip</emphasis>.  The programs in
		    <filename>/stand</filename> are compressed so it is a good
		    idea to have this option in your kernel.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>pseudo-device log</term>
		
		<listitem>
		  <para><emphasis remap=tt>log</emphasis> is used for logging
		    of kernel error messages.  Mandatory.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>pseudo-device pty
		  <emphasis>number</emphasis><anchor
		    id="kernelconfig-ptys"></term>
		
		<listitem>
		  <para><emphasis remap=tt>pty</emphasis> is a
		    ``pseudo-terminal'' or simulated login port.  It is used
		    by incoming <emphasis remap=bf>telnet</emphasis> and
		    <emphasis remap=bf>rlogin</emphasis> sessions, xterm, and
		    some other applications such as emacs.  The
		    <emphasis>number</emphasis> indicates the number of
		    <emphasis remap=tt>pty</emphasis>s to create. If you need
		    more than GENERIC default of 16 simultaneous xterm windows
		    and/or remote logins, be sure to increase this number
		    accordingly, up to a maximum of 64.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>pseudo-device snp
		  <emphasis>number</emphasis></term>
		
		<listitem>
		  <para>Snoop device.  This pseudo-device allows one terminal
		    session to watch another using the
		    <command>watch(8)</command> command.  Note that
		    implementation of this capability has important security
		    and privacy implications. The <emphasis>number</emphasis>
		    after snp is the total number of simultaneous snoop
		    sessions.  Optional.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>pseudo-device vn</term>
		
		<listitem>
		  <para>Vnode driver.  Allows a file to be treated as a device
		    after being set up with the <command>vnconfig(8)</command>
		    command.  This driver can be useful for manipulating
		    floppy disk images and using a file as a swap device (e.g.
		    an MS Windows swap file). Optional.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>pseudo-device ccd
		  <emphasis>number</emphasis></term>
		
		<listitem>
		  <para>Concatenated disks.  This pseudo-device allows you to
		    concatenate multiple disk partitions into one large
		    ``meta''-disk.  The <emphasis>number</emphasis> after ccd
		    is the total number of concatenated disks (not total
		    number of disks that can be concatenated) that can be
		    created. (See <emphasis remap=tt>ccd(4)</emphasis> and
		    <command>ccdconfig(8)</command> man pages for more
		    details.)  Optional.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Joystick, PC Speaker, Miscellaneous</title>
	  
	  <para>This section describes some miscellaneous hardware devices
	    supported by FreeBSD.  Note that none of these lines are included
	    in the GENERIC kernel, you will have to copy them from this
	    handbook or the LINT kernel (which contains support for
	    <emphasis>every</emphasis> device):</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>device joy0 at isa? port ``IO_GAME''</term>
		<listitem>
		  <para>PC joystick device.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>pseudo-device speaker</term>
		
		<listitem>
		  <para>Supports IBM BASIC-style noises through the PC
		    speaker.  Some fun programs which use this are
		    <filename>/usr/sbin/spkrtest</filename>, which is a shell
		    script that plays some simple songs, and
		    <filename>/usr/games/piano</filename> which lets you play
		    songs using the keyboard as a simple piano (this file only
		    exists if you have installed the
		    <emphasis>games</emphasis> package).  Also, the excellent
		    text role-playing game NetHack (in the ports collection)
		    can be configured to use this device to play songs when
		    you play musical instruments in the game.</para>

		  <para>See also the <xref linkend="kernelconfig-pcaudio"
		      remap="pca0"> device.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="kernelconfig-nodes">
	<title>Making Device Nodes</title>
	
	<para>Almost every device in the kernel has a corresponding ``node''
	  entry in the <filename>/dev</filename> directory.  These nodes look
	  like regular files, but are actually special entries into the kernel
	  which programs use to access the device.  The shell script
	  <filename>/dev/MAKEDEV</filename>, which is executed when you first
	  install the operating system, creates nearly all of the device nodes
	  supported. However, it does not create <emphasis>all</emphasis> of
	  them, so when you add support for a new device, it pays to make sure
	  that the appropriate entries are in this directory, and if not, add
	  them.  Here is a simple example:</para>
	
	<para>Suppose you add the IDE CD-ROM support to the kernel. The line
	  to add is:
	  <informalexample>
	    <screen>controller wcd0</screen>
	  </informalexample> This means that you should look for some entries
	  that start with <emphasis remap=tt>wcd0</emphasis> in the
	  <filename>/dev</filename> directory, possibly followed by a letter,
	  such as `c', or preceded by the letter 'r', which means a `raw'
	  device.  It turns out that those files are not there, so I must
	  change to the <filename>/dev</filename> directory and type:
	  <informalexample>
	    <screen># sh MAKEDEV wcd0</screen>
	  </informalexample> When this script finishes, you will find that
	  there are now <emphasis remap=tt>wcd0c</emphasis> and <emphasis
	    remap=tt>rwcd0c</emphasis> entries in <filename>/dev</filename> so
	  you know that it executed correctly.</para>
	
	<para>For sound cards, the command:
	  <informalexample>
	    <screen># sh MAKEDEV snd0</screen>
	  </informalexample> creates the appropriate entries.  Note: when
	  creating device nodes for devices such as sound cards, if other
	  people have access to your machine, it may be desirable to protect
	  the devices from outside access by adding them to the
	  <filename>/etc/fbtab</filename> file.  See <emphasis remap=tt>man
	    fbtab</emphasis> for more information.</para>
	
	<para>Follow this simple procedure for any other non-GENERIC  devices
	  which do not have entries.</para>
	
	<para>
	  <blockquote>
	    <para><emphasis>Note:</emphasis> All SCSI controllers use the same
	      set of <filename>/dev</filename> entries, so you do not need to
	      create these.  Also, network cards and SLIP/PPP pseudo-devices
	      do not have entries in <filename>/dev</filename> at all, so you
	      do not have to worry about these either.</para>
	  </blockquote>
	</para>
	
      </sect1>
      
      <sect1
	id="kernelconfig-trouble">
	<title>If Something Goes Wrong</title>
	
	<para>There are four categories of trouble that can occur when
	  building a custom kernel.  They are:</para>
	
	<para>
	  <variablelist>
	    <varlistentry><term>Config command fails</term>
	      <listitem>
		<para>If the <emphasis remap=tt>config</emphasis> command
		  fails when you give it your kernel description, you have
		  probably made a simple error somewhere.  Fortunately,
		  <emphasis remap=tt>config</emphasis> will print the line
		  number that it had trouble with, so you can quickly skip to
		  it with <emphasis remap=tt>vi</emphasis>.  For example, if
		  you see:
		  <informalexample>
		    <screen>config: line 17: syntax error</screen>
		  </informalexample> you can skip to the problem in <emphasis
		    remap=tt>vi</emphasis> by typing ``17G'' in command mode.
		  Make sure the keyword is typed correctly, by comparing it to
		  the GENERIC kernel or another reference.</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Make command fails</term>
	      
	      <listitem>
		<para>If the <emphasis remap=tt>make</emphasis> command fails,
		  it usually signals an error in your kernel description, but
		  not severe enough for <emphasis remap=tt>config</emphasis>
		  to catch it.  Again, look over your configuration, and if
		  you still cannot resolve the problem, send mail to the
		  &a.questions; with your kernel configuration, and it should
		  be diagnosed very quickly.</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Kernel will not boot<anchor
		  id="kernelconfig-noboot"></term>
	      
	      <listitem>
		<para>If your new kernel does not boot, or fails to recognize
		  your devices, do not panic!  Fortunately, BSD has an
		  excellent mechanism for recovering from incompatible
		  kernels. Simply type the name of the kernel you want to boot
		  from (i.e. ``kernel.old'') at the FreeBSD boot prompt
		  instead of pressing return.  When reconfiguring a kernel, it
		  is always a good idea to keep a kernel that is known to work
		  on hand.</para>
		
		<para>After booting with a good kernel you can check over your
		  configuration file and try to build it again. One helpful
		  resource is the <filename>/var/log/messages</filename> file
		  which records, among other things, all of the kernel
		  messages from every successful boot.  Also, the
		  <command>dmesg(8)</command> command will print the kernel
		  messages from the current boot.</para>
		
		<para>
		  <blockquote>
		    <para><emphasis>Note:</emphasis> If you are having trouble
		      building a kernel, make sure to keep a GENERIC, or some
		      other kernel that is known to work on hand as a
		      different name that will not get erased on the next
		      build.  You cannot rely on
		      <filename>kernel.old</filename> because when installing
		      a new kernel, <filename>kernel.old</filename> is
		      overwritten with the last installed kernel which may be
		      non-functional. Also, as soon as possible, move the
		      working kernel to the proper ``kernel'' location or
		      commands such as <command>ps(1)</command> will not work
		      properly.  The proper command to ``unlock'' the kernel
		      file that <emphasis remap=tt>make</emphasis> installs
		      (in order to move another kernel back permanently) is:
		      <informalexample>
			<screen># chflags noschg /kernel</screen>
		      </informalexample> And, if you want to ``lock'' your new
		      kernel into place, or any file for that matter, so that
		      it cannot be moved or tampered with:
		      <informalexample>
			<screen># chflags schg /kernel</screen>
		      </informalexample>
		    </para>
		  </blockquote>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Kernel works, but <emphasis
		  remap=tt>ps</emphasis> does not work any more!</term>
	      
	      <listitem>
		<para>If you have installed a different version of the kernel
		  from the one that the system utilities have been built with,
		  for example, an experimental ``2.2.0'' kernel on a
		  2.1.0-RELEASE system, many system-status commands like
		  <command>ps(1)</command> and <command>vmstat(8)</command>
		  will not work any more.  You must recompile the <emphasis
		    remap=tt>libkvm</emphasis> library as well as these
		  utilities.  This is one reason it is not normally a good
		  idea to use a different version of the kernel from the rest
		  of the operating system.</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	  
	</para>
	
      </sect1>
    </chapter>
    
    <chapter>
      <title>Security</title>
      
      
      <sect1
	id="crypt">
	<title>DES, MD5, and Crypt</title>
	
	<para><emphasis>Contributed by &a.wollman;<!-- <br> -->24 September
	    1995.</emphasis></para>
	
	<para>In order to protect the security of passwords on UN*X systems
	  from being easily exposed, passwords have traditionally been
	  scrambled in some way.  Starting with Bell Labs' Seventh Edition
	  Unix, passwords were encrypted using what the security people call a
	  ``one-way hash function''.  That is to say, the password is
	  transformed in such a way that the original password cannot be
	  regained except by brute-force searching the space of possible
	  passwords.  Unfortunately, the only secure method that was available
	  to the AT&amp;T researchers at the time was based on DES, the Data
	  Encryption Standard.  This causes only minimal difficulty for
	  commercial vendors, but is a serious problem for an operating system
	  like FreeBSD where all the source code is freely available, because
	  national governments in many places like to place restrictions on
	  cross-border transport of DES and other encryption software.</para>
	
	<para>So, the FreeBSD team was faced with a dilemma: how could we
	  provide compatibility with all those UNIX systems out there while
	  still not running afoul of the law?  We decided to take a dual-track
	  approach: we would make distributions which contained only a
	  non-regulated password scrambler, and then provide as a separate
	  add-on library the DES-based password hash.  The password-scrambling
	  function was moved out of the C library to a separate library,
	  called `<emphasis remap=tt>libcrypt</emphasis>' because the name of
	  the C function to implement it is `<emphasis
	    remap=tt>crypt</emphasis>'.  In FreeBSD 1.x and some pre-release
	  2.0 snapshots, the non-regulated scrambler uses an insecure function
	  written by Nate Williams; in subsequent releases this was replaced
	  by a mechanism using the RSA Data Security, Inc., MD5 one-way hash
	  function.  Because neither of these functions involve encryption,
	  they are believed to be exportable from the US and importable into
	  many other countries.</para>
	
	<para>Meanwhile, work was also underway on the DES-based password hash
	  function.  First, a version of the `<emphasis
	    remap=tt>crypt</emphasis>' function which was written outside the
	  US was imported, thus synchronizing the US and non-US code.  Then,
	  the library was modified and split into two; the DES `<emphasis
	    remap=tt>libcrypt</emphasis>' contains only the code involved in
	  performing the one-way password hash, and a separate `<emphasis
	    remap=tt>libcipher</emphasis>' was created with the entry points
	  to actually perform encryption.  The code was partitioned in this
	  way to make it easier to get an export license for the compiled
	  library.</para>
	
	
	<sect2>
	  <title>Recognizing your `<emphasis remap=tt>crypt</emphasis>'
	    mechanism</title>
	  
	  <para>It is fairly easy to recognize whether a particular password
	    string was created using the DES- or MD5-based hash function. MD5
	    password strings always begin with the characters `<emphasis
	      remap=tt>&#36;1&#36;</emphasis>'.  DES password strings do not
	    have any particular identifying characteristics, but they are
	    shorter than MD5 passwords, and are coded in a 64-character
	    alphabet which does not include the `<emphasis
	      remap=tt>&#36;</emphasis>' character, so a relatively short
	    string which doesn't begin with a dollar sign is very likely a DES
	    password.</para>
	  
	  <para>Determining which library is being used on your system is
	    fairly easy for most programs, except for those like `<emphasis
	      remap=tt>init</emphasis>' which are statically linked.  (For
	    those programs, the only way is to try them on a known password
	    and see if it works.)  Programs which use `<emphasis
	      remap=tt>crypt</emphasis>' are linked against `<emphasis
	      remap=tt>libcrypt</emphasis>', which for each type of library is
	    a symbolic link to the appropriate implementation.  For example,
	    on a system using the DES versions:</para>
	  
	  <para>
	    <informalexample>
	      <screen>$ cd /usr/lib $ ls -l /usr/lib/libcrypt* lrwxr-xr-x  1
		bin  bin  13 Sep  5 12:50 libcrypt.a -&gt; libdescrypt.a
		lrwxr-xr-x  1 bin  bin  18 Sep  5 12:50 libcrypt.so.2.0 -&gt;
		libdescrypt.so.2.0 lrwxr-xr-x  1 bin  bin  15 Sep  5 12:50
		libcrypt_p.a -&gt; libdescrypt_p.a</screen>
	    </informalexample>
	  </para>
	  
	  <para>On a system using the MD5-based libraries, the same links will
	    be present, but the target will be `<emphasis
	      remap=tt>libscrypt</emphasis>' rather than `<emphasis
	      remap=tt>libdescrypt</emphasis>'.
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="skey">
	<title>S/Key</title>
	
	<para><emphasis>Contributed by &a.wollman;<!-- <br> -->25 September
	    1995.</emphasis></para>
	
	<para>S/Key is a one-time password scheme based on a one-way hash
	  function (in our version, this is MD4 for compatibility; other
	  versions have used MD5 and DES-MAC).  S/Key has been a standard part
	  of all FreeBSD distributions since version 1.1.5, and is also
	  implemented on a large and growing number of other systems.  S/Key
	  is a registered trademark of Bell Communications Research,
	  Inc.</para>
	
	<para>There are three different sorts of passwords which we will talk
	  about in the discussion below.  The first is your usual UNIX-style
	  or Kerberos password; we will call this a ``UNIX password''.  The
	  second sort is the one-time password which is generated by the S/Key
	  `<emphasis remap=tt>key</emphasis>' program and accepted by the
	  `<emphasis remap=tt>keyinit</emphasis>' program and the login
	  prompt; we will call this a ``one-time password''.  The final sort
	  of password is the secret password which you give to the `<emphasis
	    remap=tt>key</emphasis>' program (and sometimes the `<emphasis
	    remap=tt>keyinit</emphasis>' program) which it uses to generate
	  one-time passwords; we will call it a ``secret password'' or just
	  unqualified ``password''.  </para>
	
	<para>The secret password does not necessarily have anything to do
	  with your UNIX password (while they can be the same, this is not
	  recommended). While UNIX passwords are limited to eight characters
	  in length, your S/Key secret password can be as long as you like; I
	  use seven-word phrases.  In general, the S/Key system operates
	  completely independently of the UNIX password system.</para>
	
	<para>There are in addition two other sorts of data involved in the
	  S/Key system; one is called the ``seed'' or (confusingly) ``key'',
	  and consists of two letters and five digits, and the other is the
	  ``iteration count'' and is a number between 100 and 1.  S/Key
	  constructs a one-time password from these components by
	  concatenating the seed and the secret password, then applying a
	  one-way hash (the RSA Data Security, Inc., MD4 secure hash function)
	  iteration-count times, and turning the result into six short English
	  words.  The `<emphasis remap=tt>login</emphasis>' and `<emphasis
	    remap=tt>su</emphasis>' programs keep track of the last one-time
	  password used, and the user is authenticated if the hash of the
	  user-provided password is equal to the previous password.  Because a
	  one-way hash function is used, it is not possible to generate future
	  one-time passwords having overheard one which was successfully used;
	  the iteration count is decremented after each successful login to
	  keep the user and login program in sync.  (When you get the
	  iteration count down to 1, it is time to reinitialize S/Key.)</para>
	
	<para>There are four programs involved in the S/Key system which we
	  will discuss below.  The `<emphasis remap=tt>key</emphasis>' program
	  accepts an iteration count, a seed, and a secret password, and
	  generates a one-time password.  The `<emphasis
	    remap=tt>keyinit</emphasis>' program is used to initialized S/Key,
	  and to change passwords, iteration counts, or seeds; it takes either
	  a secret password, or an iteration count, seed, and one-time
	  password.  The `<emphasis remap=tt>keyinfo</emphasis>' program
	  examines the <filename>/etc/skeykeys</filename> file and prints out
	  the invoking user's current iteration count and seed. Finally, the
	  `<emphasis remap=tt>login</emphasis>' and `<emphasis
	    remap=tt>su</emphasis>' programs contain the necessary logic to
	  accept S/Key one-time passwords for authentication.  The `<emphasis
	    remap=tt>login</emphasis>' program is also capable of disallowing
	  the use of UNIX passwords on connections coming from specified
	  addresses.</para>
	
	<para>There are four different sorts of operations we will cover.  The
	  first is using the `<emphasis remap=tt>keyinit</emphasis>' program
	  over a secure connection to set up S/Key for the first time, or to
	  change your password or seed.  The second operation is using the
	  `<emphasis remap=tt>keyinit</emphasis>' program over an insecure
	  connection, in conjunction with the `<emphasis
	    remap=tt>key</emphasis>' program over a secure connection, to do
	  the same.  The third is using the `<emphasis
	    remap=tt>key</emphasis>' program to log in over an insecure
	  connection.  The fourth is using the `<emphasis
	    remap=tt>key</emphasis>' program to generate a number of keys
	  which can be written down or printed out to carry with you when
	  going to some location without secure connections to anywhere (like
	  at a conference).</para>
	
	
	<sect2>
	  <title>Secure connection initialization</title>
	  
	  <para>To initialize S/Key, change your password, or change your seed
	    while logged in over a secure connection (e.g., on the console of
	    a machine), use the `<emphasis remap=tt>keyinit</emphasis>'
	    command without any parameters while logged in as yourself:</para>
	  
	  <para>
	    <informalexample>
	      <screen>$ keyinit Updating wollman:			)
		these will not appear if you Old key: ha73895
		) have not used S/Key before Reminder - Only use this method
		if you are directly connected. If you are using telnet or
		rlogin exit with no password and use keyinit -s. Enter secret
		password:			) I typed my pass phrase here
		Again secret password:			) I typed it again ID
		wollman s/key is 99 ha73896		) discussed below SAG
		HAS FONT GOUT FATE BOOM		)</screen>
	    </informalexample>
	  </para>
	  
	  <para>There is a lot of information here.  At the `Enter secret
	    password:' prompt, you should enter some password or phrase (I use
	    phrases of minimum seven words) which will be needed to generate
	    login keys.  The line starting `ID' gives the parameters of your
	    particular S/Key instance: your login name, the iteration count,
	    and seed.  When logging in with S/Key, the system will remember
	    these parameters and present them back to you so you do not have
	    to remember them.  The last line gives the particular one-time
	    password which corresponds to those parameters and your secret
	    password; if you were to re-login immediately, this one-time
	    password is the one you would use.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Insecure connection initialization</title>
	  
	  <para>To initialize S/Key or change your password or seed over an
	    insecure connection, you will need to already have a secure
	    connection to some place where you can run the `<emphasis
	      remap=tt>key</emphasis>' program; this might be in the form of a
	    desk accessory on a Macintosh, or a shell prompt on a machine you
	    trust (we will show the latter).  You will also need to make up an
	    iteration count (100 is probably a good value), and you may make
	    up your own seed or use a randomly-generated one.  Over on the
	    insecure connection (to the machine you are initializing), use the
	    `<command>keyinit -s</command>' command:</para>
	  
	  <para>
	    <informalexample>
	      <screen>$ keyinit -s  Updating wollman: Old key: kh94741
		Reminder you need the 6 English words from the skey command.
		Enter sequence count from 1 to 9999: 100	) I typed this
		Enter new key [default kh94742]:  s/key 100 kh94742</screen>
	    </informalexample>
	  </para>
	  
	  <para>To accept the default seed (which the `keyinit' program
	    confusingly calls a `key'), press return.  Then move over to your
	    secure connection or S/Key desk accessory, and give it the same
	    parameters:</para>
	  
	  <para>
	    <informalexample>
	      <screen>$ key 100 kh94742 Reminder - Do not use this program
		while logged in via telnet or rlogin. Enter secret password:
		) I typed my secret password HULL NAY YANG TREE TOUT
		VETO</screen>
	    </informalexample>
	  </para>
	  
	  <para>Now switch back over to the insecure connection, and copy the
	    one-time password generated by `<emphasis remap=tt>key</emphasis>'
	    over to the `<emphasis remap=tt>keyinit</emphasis>'
	    program:</para>
	  
	  <para>
	    <informalexample>
	      <screen>s/key access password: HULL NAY YANG TREE TOUT VETO ID
		wollman s/key is 100 kh94742 HULL NAY YANG TREE TOUT
		VETO</screen>
	    </informalexample>
	  </para>
	  
	  <para>The rest of the description from the previous section applies
	    here as well.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Diversion: a login prompt</title>
	  
	  <para>Before explaining how to generate one-time passwords, we
	    should go over an S/Key login prompt:</para>
	  
	  <para>
	    <informalexample>
	      <screen>$ telnet himalia Trying 18.26.0.186... Connected to
		himalia.lcs.mit.edu. Escape character is '^]'. s/key 92
		hi52030 Password:</screen>
	    </informalexample>
	  </para>
	  
	  <para>Note that, before prompting for a password, the login program
	    prints out the iteration number and seed which you will need in
	    order to generate the appropriate key.  You will also find a
	    useful feature (not shown here): if you press return at the
	    password prompt, the login program will turn echo on, so you can
	    see what you are typing. This can be extremely useful if you are
	    attempting to type in an S/Key by hand, such as from a
	    printout.</para>
	  
	  <para>If this machine were configured to disallow UNIX passwords
	    over a connection from my machine, the prompt would have also
	    included the annotation `<emphasis remap=tt>(s/key
	      required)</emphasis>', indicating that only S/Key one-time
	    passwords will be accepted.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Generating a single one-time password</title>
	  
	  <para>Now, to generate the one-time password needed to answer this
	    login prompt, we use a trusted machine and the `<emphasis
	      remap=tt>key</emphasis>' program.  (There are versions of the
	    `<emphasis remap=tt>key</emphasis>' program from DOS and Windows
	    machines, and there is an S/Key desk accessory for Macintosh
	    computers as well.)  The command-line `<emphasis
	      remap=tt>key</emphasis>' program takes as its parameters the
	    iteration count and seed; you can cut-and-paste right from the
	    login prompt starting at ``<emphasis remap=tt>key</emphasis>'' to
	    the end of the line.  Thus:</para>
	  
	  <para>
	    <informalexample>
	      <screen>$ key 92 hi52030				) pasted from
		previous section Reminder - Do not use this program while
		logged in via telnet or rlogin. Enter secret password:
		) I typed my secret password ADEN BED WOLF HAW HOT
		STUN</screen>
	    </informalexample>
	  </para>
	  
	  <para>And in the other window:</para>
	  
	  <para>
	    <informalexample>
	      <screen>s/key 92 hi52030				) from
		previous section Password: (turning echo on) Password:ADEN BED
		WOLF HAW HOT STUN Last login: Wed Jun 28 15:31:00 from
		halloran-eldar.l [etc.]</screen>
	    </informalexample>
	  </para>
	  
	  <para>This is the easiest mechanism <emphasis>if</emphasis> you have
	    a trusted machine. There is a Java S/Key <emphasis
	      remap=tt>key</emphasis> applet, <ulink
	      URL="http://www.cs.umd.edu/~harry/jotp/src.html">The Java OTP
	      Calculator</ulink>, that you can download and run locally on any
	    Java supporting brower.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Generating multiple one-time passwords</title>
	  
	  <para>Sometimes we have to go places where no trusted machines or
	    connections are available.  In this case, it is possible to use
	    the `<emphasis remap=tt>key</emphasis>' command to generate a
	    number of one-time passwords in the same command; these can then
	    be printed out.  For example:</para>
	  
	  <para>
	    <informalexample>
	      <screen>$ key -n 25 57 zz99999 Reminder - Do not use this
		program while logged in via telnet or rlogin. Enter secret
		password:  33: WALT THY MALI DARN NIT HEAD   34: ASK RICE BEAU
		GINA DOUR STAG  [...] 56: AMOS BOWL LUG FAT CAIN INCH   57:
		GROW HAYS TUN DISH CAR BALM  </screen>
	    </informalexample>
	  </para>
	  
	  <para>The `<option>-n 25</option>' requests twenty-five keys in
	    sequence; the `<emphasis remap=tt>57</emphasis>' indicates the
	    <emphasis>ending</emphasis> iteration number; and the rest is as
	    before.  Note that these are printed out in
	    <emphasis>reverse</emphasis> order of eventual use.  If you are
	    really paranoid, you might want to write the results down by hand;
	    otherwise you can cut-and-paste into `<emphasis
	      remap=tt>lpr</emphasis>'.  Note that each line shows both the
	    iteration count and the one-time password; you may still find it
	    handy to scratch off passwords as you use them.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Restricting use of UNIX passwords</title>
	  
	  <para>The configuration file <filename>/etc/skey.access</filename>
	    can be used to configure restrictions on the use of UNIX passwords
	    based on the host name, user name, terminal port, or IP address of
	    a login session.  The complete format of the file is documented in
	    the <filename>skey.access</filename>(5) manual page; there are
	    also some security cautions there which should be read before
	    depending on this file for security.</para>
	  
	  <para>If there is no <filename>/etc/skey.access</filename> file
	    (which is the default state as FreeBSD is shipped), then all users
	    will be allowed to use UNIX passwords.  If the file exists,
	    however, then all users will be required to use S/Key unless
	    explicitly permitted to do otherwise by configuration statements
	    in the <filename>skey.access</filename> file.  In all cases, UNIX
	    passwords are permitted on the console.</para>
	  
	  <para>Here is a sample configuration file which illustrates the
	    three most common sorts of configuration statements:</para>
	  
	  <para>
	    <informalexample>
	      <screen>permit internet 18.26.0.0 255.255.0.0 permit user jrl
		permit port ttyd0</screen>
	    </informalexample>
	  </para>
	  
	  <para>The first line (`<emphasis remap=tt>permit
	      internet</emphasis>') allows users whose IP source address
	    (which is vulnerable to spoofing) matches the specified value and
	    mask, to use UNIX passwords.  This should not be considered a
	    security mechanism, but rather, a means to remind authorized users
	    that they are using an insecure network and need to use S/Key for
	    authentication.</para>
	  
	  <para>The second line (`<emphasis remap=tt>permit user</emphasis>')
	    allows the specified user to use UNIX passwords at any time.
	    Generally speaking, this should only be used for people who are
	    either unable to use the `<emphasis remap=tt>key</emphasis>'
	    program, like those with dumb terminals, or those who are
	    uneducable.</para>
	  
	  <para>The third line (`<emphasis remap=tt>permit port</emphasis>')
	    allows all users logging in on the specified terminal line to use
	    UNIX passwords; this would be used for dial-ups.</para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="kerberos">
	<title>Kerberos</title>
	
	<para><emphasis>Contributed by &a.markm; (based on contribution by
	    &a.md;).</emphasis></para>
	
	<para>Kerberos is a network add-on system/protocol that allows users
	  to authenticate themselves through the services of a secure server.
	  Services such as remote login, remote copy, secure inter-system file
	  copying and other high-risk tasks are made considerably safer and
	  more controllable.</para>
	
	<para>The following instructions can be used as a guide on how to set
	  up Kerberos as distributed for FreeBSD. However, you should refer to
	  the relevant manual pages for a complete description.</para>
	
	<para>In FreeBSD, the Kerberos is not that from the original
	  4.4BSD-Lite, distribution, but eBones, which had been previously
	  ported to FreeBSD 1.1.5.1, and was sourced from outside the
	  USA/Canada, and is thus available to system owners outside those
	  countries.</para>
	
	<para>For those needing to get a legal foreign distribution of this
	  software, please <emphasis>DO NOT</emphasis> get it from a USA or
	  Canada site. You will get that site in <emphasis>big</emphasis>
	  trouble! A legal copy of this is available from
	  <filename>skeleton.mikom.csir.co.za</filename>, which is in South
	  Africa.</para>
	
	
	<sect2>
	  <title>Creating the initial database</title>
	  
	  <para>This is done on the Kerberos server only. First make sure that
	    you do not have any old Kerberos databases around. You should
	    change to the directory <filename>/etc/kerberosIV</filename> and
	    check that only the following files are present:</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt# cd /etc/kerberosIV grunt# ls README
		krb.conf        krb.realms</screen>
	    </informalexample>
	  </para>
	  
	  <para>If any additional files (such as <emphasis
	      remap=tt>principal.*</emphasis> or <symbol>master_key</symbol>)
	    exist, then use the <symbol>kdb_destroy</symbol> command to
	    destroy the old Kerberos database, of if Kerberos is not running,
	    simply delete the extra files with <emphasis
	      remap=tt>rm</emphasis>.</para>
	  
	  <para>You should now edit the <filename>krb.conf</filename> and
	    <filename>krb.realms</filename> files to define your Kerberos
	    realm. In this case the realm will be
	    <filename>GRONDAR.ZA</filename> and the server is
	    <filename>grunt.grondar.za</filename>. We edit or create the
	    <filename>krb.conf</filename> file:</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt# cat krb.conf GRONDAR.ZA GRONDAR.ZA
		grunt.grondar.za admin server CS.BERKELEY.EDU
		okeeffe.berkeley.edu ATHENA.MIT.EDU kerberos.mit.edu
		ATHENA.MIT.EDU kerberos-1.mit.edu ATHENA.MIT.EDU
		kerberos-2.mit.edu ATHENA.MIT.EDU kerberos-3.mit.edu
		LCS.MIT.EDU kerberos.lcs.mit.edu TELECOM.MIT.EDU bitsy.mit.edu
		ARC.NASA.GOV trident.arc.nasa.gov</screen>
	    </informalexample>
	  </para>
	  
	  <para>In this case, the other realms do not need to be there. They
	    are here as an example of how a machine may be made aware of
	    multiple realms. You may wish to not include them for
	    simplicity.</para>
	  
	  <para>The first line names the realm in which this system works. The
	    other lines contain realm/host entries. The first item on a line
	    is a realm, and the second is a host in that realm that is acting
	    as a ``key distribution centre''. The words ``admin server''
	    following a hosts name means that host also provides an
	    administrative database server. For further explanation of these
	    terms, please consult the Kerberos man pages.</para>
	  
	  <para>Now we have to add <filename>grunt.grondar.za</filename> to
	    the <filename>GRONDAR.ZA</filename> realm and also add an entry to
	    put all hosts in the <filename>.grondar.za</filename> domain in
	    the <filename>GRONDAR.ZA</filename> realm.  The
	    <filename>krb.realms</filename> file would be updated as
	    follows:</para>
	  
	  <para>
	    <informalexample>
	      <screen> grunt# cat krb.realms grunt.grondar.za GRONDAR.ZA
		.grondar.za GRONDAR.ZA .berkeley.edu CS.BERKELEY.EDU .MIT.EDU
		ATHENA.MIT.EDU .mit.edu ATHENA.MIT.EDU</screen>
	    </informalexample>
	  </para>
	  
	  <para>Again, the other realms do not need to be there. They are here
	    as an example of how a machine may be made aware of multiple
	    realms. You may wish to remove them to simplify things.</para>
	  
	  <para>The first line puts the <emphasis remap=it>specific</emphasis>
	    system into the named realm. The rest of the lines show how to
	    default systems of a particular subdomain to a named realm.</para>
	  
	  <para>Now we are ready to create the database. This only needs to
	    run on the Kerberos server (or Key Distribution Centre). Issue the
	    <symbol>kdb_init</symbol> command to do this:</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt# kdb_init Realm name [default  ATHENA.MIT.EDU ]:
		GRONDAR.ZA You will be prompted for the database Master
		Password. It is important that you NOT FORGET this password.
		Enter Kerberos master key: </screen>
	    </informalexample>
	  </para>
	  
	  <para>Now we have to save the key so that servers on the local
	    machine can pick it up.  Use the <emphasis
	      remap=tt>kstash</emphasis> command to do this.</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt# kstash Enter Kerberos master key:  Current
		Kerberos master key version is 1. Master key entered.
		BEWARE!</screen>
	    </informalexample>
	  </para>
	  
	  <para>This saves the encrypted master password in
	    <filename>/etc/kerberosIV/master_key</filename>.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Making it all run</title>
	  
	  <para>Two principals need to be added to the database for <emphasis
	      remap=it>each</emphasis> system that will be secured with
	    Kerberos. Their names are <emphasis remap=tt>kpasswd</emphasis>
	    and <emphasis remap=tt>rcmd</emphasis> These two principals are
	    made for each system, with the instance being the name of the
	    individual system.</para>
	  
	  <para>These daemons, <emphasis remap=tt>kpasswd</emphasis> and
	    <emphasis remap=tt>rcmd</emphasis> allow other systems to change
	    Kerberos passwords and run commands like <emphasis
	      remap=tt>rcp</emphasis>, <emphasis remap=tt>rlogin</emphasis>
	    and <emphasis remap=tt>rsh</emphasis>.</para>
	  
	  <para>Now let's add these entries:</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt# kdb_edit Opening database... Enter Kerberos
		master key:  Current Kerberos master key version is 1. Master
		key entered.  BEWARE! Previous or default values are in
		[brackets] , enter return to leave the same, or new value.
		Principal name: passwd Instance: grunt &lt;Not found&gt;,
		Create [y] ? y Principal: passwd, Instance: grunt,
		kdc_key_ver: 1 New Password:                    &lt;---- enter
		RANDOM here Verifying password New Password:
		&lt;---- enter RANDOM here Random password [y] ? y Principal's
		new key version = 1 Expiration date (enter yyyy-mm-dd) [
		2000-01-01 ] ?  Max ticket lifetime (*5 minutes) [ 255 ] ?
		Attributes [ 0 ] ?  Edit O.K. Principal name: rcmd Instance:
		grunt &lt;Not found&gt;, Create [y] ?  Principal: rcmd,
		Instance: grunt, kdc_key_ver: 1 New Password:
		&lt;---- enter RANDOM here Verifying password New Password:
                &lt;---- enter RANDOM here Random password [y] ?  Principal's
		new key version = 1 Expiration date (enter yyyy-mm-dd) [
		2000-01-01 ] ?  Max ticket lifetime (*5 minutes) [ 255 ] ?
		Attributes [ 0 ] ?  Edit O.K. Principal name:
		&lt;---- null entry here will cause an exit</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Creating the server file</title>
	  
	  <para>We now have to extract all the instances which define the
	    services on each machine.  For this we use the
	    <symbol>ext_srvtab</symbol> command. This will create a file which
	    must be copied or moved <emphasis remap=it>by secure
	      means</emphasis> to each Kerberos client's /etc/kerberosIV
	    directory. This file must be present on each server and client,
	    and is crucial to the operation of Kerberos.</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt# ext_srvtab grunt Enter Kerberos master key:
		Current Kerberos master key version is 1. Master key entered.
		BEWARE! Generating 'grunt-new-srvtab'....</screen>
	    </informalexample>
	  </para>
	  
	  <para>Now, this command only generates a temporary file which must
	    be renamed to <emphasis remap=tt>srvtab</emphasis> so that all the
	    server can pick it up.  Use the <emphasis remap=tt>mv</emphasis>
	    command to move it into place on the original system:</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt# mv grunt-new-srvtab srvtab</screen>
	    </informalexample>
	  </para>
	  
	  <para>If the file is for a client system, and the network is not
	    deemed safe, then copy the <emphasis
	      remap=tt>&lt;client&gt;-new-srvtab</emphasis> to removable media
	    and transport it by secure physical means. Be sure to rename it to
	    <emphasis remap=tt>srvtab</emphasis> in the client's
	    <filename>/etc/kerberosIV</filename> directory, and make sure it
	    is mode 600:</para>
	  
	  <para>
	    <informalexample>
	      <screen>grumble# mv grumble-new-srvtab srvtab grumble# chmod 600
		srvtab</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Populating the database</title>
	  
	  <para>We now have to add some user entries into the database. First
	    let's create an entry for the user <emphasis
	      remap=it>jane</emphasis>.  Use the <symbol>kdb_edit</symbol>
	    command to do this:</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt# kdb_edit Opening database... Enter Kerberos
		master key:  Current Kerberos master key version is 1. Master
		key entered.  BEWARE! Previous or default values are in
		[brackets] , enter return to leave the same, or new value.
		Principal name: jane Instance: &lt;Not found&gt;, Create [y] ?
		y Principal: jane, Instance: , kdc_key_ver: 1 New Password:
                &lt;---- enter a secure password here Verifying password New
		Password:                    &lt;---- re-enter the password
		here Principal's new key version = 1 Expiration date (enter
		yyyy-mm-dd) [ 2000-01-01 ] ?  Max ticket lifetime (*5 minutes)
		[ 255 ] ?  Attributes [ 0 ] ?  Edit O.K. Principal name:
		&lt;---- null entry here will cause an exit</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Testing it all out</title>
	  
	  <para>First we have to start the Kerberos daemons. NOTE that if you
	    have correctly edited your <filename>/etc/rc.conf</filename> then
	    this will happen automatically when you reboot. This is only
	    necessary on the Kerberos server. Kerberos clients will
	    automagically get what they need from the
	    <filename>/etc/kerberosIV</filename> directory.</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt# kerberos &amp; grunt# Kerberos server starting
		Sleep forever on error Log file is /var/log/kerberos.log
		Current Kerberos master key version is 1. Master key entered.
		BEWARE! Current Kerberos master key version is 1 Local realm:
		GRONDAR.ZA grunt# kadmind -n &amp; grunt# KADM Server KADM0.0A
		initializing Please do not use 'kill -9' to kill this job, use
		a regular kill instead Current Kerberos master key version is
		1. Master key entered.  BEWARE!</screen>
	    </informalexample>
	  </para>
	  
	  <para>Now we can try using the <emphasis remap=tt>kinit</emphasis>
	    command to get a ticket for the id <emphasis
	      remap=it>jane</emphasis> that we created above:</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt$ kinit jane MIT Project Athena (grunt.grondar.za)
		Kerberos Initialization for "jane" Password: </screen>
	    </informalexample>
	  </para>
	  
	  <para>Try listing the tokens using <emphasis
	      remap=tt>klist</emphasis> to see if we really have them:</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt$ klist Ticket file:    /tmp/tkt245 Principal:
		jane@GRONDAR.ZA Issued           Expires          Principal
		Apr 30 11:23:22  Apr 30 19:23:22
		krbtgt.GRONDAR.ZA@GRONDAR.ZA</screen>
	    </informalexample>
	  </para>
	  
	  <para>Now try changing the password using <emphasis
	      remap=tt>passwd</emphasis> to check if the kpasswd daemon can
	    get authorization to the Kerberos database:</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt$ passwd realm GRONDAR.ZA Old password for jane:
		New Password for jane: Verifying password New Password for
		jane: Password changed.</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Adding <emphasis remap=tt>su</emphasis> privileges</title>
	  
	  <para>Kerberos allows us to give <emphasis remap=it>each</emphasis>
	    user who needs root privileges their own <emphasis
	      remap=it>separate</emphasis> <emphasis
	      remap=tt>su</emphasis>password. We could now add an id which is
	    authorized to <emphasis remap=tt>su</emphasis> to <emphasis
	      remap=it>root</emphasis>. This is controlled by having an
	    instance of <emphasis remap=it>root</emphasis> associated with a
	    principal.  Using <symbol>kdb_edit</symbol> we can create the
	    entry <filename>jane.root</filename> in the Kerberos
	    database:</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt# kdb_edit Opening database... Enter Kerberos
		master key:  Current Kerberos master key version is 1. Master
		key entered.  BEWARE! Previous or default values are in
		[brackets] , enter return to leave the same, or new value.
		Principal name: jane Instance: root &lt;Not found&gt;, Create
		[y] ? y Principal: jane, Instance: root, kdc_key_ver: 1 New
		Password:                    &lt;---- enter a SECURE password
		here Verifying password New Password:
		&lt;---- re-enter the password here Principal's new key
		version = 1 Expiration date (enter yyyy-mm-dd) [ 2000-01-01 ]
		?  Max ticket lifetime (*5 minutes) [ 255 ] ? 12 &lt;--- Keep
		this short! Attributes [ 0 ] ?  Edit O.K. Principal name:
		&lt;---- null entry here will cause an exit</screen>
	    </informalexample>
	  </para>
	  
	  <para>Now try getting tokens for it to make sure it works:</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt# kinit jane.root MIT Project Athena
		(grunt.grondar.za) Kerberos Initialization for "jane.root"
		Password: 
	      </screen>
	    </informalexample>
	  </para>
	  
	  <para>Now we need to add the user to root's
	    <filename>.klogin</filename> file:</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt# cat /root/.klogin jane.root@GRONDAR.ZA</screen>
	    </informalexample>
	  </para>
	  
	  <para>Now try doing the <emphasis remap=tt>su</emphasis>:</para>
	  
	  <para>
	    <informalexample>
	      <screen>[jane@grunt 10407] su Password:  grunt#
	      </screen>
	    </informalexample>
	  </para>
	  
	  <para>and take a look at what tokens we have:</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt# klist Ticket file:	/tmp/tkt_root_245 Principal:
		jane.root@GRONDAR.ZA Issued           Expires
		Principal May  2 20:43:12  May  3 04:43:12
		krbtgt.GRONDAR.ZA@GRONDAR.ZA</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Using other commands</title>
	  
	  <para>In an earlier example, we created a principal called <emphasis
	      remap=tt>jane</emphasis> with an instance <emphasis
	      remap=tt>root</emphasis>. This was based on a user with the same
	    name as the principal, and this is a Kerberos default; that a
	    <emphasis>&lt;principal&gt;.&lt;instance&gt;</emphasis> of the
	    form <emphasis>&lt;username&gt;.</emphasis><emphasis
	      remap=tt>root</emphasis> will allow that
	    <emphasis>&lt;username&gt;</emphasis> to <emphasis
	      remap=tt>su</emphasis> to root if the necessary entries are in
	    the <filename>.klogin</filename> file in <emphasis
	      remap=tt>root</emphasis>'s home directory:</para>
	  
	  <para>
	    <informalexample>
	      <screen>grunt# cat /root/.klogin jane.root@GRONDAR.ZA</screen>
	    </informalexample>
	  </para>
	  
	  <para>Likewise, if a user has in their own home directory lines of
	    the form:</para>
	  
	  <para>
	    <informalexample>
	      <screen>[jane@grunt 10543] cat ~/.klogin jane@GRONDAR.ZA
		jack@GRONDAR.ZA</screen>
	    </informalexample>
	  </para>
	  
	  <para>This allows anyone in the <filename>GRONDAR.ZA</filename>
	    realm who has authenticated themselves to
	    <emphasis>jane</emphasis> or <emphasis>jack</emphasis> (via
	    <emphasis remap=tt>kinit</emphasis>, see above) access to
	    <emphasis remap=tt>rlogin</emphasis> to
	    <emphasis>jane</emphasis>'s account or files on this system
	    (<emphasis>grunt</emphasis>) via <emphasis
	      remap=tt>rlogin</emphasis>, <emphasis remap=tt>rsh</emphasis> or
	    <emphasis remap=tt>rcp</emphasis>.</para>
	  
	  <para>For example, Jane now logs into another system, using
	    Kerberos:</para>
	  
	  <para>
	    <informalexample>
	      <screen>[jane@grumble 573] kinit MIT Project Athena
		(grunt.grondar.za) Password:  [jane@grumble 574] rlogin grunt
		Last login: Mon May  1 21:14:47 from grumble Copyright (c)
		1980, 1983, 1986, 1988, 1990, 1991, 1993, 1994 The Regents of
		the University of California.   All rights reserved. FreeBSD
		BUILT-19950429 (GR386) #0: Sat Apr 29 17:50:09 SAT 1995
		[jane@grunt 10567]</screen>
	    </informalexample>
	  </para>
	  
	  <para>Or Jack logs into Jane's account on the same machine (Jane
	    having set up the <filename>.klogin</filename> file as above, and
	    the person in charge of Kerberos having set up principal
	    <emphasis>jack</emphasis> with a null instance:</para>
	  
	  <para>
	    <informalexample>
	      <screen>[jack@grumble 573] kinit [jack@grumble 574] rlogin grunt
		-l jane MIT Project Athena (grunt.grondar.za) Password:  Last
		login: Mon May  1 21:16:55 from grumble Copyright (c) 1980,
		1983, 1986, 1988, 1990, 1991, 1993, 1994 The Regents of the
		University of California.   All rights reserved. FreeBSD
		BUILT-19950429 (GR386) #0: Sat Apr 29 17:50:09 SAT 1995
		[jane@grunt 10578]</screen>
	    </informalexample>
	    
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="firewalls">
	<title>Firewalls</title>
	
	<para><emphasis>Contributed by &a.gpalmer; and
	    &a.alex;.</emphasis></para>
	
	<para>Firewalls are an area of increasing interest for people who are
	  connected to the Internet, and are even finding applications on
	  private networks to provide enhanced security. This section will
	  hopefully explain what firewalls are, how to use them, and how to
	  use the facilities provided in the FreeBSD kernel to implement
	  them.</para>
	
	<para>
	  <blockquote>
	    <para><emphasis remap=bf>Note</emphasis>: People often think that
	      having a firewall between your companies internal network and
	      the ``Big Bad Internet'' will solve all your security problems.
	      It may help, but a poorly setup firewall system is more of a
	      security risk than not having one at all. A firewall can only
	      add another layer of security to your systems, but they will not
	      be able to stop a really determined hacker from penetrating your
	      internal network. If you let internal security lapse because you
	      believe your firewall to be impenetrable, you have just made the
	      hackers job that bit easier.</para>
	  </blockquote>
	</para>
	
	
	<sect2>
	  <title>What is a firewall?</title>
	  
	  <para>There are currently two distinct types of firewalls in common
	    use on the Internet today. The first type is more properly called
	    a <emphasis remap=bf>packet filtering router</emphasis>, where the
	    kernel on a multi-homed machine chooses whether to forward or
	    block packets based on a set of rules. The second type, known as
	    <emphasis remap=bf>proxy servers</emphasis>, rely on daemons to
	    provide authentication and to forward packets, possibly on a
	    multi-homed machine which has kernel packet forwarding
	    disabled.</para>
	  
	  <para>Sometimes sites combine the two types of firewalls, so that
	    only a certain machine (known as a <emphasis remap=bf>bastion
	      host</emphasis>) is allowed to send packets through a packet
	    filtering router onto an internal network. Proxy services are run
	    on the bastion host, which are generally more secure than normal
	    authentication mechanisms.</para>
	  
	  <para>FreeBSD comes with a kernel packet filter (known as
	    <acronym>IPFW</acronym>), which is what the rest of this section
	    will concentrate on. Proxy servers can be built on FreeBSD from
	    third party software, but there is such a variety of proxy servers
	    available that it would be impossible to cover them in this
	    document.</para>
	  
	  
	  <sect3
	    id="firewalls-packet-filters">
	    <title>Packet filtering routers</title>
	    
	    <para>A router is a machine which forwards packets between two or
	      more networks. A packet filtering router has an extra piece of
	      code in its kernel, which compares each packet to a list of
	      rules before deciding if it should be forwarded or not. Most
	      modern IP routing software has packet filtering code in it,
	      which defaults to forwarding all packets. To enable the filters,
	      you need to define a set of rules for the filtering code, so
	      that it can decide if the packet should be allowed to pass or
	      not.</para>
	    
	    <para>To decide if a packet should be passed on or not, the code
	      looks through its set of rules for a rule which matches the
	      contents of this packets headers. Once a match is found, the
	      rule action is obeyed.  The rule action could be to drop the
	      packet, to forward the packet, or even to send an ICMP message
	      back to the originator.  Only the first match counts, as the
	      rules are searched in order. Hence, the list of rules can be
	      referred to as a ``rule chain''.</para>
	    
	    <para>The packet matching criteria varies depending on the
	      software used, but typically you can specify rules which depend
	      on the source IP address of the packet, the destination IP
	      address, the source port number, the destination port number
	      (for protocols which support ports), or even the packet type
	      (UDP, TCP, ICMP, etc).</para>
	    
	  </sect3>
	  
	  <sect3
	    id="firewalls-proxy-servers">
	    <title>Proxy servers</title>
	    
	    <para>Proxy servers are machines which have had the normal system
	      daemons (telnetd, ftpd, etc) replaced with special servers.
	      These servers are called <emphasis remap=bf>proxy
		servers</emphasis> as they normally only allow onward
	      connections to be made. This enables you to run (for example) a
	      proxy telnet server on your firewall host, and people can telnet
	      in to your firewall from the outside, go through some
	      authentication mechanism, and then gain access to the internal
	      network (alternatively, proxy servers can be used for signals
	      coming from the internal network and heading out).</para>
	    
	    <para>Proxy servers are normally more secure than normal servers,
	      and often have a wider variety of authentication mechanisms
	      available, including ``one-shot'' password systems so that even
	      if someone manages to discover what password you used, they will
	      not be able to use it to gain access to your systems as the
	      password instantly expires. As they do not actually give users
	      access to the host machine, it becomes a lot more difficult for
	      someone to install backdoors around your security system.</para>
	    
	    <para>Proxy servers often have ways of restricting access further,
	      so that only certain hosts can gain access to the servers, and
	      often they can be set up so that you can limit which users can
	      talk to which destination machine. Again, what facilities are
	      available depends largely on what proxy software you
	      choose.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title>What does IPFW allow me to do?</title>
	  
	  <para><acronym>IPFW</acronym>, the software supplied with FreeBSD,
	    is a packet filtering and accounting system which resides in the
	    kernel, and has a user-land control utility,
	    <command>ipfw(8)</command>. Together, they allow you to define and
	    query the rules currently used by the kernel in its routing
	    decisions.</para>
	  
	  <para>There are two related parts to <acronym>IPFW</acronym>. The
	    firewall section allows you to perform packet filtering. There is
	    also an IP accounting section which allows you to track usage of
	    your router, based on similar rules to the firewall section. This
	    allows you to see (for example) how much traffic your router is
	    getting from a certain machine, or how much WWW (World Wide Web)
	    traffic it is forwarding.</para>
	  
	  <para>As a result of the way that <acronym>IPFW</acronym> is
	    designed, you can use <acronym>IPFW</acronym> on non-router
	    machines to perform packet filtering on incoming and outgoing
	    connections. This is a special case of the more general use of
	    <acronym>IPFW</acronym>, and the same commands and techniques
	    should be used in this situation.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Enabling IPFW on FreeBSD</title>
	  
	  <para>As the main part of the <acronym>IPFW</acronym> system lives
	    in the kernel, you will need to add one or more options to your
	    kernel configuration file, depending on what facilities you want,
	    and recompile your kernel. See
	    <xref linkend="kernelconfig" remap="reconfiguring the kernel"> for
	    more details on how to recompile your kernel.</para>
	  
	  <para>There are currently three kernel configuration options
	    relevant to IPFW:</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>options IPFIREWALL</term>
		<listitem>
		  <para>Compiles into the kernel the code for packet
		    filtering.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>options IPFIREWALL_VERBOSE</term>
		
		<listitem>
		  <para>Enables code to allow logging of packets through
		    <command>syslogd(8)</command>. Without this option, even
		    if you specify that packets should be logged in the filter
		    rules, nothing will happen.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>options IPFIREWALL_VERBOSE_LIMIT=10</term>
		
		<listitem>
		  <para>Limits the number of packets logged through
		    <command>syslogd(8)</command> on a per entry basis. You
		    may wish to use this option in hostile environments in
		    which you want to log firewall activity, but do not want
		    to be open to a denial of service attack via syslog
		    flooding.</para>

		  <para>When a chain entry reaches the packet limit specified,
		    logging is turned off for that particular entry.  To
		    resume logging, you will need to reset the associated
		    counter using the <command>ipfw(8)</command>
		    utility:</para>
		  
		  <para>
		    <informalexample>
		      <screen>ipfw zero 4500</screen>
		    </informalexample>
		  </para>
		  
		  <para>Where 4500 is the chain entry you wish to continue
		    logging.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	  <para>Previous versions of FreeBSD contained an
	    <symbol>IPFIREWALL_ACCT</symbol>  option.  This is now obsolete as
	    the firewall code automatically  includes accounting
	    facilities.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Configuring IPFW</title>
	  
	  <para>The configuration of the <acronym>IPFW</acronym> software is
	    done through the <command>ipfw(8)</command> utility. The syntax
	    for this command looks quite complicated, but it is relatively
	    simple once you understand its structure.</para>
	  
	  <para>There are currently four different command categories used by
	    the utility: addition/deletion, listing, flushing, and clearing.
	    Addition/deletion is used to build the rules that control how
	    packets are accepted, rejected, and logged.  Listing is used to
	    examine the contents of your rule set (otherwise known as the
	    chain) and packet counters (accounting).  Flushing is used to
	    remove all entries from the chain.  Clearing is used to zero out
	    one or more accounting entries.</para>
	  
	  
	  <sect3>
	    <title>Altering the IPFW rules</title>
	    
	    <para>The syntax for this form of the command is:
	      <informalexample>
		<screen>ipfw [-N] <emphasis>command</emphasis>
		  [<emphasis>index</emphasis>]  <emphasis>action</emphasis>
		  [log] <emphasis>protocol</emphasis>
		  <emphasis>addresses</emphasis>
		  [<emphasis>options</emphasis>]</screen>
	      </informalexample>
	    </para>
	    
	    <para>There is one valid flag when using this form of the
	      command:</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>-N</term>
		  <listitem>
		    <para>Resolve addresses and service names in
		      output.</para>
		    
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	    <para>The <emphasis>command</emphasis> given can be shortened to
	      the shortest unique form. The valid
	      <emphasis>commands</emphasis> are:</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>add</term>
		  <listitem>
		    <para>Add an entry to the firewall/accounting rule
		      list</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>delete</term>
		  
		  <listitem>
		    <para>Delete an entry from the firewall/accounting rule
		      list</para>
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	    <para>Previous versions of <acronym>IPFW</acronym> used separate
	      firewall and accounting entries.  The present version provides
	      packet accounting with each firewall entry.</para>
	    
	    <para>If an <emphasis remap=tt>index</emphasis> value is supplied,
	      it used to place the entry at a specific point in the chain.
	      Otherwise, the entry is placed at the end of the chain at an
	      index 100 greater than the last chain entry (this does not
	      include the default policy, rule 65535, deny).</para>
	    
	    <para>The <emphasis remap=bf>log</emphasis> option causes matching
	      rules to be output to the system console if the kernel was
	      compiled with <symbol>IPFIREWALL_VERBOSE</symbol>.</para>
	    
	    <para>Valid <emphasis>actions</emphasis> are:</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>reject</term>
		  <listitem>
		    <para>Drop the packet, and send an ICMP host or port
		      unreachable (as appropriate) packet to the
		      source.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>allow</term>
		  
		  <listitem>
		    <para>Pass the packet on as normal. (aliases: <emphasis
			remap=bf>pass</emphasis> and <emphasis
			remap=bf>accept</emphasis>)</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>deny</term>
		  
		  <listitem>
		    <para>Drop the packet.  The source is not notified via an
		      ICMP message (thus it appears that the packet never
		      arrived at the destination).</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>count</term>
		  
		  <listitem>
		    <para>Update packet counters but do not allow/deny the
		      packet based on this rule.  The search continues with
		      the next chain entry.</para>
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	    <para>Each <emphasis>action</emphasis> will be recognized by the
	      shortest unambiguous prefix.</para>
	    
	    <para>The <emphasis>protocols</emphasis> which can be specified
	      are:</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>all</term>
		  <listitem>
		    <para>Matches any IP packet</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>icmp</term>
		  
		  <listitem>
		    <para>Matches ICMP packets</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>tcp</term>
		  
		  <listitem>
		    <para>Matches TCP packets</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>udp</term>
		  
		  <listitem>
		    <para>Matches UDP packets</para>
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	    <para>The <emphasis>address</emphasis> specification is:
	      <informalexample>
		<screen><emphasis remap=bf>from</emphasis>
		  &lt;<filename>address/mask</filename>&gt;[<emphasis>port</emphasis>] <emphasis remap=bf>to</emphasis> &lt;<filename>address/mask</filename>&gt;[<emphasis>port</emphasis>] [<emphasis remap=bf>via</emphasis> &lt;<emphasis>interface</emphasis>&gt;]</screen>
	      </informalexample>
	    </para>
	    
	    <para>You can only specify <emphasis>port</emphasis> in
	      conjunction with <emphasis>protocols</emphasis> which support
	      ports (UDP and TCP).</para>
	    
	    <para>The <emphasis remap=bf>via</emphasis> is optional and may
	      specify the IP address or domain name of a local IP interface,
	      or an interface name (e.g. <emphasis remap=tt>ed0</emphasis>) to
	      match only packets coming through this interface. Interface unit
	      numbers can be specified with an optional wildcard. For example,
	      <emphasis remap=tt>ppp*</emphasis> would match all kernel PPP
	      interfaces.</para>
	    
	    <para>The syntax used to specify an
	      <filename>&lt;address/mask&gt;</filename> is:
	      <informalexample>
		<screen>&lt;address&gt;</screen>
	      </informalexample> or
	      <informalexample>
		<screen>&lt;address&gt;/mask-bits</screen>
	      </informalexample> or
	      <informalexample>
		<screen>&lt;address&gt;:mask-pattern</screen>
	      </informalexample>
	    </para>
	    
	    <para>A valid hostname may be specified in place of the IP
	      address. <emphasis remap=tt>mask-bits</emphasis> is a decimal
	      number representing how many bits in the address mask should be
	      set. e.g. specifying
	      <informalexample>
		<screen>192.216.222.1/24</screen>
	      </informalexample> will create a mask which will allow any
	      address in a class C subnet (in this case, 192.216.222) to be
	      matched. <emphasis remap=tt>mask-pattern</emphasis> is an IP
	      address which will be logically AND'ed with the address given.
	      The keyword <emphasis remap=tt>any</emphasis> may be used to
	      specify ``any IP address''.</para>
	    
	    <para>The port numbers to be blocked are specified as:
	      <informalexample>
		<screen>port[,port[,port[...]]]</screen>
	      </informalexample> to specify either a single port or a list of
	      ports, or
	      <informalexample>
		<screen>port-port</screen>
	      </informalexample> to specify a range of ports.  You may also
	      combine a single range with a list, but the range must always be
	      specified first.</para>
	    
	    <para>The <emphasis>options</emphasis> available are:</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>frag</term>
		  <listitem>
		    <para>Matches if the packet is not the first fragment of
		      the datagram.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>in</term>
		  
		  <listitem>
		    <para>Matches if the packet is on the way in.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>out</term>
		  
		  <listitem>
		    <para>Matches if the packet is on the way out.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>ipoptions <emphasis>spec</emphasis></term>
		  
		  <listitem>
		    <para>Matches if the IP header contains the comma
		      separated list of options specified in
		      <emphasis>spec</emphasis>.  The supported list of IP
		      options are: <emphasis remap=bf>ssrr</emphasis> (strict
		      source route), <emphasis remap=bf>lsrr</emphasis> (loose
		      source route), <emphasis remap=bf>rr</emphasis> (record
		      packet route), and <emphasis remap=bf>ts</emphasis>
		      (timestamp).  The absence of a particular option may be
		      denoted with a leading '!'.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>established</term>
		  
		  <listitem>
		    <para>Matches if the packet is part of an already
		      established TCP connection (i.e. it has the RST or ACK
		      bits set).  You can optimize the performance of the
		      firewall by placing <emphasis>established</emphasis>
		      rules early in the chain.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>setup</term>
		  
		  <listitem>
		    <para>Matches if the packet is an attempt to establish a
		      TCP connection (the SYN bit set is set but the ACK bit
		      is not).</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>tcpflags <emphasis>flags</emphasis></term>
		  
		  <listitem>
		    <para>Matches if the TCP header contains the comma
		      separated list of <emphasis>flags</emphasis>.  The
		      supported flags are <emphasis remap=bf>fin</emphasis>,
		      <emphasis remap=bf>syn</emphasis>, <emphasis
			remap=bf>rst</emphasis>, <emphasis
			remap=bf>psh</emphasis>, <emphasis
			remap=bf>ack</emphasis>, and <emphasis
			remap=bf>urg</emphasis>.  The absence of a particular
		      flag may be indicated by a leading '!'.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>icmptypes
		    <emphasis>types</emphasis></term>
		  
		  <listitem>
		    <para>Matches if the ICMP type is present in the list
		      <emphasis>types</emphasis>.  The list may be specified
		      as any combination of ranges and/or individual types
		      separated by commas.  Commonly used ICMP types are:
		      <emphasis remap=bf>0</emphasis> echo reply (ping reply),
		      <emphasis remap=bf>5</emphasis> redirect, <emphasis
			remap=bf>8</emphasis> echo request (ping request), and
		      <emphasis remap=bf>11</emphasis> time exceeded (used to
		      indicate TTL expiration as with
		      <command>traceroute(8)</command>).</para>
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Listing the IPFW rules</title>
	    
	    <para>The syntax for this form of the command is:
	      <informalexample>
		<screen>ipfw [-atN] l</screen>
	      </informalexample>
	    </para>
	    
	    <para>There are three valid flags when using this form of the
	      command:</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>-a</term>
		  <listitem>
		    <para>While listing, show counter values. This option is
		      the only way to see accounting counters.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>-t</term>
		  
		  <listitem>
		    <para>Display the last match times for each chain entry.
		      The time listing is incompatible with the input syntax
		      used by the <command>ipfw(8)</command> utility.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>-N</term>
		  
		  <listitem>
		    <para>Attempt to resolve given addresses and service
		      names.</para>
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Flushing the IPFW rules</title>
	    
	    <para>The syntax for flushing the chain is:
	      <informalexample>
		<screen>ipfw flush</screen>
	      </informalexample>
	    </para>
	    
	    <para>This causes all entries in the firewall chain to be removed
	      except the fixed default policy enforced by the kernel (index
	      65535).  Use caution when flushing rules, the default deny
	      policy will leave your system cut off from the network until
	      allow entries are added to the chain.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Clearing the IPFW packet counters</title>
	    
	    <para>The syntax for clearing one or more packet counters is:
	      <informalexample>
		<screen>ipfw zero [index]</screen>
	      </informalexample>
	    </para>
	    
	    <para>When used without an <emphasis>index</emphasis> argument,
	      all packet counters are cleared.  If an
	      <emphasis>index</emphasis> is supplied, the clearing operation
	      only affects a specific chain entry.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title>Example commands for ipfw</title>
	  
	  <para>This command will deny all packets from the host
	    <filename>evil.hacker.org</filename> to the telnet port of the
	    host <filename>nice.people.org</filename> by being forwarded by
	    the router:</para>
	  
	  <para>
	    <informalexample>
	      <screen>ipfw add deny tcp from evil.hacker.org to
		nice.people.org 23</screen>
	    </informalexample>
	  </para>
	  
	  <para>The next example denies and logs any TCP traffic from the
	    entire <filename>hacker.org</filename> network (a class C) to the
	    <filename>nice.people.org</filename> machine (any port).</para>
	  
	  <para>
	    <informalexample>
	      <screen>ipfw add deny log tcp from evil.hacker.org/24 to
		nice.people.org</screen>
	    </informalexample>
	  </para>
	  
	  <para>If you do not want people sending X sessions to your internal
	    network (a subnet of a class C), the following command will do the
	    necessary filtering:</para>
	  
	  <para>
	    <informalexample>
	      <screen>ipfw add deny tcp from any to my.org/28 6000
		setup</screen>
	    </informalexample>
	  </para>
	  
	  <para>To see the accounting records:
	    <informalexample>
	      <screen>ipfw -a list</screen>
	    </informalexample> or in the short form
	    <informalexample>
	      <screen>ipfw -a l</screen>
	    </informalexample> You can also see the last time a chain entry
	    was matched with
	    <informalexample>
	      <screen>ipfw -at l</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Building a packet filtering firewall</title>
	  
	  <para>
	    <blockquote>
	      <para><emphasis remap=bf>Note:</emphasis> The following
		suggestions are just that: suggestions. The requirements of
		each firewall are different and I cannot tell you how to build
		a firewall to meet your particular requirements.</para>
	    </blockquote>
	  </para>
	  
	  <para>When initially setting up your firewall, unless you have a
	    test bench setup where you can configure your firewall host in a
	    controlled environment, I strongly recommend you use the logging
	    version of the commands and enable logging in the kernel. This
	    will allow you to quickly identify problem areas and cure them
	    without too much disruption. Even after the initial setup phase is
	    complete, I recommend using the logging for of `deny' as it allows
	    tracing of possible attacks and also modification of the firewall
	    rules if your requirements alter.</para>
	  
	  <para>
	    <blockquote>
	      <para><emphasis remap=bf>Note:</emphasis> If you use the logging
		versions of the <emphasis remap=bf>accept</emphasis> command,
		it can generate <emphasis>large</emphasis> amounts of log data
		as one log line will be generated for every packet that passes
		through the firewall, so large ftp/http transfers, etc, will
		really slow the system down. It also increases the latencies
		on those packets as it requires more work to be done by the
		kernel before the packet can be passed on.  syslogd with also
		start using up a lot more processor time as it logs all the
		extra data to disk, and it could quite easily fill the
		partition <filename>/var/log</filename> is located on.</para>
	    </blockquote>
	  </para>
	  
	  <para>As currently supplied, FreeBSD does not have the ability to
	    load firewall rules at boot time. My suggestion is to put a call
	    to a shell script in the <filename>/etc/netstart</filename>
	    script. Put the call early enough in the netstart file so that the
	    firewall is configured before any of the IP interfaces are
	    configured. This means that there is no window during which time
	    your network is open.</para>
	  
	  <para>The actual script used to load the rules is entirely up to
	    you. There is currently no support in the <emphasis
	      remap=tt>ipfw</emphasis> utility for loading multiple rules in
	    the one command. The system I use is to use the command:</para>
	  
	  <para>
	    <informalexample>
	      <screen># ipfw list</screen>
	    </informalexample>
	  </para>
	  
	  <para>to write a list of the current rules out to a file, and then
	    use a text editor to prepend ``<emphasis remap=tt>ipfw
	    </emphasis>'' before all the lines. This will allow the script to
	    be fed into /bin/sh and reload the rules into the kernel. Perhaps
	    not the most efficient way, but it works.</para>
	  
	  <para>The next problem is what your firewall should actually
	    <acronym>DO</acronym>! This is largely dependent on what access to
	    your network you want to allow from the outside, and how much
	    access to the outside world you want to allow from the inside.
	    Some general rules are:</para>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para>Block all incoming access to ports below 1024 for TCP.
		  This is where most of the security sensitive services are,
		  like finger, SMTP (mail) and telnet.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Block <emphasis remap=bf>all</emphasis> incoming UDP
		  traffic. There are very few useful services that travel over
		  UDP, and what useful traffic there is is normally a security
		  threat (e.g. Suns RPC and NFS protocols). This has its
		  disadvantages also, since UDP is a connectionless protocol,
		  denying incoming UDP traffic also blocks the replies to
		  outgoing UDP traffic. This can cause a problem for people
		  (on the inside) using external archie (prospero) servers.
		  If you want to allow access to archie, you'll have to allow
		  packets coming from ports 191 and 1525 to any internal UDP
		  port through the firewall. ntp is another service you may
		  consider allowing through, which comes from port 123.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Block traffic to port 6000 from the outside. Port 6000
		  is the port used for access to X11 servers, and can be a
		  security threat (especially if people are in the habit of
		  doing <emphasis remap=tt>xhost +</emphasis> on their
		  workstations). X11 can actually use a range of ports
		  starting at 6000, the upper limit being how many X displays
		  you can run on the machine. The upper limit as defined by
		  RFC 1700 (Assigned Numbers) is 6063.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Check what ports any internal servers use (e.g. SQL
		  servers, etc). It is probably a good idea to block those as
		  well, as they normally fall outside the 1-1024 range
		  specified above.
		</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para>Another checklist for firewall configuration is available from
	    CERT at <ulink
	      URL="ftp://ftp.cert.org/pub/tech_tips/packet_filtering">ftp://ftp.cert.org/pub/tech_tips/packet_filtering</ulink></para>
	  
	  <para>As I said above, these are only
	    <emphasis>guidelines</emphasis>. You will have to decide what
	    filter rules you want to use on your firewall yourself. I cannot
	    accept ANY responsibility if someone breaks into your network,
	    even if you follow the advice given above.
	  </para>
	  
	</sect2>
      </sect1>
    </chapter>
    
    <chapter
      id="printing">
      <title>Printing</title>
      
      <para><emphasis>Contributed by &a.kelly;<!-- <br> -->30 September
	  1995</emphasis></para>
      
      <para>In order to use printers with FreeBSD, you will need to set them
	up to work with the Berkeley line printer spooling system, also known
	as the LPD spooling system.  It is the standard printer control system
	in FreeBSD.  This section introduces the LPD spooling system, often
	simply called LPD.</para>
      
      <para>If you are already familiar with LPD or another printer spooling
	system, you may wish to skip to section <xref
	  linkend="printing-intro-setup" remap="Setting up the spooling
	  system">.</para>
      
      
      <sect1
	id="printing-intro-spooler">
	<title>What the Spooler Does</title>
	
	<para> LPD controls everything about a host's printers.  It is
	  responsible for a number of things:</para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>It controls access to attached printers and printers
		attached to other hosts on the network.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>It enables users to submit files to be printed; these
		submissions are known as <emphasis>jobs</emphasis>.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>It prevents multiple users from accessing a printer at the
		same time by maintaining a <emphasis>queue</emphasis> for each
		printer.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>It can print <emphasis>header pages</emphasis> (also known
		as <emphasis>banner</emphasis> or <emphasis>burst</emphasis>
		pages) so users can easily find jobs they have printed in a
		stack of printouts.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>It takes care of communications parameters for printers
		connected on serial ports.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>It can send jobs over the network to another LPD spooler
		on another host.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>It can run special filters to format jobs to be printed
		for various printer languages or printer capabilities.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>It can account for printer usage.</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
	<para>Through a configuration file, and by providing the special
	  filter programs, you can enable the LPD system to do all or some
	  subset of the above for a great variety of printer hardware.</para>
	
      </sect1>
      
      <sect1
	id="printing-intro-why">
	<title>Why You Should Use the Spooler</title>
	
	<para> If you are the sole user of your system, you may be wondering
	  why you should bother with the spooler when you do not need access
	  control, header pages, or printer accounting.  While it is possible
	  to enable direct access to a printer, you should use the spooler
	  anyway since</para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>LPD prints jobs in the background; you do not have to wait
		for data to be copied to the printer.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>LPD can conveniently run a job to be printed through
		filters to add date/time headers or convert a special file
		format (such as a TeX DVI file) into a format the printer will
		understand.   You will not have to do these steps manually.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>Many free and commercial programs that provide a print
		feature usually expect to talk to the spooler on your system.
		By setting up the spooling system, you will more easily
		support other software you may later add or already
		have.</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
      
      <sect1
	id="printing-intro-setup">
	<title>Setting Up the Spooling System</title>
	
	<para> To use printers with the LPD spooling system, you will need to
	  set up both your printer hardware and the LPD software. This
	  document describes two levels of setup:</para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>See section <xref linkend="printing-simple" remap="Simple
		  Printer Setup"> to learn how to connect a printer, tell LPD
		how to communicate with it, and print plain text files to the
		printer.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>See section <xref linkend="printing-advanced"
		  remap="Advanced Printer Setup"> to find out how to print a
		variety of special file formats, to print header pages, to
		print across a network, to control access to printers, and to
		do printer accounting.</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
      
      <sect1
	id="printing-simple">
	<title>Simple Printer Setup</title>
	
	<para> This section tells how to configure printer hardware and the
	  LPD software to use the printer.  It teaches the basics:</para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>Section <xref linkend="printing-hardware" remap="Hardware
		  Setup"> gives some hints on connecting the printer to a port
		on your computer.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>Section <xref linkend="printing-software" remap="Software
		  Setup"> shows how to setup the LPD spooler configuration
		file <filename>/etc/printcap</filename>.</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
	<para>If you are setting up a printer that uses a network protocol to
	  accept data to print instead of a serial or parallel interface, see
	  <xref linkend="printing-advanced-network-net-if" remap="Printers
	    With Networked Data Stream Interaces">.</para>
	
	<para>Although this section is called ``Simple Printer Setup,'' it is
	  actually fairly complex.  Getting the printer to work with your
	  computer and the LPD spooler is the hardest part.  The advanced
	  options like header pages and accounting are fairly easy once you
	  get the printer working.</para>
	
	
	<sect2
	  id="printing-hardware">
	  <title>Hardware Setup</title>
	  
	  <para> This section tells about the various ways you can connect a
	    printer to your PC.  It talks about the kinds of ports and cables,
	    and also the kernel configuration you may need to enable FreeBSD
	    to speak to the printer.</para>
	  
	  <para>If you have already connected your printer and have
	    successfully printed with it under another operating system, you
	    can probably skip to section <xref linkend="printing-software"
	      remap="Software Setup">.</para>
	  
	  
	  <sect3
	    id="printing-ports">
	    <title>Ports and Cables</title>
	    
	    <para> Nearly all printers you can get for a PC today support one
	      or both of the following interfaces:</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para><emphasis>Serial</emphasis> interfaces use a serial
		    port on your computer to send data to the printer.  Serial
		    interfaces are common in the computer industry and cables
		    are readily available and also easy to construct.  Serial
		    interfaces sometimes need special cables and might require
		    you to configure somewhat complex communications options.
		  </para>
		</listitem>
		
		<listitem>
		  <para><emphasis>Parallel</emphasis> interfaces use a
		    parallel port on your computer to send data to the
		    printer.  Parallel interfaces are common in the PC market.
		    Cables are readily available but more difficult to
		    construct by hand.  There are usually no communications
		    options with parallel interfaces, making their
		    configuration exceedingly simple.
		    
		  </para>
		  
		  <para> Parallel interfaces are sometimes known as
		    ``Centronics'' interfaces, named after the connector type
		    on the printer.</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>In general, serial interfaces are slower than parallel
	      interfaces.  Parallel interfaces usually offer just one-way
	      communication (computer to printer) while serial gives you
	      two-way.  Many newer parallel ports can also receive data from
	      the printer, but only few printers need to send data back to the
	      computer.  And FreeBSD does not support two-way parallel
	      communication yet.</para>
	    
	    <para>Usually, the only time you need two-way communication with
	      the printer is if the printer speaks PostScript. PostScript
	      printers can be very verbose.  In fact, PostScript jobs are
	      actually programs sent to the printer; they need not produce
	      paper at all and may return results directly to the computer.
	      PostScript also uses two-way communication to tell the computer
	      about problems, such as errors in the PostScript program or
	      paper jams. Your users may be appreciative of such information.
	      Furthermore, the best way to do effective accounting with a
	      PostScript printer requires two-way communication: you ask the
	      printer for its page count (how many pages it has printed in its
	      lifetime), then send the user's job, then ask again for its page
	      count. Subtract the two values and you know how much paper to
	      charge the user.</para>
	    
	    <para>So, which interface should you use?</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para>If you need two-way communication, use a serial port.
		    FreeBSD does not yet support two-way communication over a
		    parallel port.
		  </para>
		</listitem>
		
		<listitem>
		  <para>If you do not need two-way communication and can pick
		    parallel or serial, prefer the parallel interface.  It
		    keeps a serial port free for other peripherals---such as a
		    terminal or a modem---and is faster most of the time.  It
		    is also easier to configure.
		  </para>
		</listitem>
		
		<listitem>
		  <para>Finally, use whatever works.	</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	  </sect3>
	  
	  <sect3
	    id="printing-parallel">
	    <title>Parallel Ports</title>
	    
	    <para> To hook up a printer using a parallel interface, connect
	      the Centronics cable between the printer and the computer. The
	      instructions that came with the printer, the computer, or both
	      should give you complete guidance.</para>
	    
	    <para>Remember which parallel port you used on the computer. The
	      first parallel port is /dev/lpt0 to FreeBSD; the second is
	      /dev/lpt1, and so on.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="printing-serial">
	    <title>Serial Ports</title>
	    
	    <para> To hook up a printer using a serial interface, connect the
	      proper serial cable between the printer and the computer.  The
	      instructions that came with the printer, the computer, or both
	      should give you complete guidance.</para>
	    
	    <para>If you are unsure what the ``proper serial cable'' is, you
	      may wish to try one of the following alternatives:
	      <itemizedlist>
		
		<listitem>
		  <para>A <emphasis>modem</emphasis> cable connects each pin
		    of the connector on one end of the cable straight through
		    to its corresponding pin of the connector on the other
		    end.  This type of cable is also known as a DTE-to-DCE
		    cable.
		  </para>
		</listitem>
		
		<listitem>
		  <para>A <emphasis>null-modem</emphasis> cable connects some
		    pins straight through, swaps others (send data to receive
		    data, for example), and shorts some internally in each
		    connector hood.  This type of cable is also known as a
		    DTE-to-DTE cable.
		  </para>
		</listitem>
		
		<listitem>
		  <para>A <emphasis>serial printer</emphasis> cable, required
		    for some unusual printers, is like the null modem cable,
		    but sends some signals to their counterparts instead of
		    being internally shorted.</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>You should also set up the communications parameters for the
	      printer, usually through front-panel controls or DIP switches on
	      the printer.  Choose the highest bps (bits per second, sometimes
	      <emphasis>baud rate</emphasis>) rate that both your computer and
	      the printer can support.  Choose 7 or 8 data bits; none, even,
	      or odd parity; and 1 or 2 stop bits. Also choose a flow control
	      protocol: either none, or XON/XOFF (also known as
	      <emphasis>in-band</emphasis> or <emphasis>software</emphasis>)
	      flow control.  Remember these settings for the software
	      configuration that follows.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2
	  id="printing-software">
	  <title>Software Setup</title>
	  
	  <para> This section describes the software setup necessary to print
	    with the LPD spooling system in FreeBSD.</para>
	  
	  <para>Here is an outline of the steps involved:
	    <orderedlist>
	      
	      <listitem>
		<para>Configure your kernel, if necessary, for the port you
		  are using for the printer; section <xref
		    linkend="printing-kernel" remap="Kernel Configuration">
		  tells you what you need to do.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Set the communications mode for the parallel port, if
		  you are using a parallel port; section <xref
		    linkend="printing-parallel-port-mode" remap="Setting the
		    Communication Mode for the Parallel Port"> gives details.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Test if the operating system can send data to the
		  printer.  Section <xref linkend="printing-testing"
		    remap="Checking Printer Communications"> gives some
		  suggestions on how to do this.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Set up LPD for the printer by modifying the file
		  <filename>/etc/printcap</filename>.  Section <xref
		    linkend="printing-printcap" remap="The /etc/printcap
		    File"> shows you how.</para>
	      </listitem>
	      
	    </orderedlist>
	  </para>
	  
	  
	  <sect3
	    id="printing-kernel">
	    <title>Kernel Configuration</title>
	    
	    <para> The operating system kernel is compiled to work with a
	      specific set of devices.  The serial or parallel interface for
	      your printer is a part of that set.  Therefore, it might be
	      necessary to add support for an additional serial or parallel
	      port if your kernel is not already configured for one.</para>
	    
	    <para>To find out if the kernel you are currently using supports a
	      serial interface, type
	      <informalexample>
		<screen><emphasis remap=tt>dmesg | grep
		    sio</emphasis><emphasis remap=it>N</emphasis></screen>
	      </informalexample> where <emphasis remap=it>N</emphasis> is the
	      number of the serial port, starting from zero.  If you see
	      output similar to the following
	      <informalexample>
		<screen>  sio2 at 0x3e8-0x3ef irq 5 on isa sio2: type
		  16550A</screen>
	      </informalexample> then the kernel supports the port.</para>
	    
	    <para>To find out if the kernel supports a parallel interface,
	      type
	      <informalexample>
		<screen><emphasis remap=tt>dmesg | grep
		    lpt</emphasis><emphasis remap=it>N</emphasis></screen>
	      </informalexample> where <emphasis remap=it>N</emphasis> is the
	      number of the parallel port, starting from zero.  If you see
	      output similar to the following
	      <informalexample>
		<screen>lpt0 at 0x378-0x37f on isa</screen>
	      </informalexample> then the kernel supports the port.</para>
	    
	    <para>You might have to reconfigure your kernel in order for the
	      operating system to recognize and use the parallel or serial
	      port you are using for the printer.</para>
	    
	    <para>To add support for a serial port, see the section on kernel
	      configuration.  To add support for a parallel port, see that
	      section <emphasis>and</emphasis> the section that
	      follows.</para>
	    
	    
	    <sect4
	      id="printing-dev-ports">
	      <title>Adding <filename>/dev</filename> Entries for the Ports
	      </title>
	      
	      <para> Even though the kernel may support communication along a
		serial or parallel port, you will still need a software
		interface through which programs running on the system can
		send and receive data.  That is what entries in the
		<filename>/dev</filename> directory are for.</para>
	      
	      <para><emphasis remap=bf>To add a <filename>/dev</filename>
		  entry for a port:</emphasis>
		<orderedlist>
		  
		  <listitem>
		    <para>Become root with the  <ulink
			URL="http://www.freebsd.org/cgi/man.cgi?su">su</ulink>
		      command.  Enter the root password when prompted.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>Change to the <filename>/dev</filename> directory:
		      <informalexample>
			<screen>cd /dev</screen>
		      </informalexample>
		      
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>Type
		      <informalexample>
			<screen><emphasis remap=tt> ./MAKEDEV</emphasis>
			  <emphasis remap=it>port</emphasis></screen>
		      </informalexample> where <emphasis
			remap=it>port</emphasis> is the device entry for the
		      port you want to make.  Use <emphasis
			remap=tt>lpt0</emphasis> for the first parallel port,
		      <emphasis remap=tt>lpt1</emphasis> for the second, and
		      so on; use <emphasis remap=tt>ttyd0</emphasis> for the
		      first serial port, <emphasis remap=tt>ttyd1</emphasis>
		      for the second, and so on.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>Type
		      <informalexample>
			<screen><command>ls -l</command> <emphasis
			    remap=it>port</emphasis></screen>
		      </informalexample> to make sure the device entry got
		      created.</para>
		  </listitem>
		  
		</orderedlist>
	      </para>
	      
	    </sect4>
	    
	    <sect4
	      id="printing-parallel-port-mode">
	      <title>Setting the Communication Mode for the Parallel Port
	      </title>
	      
	      <para> When you are using the parallel interface, you can choose
		whether FreeBSD should use interrupt-driven or polled
		communication with the printer.</para>
	      
	      <para>
		<itemizedlist>
		  
		  <listitem>
		    <para>The <emphasis>interrupt-driven</emphasis> method is
		      the default with the GENERIC kernel.  With this method,
		      the operating system uses an IRQ line to determine when
		      the printer is ready for data.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>The <emphasis>polled</emphasis> method directs the
		      operating system to repeatedly ask the printer if it is
		      ready for more data.  When it responds ready, the kernel
		      sends more data.</para>
		  </listitem>
		  
		</itemizedlist>
	      </para>
	      
	      <para>The interrupt-driven method is somewhat faster but uses up
		a precious IRQ line.  You should use whichever one
		works.</para>
	      
	      <para>You can set the communications mode in two ways: by
		configuring the kernel or by using the  <ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?lptcontrol">lptcontrol</ulink></para>
	      
	      <para>program.</para>
	      
	      <para><emphasis remap=bf>To set the communications mode by
		  configuring the kernel:</emphasis>
		<orderedlist>
		  
		  <listitem>
		    <para>Edit your kernel configuration file.  Look for or
		      add an <emphasis remap=tt>lpt0</emphasis> entry.  If you
		      are setting up the second parallel port, use <emphasis
			remap=tt>lpt1</emphasis> instead.  Use <emphasis
			remap=tt>lpt2</emphasis> for the third port, and so
		      on.
		      <itemizedlist>
			
			<listitem>
			  <para>If you want interrupt-driven mode, add the
			    <emphasis remap=tt>irq</emphasis> specifier:
			    <informalexample>
			      <screen><emphasis remap=tt>device lpt0 at isa?
				  port? tty irq <replaceable>N</replaceable>
				  vector lptintr</emphasis></screen>
			    </informalexample> where <emphasis
			      remap=it>N</emphasis> is the IRQ number for your
			    computer's parallel port.
			  </para>
			</listitem>
			
			<listitem>
			  <para>If you want polled mode, do not add the
			    <emphasis remap=tt>irq</emphasis> specifier:
			    <informalexample>
			      <screen><emphasis remap=tt>device lpt0 at isa?
				  port? tty vector lptintr</emphasis>
			      </screen>
			    </informalexample>
			  </para>
			</listitem>
			
		      </itemizedlist>
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>Save the file.  Then configure, build, and install
		      the kernel, then reboot.  See <xref
			linkend="kernelconfig" remap="kernel configuration">
		      for more details.</para>
		  </listitem>
		  
		</orderedlist>
	      </para>
	      
	      <para><emphasis remap=bf>To set the communications mode
		  with</emphasis> <ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?lptcontrol">lptcontrol</ulink>:
		<itemizedlist>
		  
		  <listitem>
		    <para>Type
		      <informalexample>
			<screen><command>lptcontrol -i -u
			    <replaceable>N</replaceable></command></screen>
		      </informalexample> to set interrupt-driven mode for
		      <emphasis
			remap=tt>lpt<replaceable>N</replaceable></emphasis>.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>Type
		      <informalexample>
			<screen><command>lptcontrol -p -u
			    <replaceable>N</replaceable></command></screen>
		      </informalexample> to set polled-mode for <emphasis
			remap=tt>lpt<replaceable>N</replaceable></emphasis>.</para>
		  </listitem>
		  
		</itemizedlist> You could put these commands in your
		<filename>/etc/rc.local</filename> file to set the mode each
		time your system boots.  See  <ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?lptcontrol(8)">lptcontrol(8)</ulink> for more information.</para>
	      
	    </sect4>
	    
	    <sect4
	      id="printing-testing">
	      <title>Checking Printer Communications</title>
	      
	      <para> Before proceeding to configure the spooling system, you
		should make sure the operating system can successfully send
		data to your printer.  It is a lot easier to debug printer
		communication and the spooling system separately.</para>
	      
	      <para>To test the printer, we will send some text to it.  For
		printers that can immediately print characters sent to them,
		the program  <ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?lptest">lptest</ulink> is perfect: it generates all 96 printable ASCII characters in 96 lines.</para>
	      
	      <para>For a PostScript (or other language-based) printer, we
		will need a more sophisticated test.  A small PostScript
		program, such as the following, will suffice:
		<informalexample>
		  <programlisting>%!PS 100 100 moveto 300 300 lineto stroke
		    310 310 moveto /Helvetica findfont 12 scalefont setfont
		    (Is this thing working?) show showpage</programlisting>
		</informalexample> <emphasis>Note:</emphasis> When this
		document refers to a printer language, I am assuming a
		language like PostScript, and not Hewlett Packard's PCL.
		Although PCL has great functionality, you can intermingle
		plain text with its escape sequences.  PostScript cannot
		directly print plain text, and that is the kind of printer
		language for which we must make special accommodations.</para>
	      
	      
	      <sect5
		id="printing-checking-parallel">
		<title>Checking a Parallel Printer</title>
		
		<para> This section tells you how to check if FreeBSD can
		  communicate with a printer connected to a parallel
		  port.</para>
		
		<para><emphasis remap=bf>To test a printer on a parallel
		    port:</emphasis>
		  <orderedlist>
		    
		    <listitem>
		      <para>Become root with  <ulink
			  URL="http://www.freebsd.org/cgi/man.cgi?su">su</ulink>.</para>
		    </listitem>
		    
		    <listitem>
		      <para>Send data to the printer.
			<itemizedlist>
			  
			  <listitem>
			    <para>If the printer can print plain text, then
			      use <ulink
				URL="http://www.freebsd.org/cgi/man.cgi?lptest">lptest</ulink>. Type:
			      <informalexample>
				<screen><command>lptest &gt;
				    /dev/lpt<replaceable>N</replaceable></command></screen>
			      </informalexample> where <emphasis
				remap=it>N</emphasis> is the number of the
			      parallel port, starting from zero.
			    </para>
			  </listitem>
			  
			  <listitem>
			    <para>If the printer understands PostScript or
			      other printer language, then send a small
			      program to the printer.  Type
			      <informalexample>
				<screen><command>cat &gt;
				    /dev/lpt<replaceable>N</replaceable></command></screen>
			      </informalexample> Then, line by line, type the
			      program <emphasis>carefully</emphasis> as you
			      cannot edit a line once you have pressed RETURN
			      or ENTER. When you have finished entering the
			      program, press CONTROL+D, or whatever your end
			      of file key is.
			      
			    </para>
			    
			    <para> Alternatively, you can put the program in a
			      file and type
			      <informalexample>
				<screen><command>cat
				    <replaceable>file</replaceable> &gt;
				    /dev/lpt<replaceable>N</replaceable></command></screen>
			      </informalexample> where <emphasis
				remap=it>file</emphasis> is the name of the
			      file containing the program you want to send to
			      the printer.</para>
			  </listitem>
			  
			</itemizedlist>
		      </para>
		    </listitem>
		    
		  </orderedlist>
		</para>
		
		<para>You should see something print.  Do not worry if the
		  text does not look right; we will fix such things
		  later.</para>
		
	      </sect5>
	      
	      <sect5
		id="printing-checking-serial">
		<title>Checking a Serial Printer</title>
		
		<para> This section tells you how to check if FreeBSD can
		  communicate with a printer on a serial port.</para>
		
		<para><emphasis remap=bf>To test a printer on a serial
		    port:</emphasis>
		  <orderedlist>
		    
		    <listitem>
		      <para>Become root with  <ulink
			  URL="http://www.freebsd.org/cgi/man.cgi?su">su</ulink>.
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para>Edit the file <filename>/etc/remote</filename>.
			Add the following entry:
			<informalexample>
			  <screen><literal>printer:dv=/dev/<replaceable>port</replaceable>:br#<replaceable>bps-rate</replaceable>:pa=<replaceable>parity</replaceable></literal></screen>
			</informalexample> where <emphasis
			  remap=it>port</emphasis> is the device entry for the
			serial port (<emphasis remap=tt>ttyd0</emphasis>,
			<emphasis remap=tt>ttyd1</emphasis>, etc.), <emphasis
			  remap=it>bps-rate</emphasis> is the bits-per-second
			rate at which the printer communicates, and <emphasis
			  remap=it>parity</emphasis> is the parity required by
			the printer (either <emphasis
			  remap=tt>even</emphasis>, <emphasis
			  remap=tt>odd</emphasis>, <emphasis
			  remap=tt>none</emphasis>, or <emphasis
			  remap=tt>zero</emphasis>).
		      </para>
		      
		      <para>Here is a sample entry for a printer connected via
			a serial line to the third serial port at 19200 bps
			with no parity:
			<informalexample>
			  <programlisting>printer:dv=/dev/ttyd2:br#19200:pa=none</programlisting>
			</informalexample>
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para>Connect to the printer with  <ulink
			  URL="http://www.freebsd.org/cgi/man.cgi?tip">tip</ulink>.  Type:
			<informalexample>
			  <screen>tip printer</screen>
			</informalexample> If this step does not work, edit
			the file <filename>/etc/remote</filename> again and
			try using
			<filename>/dev/cuaa<replaceable>N</replaceable></filename> instead of <filename>/dev/ttyd<replaceable>N</replaceable></filename>.
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para>Send data to the printer.
			<itemizedlist>
			  
			  <listitem>
			    <para>If the printer can print plain text, then
			      use  <ulink
				URL="http://www.freebsd.org/cgi/man.cgi?lptest">lptest</ulink>. Type:
			      <informalexample>
				<screen>~$lptest</screen>
			      </informalexample>
			      
			    </para>
			  </listitem>
			  
			  <listitem>
			    <para>If the printer understands PostScript or
			      other printer language, then send a small
			      program to the printer.  Type the program, line
			      by line, <emphasis>very carefully</emphasis> as
			      backspacing or other editing keys may be
			      significant to the printer. You may also need to
			      type a special end-of-file key for the printer
			      so it knows it received the whole program.  For
			      PostScript printers, press CONTROL+D.
			      
			    </para>
			    
			    <para> Alternatively, you can put the program in a
			      file and type
			      <informalexample>
				<screen><emphasis
				    remap=tt>~&gt;<replaceable>file</replaceable></emphasis></screen>
			      </informalexample> where <emphasis
				remap=it>file</emphasis> is the name of the
			      file containing the program.  After  <ulink
				URL="http://www.freebsd.org/cgi/man.cgi?tip">tip</ulink> sends the file, press any required end-of-file key.</para>
			  </listitem>
			  
			</itemizedlist>
		      </para>
		    </listitem>
		    
		  </orderedlist>
		</para>
		
		<para>You should see something print.  Do not worry if the
		  text does not look right; we will fix that later.</para>
		
	      </sect5>
	    </sect4>
	  </sect3>
	  
	  <sect3
	    id="printing-printcap">
	    <title>Enabling the Spooler: The
	      <filename>/etc/printcap</filename> File
	    </title>
	    
	    <para> At this point, your printer should be hooked up, your
	      kernel configured to communicate with it (if necessary), and you
	      have been able to send some simple data to the printer.  Now, we
	      are ready to configure LPD to control access to your
	      printer.</para>
	    
	    <para>You configure LPD by editing the file
	      <filename>/etc/printcap</filename>.  The LPD spooling system
	      reads this file each time the spooler is used, so updates to the
	      file take immediate effect.</para>
	    
	    <para>The format of the  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?printcap">printcap</ulink> file is straightforward. Use your favorite text editor to make changes to <filename>/etc/printcap</filename>.  The format is identical to other capability files like <filename>/usr/share/misc/termcap</filename> and <filename>/etc/remote</filename>.  For complete information about the format, see the  <ulink URL="http://www.freebsd.org/cgi/man.cgi?cgetent(3)">cgetent(3)</ulink>.</para>
	    
	    <para>The simple spooler configuration consists of the following
	      steps:
	      <orderedlist>
		
		<listitem>
		  <para>Pick a name (and a few convenient aliases) for the
		    printer, and put them in the
		    <filename>/etc/printcap</filename> file; see <xref
		      linkend="printing-naming" remap="Naming the Printer">.
		  </para>
		</listitem>
		
		<listitem>
		  <para>Turn off header pages (which are on by default) by
		    inserting the <emphasis remap=tt>sh</emphasis> capability;
		    see <xref linkend="printing-no-header-pages"
		      remap="Suppressing Header   Pages">.
		  </para>
		</listitem>
		
		<listitem>
		  <para>Make a spooling directory, and specify its location
		    with the <emphasis remap=tt>sd</emphasis> capability; see
		    <xref linkend="printing-spooldir"
		      remap="Making the Spooling   Directory">.
		  </para>
		</listitem>
		
		<listitem>
		  <para>Set the <filename>/dev</filename> entry to use for the
		    printer, and note it in <filename>/etc/printcap</filename>
		    with the <emphasis remap=tt>lp</emphasis> capability; see
		    <xref
		      linkend="printing-device" remap="Identifying the Printer
		      Device">.  Also, if the printer is on a serial port, set
		    up the communication parameters with the <emphasis
		      remap=tt>fs</emphasis>, <emphasis
		      remap=tt>fc</emphasis>, <emphasis
		      remap=tt>xs</emphasis>, and <emphasis
		      remap=tt>xc</emphasis> capabilities; see <xref
		      linkend="printing-commparam" remap="Configuring Spooler
		      Communications Parameters">.
		  </para>
		</listitem>
		
		<listitem>
		  <para>Install a plain text input filter; see <xref
		      linkend="printing-textfilter" remap="Installing the Text
		      Filter">
		  </para>
		</listitem>
		
		<listitem>
		  <para>Test the setup by printing something with the <ulink
		      URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink>
		    command; see <xref linkend="printing-trying" remap="Trying
		      It Out"> and <xref linkend="printing-troubleshooting"
		      remap="Troubleshooting">.</para>
		</listitem>
		
	      </orderedlist>
	    </para>
	    
	    <para><emphasis>Note:</emphasis> Language-based printers, such as
	      PostScript printers, cannot directly print plain text.  The
	      simple setup outlined above and described in the following
	      sections assumes that if you are installing such a printer you
	      will print only files that the printer can understand.</para>
	    
	    <para>Users often expect that they can print plain text to any of
	      the printers installed on your system.  Programs that interface
	      to LPD to do their printing usually make the same assumption.
	      If you are installing such a printer and want to be able to
	      print jobs in the printer language <emphasis>and</emphasis>
	      print plain text jobs, you are strongly urged to add an
	      additional step to the simple setup outlined above: install an
	      automatic plain-text--to--PostScript (or other printer language)
	      conversion program.  Section <xref
		linkend="printing-advanced-if-conversion" remap="Accommodating
		Plain Text Jobs on PostScript Printers"> tells how to do
	      this.</para>
	    
	    
	    <sect4
	      id="printing-naming">
	      <title>Naming the Printer</title>
	      
	      <para> The first (easy) step is to pick a name for your printer.
		It really does not matter whether you choose functional or
		whimsical names since you can also provide a number aliases
		for the printer.</para>
	      
	      <para>At least one of the printers specified in the
		<filename>/etc/printcap</filename> should have the alias
		<emphasis remap=tt>lp</emphasis>. This is the default
		printer's name.  If users do not have the PRINTER environment
		variable nor specify a printer name on the command line of any
		of the LPD commands, then <emphasis remap=tt>lp</emphasis>
		will be the default printer they get to use.</para>
	      
	      <para>Also, it is common practice to make the last alias for a
		printer be a full description of the printer, including make
		and model.</para>
	      
	      <para>Once you have picked a name and some common aliases, put
		them in the <filename>/etc/printcap</filename> file.  The name
		of the printer should start in the leftmost column. Separate
		each alias with a vertical bar and put a colon after the last
		alias.</para>
	      
	      <para>In the following example, we start with a skeletal
		<filename>/etc/printcap</filename> that defines two printers
		(a Diablo 630 line printer and a Panasonic KX-P4455 PostScript
		laser printer):
		<informalexample>
		  <programlisting># #  /etc/printcap for host rose #
		    rattan|line|diablo|lp|Diablo 630 Line Printer:
		    bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript
		    v51.4:</programlisting>
		</informalexample> In this example, the first printer is named
		<emphasis remap=tt>rattan</emphasis> and has as aliases
		<emphasis remap=tt>line</emphasis>, <emphasis
		  remap=tt>diablo</emphasis>, <emphasis
		  remap=tt>lp</emphasis>, and <emphasis remap=tt>Diablo 630
		  Line Printer</emphasis>.  Since it has the alias <emphasis
		  remap=tt>lp</emphasis>, it is also the default printer.  The
		second is named <emphasis remap=tt>bamboo</emphasis>, and has
		as aliases <emphasis remap=tt>ps</emphasis>,
		<acronym>PS</acronym>, <emphasis remap=tt>S</emphasis>,
		<emphasis remap=tt>panasonic</emphasis>, and <emphasis
		  remap=tt>Panasonic KX-P4455 PostScript
		  v51.4</emphasis>.</para>
	      
	    </sect4>
	    
	    <sect4
	      id="printing-no-header-pages">
	      <title>Suppressing Header Pages</title>
	      
	      <para> The LPD spooling system will by default print a
		<emphasis>header page</emphasis> for each job.  The header
		page contains the user name who requested the job, the host
		from which the job came, and the name of the job, in nice
		large letters.  Unfortunately, all this extra text gets in the
		way of debugging the simple printer setup, so we will suppress
		header pages.</para>
	      
	      <para>To suppress header pages, add the <emphasis
		  remap=tt>sh</emphasis> capability to the entry for the
		printer in <filename>/etc/printcap</filename>. Here is the
		example <filename>/etc/printcap</filename> with <emphasis
		  remap=tt>sh</emphasis> added:
		<informalexample>
		  <programlisting># #  /etc/printcap for host rose - no header
		    pages anywhere # rattan|line|diablo|lp|Diablo 630 Line
		    Printer:\ :sh: bamboo|ps|PS|S|panasonic|Panasonic KX-P4455
		    PostScript v51.4:\ :sh:</programlisting>
		</informalexample> Note how we used the correct format: the
		first line starts in the leftmost column, and subsequent lines
		are indented with a single TAB.  Every line in an entry except
		the last ends in a backslash character.</para>
	      
	    </sect4>
	    
	    <sect4
	      id="printing-spooldir">
	      <title>Making the Spooling Directory</title>
	      
	      <para> The next step in the simple spooler setup is to make a
		<emphasis>spooling directory</emphasis>, a directory where
		print jobs reside until they are printed, and where a number
		of other spooler support files live.</para>
	      
	      <para>Because of the variable nature of spooling directories, it
		is customary to put these directories under
		<filename>/var/spool</filename>.  It is not necessary to
		backup the contents of spooling directories, either.
		Recreating them is as simple as running  <ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?mkdir">mkdir</ulink>.</para>
	      
	      <para>It is also customary to make the directory with a name
		that is identical to the name of the printer, as shown below:
		<informalexample>
		  <screen><command>mkdir
		      /var/spool/<replaceable>printer-name</replaceable></command></screen>
		</informalexample> However, if you have a lot of printers on
		your network, you might want to put the spooling directories
		under a single directory that you reserve just for printing
		with LPD.  We will do this for our two example printers
		<emphasis remap=tt>rattan</emphasis> and <emphasis
		  remap=tt>bamboo</emphasis>:
		<informalexample>
		  <screen>mkdir /var/spool/lpd mkdir /var/spool/lpd/rattan
		    mkdir /var/spool/lpd/bamboo</screen>
		</informalexample>
	      </para>
	      
	      <para><emphasis>Note:</emphasis> If you are concerned about the
		privacy of jobs that users print, you might want to protect
		the spooling directory so it is not publicly accessible.
		Spooling directories should be owned and be readable,
		writable, and searchable by user daemon and group daemon, and
		no one else.  We will do this for our example printers:</para>
	      
	      <para>
		<informalexample>
		  <screen>chown daemon.daemon /var/spool/lpd/rattan chown
		    daemon.daemon /var/spool/lpd/bamboo chmod 770
		    /var/spool/lpd/rattan chmod 770
		    /var/spool/lpd/bamboo</screen>
		</informalexample>
	      </para>
	      
	      <para>Finally, you need to tell LPD about these directories
		using the <filename>/etc/printcap</filename> file.  You
		specify the pathname of the spooling directory with the
		<emphasis remap=tt>sd</emphasis> capability:
		<informalexample>
		  <programlisting># #  /etc/printcap for host rose - added
		    spooling directories # rattan|line|diablo|lp|Diablo 630
		    Line Printer:\ :sh:sd=/var/spool/lpd/rattan:
		    bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript
		    v51.4:\ :sh:sd=/var/spool/lpd/bamboo:</programlisting>
		</informalexample> Note that the name of the printer starts in
		the first column but all other entries describing the printer
		should be indented with a tab and each line escaped with a
		backslash.</para>
	      
	      <para>If you do not specify a spooling directory with <emphasis
		  remap=tt>sd</emphasis>, the spooling system will use
		<filename>/var/spool/lpd</filename> as a default.</para>
	      
	    </sect4>
	    
	    <sect4
	      id="printing-device">
	      <title>Identifying the Printer Device</title>
	      
	      <para> In section <xref linkend="printing-dev-ports"
		  remap="Adding   /dev Entries for the Ports">, we identified
		which entry in the <filename>/dev</filename> directory FreeBSD
		will use to communicate with the printer.  Now, we tell LPD
		that information.  When the spooling system has a job to
		print, it will open the specified device on behalf of the
		filter program (which is responsible for passing data to the
		printer).</para>
	      
	      <para>List the <filename>/dev</filename> entry pathname in the
		<filename>/etc/printcap</filename> file using the <emphasis
		  remap=tt>lp</emphasis> capability.</para>
	      
	      <para>In our running example, let us assume that <emphasis
		  remap=tt>rattan</emphasis> is on the first parallel port,
		and <emphasis remap=tt>bamboo</emphasis> is on a sixth serial
		port; here are the additions to
		<filename>/etc/printcap</filename>:
		<informalexample>
		  <programlisting># #  /etc/printcap for host rose -
		    identified what devices to use #
		    rattan|line|diablo|lp|Diablo 630 Line Printer:\
		    :sh:sd=/var/spool/lpd/rattan:\ :lp=/dev/lpt0:
		    bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript
		    v51.4:\ :sh:sd=/var/spool/lpd/bamboo:\
		    :lp=/dev/ttyd5:</programlisting>
		</informalexample>
	      </para>
	      
	      <para>If you do not specify the <emphasis remap=tt>lp</emphasis>
		capability for a printer in your
		<filename>/etc/printcap</filename> file, LPD uses
		<filename>/dev/lp</filename> as a default.
		<filename>/dev/lp</filename> currently does not exist in
		FreeBSD.</para>
	      
	      <para>If the printer you are installing is connected to a
		parallel port, skip to the section <xref
		  linkend="printing-textfilter" remap="Installing        the
		  Text Filter">.  Otherwise, be sure to follow the
		instructions in the next section.</para>
	      
	    </sect4>
	    
	    <sect4
	      id="printing-commparam">
	      <title>Configuring Spooler Communication Parameters</title>
	      
	      <para> For printers on serial ports, LPD can set up the bps
		rate, parity, and other serial communication parameters on
		behalf of the filter program that sends data to the printer.
		This is advantageous since
		<itemizedlist>
		  
		  <listitem>
		    <para>It lets you try different communication parameters
		      by simply editing the <filename>/etc/printcap</filename>
		      file; you do not have to recompile the filter program.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>It enables the spooling system to use the same
		      filter program for multiple printers which may have
		      different serial communication settings.</para>
		  </listitem>
		  
		</itemizedlist>
	      </para>
	      
	      <para>The following <filename>/etc/printcap</filename>
		capabilities control serial communication parameters of the
		device listed in the <emphasis remap=tt>lp</emphasis>
		capability:
		<variablelist>
		  <varlistentry><term><emphasis
			remap=tt>br#<replaceable>bps-rate</replaceable></emphasis></term>
		    <listitem>
		      <para>Sets the communications speed of the device to
			<emphasis remap=it>bps-rate</emphasis>, where
			<emphasis remap=it>bps-rate</emphasis> can be 50, 75,
			110, 134, 150, 200, 300, 600, 1200, 1800, 2400, 4800,
			9600, 19200, or 38400 bits-per-second.</para>
		    </listitem>
		  </varlistentry>
		  
		  <varlistentry><term><emphasis
			remap=tt>fc#<replaceable>clear-bits</replaceable></emphasis></term>
		    
		    <listitem>
		      <para>Clears the flag bits <emphasis
			  remap=it>clear-bits</emphasis> in the <emphasis
			  remap=tt>sgttyb</emphasis> structure after opening
			the device.</para>
		    </listitem>
		  </varlistentry>
		  
		  <varlistentry><term><emphasis
			remap=tt>fs#<replaceable>set-bits</replaceable></emphasis></term>
		    
		    <listitem>
		      <para>Sets the flag bits <emphasis
			  remap=it>set-bits</emphasis> in the <emphasis
			  remap=tt>sgttyb</emphasis> structure.</para>
		    </listitem>
		  </varlistentry>
		  
		  <varlistentry><term><emphasis
			remap=tt>xc#<replaceable>clear-bits</replaceable></emphasis></term>
		    
		    <listitem>
		      <para>Clears local mode bits <emphasis
			  remap=it>clear-bits</emphasis> after opening the
			device.</para>
		    </listitem>
		  </varlistentry>
		  
		  <varlistentry><term><emphasis
			remap=tt>xs#<replaceable>set-bits</replaceable></emphasis></term>
		    
		    <listitem>
		      <para>Sets local mode bits <emphasis
			  remap=it>set-bits</emphasis>.</para>
		      
		    </listitem>
		  </varlistentry>
		</variablelist> For more information on the bits for the
		<emphasis remap=tt>fc</emphasis>, <emphasis
		  remap=tt>fs</emphasis>, <emphasis remap=tt>xc</emphasis>,
		and <emphasis remap=tt>xs</emphasis> capabilities, see the
		file
		<filename>/usr/include/sys/ioctl_compat.h</filename>.</para>
	      
	      <para>When LPD opens the device specified by the <emphasis
		  remap=tt>lp</emphasis> capability, it reads the flag bits in
		the <emphasis remap=tt>sgttyb</emphasis> structure; it clears
		any bits in the <emphasis remap=tt>fc</emphasis> capability,
		then sets bits in the <emphasis remap=tt>fs</emphasis>
		capability, then applies the resultant setting.  It does the
		same for the local mode bits as well.</para>
	      
	      <para>Let us add to our example printer on the sixth serial
		port.  We will set the bps rate to 38400. For the flag bits,
		we will set the TANDEM, ANYP, LITOUT, FLUSHO, and PASS8 flags.
		For the local mode bits, we will set the LITOUT and PASS8
		flags:
		<informalexample>
		  <screen>bamboo|ps|PS|S|panasonic|Panasonic KX-P4455
		    PostScript v51.4:\ :sh:sd=/var/spool/lpd/bamboo:\
		    :lp=/dev/ttyd5:fs#0x82000c1:xs#0x820:</screen>
		</informalexample>
	      </para>
	      
	    </sect4>
	    
	    <sect4
	      id="printing-textfilter">
	      <title>Installing the Text Filter</title>
	      
	      <para> We are now ready to tell LPD what text filter to use to
		send jobs to the printer.  A <emphasis>text filter</emphasis>,
		also known as an <emphasis>input filter</emphasis>, is a
		program that LPD runs when it has a job to print.  When LPD
		runs the text filter for a printer, it sets the filter's
		standard input to the job to print, and its standard output to
		the printer device specified with the <emphasis
		  remap=tt>lp</emphasis> capability.  The filter is expected
		to read the job from standard input, perform any necessary
		translation for the printer, and write the results to standard
		output, which will get printed.  For more information on the
		text filter, see section <xref
		  linkend="printing-advanced-filters"
		  remap="Filters">.</para>
	      
	      <para>For our simple printer setup, the text filter can be a
		small shell script that just executes
		<filename>/bin/cat</filename> to send the job to the printer.
		FreeBSD comes with another filter called <emphasis
		  remap=tt>lpf</emphasis> that handles backspacing and
		underlining for printers that might not deal with such
		character streams well.  And, of course, you can use any other
		filter program you want.  The filter <emphasis
		  remap=tt>lpf</emphasis> is described in detail in section
		<xref linkend="printing-advanced-lpf" remap="lpf: a
		  Text Filter">.</para>
	      
	      <para>First, let us make the shell script
		<filename>/usr/local/libexec/if-simple</filename> be a simple
		text filter. Put the following text into that file with your
		favorite text editor:
		<informalexample>
		  <programlisting>#!/bin/sh # # if-simple - Simple text input
		    filter for lpd # Installed in /usr/local/libexec/if-simple
		    # # Simply copies stdin to stdout.  Ignores all filter
		    arguments. /bin/cat &amp;&amp; exit 0 exit
		    2</programlisting>
		</informalexample> Make the file executable:
		<informalexample>
		  <screen>chmod 555 /usr/local/libexec/if-simple</screen>
		</informalexample>
	      </para>
	      
	      <para>And then tell LPD to use it by specifying it with the
		<emphasis remap=tt>if</emphasis> capability in
		<filename>/etc/printcap</filename>.  We will add it to the two
		printers we have so far in the example
		<filename>/etc/printcap</filename>:
		<informalexample>
		  <programlisting># #  /etc/printcap for host rose - added
		    text filter # rattan|line|diablo|lp|Diablo 630 Line
		    Printer:\ :sh:sd=/var/spool/lpd/rattan:\ :lp=/dev/lpt0:\
		    :if=/usr/local/libexec/if-simple:
		    bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript
		    v51.4:\ :sh:sd=/var/spool/lpd/bamboo:\
		    :lp=/dev/ttyd5:fs#0x82000e1:xs#0x820:\
		    :if=/usr/local/libexec/if-simple:</programlisting>
		</informalexample>
	      </para>
	      
	    </sect4>
	    
	    <sect4
	      id="printing-trying">
	      <title>Trying It Out</title>
	      
	      <para> You have reached the end of the simple LPD setup.
		Unfortunately, congratulations are not quite yet in order,
		since we still have to test the setup and correct any
		problems.  To test the setup, try printing something.  To
		print with the LPD system, you use the command  <ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink>,
		which submits a job for printing.</para>
	      
	      <para>You can combine  <ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink>
		with the  <ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?lptest">lptest</ulink> program, introduced in section <xref linkend="printing-testing"
		  remap="Checking Printer Communications"> to generate some
		test text.</para>
	      
	      <para><emphasis remap=bf>To test the simple LPD
		  setup:</emphasis></para>
	      
	      <para> Type:
		<informalexample>
		  <screen><command>lptest 20 5 | lpr
		      -P<replaceable>printer-name</replaceable></command></screen>
		</informalexample> where <emphasis
		  remap=it>printer-name</emphasis> is a the name of a printer
		(or an alias) specified in <filename>/etc/printcap</filename>.
		To test the default printer, type  <ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink>
		without any <option>-P</option> argument.  Again, if you are
		testing a printer that expects PostScript, send a PostScript
		program in that language instead of using  <ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?lptest">lptest</ulink>.  You can do so by putting the program in a file and typing <emphasis remap=tt>lpr <replaceable>file</replaceable></emphasis>.</para>
	      
	      <para>For a PostScript printer, you should get the results of
		the program.  If you are using  <ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?lptest">lptest</ulink>, then your results should look like the following:</para>
	      
	      <para>
		<informalexample>
		  <screen>!"#$%&amp;'()*+,-./01234 "#$%&amp;'()*+,-./012345
		    #$%&amp;'()*+,-./0123456 $%&amp;'()*+,-./01234567
		    %&amp;'()*+,-./012345678</screen>
		</informalexample>
	      </para>
	      
	      <para>To further test the printer, try downloading larger
		programs (for language-based printers) or running</para>
	      
	      <para><ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?lptest">lptest</ulink> with different arguments.  For example, <emphasis remap=tt>lptest 80 60</emphasis> will produce 60 lines of 80 characters each.</para>
	      
	      <para>If the printer did not work, see the next section, <xref
		  linkend="printing-troubleshooting"
		  remap="Troubleshooting">.</para>
	      
	    </sect4>
	    
	    <sect4
	      id="printing-troubleshooting">
	      <title>Troubleshooting</title>
	      
	      <para> After performing the simple test with  <ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?lptest">lptest</ulink>, you might have gotten one of the following results instead of the correct printout:
		<variablelist>
		  <varlistentry><term>It worked, after awhile; or, it did not
		      eject a full sheet.</term>
		    <listitem>
		      <para>The printer printed the above, but it sat for
			awhile and did nothing.  In fact, you might have
			needed to press a PRINT REMAINING or FORM FEED button
			on the printer to get any results to appear.</para>
		      
		      <para>If this is the case, the printer was probably
			waiting to see if there was any more data for your job
			before it printed anything.  To fix this problem, you
			can have the text filter send a FORM FEED character
			(or whatever is necessary) to the printer.  This is
			usually sufficient to have the printer immediately
			print any text remaining in its internal buffer.  It
			is also useful to make sure each print job ends on a
			full sheet, so the next job does not start somewhere
			on the middle of the last page of the previous
			job.</para>
		      
		      <para>The following replacement for the shell script
			<filename>/usr/local/libexec/if-simple</filename>
			prints a form feed after it sends the job to the
			printer:
			<informalexample>
			  <programlisting>#!/bin/sh # # if-simple - Simple
			    text input filter for lpd # Installed in
			    /usr/local/libexec/if-simple # # Simply copies
			    stdin to stdout.  Ignores all filter arguments. #
			    Writes a form feed character (\f) after printing
			    job. /bin/cat &amp;&amp; printf "\f" &amp;&amp;
			    exit 0 exit 2</programlisting>
			</informalexample>
		      </para>
		    </listitem>
		  </varlistentry>
		  
		  <varlistentry><term>It produced the ``staircase
		      effect.''</term>
		    
		    <listitem>
		      <para>You got the following on paper:
			<informalexample>
			  <screen>!"#$%&amp;'()*+,-./01234
			    "#$%&amp;'()*+,-./012345
			    #$%&amp;'()*+,-./0123456</screen>
			</informalexample> You have become another victim of
			the <emphasis>staircase effect</emphasis>, caused by
			conflicting interpretations of what characters should
			indicate a new-line. UNIX-style operating systems use
			a single character: ASCII code 10, the line feed (LF).
			MS-DOS, OS/2, and others uses a pair of characters,
			ASCII code 10 <emphasis>and</emphasis> ASCII code 13
			(the carriage return or CR). Many printers use the
			MS-DOS convention for representing new-lines.</para>
		      
		      <para>When you print with FreeBSD, your text used just
			the line feed character.  The printer, upon seeing a
			line feed character, advanced the paper one line, but
			maintained the same horizontal position on the page
			for the next character to print.  That is what the
			carriage return is for: to move the location of the
			next character to print to the left edge of the
			paper.</para>
		      
		      <para>Here is what FreeBSD wants your printer to do:
			<informalexample>
			  <screen>Printer received CR		Printer prints
			    CR Printer received LF		Printer prints
			    CR + LF</screen>
			</informalexample>
		      </para>
		      
		      <para>Here are some ways to achieve this:
			<itemizedlist>
			  
			  <listitem>
			    <para>Use the printer's configuration switches or
			      control panel to alter its interpretation of
			      these characters.  Check your printer's manual
			      to find out how to do this.
			      
			    </para>
			    
			    <para> <emphasis>Note:</emphasis> If you boot your
			      system into other operating systems besides
			      FreeBSD, you may have to
			      <emphasis>reconfigure</emphasis> the printer to
			      use a an interpretation for CR and LF characters
			      that those other operating systems use.  You
			      might prefer one of the other solutions,
			      below.</para>
			  </listitem>
			  
			  <listitem>
			    <para>Have FreeBSD's serial line driver
			      automatically convert LF to CR+LF. Of course,
			      this works with printers on serial ports
			      <emphasis>only</emphasis>.  To enable this
			      feature, set the CRMOD bit in <emphasis
				remap=tt>fs</emphasis> capability in the
			      <filename>/etc/printcap</filename> file for the
			      printer.
			    </para>
			  </listitem>
			  
			  <listitem>
			    <para>Send an <emphasis>escape code</emphasis> to
			      the printer to have it temporarily treat LF
			      characters differently.  Consult your printer's
			      manual for escape codes that your printer might
			      support. When you find the proper escape code,
			      modify the text filter to send the code first,
			      then send the print job.
			      
			    </para>
			    
			    <para> Here is an example text filter for printers
			      that understand the Hewlett-Packard PCL escape
			      codes.  This filter makes the printer treat LF
			      characters as a LF and CR; then it sends the
			      job; then it sends a form feed to eject the last
			      page of the job.  It should work with nearly all
			      Hewlett Packard printers.</para>
			    
			    <para>
			      <informalexample>
				<programlisting>#!/bin/sh # # hpif - Simple
				  text input filter for lpd for HP-PCL based
				  printers # Installed in
				  /usr/local/libexec/hpif # # Simply copies
				  stdin to stdout.  Ignores all filter
				  arguments. # Tells printer to treat LF as
				  CR+LF. Writes a form feed character # after
				  printing job. printf "\033&amp;k2G"
				  &amp;&amp; cat &amp;&amp; printf "\f"
				  &amp;&amp; exit 0 exit 2</programlisting>
			      </informalexample>
			    </para>
			    
			    <para>Here is an example
			      <filename>/etc/printcap</filename> from a host
			      called orchid.  It has a single printer attached
			      to its first parallel port, a Hewlett Packard
			      LaserJet 3Si named <emphasis
				remap=tt>teak</emphasis>.  It is using the
			      above script as its text filter:
			      <informalexample>
				<programlisting># #  /etc/printcap for host
				  orchid # teak|hp|laserjet|Hewlett Packard
				  LaserJet 3Si:\
				  :lp=/dev/lpt0:sh:sd=/var/spool/lpd/teak:mx#0:\ :if=/usr/local/libexec/hpif:</programlisting>
			      </informalexample>
			    </para>
			  </listitem>
			  
			</itemizedlist>
		      </para>
		    </listitem>
		  </varlistentry>
		  
		  <varlistentry><term>It overprinted each line.</term>
		    
		    <listitem>
		      <para>The printer never advanced a line.  All of the
			lines of text were printed on top of each other on one
			line.</para>
		      
		      <para>This problem is the ``opposite'' of the staircase
			effect, described above, and is much rarer. Somewhere,
			the LF characters that FreeBSD uses to end a line are
			being treated as CR characters to return the print
			location to the left edge of the paper, but not also
			down a line.</para>
		      
		      <para>Use the printer's configuration switches or
			control panel to enforce the following interpretation
			of LF and CR characters:
			<informalexample>
			  <screen>Printer received CR		Printer prints
			    CR Printer received LF		Printer prints
			    CR + LF</screen>
			</informalexample>
		      </para>
		    </listitem>
		  </varlistentry>
		  
		  <varlistentry><term>The printer lost characters.</term>
		    
		    <listitem>
		      <para>While printing, the printer did not print a few
			characters in each line.  The problem might have
			gotten worse as the printer ran, losing more and more
			characters.</para>
		      
		      <para>The problem is that the printer cannot keep up
			with the speed at which the computer sends data over a
			serial line.  (This problem should not occur with
			printers on parallel ports.)  There are two ways to
			overcome the problem:
			<itemizedlist>
			  
			  <listitem>
			    <para>If the printer supports XON/XOFF flow
			      control, have FreeBSD use it by specifying the
			      TANDEM bit in the <emphasis
				remap=tt>fs</emphasis> capability.
			    </para>
			  </listitem>
			  
			  <listitem>
			    <para>If the printer supports carrier flow
			      control, specify the MDMBUF bit in the <emphasis
				remap=tt>fs</emphasis> capability.  Make sure
			      the cable connecting the printer to the computer
			      is correctly wired for carrier flow control.
			    </para>
			  </listitem>
			  
			  <listitem>
			    <para>If the printer does not support any flow
			      control, use some combination of the NLDELAY,
			      TBDELAY, CRDELAY, VTDELAY, and BSDELAY bits in
			      the <emphasis remap=tt>fs</emphasis> capability
			      to add appropriate delays to the stream of data
			      sent to the printer.</para>
			  </listitem>
			  
			</itemizedlist>
		      </para>
		    </listitem>
		  </varlistentry>
		  
		  <varlistentry><term>It printed garbage.</term>
		    
		    <listitem>
		      <para>The printer printed what appeared to be random
			garbage, but not the desired text.</para>
		      
		      <para>This is usually another symptom of incorrect
			communications parameters with a serial printer.
			Double-check the bps rate in the <emphasis
			  remap=tt>br</emphasis> capability, and the parity
			bits in the <emphasis remap=tt>fs</emphasis> and
			<emphasis remap=tt>fc</emphasis> capabilities; make
			sure the printer is using the same settings as
			specified in the <filename>/etc/printcap</filename>
			file.</para>
		    </listitem>
		  </varlistentry>
		  
		  <varlistentry><term>Nothing happened.</term>
		    
		    <listitem>
		      <para>If nothing happened, the problem is probably
			within FreeBSD and not the hardware.  Add the log file
			(<emphasis remap=tt>lf</emphasis>) capability to the
			entry for the printer you are debugging in the
			<filename>/etc/printcap</filename> file. For example,
			here is the entry for <emphasis
			  remap=tt>rattan</emphasis>, with the <emphasis
			  remap=tt>lf</emphasis> capability:
			<informalexample>
			  <screen>rattan|line|diablo|lp|Diablo 630 Line
			    Printer:\ :sh:sd=/var/spool/lpd/rattan:\
			    :lp=/dev/lpt0:\ :if=/usr/local/libexec/if-simple:\
			    :lf=/var/log/rattan.log</screen>
			</informalexample> Then, try printing again.  Check
			the log file (in our example,
			<filename>/var/log/rattan.log</filename>) to see any
			error messages that might appear.  Based on the
			messages you see, try to correct the problem.</para>
		      
		      <para>If you do not specify a <emphasis
			  remap=tt>lf</emphasis> capability, LPD uses
			<filename>/dev/console</filename> as a default.</para>
		      
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </para>
	      
	    </sect4>
	  </sect3>
	</sect2>
      </sect1>
      
      <sect1
	id="printing-using">
	<title>Using Printers</title>
	
	<para> This section tells you how to use printers you have setup with
	  FreeBSD.  Here is an overview of the user-level commands:
	  <variablelist>
	    <varlistentry><term><ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink></term>
	      <listitem>
		<para>Print jobs</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?lpq">lpq</ulink></term>
	      
	      <listitem>
		<para>Check printer queues</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?lprm">lprm</ulink></term>
	      
	      <listitem>
		<para>Remove jobs from a printer's queue</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
	
	<para>There is also an administrative command,  <ulink
	    URL="http://www.freebsd.org/cgi/man.cgi?lpc">lpc</ulink>,
	  described in the section <xref linkend="printing-lpc"
	    remap="Administrating the
	    LPD Spooler">, used to control printers and their queues.</para>
	
	<para>All three of the commands  <ulink
	    URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink>,  <ulink
	    URL="http://www.freebsd.org/cgi/man.cgi?lprm">lprm</ulink>, and
	  <ulink URL="http://www.freebsd.org/cgi/man.cgi?lpq">lpq</ulink>
	  accept an option ``<option>-P</option> <emphasis
	    remap=it>printer-name</emphasis>'' to specify on which
	  printer/queue to operate, as listed in the
	  <filename>/etc/printcap</filename> file.  This enables you to
	  submit, remove, and check on jobs for various printers.  If you do
	  not use the <option>-P</option> option, then these commands use the
	  printer specified in the PRINTER environment variable.  Finally, if
	  you do not have a PRINTER environment variable, these commands
	  default to the printer named <emphasis
	    remap=tt>lp</emphasis>.</para>
	
	<para>Hereafter, the terminology <emphasis>default printer</emphasis>
	  means the printer named in the PRINTER environment variable, or the
	  printer named <emphasis remap=tt>lp</emphasis> when there is no
	  PRINTER environment variable.</para>
	
	
	<sect2
	  id="printing-lpr">
	  <title>Printing Jobs</title>
	  
	  <para>To print files, type
	    <informalexample>
	      <screen><emphasis remap=tt>lpr
		  <replaceable>filename...</replaceable></emphasis></screen>
	    </informalexample> This prints each of the listed files to the
	    default printer. If you list no files,  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink> reads
	    data to print from standard input.  For example, this command
	    prints some important system files:
	    <informalexample>
	      <screen>lpr /etc/host.conf /etc/hosts.equiv</screen>
	    </informalexample> To select a specific printer, type
	    <informalexample>
	      <screen><command>lpr -P <replaceable>printer-name</replaceable>
		  <replaceable>filename...</replaceable></command></screen>
	    </informalexample> This example prints a long listing of the
	    current directory to the printer named <emphasis
	      remap=tt>rattan</emphasis>:
	    <informalexample>
	      <screen>ls -l | lpr -P rattan</screen>
	    </informalexample> Because no files were listed for the  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink>
	    command, <emphasis remap=tt>lpr</emphasis> read the data to print
	    from standard input, which was the output of the <command>ls
	      -l</command> command.</para>
	  
	  <para>The <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink> command
	    can also accept a wide variety of options to control formatting,
	    apply file conversions, generate multiple copies, and so forth.
	    For more information, see the section <xref
	      linkend="printing-lpr-options"
	      remap="Printing Options">.</para>
	  
	</sect2>
	
	<sect2
	  id="printing-lpq">
	  <title>Checking Jobs</title>
	  
	  <para> When you print with  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink>, the
	    data you wish to print is put together in a package called a
	    <emphasis>print job</emphasis>, which is sent to the LPD spooling
	    system.  Each printer has a queue of jobs, and your job waits in
	    that queue along with other jobs from yourself and from other
	    users. The printer prints those jobs in a first-come, first-served
	    order.</para>
	  
	  <para>To display the queue for the default printer, type  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpq">lpq</ulink>. For a
	    specific printer, use the <option>-P</option> option.  For
	    example, the command
	    <informalexample>
	      <screen>lpq -P bamboo</screen>
	    </informalexample> shows the queue for the printer named <emphasis
	      remap=tt>bamboo</emphasis>.  Here is an example of the output of
	    the <emphasis remap=tt>lpq</emphasis> command:
	    <informalexample>
	      <screen>bamboo is ready and printing Rank  Owner	Job  Files
		Total Size active kelly    9    /etc/host.conf,
		/etc/hosts.equiv   88 bytes 2nd    kelly    10   (standard
		input)                   1635 bytes 3rd    mary     11   ...
		78519 bytes</screen>
	    </informalexample> This shows three jobs in the queue for
	    <emphasis remap=tt>bamboo</emphasis>.  The first job, submitted by
	    user kelly, got assigned <emphasis>job number</emphasis> 9.  Every
	    job for a printer gets a unique job number.  Most of the time you
	    can ignore the job number, but you will need it if you want to
	    cancel the job; see section
	    <xref linkend="printing-lprm" remap="Removing Jobs"> for
	    details.</para>
	  
	  <para>Job number nine consists of two files; multiple files given on
	    the  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink> command
	    line are treated as part of a single job.  It is the currently
	    active job (note the word <emphasis remap=tt>active</emphasis>
	    under the ``Rank'' column), which means the printer should be
	    currently printing that job.  The second job consists of data
	    passed as the standard input to the</para>
	  
	  <para><ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink>
	    command. The third job came from user mary; it is a much larger
	    job.  The pathname of the files she's trying to print is too long
	    to fit, so the  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpq">lpq</ulink> command
	    just shows three dots.</para>
	  
	  <para>The very first line of the output from  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpq">lpq</ulink> is also
	    useful: it tells what the printer is currently doing (or at least
	    what LPD thinks the printer is doing).</para>
	  
	  <para>The  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpq">lpq</ulink> command
	    also support a <option>-l</option> option to generate a detailed
	    long listing. Here is an example of <command>lpq -l</command>:
	    <informalexample>
	      <screen>waiting for bamboo to become ready (offline ?) kelly:
		1st				 [job 009rose] /etc/host.conf
		73 bytes /etc/hosts.equiv		         15 bytes
		kelly: 2nd				 [job 010rose]
		(standard input)		         1635 bytes mary: 3rd
		[job 011rose]
		/home/orchid/mary/research/venus/alpha-regio/mapping 78519
		bytes</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2
	  id="printing-lprm">
	  <title>Removing Jobs</title>
	  
	  <para> If you change your mind about printing a job, you can remove
	    the job from the queue with the  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lprm">lprm</ulink>
	    command. Often, you can even use  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lprm">lprm</ulink> to
	    remove an active job, but some or all of the job might still get
	    printed.</para>
	  
	  <para>To remove a job from the default printer, first use  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpq">lpq</ulink> to find
	    the job number.  Then type
	    <informalexample>
	      <screen><emphasis remap=tt>lprm
		  <replaceable>job-number</replaceable></emphasis></screen>
	    </informalexample> To remove the job from a specific printer, add
	    the <option>-P</option> option.  The following command removes job
	    number 10 from the queue for the printer <emphasis
	      remap=tt>bamboo</emphasis>:
	    <informalexample>
	      <screen>lprm -P bamboo 10</screen>
	    </informalexample> The  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lprm">lprm</ulink>
	    command has a few shortcuts:
	    <variablelist>
	      <varlistentry><term>lprm -</term>
		<listitem>
		  <para>Removes all jobs (for the default printer) belonging
		    to you.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>lprm <emphasis
		    remap=it>user</emphasis></term>
		
		<listitem>
		  <para>Removes all jobs (for the default printer) belonging
		    to <emphasis remap=it>user</emphasis>.  The superuser can
		    remove other users' jobs; you can remove only your own
		    jobs.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>lprm</term>
		
		<listitem>
		  <para>With no job number, user name, or
		    ``<option>-</option>'' appearing on the command line,
		    <ulink
		      URL="http://www.freebsd.org/cgi/man.cgi?lprm">lprm</ulink> removes the currently active job on the default printer, if it belongs to you. The superuser can remove any active job.</para>
		  
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	  <para>Just use the <option>-P</option> option with the above
	    shortcuts to operate on a specific printer instead of the default.
	    For example, the following command removes all jobs for the
	    current user in the queue for the printer named <emphasis
	      remap=tt>rattan</emphasis>:</para>
	  
	  <para>
	    <informalexample>
	      <screen>lprm -P rattan -</screen>
	    </informalexample>
	  </para>
	  
	  <para><emphasis>Note:</emphasis> If you are working in a networked
	    environment,</para>
	  
	  <para><ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lprm">lprm</ulink> will
	    let you remove jobs only from the host from which the jobs were
	    submitted, even if the same printer is available from other hosts.
	    The following command sequence demonstrates this:
	    <informalexample>
	      <programlisting>rose% lpr -P rattan myfile rose% rlogin orchid
		orchid% lpq -P rattan Rank   Owner	  Job  Files
		Total Size active seeyan	  12	...
		49123 bytes 2nd    kelly	  13   myfile
		12 bytes orchid% lprm -P rattan 13 rose: Permission denied
		orchid% logout rose% lprm -P rattan 13 dfA013rose dequeued
		cfA013rose dequeued rose% </programlisting>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2
	  id="printing-lpr-options">
	  <title>Beyond Plain Text: Printing Options</title>
	  
	  <para> The  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink> command
	    supports a number of options that control formatting text,
	    converting graphic and other file formats, producing multiple
	    copies, handling of the job, and more.  This section describes the
	    options.</para>
	  
	  
	  <sect3
	    id="printing-lpr-options-format">
	    <title>Formatting and Conversion Options</title>
	    
	    <para> The following  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink>
	      options control formatting of the files in the job.  Use these
	      options if the job does not contain plain text or if you want
	      plain text formatted through the  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?pr">pr</ulink>
	      utility.</para>
	    
	    <para>For example, the following command prints a DVI file (from
	      the TeX typesetting system) named
	      <filename>fish-report.dvi</filename> to the printer named
	      <emphasis remap=tt>bamboo</emphasis>: 
	      <informalexample>
		<screen>lpr -P bamboo -d fish-report.dvi</screen>
	      </informalexample> These options apply to every file in the job,
	      so you cannot mix (say) DVI and ditroff files together in a job.
	      Instead, submit the files as separate jobs, using a different
	      conversion option for each job.</para>
	    
	    <para><emphasis>Note:</emphasis> All of these options except
	      <option>-p</option> and <option>-T</option> require conversion
	      filters installed for the destination printer.  For example, the
	      <option>-d</option> option requires the DVI conversion filter.
	      Section <xref
		linkend="printing-advanced-convfilters" remap="Conversion
		Filters"> gives details.</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term><option>-c</option></term>
		  <listitem>
		    <para>Print cifplot files.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><option>-d</option></term>
		  
		  <listitem>
		    <para>Print DVI files.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><option>-f</option></term>
		  
		  <listitem>
		    <para>Print FORTRAN text files.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><option>-g</option></term>
		  
		  <listitem>
		    <para>Print plot data.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><option>-i
		      <replaceable>number</replaceable></option></term>
		  
		  <listitem>
		    <para>Indent the output by <emphasis
			remap=it>number</emphasis> columns; if you omit
		      <emphasis remap=it>number</emphasis>, indent by 8
		      columns.  This option works only with certain conversion
		      filters.</para>
		    
		    <para><emphasis>Note:</emphasis> Do not put any space
		      between the <option>-i</option> and the number.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><option>-l</option></term>
		  
		  <listitem>
		    <para>Print literal text data, including control
		      characters.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><option>-n</option></term>
		  
		  <listitem>
		    <para>Print ditroff (device independent troff)
		      data.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>-p</term>
		  
		  <listitem>
		    <para>Format plain text with  <ulink
			URL="http://www.freebsd.org/cgi/man.cgi?pr">pr</ulink>
		      before printing.  See <ulink
			URL="http://www.freebsd.org/cgi/man.cgi?pr(1)">pr(1)</ulink> for more information.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><option>-T
		      <replaceable>title</replaceable></option></term>
		  
		  <listitem>
		    <para>Use <emphasis remap=it>title</emphasis> on the
		      <ulink
			URL="http://www.freebsd.org/cgi/man.cgi?pr">pr</ulink>
		      header instead of the file name.  This option has effect
		      only when used with the <option>-p</option>
		      option.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><option>-t</option></term>
		  
		  <listitem>
		    <para>Print troff data.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><option>-v</option></term>
		  
		  <listitem>
		    <para>Print raster data.</para>
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	    <para>Here is an example: this command prints a nicely formatted
	      version of the  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?ls">ls</ulink> manual
	      page on the default printer:
	      <informalexample>
		<screen>zcat /usr/share/man/man1/ls.1.gz | troff -t -man | lpr
		  -t</screen>
	      </informalexample> The  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?zcat">zcat</ulink>
	      command uncompresses the source of the</para>
	    
	    <para><ulink
		URL="http://www.freebsd.org/cgi/man.cgi?ls">ls</ulink> manual
	      page and passes it to the  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?troff">troff</ulink>
	      command, which formats that source and makes GNU troff output
	      and passes it to  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink>,
	      which submits the job to the LPD spooler.  Because we used the
	      <option>-t</option> option to</para>
	    
	    <para><ulink
		URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink>, the
	      spooler will convert the GNU troff output into a format the
	      default printer can understand when it prints the job.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="printing-lpr-options-job-handling">
	    <title>Job Handling Options</title>
	    
	    <para> The following options to  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink> tell
	      LPD to handle the job specially:</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>-# <emphasis
		      remap=it>copies</emphasis></term>
		  <listitem>
		    <para>Produce a number of <emphasis
			remap=it>copies</emphasis> of each file in the job
		      instead of just one copy.  An administrator may disable
		      this option to reduce printer wear-and-tear and
		      encourage photocopier usage.  See section <xref
			linkend="printing-advanced-restricting-copies"
			remap="Restricting Multiple Copies">.</para>

		    <para> This example prints three copies of
		      <filename>parser.c</filename> followed by three copies
		      of <filename>parser.h</filename> to the default printer:
		      <informalexample>
			<screen>lpr -#3 parser.c parser.h</screen>
		      </informalexample>
		    </para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>-m</term>
		  
		  <listitem>
		    <para>Send mail after completing the print job.  With this
		      option, the LPD system will send mail to your account
		      when it finishes handling your job.  In its message, it
		      will tell you if the job completed successfully or if
		      there was an error, and (often) what the error
		      was.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>-s</term>
		  
		  <listitem>
		    <para>Do not copy the files to the spooling directory, but
		      make symbolic links to them instead.</para>
		    
		    <para>If you are printing a large job, you probably want
		      to use this option.  It saves space in the spooling
		      directory (your job might overflow the free space on the
		      filesystem where the spooling directory resides). It
		      saves time as well since LPD will not have to copy each
		      and every byte of your job to the spooling
		      directory.</para>
		    
		    <para>There is a drawback, though: since LPD will refer to
		      the original files directly, you cannot modify or remove
		      them until they have been printed.</para>
		    
		    <para><emphasis>Note:</emphasis> If you are printing to a
		      remote printer, LPD will eventually have to copy files
		      from the local host to the remote host, so the
		      <option>-s</option> option will save space only on the
		      local spooling directory, not the remote.  It is still
		      useful, though.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>-r</term>
		  
		  <listitem>
		    <para>Remove the files in the job after copying them to
		      the spooling directory, or after printing them with the
		      <option>-s</option> option.  Be careful with this
		      option!</para>
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	  </sect3>
	  
	  <sect3
	    id="printing-lpr-options-misc">
	    <title>Header Page Options</title>
	    
	    <para> These options to  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink>
	      adjust the text that normally appears on a job's header page.
	      If header pages are suppressed for the destination printer,
	      these options have no effect.  See section <xref
		linkend="printing-advanced-header-pages" remap="Header Pages">
	      for information about setting up header pages.</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>-C <emphasis
		      remap=it>text</emphasis></term>
		  <listitem>
		    <para>Replace the hostname on the header page with
		      <emphasis remap=it>text</emphasis>.  The hostname is
		      normally the name of the host from which the job was
		      submitted.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>-J <emphasis
		      remap=it>text</emphasis></term>
		  
		  <listitem>
		    <para>Replace the job name on the header page with
		      <emphasis remap=it>text</emphasis>.  The job name is
		      normally the name of the first file of the job, or
		      ``stdin'' if you are printing standard input.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>-h</term>
		  
		  <listitem>
		    <para>Do not print any header page.
		      <emphasis>Note:</emphasis> At some sites, this option
		      may have no effect due to the way header pages are
		      generated.  See <xref
			linkend="printing-advanced-header-pages" remap="Header
			Pages"> for details.</para>
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	  </sect3>
	</sect2>
	
	<sect2
	  id="printing-lpc">
	  <title>Administrating Printers</title>
	  
	  <para> As an administrator for your printers, you have had to
	    install, set up, and test them.  Using the  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpc">lpc</ulink>
	    command, you can interact with your printers in yet more ways.
	    With</para>
	  
	  <para><ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpc">lpc</ulink>, you
	    can</para>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para>Start and stop the printers
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Enable and disable their queues
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Rearrange the order of the jobs in each queue.</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para>First, a note about terminology: if a printer is
	    <emphasis>stopped</emphasis>, it will not print anything in its
	    queue.  Users can still submit jobs, which will wait in the queue
	    until the printer is <emphasis>started</emphasis> or the queue is
	    cleared.</para>
	  
	  <para>If a queue is <emphasis>disabled</emphasis>, no user (except
	    root) can submit jobs for the printer.  An
	    <emphasis>enabled</emphasis> queue allows jobs to be submitted.  A
	    printer can be <emphasis>started</emphasis> for a disabled queue,
	    in which case it will continue to print jobs in the queue until
	    the queue is empty.</para>
	  
	  <para>In general, you have to have root privileges to use the</para>
	  
	  <para><ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpc">lpc</ulink>
	    command.  Ordinary users can use the  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpc">lpc</ulink> command
	    to get printer status and to restart a hung printer only.</para>
	  
	  <para>Here is a summary of the  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpc">lpc</ulink>
	    commands.  Most of the commands takes a <emphasis
	      remap=it>printer-name</emphasis> argument to tell on which
	    printer to operate.  You can use <emphasis remap=tt>all</emphasis>
	    for the <emphasis remap=it>printer-name</emphasis> to mean all
	    printers listed in <filename>/etc/printcap</filename>.</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term><emphasis remap=tt>abort
		    <replaceable>printer-name</replaceable></emphasis></term>
		<listitem>
		  <para>Cancel the current job and stop the printer.  Users
		    can still submit jobs if the queue's enabled.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term><emphasis remap=tt>clean
		    <replaceable>printer-name</replaceable></emphasis></term>
		
		<listitem>
		  <para>Remove old files from the printer's spooling
		    directory. Occasionally, the files that make up a job are
		    not properly removed by LPD, particularly if there have
		    been errors during printing or a lot of administrative
		    activity.  This command finds files that do not belong in
		    the spooling directory and removes them.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term><emphasis remap=tt>disable
		    <replaceable>printer-name</replaceable></emphasis></term>
		
		<listitem>
		  <para>Disable queuing of new jobs.  If the printer's
		    started, it will continue to print any jobs remaining in
		    the queue.  The superuser (root) can always submit jobs,
		    even to a disabled queue.</para>
		  
		  <para>This command is useful while you are testing a new
		    printer or filter installation: disable the queue and
		    submit jobs as root.  Other users will not be able to
		    submit jobs until you complete your testing and re-enable
		    the queue with the <emphasis remap=tt>enable</emphasis>
		    command.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term><emphasis remap=tt>down
		    <replaceable>printer-name</replaceable>
		    <replaceable>message...</replaceable></emphasis></term>
		
		<listitem>
		  <para>Take a printer down.  Equivalent to <emphasis
		      remap=tt>disable</emphasis> followed by <emphasis
		      remap=tt>stop</emphasis>.  The <emphasis
		      remap=it>message</emphasis> appears as the printer's
		    status whenever a user checks the printer's queue with
		    <ulink
		      URL="http://www.freebsd.org/cgi/man.cgi?lpq">lpq</ulink>
		    or status with <emphasis remap=tt>lpc
		      status</emphasis>.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term><emphasis remap=tt>enable
		    <replaceable>printer-name</replaceable></emphasis></term>
		
		<listitem>
		  <para>Enable the queue for a printer.  Users can submit jobs
		    but the printer will not print anything until it is
		    started.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term><emphasis remap=tt>help
		    <replaceable>command-name</replaceable></emphasis></term>
		
		<listitem>
		  <para>Print help on the command <emphasis
		      remap=it>command-name</emphasis>.  With no <emphasis
		      remap=it>command-name</emphasis>, print a summary of the
		    commands available.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term><emphasis remap=tt>restart
		    <replaceable>printer-name</replaceable></emphasis></term>
		
		<listitem>
		  <para>Start the printer.  Ordinary users can use this
		    command if some extraordinary circumstance hangs LPD, but
		    they cannot start a printer stopped with either the
		    <emphasis remap=tt>stop</emphasis> or <emphasis
		      remap=tt>down</emphasis> commands.  The <emphasis
		      remap=tt>restart</emphasis> command is equivalent to
		    <emphasis remap=tt>abort</emphasis> followed by <emphasis
		      remap=tt>start</emphasis>.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term><emphasis remap=tt>start
		    <replaceable>printer-name</replaceable></emphasis></term>
		
		<listitem>
		  <para>Start the printer.  The printer will print jobs in its
		    queue.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term><emphasis remap=tt>stop
		    <replaceable>printer-name</replaceable></emphasis></term>
		
		<listitem>
		  <para>Stop the printer.  The printer will finish the current
		    job and will not print anything else in its queue.  Even
		    though the printer is stopped, users can still submit jobs
		    to an enabled queue.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term><emphasis remap=tt>topq
		    <replaceable>printer-name</replaceable>
		    <replaceable>job-or-username...</replaceable></emphasis></term>
		
		<listitem>
		  <para>Rearrange the queue for <emphasis
		      remap=it>printer-name</emphasis> by placing the jobs
		    with the listed <emphasis remap=it>job</emphasis> numbers
		    or the jobs belonging to <emphasis
		      remap=it>username</emphasis> at the top of the queue.
		    For this command, you cannot use <emphasis
		      remap=tt>all</emphasis> as the <emphasis
		      remap=it>printer-name</emphasis>.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term><emphasis remap=tt>up
		    <replaceable>printer-name</replaceable></emphasis></term>
		
		<listitem>
		  <para>Bring a printer up; the opposite of the <emphasis
		      remap=tt>down</emphasis> command.  Equivalent to
		    <emphasis remap=tt>start</emphasis> followed by <emphasis
		      remap=tt>enable</emphasis>.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	  <para><ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpc">lpc</ulink> accepts
	    the above commands on the command line.  If you do not enter any
	    commands,  <ulink
	      URL="http://www.freebsd.org/cgi/man.cgi?lpc">lpc</ulink> enters
	    an interactive mode, where you can enter commands until you type
	    <emphasis remap=tt>exit</emphasis>, <emphasis
	      remap=tt>quit</emphasis>, or end-of-file.</para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="printing-advanced">
	<title>Advanced Printer Setup</title>
	
	<para> This section describes filters for printing specially formatted
	  files, header pages, printing across networks, and restricting and
	  accounting for printer usage.</para>
	
	
	<sect2
	  id="printing-advanced-filter-intro">
	  <title>Filters</title>
	  
	  <para> Although LPD handles network protocols, queuing, access
	    control, and other aspects of printing, most of the
	    <emphasis>real</emphasis> work happens in the
	    <emphasis>filters</emphasis>.  Filters are programs that
	    communicate with the printer and handle its device dependencies
	    and special requirements.  In the simple printer setup, we
	    installed a plain text filter---an extremely simple one that
	    should work with most printers (section <xref
	      linkend="printing-textfilter" remap="Installing the
	      Text Filter">).</para>
	  
	  <para>However, in order to take advantage of format conversion,
	    printer accounting, specific printer quirks, and so on, you should
	    understand how filters work.  It will ultimately be the filter's
	    responsibility to handle these aspects.  And the bad news is that
	    most of the time <emphasis>you</emphasis> have to provide filters
	    yourself.  The good news is that many are generally available;
	    when they are not, they are usually easy to write.</para>
	  
	  <para>Also, FreeBSD comes with one,
	    <filename>/usr/libexec/lpr/lpf</filename>, that works with many
	    printers that can print plain text. (It handles backspacing and
	    tabs in the file, and does accounting, but that is about all it
	    does.)  There are also several filters and filter components in
	    the FreeBSD ports collection.</para>
	  
	  <para>Here is what you will find in this section:</para>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para>Section <xref linkend="printing-advanced-filters"
		    remap="How Filters Work">, tries to give an overview of a
		  filter's role in the printing process.  You should read this
		  section to get an understanding of what is happening ``under
		  the hood'' when LPD uses filters.  This knowledge could help
		  you anticipate and debug problems you might encounter as you
		  install more and more filters on each of your printers.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>LPD expects every printer to be able to print plain text
		  by default.  This presents a problem for PostScript (or
		  other language-based printers) which cannot directly print
		  plain text.  Section <xref
		    linkend="printing-advanced-if-conversion"
		    remap="Accommodating        Plain Text Jobs on PostScript
		    Printers"> tells you what you should do to overcome this
		  problem.  I recommend reading this section if you have a
		  PostScript printer.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>PostScript is a popular output format for many programs.
		  Even some people (myself included) write PostScript code
		  directly.  But PostScript printers are expensive.  Section
		  <xref linkend="printing-advanced-ps"
		    remap="Simulating PostScript on Non-PostScript Printers">
		  tells how you can further modify a printer's text filter to
		  accept and print PostScript data on a
		  <emphasis>non-PostScript</emphasis> printer.  I recommend
		  reading this section if you do not have a PostScript
		  printer.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Section <xref linkend="printing-advanced-convfilters"
		    remap="Conversion Filters"> tells about a way you can
		  automate the conversion of specific file formats, such as
		  graphic or typesetting data, into formats your printer can
		  understand.  After reading this section, you should be able
		  to set up your printers such that users can type
		  <command>lpr -t</command> to print troff data, or
		  <command>lpr -d</command> to print TeX DVI data, or
		  <command>lpr -v</command> to print raster image data, and so
		  forth.  I recommend reading this section.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Section <xref linkend="printing-advanced-of"
		    remap="Output   Filters"> tells all about a not often used
		  feature of LPD: output filters.  Unless you are printing
		  header pages (see <xref
		    linkend="printing-advanced-header-pages"
		    remap="Header Pages">), you can probably skip that section
		  altogether.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Section <xref linkend="printing-advanced-lpf"
		    remap="lpf:   a Text Filter"> describes <emphasis
		    remap=tt>lpf</emphasis>, a fairly complete if simple text
		  filter for line printers (and laser printers that act like
		  line printers) that comes with FreeBSD.  If you need a quick
		  way to get printer accounting working for plain text, or if
		  you have a printer which emits smoke when it sees backspace
		  characters, you should definitely consider <emphasis
		    remap=tt>lpf</emphasis>.</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  
	  <sect3
	    id="printing-advanced-filters">
	    <title>How Filters Work</title>
	    
	    <para> As mentioned before, a filter is an executable program
	      started by LPD to handle the device-dependent part of
	      communicating with the printer.</para>
	    
	    <para>When LPD wants to print a file in a job, it starts a filter
	      program.  It sets the filter's standard input to the file to
	      print, its standard output to the printer, and its standard
	      error to the error logging file (specified in the <emphasis
		remap=tt>lf</emphasis> capability in
	      <filename>/etc/printcap</filename>, or
	      <filename>/dev/console</filename> by default).</para>
	    
	    <para>Which filter LPD starts and the filter's arguments depend on
	      what is listed in the <filename>/etc/printcap</filename> file
	      and what arguments the user specified for the job on the</para>
	    
	    <para><ulink
		URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink>
	      command line.  For example, if the user typed <command>lpr
		-t</command>, LPD would start the troff filter, listed in the
	      <emphasis remap=tt>tf</emphasis> capability for the destination
	      printer.  If the user wanted to print plain text, it would start
	      the <emphasis remap=tt>if</emphasis> filter (this is mostly
	      true:
	      see <xref linkend="printing-advanced-of" remap="Output Filters">
	      for details).</para>
	    
	    <para>There are three kinds of filters you can specify in
	      <filename>/etc/printcap</filename>:
	      <itemizedlist>
		
		<listitem>
		  <para>The <emphasis>text filter</emphasis>, confusingly
		    called the <emphasis>input filter</emphasis> in LPD
		    documentation, handles regular text printing.  Think of it
		    as the default filter.  LPD expects every printer to be
		    able to print plain text by default, and it is the text
		    filter's job to make sure backspaces, tabs, or other
		    special characters do not confuse the printer. If you are
		    in an environment where you have to account for printer
		    usage, the text filter must also account for pages
		    printed, usually by counting the number of lines printed
		    and comparing that to the number of lines per page the
		    printer supports. The text filter is started with the
		    following argument list:
		    <informalexample>
		      <screen><command>[-c] -w<replaceable>width</replaceable>
			  -l<replaceable>length</replaceable>
			  -i<replaceable>indent</replaceable> -n
			  <replaceable>login</replaceable> -h
			  <replaceable>host</replaceable>
			  <replaceable>acct-file</replaceable></command></screen>
		    </informalexample> where
		    <variablelist>
		      <varlistentry><term><option>-c</option></term>
			<listitem>
			  <para>appears if the job's submitted with
			    <command>lpr -l</command></para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term><emphasis
			    remap=tt><replaceable>width</replaceable></emphasis></term>
			
			<listitem>
			  <para>is the value from the <emphasis
			      remap=tt>pw</emphasis> (page width) capability
			    specified in <filename>/etc/printcap</filename>,
			    default 132</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term><emphasis
			    remap=tt><replaceable>length</replaceable></emphasis></term>
			
			<listitem>
			  <para>is the value from the <emphasis
			      remap=tt>pl</emphasis> (page length) capability,
			    default 66</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term><emphasis
			    remap=tt><replaceable>indent</replaceable></emphasis></term>
			
			<listitem>
			  <para>is the amount of the indentation from
			    <command>lpr -i</command>, default 0</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term><emphasis
			    remap=tt><replaceable>login</replaceable></emphasis></term>
			
			<listitem>
			  <para>is the account name of the user printing the
			    file</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term><emphasis
			    remap=tt><replaceable>host</replaceable></emphasis></term>
			
			<listitem>
			  <para>is the host name from which the job was
			    submitted</para>
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term><emphasis
			    remap=tt><replaceable>acct-file</replaceable></emphasis></term>
			
			<listitem>
			  <para>is the name of the accounting file from the
			    <emphasis remap=tt>af</emphasis>
			    capability.</para>
			</listitem>
		      </varlistentry>
		    </variablelist>
		    
		  </para>
		</listitem>
		
		<listitem>
		  <para>A <emphasis>conversion filter</emphasis> converts a
		    specific file format into one the printer can render onto
		    paper. For example, ditroff typesetting data cannot be
		    directly printed, but you can install a conversion filter
		    for ditroff files to convert the ditroff data into a form
		    the printer can digest and print.  Section
		    <xref linkend="printing-advanced-convfilters"
		      remap="Conversion Filters"> tells all about them.
		    Conversion filters also need to do accounting, if you need
		    printer accounting. Conversion filters are started with
		    the following arguments:
		    <informalexample>
		      <screen><command>-x<replaceable>pixel-width</replaceable> -y<replaceable>pixel-height</replaceable> -n <replaceable>login</replaceable> -h <replaceable>host</replaceable> <replaceable>acct-file</replaceable></command></screen>
		    </informalexample> where <emphasis
		      remap=it>pixel-width</emphasis> is the value from the
		    <emphasis remap=tt>px</emphasis> capability (default 0)
		    and <emphasis remap=it>pixel-height</emphasis> is the
		    value from the <emphasis remap=tt>py</emphasis> capability
		    (default 0).
		  </para>
		</listitem>
		
		<listitem>
		  <para>The <emphasis>output filter</emphasis> is used only if
		    there is no text filter, or if header pages are enabled.
		    In my experience, output filters are rarely used.  Section
		    <xref linkend="printing-advanced-of" remap="Output
		      Filters"> describe them.  There are only two arguments
		    to an output filter:
		    <informalexample>
		      <screen><command>-w<replaceable>width</replaceable>
			  -l<replaceable>length</replaceable></command></screen>
		    </informalexample> which are identical to the text filters
		    <option>-w</option> and <option>-l</option>
		    arguments.</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>Filters should also <emphasis>exit</emphasis> with the
	      following exit status:
	      <variablelist>
		<varlistentry><term>exit 0</term>
		  <listitem>
		    <para>If the filter printed the file successfully.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>exit 1</term>
		  
		  <listitem>
		    <para>If the filter failed to print the file but wants LPD
		      to try to print the file again.  LPD will restart a
		      filter if it exits with this status.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>exit 2</term>
		  
		  <listitem>
		    <para>If the filter failed to print the file and does not
		      want LPD to try again.  LPD will throw out the
		      file.</para>
		    
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	    <para>The text filter that comes with the FreeBSD release,
	      <filename>/usr/libexec/lpr/lpf</filename>, takes advantage of
	      the page width and length arguments to determine when to send a
	      form feed and how to account for printer usage.  It uses the
	      login, host, and accounting file arguments to make the
	      accounting entries.</para>
	    
	    <para>If you are shopping for filters, see if they are
	      LPD-compatible.  If they are, they must support the argument
	      lists described above.  If you plan on writing filters for
	      general use, then have them support the same argument lists and
	      exit codes.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="printing-advanced-if-conversion">
	    <title>Accommodating Plain Text Jobs on PostScript Printers
	    </title>
	    
	    <para> If you are the only user of your computer and PostScript
	      (or other language-based) printer, and you promise to never send
	      plain text to your printer and to never use features of various
	      programs that will want to send plain text to your printer, then
	      you do not need to worry about this section at all.</para>
	    
	    <para>But, if you would like to send both PostScript and plain
	      text jobs to the printer, then you are urged to augment your
	      printer setup.  To do so, we have the text filter detect if the
	      arriving job is plain text or PostScript. All PostScript jobs
	      must start with <emphasis remap=tt>%!</emphasis> (for other
	      printer languages, see your printer documentation). If those are
	      the first two characters in the job, we have PostScript, and can
	      pass the rest of the job directly.  If those are not the first
	      two characters in the file, then the filter will convert the
	      text into PostScript and print the result.</para>
	    
	    <para>How do we do this?</para>
	    
	    <para>If you have got a serial printer, a great way to do it is to
	      install <emphasis remap=tt>lprps</emphasis>.  <emphasis
		remap=tt>lprps</emphasis> is a PostScript printer filter which
	      performs two-way communication with the printer.  It updates the
	      printer's status file with verbose information from the printer,
	      so users and administrators can see exactly what the state of
	      the printer is (such as ``toner low'' or ``paper jam'').  But
	      more importantly, it includes a program called <emphasis
		remap=tt>psif</emphasis> which detects whether the incoming
	      job is plain text and calls <emphasis remap=tt>textps</emphasis>
	      (another program that comes with <emphasis
		remap=tt>lprps</emphasis>) to convert it to PostScript.  It
	      then uses <emphasis remap=tt>lprps</emphasis> to send the job to
	      the printer.</para>
	    
	    <para><emphasis remap=tt>lprps</emphasis> is part of the FreeBSD
	      ports collection (see <xref linkend="ports" remap="The Ports
		Collection">). You
	      can fetch, build and install it yourself, of course.  After
	      installing <emphasis remap=tt>lprps</emphasis>, just specify the
	      pathname to the <emphasis remap=tt>psif</emphasis> program that
	      is part of <emphasis remap=tt>lprps</emphasis>.  If you
	      installed <emphasis remap=tt>lprps</emphasis> from the ports
	      collection, use the following in the serial PostScript printer's
	      entry in <filename>/etc/printcap</filename>:
	      <informalexample>
		<screen>	    :if=/usr/local/libexec/psif:</screen>
	      </informalexample> You should also specify the <emphasis
		remap=tt>rw</emphasis> capability; that tells LPD to open the
	      printer in read-write mode.</para>
	    
	    <para>If you have a parallel PostScript printer (and therefore
	      cannot use two-way communication with the printer, which
	      <emphasis remap=tt>lprps</emphasis> needs), you can use the
	      following shell script as the text filter:
	      <informalexample>
		<programlisting>#!/bin/sh # #  psif - Print PostScript or
		  plain text on a PostScript printer #  Script version; NOT
		  the version that comes with lprps #  Installed in
		  /usr/local/libexec/psif # read first_line
		  first_two_chars=`expr "$first_line" : '\(..\)'` if [
		  "$first_two_chars" = "%!" ]; then # #  PostScript job, print
		  it. # echo $first_line &amp;&amp; cat &amp;&amp; printf
		  "\004" &amp;&amp; exit 0 exit 2 else # #  Plain text,
		  convert it, then print it. # ( echo $first_line; cat ) |
		  /usr/local/bin/textps &amp;&amp; printf "\004" &amp;&amp;
		  exit 0 exit 2 fi</programlisting>
	      </informalexample> In the above script, <emphasis
		remap=tt>textps</emphasis> is a program we installed
	      separately to convert plain text to PostScript.  You can use any
	      text-to-PostScript program you wish.  The FreeBSD ports
	      collection (see <xref linkend="ports" remap="The Ports
		Collection">) includes a full featured text-to-PostScript
	      program called  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?manpath=FreeBSD+Ports&amp;query=a2ps">a2ps</ulink> that you might want to investigate.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="printing-advanced-ps">
	    <title>Simulating PostScript on Non-PostScript Printers
	    </title>
	    
	    <para> PostScript is the <emphasis remap=it>de facto</emphasis>
	      standard for high quality typesetting and printing.  PostScript
	      is, however, an <emphasis>expensive</emphasis> standard.
	      Thankfully, Alladin Enterprises has a free PostScript work-alike
	      called <emphasis remap=it>Ghostscript</emphasis> that runs with
	      FreeBSD.  Ghostscript can read most PostScript files and can
	      render their pages onto a variety of devices, including many
	      brands of non-PostScript printers.  By installing Ghostscript
	      and using a special text filter for your printer, you can make
	      your non-PostScript printer act like a real PostScript
	      printer.</para>
	    
	    <para>Ghostscript should be in the FreeBSD ports collection, if
	      you would like to install it from there.  You can fetch, build,
	      and install it quite easily yourself, as well.</para>
	    
	    <para>To simulate PostScript, we have the text filter detect if it
	      is printing a PostScript file.  If it is not, then the filter
	      will pass the file directly to the printer; otherwise, it will
	      use Ghostscript to first convert the file into a format the
	      printer will understand.</para>
	    
	    <para>Here is an example: the following script is a text filter
	      for Hewlett Packard DeskJet 500 printers.  For other printers,
	      substitute the <option>-sDEVICE</option> argument to the</para>
	    
	    <para><ulink
		URL="http://www.freebsd.org/cgi/man.cgi?manpath=FreeBSD+Ports&amp;query=gs">gs</ulink> (Ghostscript) command.  (Type <command>gs -h</command> to get a list of devices the current installation of Ghostscript supports.)
	      <informalexample>
		<programlisting>#!/bin/sh # #  ifhp - Print
		  Ghostscript-simulated PostScript on a DeskJet 500 #
		  Installed in /usr/local/libexec/hpif # #  Treat LF as CR+LF:
		  # printf "\033&amp;k2G" || exit 2 # #  Read first two
		  characters of the file # read first_line
		  first_two_chars=`expr "$first_line" : '\(..\)'` if [
		  "$first_two_chars" = "%!" ]; then # #  It is PostScript; use
		  Ghostscript to scan-convert and print it # /usr/local/bin/gs
		  -dSAFER -dNOPAUSE -q -sDEVICE=djet500 -sOutputFile=- - \
		  &amp;&amp; exit 0 else # #  Plain text or HP/PCL, so just
		  print it directly; print a form #  at the end to eject the
		  last page. # echo $first_line &amp;&amp; cat &amp;&amp;
		  printf "\f" &amp;&amp; exit 0 fi exit 2</programlisting>
	      </informalexample> Finally, you need to notify LPD of the filter
	      via the <emphasis remap=tt>if</emphasis> capability:
	      <informalexample>
		<screen>	:if=/usr/local/libexec/hpif:</screen>
	      </informalexample> That is it.  You can type <emphasis
		remap=tt>lpr plain.text</emphasis> and <filename>lpr
		whatever.ps</filename> and both should print
	      successfully.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="printing-advanced-convfilters">
	    <title>Conversion Filters</title>
	    
	    <para> After completing the simple setup described in <xref
		linkend="printing-simple" remap="Simple Printer Setup">, the
	      first thing you will probably want to do is install conversion
	      filters for your favorite file formats (besides plain ASCII
	      text).</para>
	    
	    
	    <sect4>
	      <title>Why Install Conversion Filters?</title>
	      
	      <para> Conversion filters make printing various kinds of files
		easy.  As an example, suppose we do a lot of work with the TeX
		typesetting system, and we have a PostScript printer.  Every
		time we generate a DVI file from TeX, we cannot print it
		directly until we convert the DVI file into PostScript.  The
		command sequence goes like this:
		<informalexample>
		  <screen>dvips seaweed-analysis.dvi lpr
		    seaweed-analysis.ps</screen>
		</informalexample> By installing a conversion filter for DVI
		files, we can skip the hand conversion step each time by
		having LPD do it for us.  Now, each time we get a DVI file, we
		are just one step away from printing it:
		<informalexample>
		  <screen>lpr -d seaweed-analysis.dvi</screen>
		</informalexample> We got LPD to do the DVI file conversion
		for us by specifying the <option>-d</option> option.  Section
		<xref
		  linkend="printing-lpr-options-format" remap="Formatting and
		  Conversion Options"> lists the conversion options.</para>
	      
	      <para>For each of the conversion options you want a printer to
		support, install a <emphasis>conversion filter</emphasis> and
		specify its pathname in <filename>/etc/printcap</filename>.  A
		conversion filter is like the text filter for the simple
		printer setup (see section <xref linkend="printing-textfilter"
		  remap="Installing the Text Filter">) except that instead of
		printing plain text, the filter converts the file into a
		format the printer can understand.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Which Conversions Filters Should I Install?
	      </title>
	      
	      <para> You should install the conversion filters you expect to
		use.  If you print a lot of DVI data, then a DVI conversion
		filter is in order.  If you have got plenty of troff to print
		out, then you probably want a troff filter.</para>
	      
	      <para>The following table summarizes the filters that LPD works
		with, their capability entries for the
		<filename>/etc/printcap</filename> file, and how to invoke
		them with the <emphasis remap=tt>lpr</emphasis> command:
		<informalexample>
		  <programlisting>              /etc/printcap File type
		    Capability  lpr option ------------  -------------
		    ---------- cifplot            cf          -c DVI
		    df          -d plot               gf          -g ditroff
		    nf          -n FORTRAN text       rf          -f troff
		    tf          -t raster             vf          -v plain
		    text         if     none, -p, or -l</programlisting>
		</informalexample>
	      </para>
	      
	      <para>In our example, using <command>lpr -d</command> means the
		printer needs a <emphasis remap=tt>df</emphasis> capability in
		its entry in <filename>/etc/printcap</filename>.</para>
	      
	      <para>Despite what others might contend, formats like FORTRAN
		text and plot are probably obsolete.  At your site, you can
		give new meanings to these or any of the formatting options
		just by installing custom filters.  For example, suppose you
		would like to directly print Printerleaf files (files from the
		Interleaf desktop publishing program), but will never print
		plot files.  You could install a Printerleaf conversion filter
		under the <emphasis remap=tt>gf</emphasis> capability and then
		educate your users that <command>lpr -g</command> mean ``print
		Printerleaf files.''</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Installing Conversion Filters</title>
	      
	      <para> Since conversion filters are programs you install outside
		of the base FreeBSD installation, they should probably go
		under <filename>/usr/local</filename>.  The directory
		<filename>/usr/local/libexec</filename> is a popular location,
		since they are specialized programs that only LPD will run;
		regular users should not ever need to run them.</para>
	      
	      <para>To enable a conversion filter, specify its pathname under
		the appropriate capability for the destination printer in
		<filename>/etc/printcap</filename>.</para>
	      
	      <para>In our example, we will add the DVI conversion filter to
		the entry for the printer named <emphasis
		  remap=tt>bamboo</emphasis>.  Here is the example
		<filename>/etc/printcap</filename> file again, with the new
		<emphasis remap=tt>df</emphasis> capability for the printer
		<emphasis remap=tt>bamboo</emphasis>
		<informalexample>
		  <programlisting># #  /etc/printcap for host rose - added df
		    filter for bamboo # rattan|line|diablo|lp|Diablo 630 Line
		    Printer:\ :sh:sd=/var/spool/lpd/rattan:\ :lp=/dev/lpt0:\
		    :if=/usr/local/libexec/if-simple:
		    bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript
		    v51.4:\ :sh:sd=/var/spool/lpd/bamboo:\
		    :lp=/dev/ttyd5:fs#0x82000e1:xs#0x820:rw:\
		    :if=/usr/local/libexec/psif:\
		    :df=/usr/local/libexec/psdf:</programlisting>
		</informalexample> The DVI filter is a shell script named
		<filename>/usr/local/libexec/psdf</filename>.  Here is that
		script:
		<informalexample>
		  <programlisting>#!bin/sh # #  psdf - DVI to PostScript
		    printer filter #  Installed in /usr/local/libexec/psdf # #
		    Invoked by lpd when user runs lpr -d # exec
		    /usr/local/bin/dvips -f | /usr/local/libexec/lprps
		    "$@"</programlisting>
		</informalexample> This script runs  <ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?manpath=FreeBSD+Ports&amp;query=dvips">dvips</ulink> in filter mode (the <option>-f</option> argument) on standard input, which is the job to print. It then starts the PostScript printer filter <emphasis remap=tt>lprps</emphasis> (see section <xref linkend="printing-advanced-if-conversion"
		  remap="Accommodating Plain Text Jobs on PostScript
		  Printers">) with the arguments LPD passed to this script.
		<emphasis remap=tt>lprps</emphasis> will use those arguments
		to account for the pages printed.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>More Conversion Filter Examples</title>
	      
	      <para> Since there is no fixed set of steps to install
		conversion filters, let me instead provide more examples.  Use
		these as guidance to making your own filters.  Use them
		directly, if appropriate.</para>
	      
	      <para>This example script is a raster (well, GIF file, actually)
		conversion filter for a Hewlett Packard LaserJet III-Si
		printer:
		<informalexample>
		  <programlisting>#!/bin/sh # #  hpvf - Convert GIF files into
		    HP/PCL, then print #  Installed in /usr/local/libexec/hpvf
		    PATH=/usr/X11R6/bin:$PATH; export PATH giftopnm | ppmtopgm
		    | pgmtopbm | pbmtolj -resolution 300 \ &amp;&amp; exit 0 \
		    || exit 2</programlisting>
		</informalexample> It works by converting the GIF file into a
		portable anymap, converting that into a portable graymap,
		converting that into a portable bitmap, and converting that
		into LaserJet/PCL-compatible data.</para>
	      
	      <para>Here is the <filename>/etc/printcap</filename> file with
		an entry for a printer using the above filter:
		<informalexample>
		  <programlisting># #  /etc/printcap for host orchid #
		    teak|hp|laserjet|Hewlett Packard LaserJet 3Si:\
		    :lp=/dev/lpt0:sh:sd=/var/spool/lpd/teak:mx#0:\
		    :if=/usr/local/libexec/hpif:\
		    :vf=/usr/local/libexec/hpvf:</programlisting>
		</informalexample>
	      </para>
	      
	      <para>The following script is a conversion filter for troff data
		from the groff typesetting system for the PostScript printer
		named <emphasis remap=tt>bamboo</emphasis>:
		<informalexample>
		  <programlisting>#!/bin/sh # #  pstf - Convert groff's troff
		    data into PS, then print. #  Installed in
		    /usr/local/libexec/pstf # exec grops |
		    /usr/local/libexec/lprps "$@"</programlisting>
		</informalexample> The above script makes use of <emphasis
		  remap=tt>lprps</emphasis> again to handle the communication
		with the printer.  If the printer were on a parallel port, we
		would use this script instead:
		<informalexample>
		  <programlisting>#!/bin/sh # #  pstf - Convert groff's troff
		    data into PS, then print. #  Installed in
		    /usr/local/libexec/pstf # exec grops</programlisting>
		</informalexample> That is it.  Here is the entry we need to
		add to <filename>/etc/printcap</filename> to enable the
		filter:
		<informalexample>
		  <screen>	:tf=/usr/local/libexec/pstf:</screen>
		</informalexample>
	      </para>
	      
	      <para>Here is an example that might make old hands at FORTRAN
		blush.  It is a FORTRAN-text filter for any printer that can
		directly print plain text.  We will install it for the printer
		<emphasis remap=tt>teak</emphasis>:
		<informalexample>
		  <programlisting>#!/bin/sh # # hprf - FORTRAN text filter for
		    LaserJet 3si: # Installed in /usr/local/libexec/hprf #
		    printf "\033&amp;k2G" &amp;&amp; fpr &amp;&amp; printf
		    "\f" &amp;&amp; exit 0 exit 2</programlisting>
		</informalexample> And we will add this line to the
		<filename>/etc/printcap</filename> for the printer <emphasis
		  remap=tt>teak</emphasis> to enable this filter:
		<informalexample>
		  <screen>	:rf=/usr/local/libexec/hprf:</screen>
		</informalexample>
	      </para>
	      
	      <para>Here is one final, somewhat complex example.  We will add
		a DVI filter to the LaserJet printer <emphasis
		  remap=tt>teak</emphasis> introduced earlier.  First, the
		easy part: updating <filename>/etc/printcap</filename> with
		the location of the DVI filter:
		<informalexample>
		  <screen>	:df=/usr/local/libexec/hpdf:</screen>
		</informalexample>
	      </para>
	      
	      <para>Now, for the hard part: making the filter.  For that, we
		need a DVI-to-LaserJet/PCL conversion program.  The FreeBSD
		ports collection (see <xref linkend="ports" remap="The
		  Ports Collection">) has one:  <ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?manpath=FreeBSD+Ports&amp;query=dvi2xx">dvi2xx</ulink> is the name of the package.  Installing this package gives us the program we need,  <ulink URL="http://www.freebsd.org/cgi/man.cgi?manpath=FreeBSD+Ports&amp;query=dvilj2p">dvilj2p</ulink>, which converts DVI into LaserJet IIp, LaserJet III, and LaserJet 2000 compatible codes.</para>
	      
	      <para><ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?manpath=FreeBSD+Ports&amp;query=dvilj2p">dvilj2p</ulink> makes the filter <emphasis remap=tt>hpdf</emphasis> quite complex since  <ulink URL="http://www.freebsd.org/cgi/man.cgi?manpath=FreeBSD+Ports&amp;query=dvilj2p">dvilj2p</ulink> cannot read from standard input.  It wants to work with a filename.  What is worse, the filename has to end in <filename>.dvi</filename> so using <filename>/dev/fd/0</filename> for standard input is problematic. We can get around that problem by linking (symbolically) a temporary file name (one that ends in <filename>.dvi</filename>) to <filename>/dev/fd/0</filename>, thereby forcing  <ulink URL="http://www.freebsd.org/cgi/man.cgi?manpath=FreeBSD+Ports&amp;query=dvilj2p">dvilj2p</ulink> to read from standard input.</para>
	      
	      <para>The only other fly in the ointment is the fact that we
		cannot use /tmp for the temporary link.  Symbolic links are
		owned by user and group <emphasis remap=tt>bin</emphasis>.
		The filter runs as user <emphasis remap=tt>daemon</emphasis>.
		And the <filename>/tmp</filename> directory has the sticky bit
		set.  The filter can create the link, but it will not be able
		clean up when done and remove it since the link will belong to
		a different user.</para>
	      
	      <para>Instead, the filter will make the symbolic link in the
		current working directory, which is the spooling directory
		(specified by the <emphasis remap=tt>sd</emphasis> capability
		in <filename>/etc/printcap</filename>).  This is a perfect
		place for filters to do their work, especially since there is
		(sometimes) more free disk space in the spooling directory
		than under <filename>/tmp</filename>.</para>
	      
	      <para>Here, finally, is the filter:
		<informalexample>
		  <programlisting>#!/bin/sh # #  hpdf - Print DVI data on
		    HP/PCL printer #  Installed in /usr/local/libexec/hpdf
		    PATH=/usr/local/bin:$PATH; export PATH # #  Define a
		    function to clean up our temporary files.  These exist #
		    in the current directory, which will be the spooling
		    directory #  for the printer. # cleanup() { rm -f
		    hpdf$$.dvi } # #  Define a function to handle fatal
		    errors: print the given message #  and exit 2.  Exiting
		    with 2 tells LPD to do not try to reprint the #  job. #
		    fatal() { echo "$@" 1&gt;&amp;2 cleanup exit 2 } # #  If
		    user removes the job, LPD will send SIGINT, so trap SIGINT
		    #  (and a few other signals) to clean up after ourselves.
		    # trap cleanup 1 2 15  # #  Make sure we are not colliding
		    with any existing files. # cleanup # #  Link the DVI input
		    file to standard input (the file to print). # ln -s
		    /dev/fd/0 hpdf$$.dvi || fatal "Cannot symlink /dev/fd/0" #
		    #  Make LF = CR+LF # printf "\033&amp;k2G" || fatal
		    "Cannot initialize printer" #  #  Convert and print.
		    Return value from dvilj2p does not seem to be #  reliable,
		    so we ignore it. # dvilj2p -M1 -q -e- dfhp$$.dvi # #
		    Clean up and exit # cleanup exit 0</programlisting>
		</informalexample>
	      </para>
	      
	    </sect4>
	    
	    <sect4
	      id="printing-advanced-autoconv">
	      <title>Automated Conversion: An Alternative To Conversion
		Filters
	      </title>
	      
	      <para> All these conversion filters accomplish a lot for your
		printing environment, but at the cost forcing the user to
		specify (on the  <ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink>
		command line) which one to use.  If your users are not
		particularly computer literate, having to specify a filter
		option will become annoying.  What is worse, though, is that
		an incorrectly specified filter option may run a filter on the
		wrong type of file and cause your printer to spew out hundreds
		of sheets of paper.</para>
	      
	      <para>Rather than install conversion filters at all, you might
		want to try having the text filter (since it is the default
		filter) detect the type of file it has been asked to print and
		then automatically run the right conversion filter.  Tools
		such as <emphasis remap=tt>file</emphasis> can be of help
		here. Of course, it will be hard to determine the differences
		between <emphasis>some</emphasis> file types---and, of course,
		you can still provide conversion filters just for them.</para>
	      
	      <para>The FreeBSD ports collection has a text filter that
		performs automatic conversion called  <ulink
		  URL="http://www.freebsd.org/cgi/man.cgi?manpath=FreeBSD+Ports&amp;query=apsfilter">apsfilter</ulink>. It can detect plain text, PostScript, and DVI files, run the proper conversions, and print.</para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3
	    id="printing-advanced-of">
	    <title>Output Filters</title>
	    
	    <para> The LPD spooling system supports one other type of filter
	      that we have not yet explored: an output filter.  An output
	      filter is intended for printing plain text only, like the text
	      filter, but with many simplifications.  If you are using an
	      output filter but no text filter, then
	      <itemizedlist>
		
		<listitem>
		  <para>LPD starts an output filter once for the entire job
		    instead of once for each file in the job.
		  </para>
		</listitem>
		
		<listitem>
		  <para>LPD does not make any provision to identify the start
		    or the end of files within the job for the output filter.
		  </para>
		</listitem>
		
		<listitem>
		  <para>LPD does not pass the user's login or host to the
		    filter, so it is not intended to do accounting.  In fact,
		    it gets only two arguments:
		    <informalexample>
		      <screen><command>-w<replaceable>width</replaceable>
			  -l<replaceable>length</replaceable></command></screen>
		    </informalexample> where <emphasis
		      remap=it>width</emphasis> is from the <emphasis
		      remap=tt>pw</emphasis> capability and <emphasis
		      remap=it>length</emphasis> is from the <emphasis
		      remap=tt>pl</emphasis> capability for the printer in
		    question.</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>Do not be seduced by an output filter's simplicity.  If you
	      would like each file in a job to start on a different page an
	      output filter <emphasis>will not work</emphasis>.  Use a text
	      filter (also known as an input filter); see section <xref
		linkend="printing-textfilter" remap="Installing the Text
		Filter">.  Furthermore, an output filter is actually
	      <emphasis>more complex</emphasis> in that it has to examine the
	      byte stream being sent to it for special flag characters and
	      must send signals to itself on behalf of LPD.</para>
	    
	    <para>However, an output filter is <emphasis>necessary</emphasis>
	      if you want header pages and need to send escape sequences or
	      other initialization strings to be able to print the header
	      page.  (But it is also <emphasis>futile</emphasis> if you want
	      to charge header pages to the requesting user's account, since
	      LPD does not give any user or host information to the output
	      filter.)</para>
	    
	    <para>On a single printer, LPD allows both an output filter and
	      text or other filters.  In such cases, LPD will start the output
	      filter to print the header page (see section <xref
		linkend="printing-advanced-header-pages" remap="Header
		Pages">) only.  LPD then expects the output filter to
	      <emphasis>stop itself</emphasis> by sending two bytes to the
	      filter: ASCII 031 followed by ASCII 001.  When an output filter
	      sees these two bytes (031, 001), it should stop by sending
	      SIGSTOP to itself.  When LPD's done running other filters, it
	      will restart the output filter by sending SIGCONT to it.</para>
	    
	    <para>If there is an output filter but <emphasis>no</emphasis>
	      text filter and LPD is working on a plain text job, LPD uses the
	      output filter to do the job.  As stated before, the output
	      filter will print each file of the job in sequence with no
	      intervening form feeds or other paper advancement, and this is
	      probably <emphasis>not</emphasis> what you want.  In almost all
	      cases, you need a text filter.</para>
	    
	    <para>The program <emphasis remap=tt>lpf</emphasis>, which we
	      introduced earlier as a text filter, can also run as an output
	      filter.  If you need a quick-and-dirty output filter but do not
	      want to write the byte detection and signal sending code, try
	      <emphasis remap=tt>lpf</emphasis>.  You can also wrap <emphasis
		remap=tt>lpf</emphasis> in a shell script to handle any
	      initialization codes the printer might require.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="printing-advanced-lpf">
	    <title><emphasis remap=tt>lpf</emphasis>: a Text Filter</title>
	    
	    <para> The program <filename>/usr/libexec/lpr/lpf</filename> that
	      comes with FreeBSD binary distribution is a text filter (input
	      filter) that can indent output (job submitted with <emphasis
		remap=tt>lpr -i</emphasis>), allow literal characters to pass
	      (job submitted with <command>lpr -l</command>), adjust the
	      printing position for backspaces and tabs in the job, and
	      account for pages printed.  It can also act like an output
	      filter.</para>
	    
	    <para><emphasis remap=tt>lpf</emphasis> is suitable for many
	      printing environments.  And although it has no capability to
	      send initialization sequences to a printer, it is easy to write
	      a shell script to do the needed initialization and then execute
	      <emphasis remap=tt>lpf</emphasis>.</para>
	    
	    <para>In order for <emphasis remap=tt>lpf</emphasis> to do page
	      accounting correctly, it needs correct values filled in for the
	      <emphasis remap=tt>pw</emphasis> and <emphasis
		remap=tt>pl</emphasis> capabilities in the
	      <filename>/etc/printcap</filename> file.  It uses these values
	      to determine how much text can fit on a page and how many pages
	      were in a user's job.  For more information on printer
	      accounting, see <xref
		linkend="printing-advanced-acct" remap="Accounting for Printer
		Usage">.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2
	  id="printing-advanced-header-pages">
	  <title>Header Pages</title>
	  
	  <para> If you have <emphasis>lots</emphasis> of users, all of them
	    using various printers, then you probably want to consider
	    <emphasis>header pages</emphasis> as a necessary evil.</para>
	  
	  <para>Header pages, also known as <emphasis>banner</emphasis> or
	    <emphasis>burst pages</emphasis> identify to whom jobs belong
	    after they are printed.  They are usually printed in large, bold
	    letters, perhaps with decorative borders, so that in a stack of
	    printouts they stand out from the real documents that comprise
	    users' jobs. They enable users to locate their jobs quickly.  The
	    obvious drawback to a header page is that it is yet one more sheet
	    that has to be printed for every job, their ephemeral usefulness
	    lasting not more than a few minutes, ultimately finding themselves
	    in a recycling bin or rubbish heap. (Note that header pages go
	    with each job, not each file in a job, so the paper waste might
	    not be that bad.)</para>
	  
	  <para>The LPD system can provide header pages automatically for your
	    printouts <emphasis>if</emphasis> your printer can directly print
	    plain text.  If you have a PostScript printer, you will need an
	    external program to generate the header page; see <xref
	      linkend="printing-advanced-header-pages-ps" remap="Header Pages
	      on    PostScript Printers">.</para>
	  
	  
	  <sect3
	    id="printing-advanced-header-pages-enabling">
	    <title>Enabling Header Pages</title>
	    
	    <para> In the <xref linkend="printing-simple" remap="Simple
		Printer        Setup">, we turned off header pages by
	      specifying <emphasis remap=tt>sh</emphasis> (meaning ``suppress
	      header'') in the <filename>/etc/printcap</filename> file.  To
	      enable header pages for a printer, just remove the <emphasis
		remap=tt>sh</emphasis> capability.</para>
	    
	    <para>Sounds too easy, right?</para>
	    
	    <para>You are right.  You <emphasis>might</emphasis> have to
	      provide an output filter to send initialization strings to the
	      printer. Here is an example output filter for Hewlett Packard
	      PCL-compatible printers:
	      <informalexample>
		<programlisting>#!/bin/sh # #  hpof - Output filter for
		  Hewlett Packard PCL-compatible printers #  Installed in
		  /usr/local/libexec/hpof printf "\033&amp;k2G" || exit 2 exec
		  /usr/libexec/lpr/lpf</programlisting>
	      </informalexample> Specify the path to the output filter in the
	      <emphasis remap=tt>of</emphasis> capability.  See <xref
		linkend="printing-advanced-of"
		remap="Output Filters"> for more information.</para>
	    
	    <para>Here is an example <filename>/etc/printcap</filename> file
	      for the printer <emphasis remap=tt>teak</emphasis> that we
	      introduced earlier; we enabled header pages and added the above
	      output filter:
	      <informalexample>
		<programlisting># #  /etc/printcap for host orchid #
		  teak|hp|laserjet|Hewlett Packard LaserJet 3Si:\
		  :lp=/dev/lpt0:sd=/var/spool/lpd/teak:mx#0:\
		  :if=/usr/local/libexec/hpif:\ :vf=/usr/local/libexec/hpvf:\
		  :of=/usr/local/libexec/hpof:</programlisting>
	      </informalexample> Now, when users print jobs to <emphasis
		remap=tt>teak</emphasis>, they get a header page with each
	      job.  If users want to spend time searching for their printouts,
	      they can suppress header pages by submitting the job with
	      <command>lpr -h</command>; see <xref
		linkend="printing-lpr-options-misc" remap="Header Page
		Options"> for more  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink>
	      options.</para>
	    
	    <para><emphasis remap=tt>Note:</emphasis> LPD prints a form feed
	      character after the header page.  If your printer uses a
	      different character or sequence of characters to eject a page,
	      specify them with the <emphasis remap=tt>ff</emphasis>
	      capability in <filename>/etc/printcap</filename>.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="printing-advanced-header-pages-controlling">
	    <title>Controlling Header Pages</title>
	    
	    <para> By enabling header pages, LPD will produce a <emphasis>long
		header</emphasis>, a full page of large letters identifying
	      the user, host, and job.  Here is an example (kelly printed the
	      job named outline from host rose):
	      <informalexample>
		<screen>k                   ll       ll k                    l
		  l k                    l        l k   k     eeee       l
		  l     y    y k  k     e    e      l        l     y    y k k
		  eeeeee      l        l     y    y kk k     e           l
		  l     y    y k   k    e    e      l        l     y   yy k
		  k    eeee      lll      lll     yyy y y y    y yyyy ll t
		  l        i t         l oooo    u    u   ttttt       l
		  ii     n nnn     eeee o    o   u    u     t         l
		  i     nn   n   e    e o    o   u    u     t         l
		  i     n    n   eeeeee o    o   u    u     t         l
		  i     n    n   e o    o   u   uu     t  t      l        i
		  n    n   e    e oooo     uuu u      tt      lll      iii
		  n    n    eeee r rrr     oooo     ssss     eeee rr   r   o
		  o   s    s   e    e r        o    o    ss      eeeeee r
		  o    o      ss    e r        o    o   s    s   e    e r
		  oooo     ssss     eeee Job:  outline Date: Sun Sep 17
		  11:04:58 1995</screen>
	      </informalexample> LPD appends a form feed after this text so
	      the job starts on a new page (unless you have <emphasis
		remap=tt>sf</emphasis> (suppress form feeds) in the
	      destination printer's entry in
	      <filename>/etc/printcap</filename>).</para>
	    
	    <para>If you prefer, LPD can make a <emphasis>short
		header</emphasis>; specify <emphasis remap=tt>sb</emphasis>
	      (short banner) in the <filename>/etc/printcap</filename> file.
	      The header page will look like this:
	      <informalexample>
		<screen>rose:kelly  Job: outline  Date: Sun Sep 17 11:07:51
		  1995</screen>
	      </informalexample> Also by default, LPD prints the header page
	      first, then the job.  To reverse that, specify <emphasis
		remap=tt>hl</emphasis> (header last) in
	      <filename>/etc/printcap</filename>.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="printing-advanced-header-pages-accounting">
	    <title>Accounting for Header Pages</title>
	    
	    <para> Using LPD's built-in header pages enforces a particular
	      paradigm when it comes to printer accounting: header pages must
	      be <emphasis>free of charge</emphasis>.</para>
	    
	    <para>Why?</para>
	    
	    <para>Because the output filter is the only external program that
	      will have control when the header page is printed that could do
	      accounting, and it is not provided with any <emphasis>user or
		host</emphasis> information or an accounting file, so it has
	      no idea whom to charge for printer use.  It is also not enough
	      to just ``add one page'' to the text filter or any of the
	      conversion filters (which do have user and host information)
	      since users can suppress header pages with <command>lpr
		-h</command>.  They could still be charged for header pages
	      they did not print.  Basically, <command>lpr -h</command> will
	      be the preferred option of environmentally-minded users, but you
	      cannot offer any incentive to use it.</para>
	    
	    <para>It is <emphasis>still not enough</emphasis> to have each of
	      the filters generate their own header pages (thereby being able
	      to charge for them).  If users wanted the option of suppressing
	      the header pages with <command>lpr -h</command>, they will still
	      get them and be charged for them since LPD does not pass any
	      knowledge of the <option>-h</option> option to any of the
	      filters.</para>
	    
	    <para>So, what are your options?</para>
	    
	    <para>You can
	      <itemizedlist>
		
		<listitem>
		  <para>Accept LPD's paradigm and make header pages free.
		  </para>
		</listitem>
		
		<listitem>
		  <para>Install an alternative to LPD, such as LPDng or PLP.
		    Section <xref linkend="printing-lpd-alternatives"
		      remap="Alternatives to the Standard   Spooler"> tells
		    more about other spooling software you can substitute for
		    LPD.
		  </para>
		</listitem>
		
		<listitem>
		  <para>Write a <emphasis>smart</emphasis> output filter.
		    Normally, an output filter is not meant to do anything
		    more than initialize a printer or do some simple character
		    conversion.  It is suited for header pages and plain text
		    jobs (when there is no text (input) filter). But, if there
		    is a text filter for the plain text jobs, then LPD will
		    start the output filter only for the header pages.  And
		    the output filter can parse the header page text that LPD
		    generates to determine what user and host to charge for
		    the header page.  The only other problem with this method
		    is that the output filter still does not know what
		    accounting file to use (it is not passed the name of the
		    file from the <emphasis remap=tt>af</emphasis>
		    capability), but if you have a well-known accounting file,
		    you can hard-code that into the output filter. To
		    facilitate the parsing step, use the <emphasis
		      remap=tt>sh</emphasis> (short header) capability in
		    <filename>/etc/printcap</filename>. Then again, all that
		    might be too much trouble, and users will certainly
		    appreciate the more generous system administrator who
		    makes header pages free.</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	  </sect3>
	  
	  <sect3
	    id="printing-advanced-header-pages-ps">
	    <title>Header Pages on PostScript Printers</title>
	    
	    <para> As described above, LPD can generate a plain text header
	      page suitable for many printers.  Of course, PostScript cannot
	      directly print plain text, so the header page feature of LPD is
	      useless---or mostly so.</para>
	    
	    <para>One obvious way to get header pages is to have every
	      conversion filter and the text filter generate the header page.
	      The filters should should use the user and host arguments to
	      generate a suitable header page.  The drawback of this method is
	      that users will always get a header page, even if they submit
	      jobs with <command>lpr -h</command>.</para>
	    
	    <para>Let us explore this method.  The following script takes
	      three arguments (user login name, host name, and job name) and
	      makes a simple PostScript header page:
	      <informalexample>
		<programlisting>#!/bin/sh # #  make-ps-header - make a
		  PostScript header page on stdout #  Installed in
		  /usr/local/libexec/make-ps-header # # #  These are
		  PostScript units (72 to the inch).  Modify for A4 or #
		  whatever size paper you are using: # page_width=612
		  page_height=792 border=72 # #  Check arguments # if [ $# -ne
		  3 ]; then echo "Usage: `basename $0` &lt;user&gt;
		  &lt;host&gt; &lt;job&gt;" 1&gt;&amp;2 exit 1 fi # #  Save
		  these, mostly for readability in the PostScript, below. #
		  user=$1 host=$2 job=$3 date=`date` # #  Send the PostScript
		  code to stdout. # exec cat &lt;&lt;EOF %!PS % %  Make sure
		  we do not interfere with user's job that will follow % save
		  % %  Make a thick, unpleasant border around the edge of the
		  paper. % $border $border moveto $page_width $border 2 mul
		  sub 0 rlineto 0 $page_height $border 2 mul sub rlineto
		  currentscreen 3 -1 roll pop 100 3 1 roll setscreen $border 2
		  mul $page_width sub 0 rlineto closepath 0.8 setgray 10
		  setlinewidth stroke 0 setgray % %  Display user's login
		  name, nice and large and prominent % /Helvetica-Bold
		  findfont 64 scalefont setfont $page_width ($user)
		  stringwidth pop sub 2 div $page_height 200 sub moveto
		  ($user) show % %  Now show the boring particulars %
		  /Helvetica findfont 14 scalefont setfont /y 200 def [ (Job:)
		  (Host:) (Date:) ] { 200 y moveto show /y y 18 sub def }
		  forall /Helvetica-Bold findfont 14 scalefont setfont /y 200
		  def [ ($job) ($host) ($date) ] { 270 y moveto show /y y 18
		  sub def } forall % %  That is it % restore showpage
		  EOF</programlisting>
	      </informalexample> Now, each of the conversion filters and the
	      text filter can call this script to first generate the header
	      page, and then print the user's job.  Here is the DVI conversion
	      filter from earlier in this document, modified to make a header
	      page:
	      <informalexample>
		<programlisting>#!/bin/sh # #  psdf - DVI to PostScript
		  printer filter #  Installed in /usr/local/libexec/psdf # #
		  Invoked by lpd when user runs lpr -d # orig_args="$@" fail()
		  { echo "$@" 1&gt;&amp;2 exit 2 } while getopts "x:y:n:h:"
		  option; do case $option in x|y)  ;; # Ignore n)
		  login=$OPTARG ;; h)    host=$OPTARG ;;  *)    echo "LPD
		  started `basename $0` wrong." 1&gt;&amp;2 exit 2 ;; esac
		  done [ "$login" ] || fail "No login name" [ "$host" ] ||
		  fail "No host name" ( /usr/local/libexec/make-ps-header
		  $login $host "DVI File" /usr/local/bin/dvips -f ) | eval
		  /usr/local/libexec/lprps $orig_args</programlisting>
	      </informalexample> Notice how the filter has to parse the
	      argument list in order to determine the user and host name.  The
	      parsing for the other conversion filters is identical.  The text
	      filter takes a slightly different set of arguments, though (see
	      section <xref linkend="printing-advanced-filters"
		remap="How      Filters Work">).</para>
	    
	    <para>As we have mentioned before, the above scheme, though fairly
	      simple, disables the ``suppress header page'' option (the
	      <option>-h</option> option) to <emphasis
		remap=tt>lpr</emphasis>.  If users wanted to save a tree (or a
	      few pennies, if you charge for header pages), they would not be
	      able to do so, since every filter's going to print a header page
	      with every job.</para>
	    
	    <para>To allow users to shut off header pages on a per-job basis,
	      you will need to use the trick introduced in section
	      <xref linkend="printing-advanced-header-pages-accounting"
		remap="Accounting for Header Pages">: write an output filter
	      that parses the LPD-generated header page and produces a
	      PostScript version.  If the user submits the job with
	      <command>lpr -h</command>, then LPD will not generate a header
	      page, and neither will your output filter.  Otherwise, your
	      output filter will read the text from LPD and send the
	      appropriate header page PostScript code to the printer.</para>
	    
	    <para>If you have a PostScript printer on a serial line, you can
	      make use of <emphasis remap=tt>lprps</emphasis>, which comes
	      with an output filter, <emphasis remap=tt>psof</emphasis>, which
	      does the above.  Note that <emphasis remap=tt>psof</emphasis>
	      does not charge for header pages.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2
	  id="printing-advanced-network-printers">
	  <title>Networked Printing</title>
	  
	  <para> FreeBSD supports networked printing: sending jobs to remote
	    printers.  Networked printing generally refers to two different
	    things:
	    <itemizedlist>
	      
	      <listitem>
		<para>Accessing a printer attached to a remote host.  You
		  install a printer that has a conventional serial or parallel
		  interface on one host.  Then, you set up LPD to enable
		  access to the printer from other hosts on the network.
		  Section <xref
		    linkend="printing-advanced-network-rm" remap="Printers
		    Installed on Remote Hosts"> tells how to do this.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Accessing a printer attached directly to a network. The
		  printer has a network interface in addition (or in place of)
		  a more conventional serial or parallel interface.  Such a
		  printer might work as follows:
		  
		  <itemizedlist>
		    
		    <listitem>
		      <para>It might understand the LPD protocol and can even
			queue jobs from remote hosts.  In this case, it acts
			just like a regular host running LPD.  Follow the same
			procedure in section <xref
			  linkend="printing-advanced-network-rm"
			  remap="Printers     Installed on Remote Hosts"> to
			set up such a printer.
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para>It might support a data stream network connection.
			In this case, you ``attach'' the printer to one host
			on the network by making that host responsible for
			spooling jobs and sending them to the printer.
			Section <xref
			  linkend="printing-advanced-network-net-if"
			  remap="Printers     with Networked Data Stream
			  Interfaces"> gives some suggestions on installing
			such printers.</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  
	  <sect3
	    id="printing-advanced-network-rm">
	    <title>Printers Installed on Remote Hosts</title>
	    
	    <para> The LPD spooling system has built-in support for sending
	      jobs to other hosts also running LPD (or are compatible with
	      LPD).  This feature enables you to install a printer on one host
	      and make it accessible from other hosts.  It also works with
	      printers that have network interfaces that understand the LPD
	      protocol.  </para>
	    
	    <para>To enable this kind of remote printing, first install a
	      printer on one host, the <emphasis>printer host</emphasis>,
	      using the simple printer setup described in <xref
		linkend="printing-simple" remap="Simple Printer Setup">.  Do
	      any advanced setup in <xref linkend="printing-advanced"
		remap="Advanced Printer Setup"> that you need.  Make sure to
	      test the printer and see if it works with the features of LPD
	      you have enabled.</para>
	    
	    <para>If you are using a printer with a network interface that is
	      compatible with LPD, then the <emphasis>printer host</emphasis>
	      in the discussion below is the printer itself, and the
	      <emphasis>printer name</emphasis> is the name you configured for
	      the printer.  See the documentation that accompanied your
	      printer and/or printer-network interface.</para>
	    
	    <para>Then, on the other hosts you want to have access to the
	      printer, make an entry in their
	      <filename>/etc/printcap</filename> files with the following:
	      <orderedlist>
		
		<listitem>
		  <para>Name the entry anything you want.  For simplicity,
		    though, you probably want to use the same name and aliases
		    as on the printer host.
		  </para>
		</listitem>
		
		<listitem>
		  <para>Leave the <emphasis remap=tt>lp</emphasis> capability
		    blank, explicitly (<literal>:lp=:</literal>).
		  </para>
		</listitem>
		
		<listitem>
		  <para>Make a spooling directory and specify its location in
		    the <emphasis remap=tt>sd</emphasis> capability.  LPD will
		    store jobs here before they get sent to the printer host.
		  </para>
		</listitem>
		
		<listitem>
		  <para>Place the name of the printer host in the <emphasis
		      remap=tt>rm</emphasis> capability.
		  </para>
		</listitem>
		
		<listitem>
		  <para>Place the printer name on the <emphasis>printer
		      host</emphasis> in the <emphasis remap=tt>rp</emphasis>
		    capability.</para>
		</listitem>
		
	      </orderedlist> That is it.  You do not need to list conversion
	      filters, page dimensions, or anything else in the
	      <filename>/etc/printcap</filename> file.</para>
	    
	    <para>Here is an example.  The host rose has two printers,
	      <emphasis remap=tt>bamboo</emphasis> and <emphasis
		remap=tt>rattan</emphasis>.  We will enable users on the host
	      orchid to print to those printers.  Here is the
	      <filename>/etc/printcap</filename> file for orchid (back from
	      section
	      <xref linkend="printing-advanced-header-pages-enabling"
		remap="Enabling Header Pages">).  It already had the entry for
	      the printer <emphasis remap=tt>teak</emphasis>; we have added
	      entries for the two printers on the host rose:
	      <informalexample>
		<programlisting># #  /etc/printcap for host orchid - added
		  (remote) printers on rose # # #  teak is local; it is
		  connected directly to orchid: # teak|hp|laserjet|Hewlett
		  Packard LaserJet 3Si:\
		  :lp=/dev/lpt0:sd=/var/spool/lpd/teak:mx#0:\
		  :if=/usr/local/libexec/ifhp:\ :vf=/usr/local/libexec/vfhp:\
		  :of=/usr/local/libexec/ofhp: # #  rattan is connected to
		  rose; send jobs for rattan to rose: #
		  rattan|line|diablo|lp|Diablo 630 Line Printer:\
		  :lp=:rm=rose:rp=rattan:sd=/var/spool/lpd/rattan: # #  bamboo
		  is connected to rose as well: #
		  bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript
		  v51.4:\
		  :lp=:rm=rose:rp=bamboo:sd=/var/spool/lpd/bamboo:</programlisting>
	      </informalexample> Then, we just need to make spooling
	      directories on orchid:
	      <informalexample>
		<screen>mkdir -p /var/spool/lpd/rattan /var/spool/lpd/bamboo
		  chmod 770 /var/spool/lpd/rattan /var/spool/lpd/bamboo chown
		  daemon.daemon /var/spool/lpd/rattan
		  /var/spool/lpd/bamboo</screen>
	      </informalexample>
	    </para>
	    
	    <para>Now, users on orchid can print to <emphasis
		remap=tt>rattan</emphasis> and <emphasis
		remap=tt>bamboo</emphasis>.  If, for example, a user on orchid
	      typed
	      <informalexample>
		<screen>lpr -P bamboo -d sushi-review.dvi</screen>
	      </informalexample> the LPD system on orchid would copy the job
	      to the spooling directory
	      <filename>/var/spool/lpd/bamboo</filename> and note that it was
	      a DVI job.  As soon as the host rose has room in its <emphasis
		remap=tt>bamboo</emphasis> spooling directory, the two LPDs
	      would transfer the file to rose.  The file would wait in rose's
	      queue until it was finally printed.  It would be converted from
	      DVI to PostScript (since bamboo is a PostScript printer) on
	      rose.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="printing-advanced-network-net-if">
	    <title>Printers with Networked Data Stream Interfaces</title>
	    
	    <para> Often, when you buy a network interface card for a printer,
	      you can get two versions: one which emulates a spooler (the more
	      expensive version), or one which just lets you send data to it
	      as if you were using a serial or parallel port (the cheaper
	      version).  This section tells how to use the cheaper version.
	      For the more expensive one, see the previous section <xref
		linkend="printing-advanced-network-rm" remap="Printers
		Installed on Remote Hosts">.</para>
	    
	    <para>The format of the <filename>/etc/printcap</filename> file
	      lets you specify what serial or parallel interface to use, and
	      (if you are using a serial interface), what baud rate, whether
	      to use flow control, delays for tabs, conversion of newlines,
	      and more.  But there is no way to specify a connection to a
	      printer that is listening on a TCP/IP or other network
	      port.</para>
	    
	    <para>To send data to a networked printer, you need to develop a
	      communications program that can be called by the text and
	      conversion filters.  Here is one such example: the script
	      <emphasis remap=tt>netprint</emphasis> takes all data on
	      standard input and sends it to a network-attached printer.  We
	      specify the hostname of the printer as the first argument and
	      the port number to which to connect as the second argument to
	      <emphasis remap=tt>netprint</emphasis>.  Note that this supports
	      one-way communication only (FreeBSD to printer); many network
	      printers support two-way communication, and you might want to
	      take advantage of that (to get printer status, perform
	      accounting, etc.).
	      <informalexample>
		<programlisting>#!/usr/bin/perl # #  netprint - Text filter
		  for printer attached to network #  Installed in
		  /usr/local/libexec/netprint # $#ARGV eq 1 || die "Usage: $0
		  &lt;printer-hostname&gt; &lt;port-number&gt;"; $printer_host
		  = $ARGV[0]; $printer_port = $ARGV[1]; require
		  'sys/socket.ph'; ($ignore, $ignore, $protocol) =
		  getprotobyname('tcp'); ($ignore, $ignore, $ignore, $ignore,
		  $address) = gethostbyname($printer_host); $sockaddr =
		  pack('S n a4 x8', &amp;AF_INET, $printer_port, $address);
		  socket(PRINTER, &amp;PF_INET, &amp;SOCK_STREAM, $protocol)
		  || die "Can't create TCP/IP stream socket: $!";
		  connect(PRINTER, $sockaddr) || die "Can't contact
		  $printer_host: $!"; while (&lt;STDIN&gt;) { print PRINTER; }
		  exit 0;</programlisting>
	      </informalexample> We can then use this script in various
	      filters.  Suppose we had a Diablo 750-N line printer connected
	      to the network.  The printer accepts data to print on port
	      number 5100.  The host name of the printer is scrivener.  Here
	      is the text filter for the printer:
	      <informalexample>
		<programlisting>#!/bin/sh # #  diablo-if-net - Text filter for
		  Diablo printer `scrivener' listening #  on port 5100.
		  Installed in /usr/local/libexec/diablo-if-net # exec
		  /usr/libexec/lpr/lpf "$@" | /usr/local/libexec/netprint
		  scrivener 5100</programlisting>
	      </informalexample>
	    </para>
	    
	  </sect3>
	</sect2>
	
	<sect2
	  id="printing-advanced-restricting">
	  <title>Restricting Printer Usage</title>
	  
	  <para> This section gives information on restricting printer usage.
	    The LPD system lets you control who can access a printer, both
	    locally or remotely, whether they can print multiple copies, how
	    large their jobs can be, and how large the printer queues can
	    get.</para>
	  
	  
	  <sect3
	    id="printing-advanced-restricting-copies">
	    <title>Restricting Multiple Copies</title>
	    
	    <para> The LPD system makes it easy for users to print multiple
	      copies of a file.  Users can print jobs with <command>lpr
		-#5</command> (for example) and get five copies of each file
	      in the job. Whether this is a good thing is up to you.</para>
	    
	    <para>If you feel multiple copies cause unnecessary wear and tear
	      on your printers, you can disable the <option>-#</option> option
	      to  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink> by
	      adding the <emphasis remap=tt>sc</emphasis> capability to the
	      <filename>/etc/printcap</filename> file.  When users submit jobs
	      with the <option>-#</option> option, they will see
	      <informalexample>
		<screen>lpr: multiple copies are not allowed</screen>
	      </informalexample>
	    </para>
	    
	    <para>Note that if you have set up access to a printer remotely
	      (see section <xref linkend="printing-advanced-network-rm"
		remap="Printers Installed on Remote      Hosts">), you need
	      the <emphasis remap=tt>sc</emphasis> capability on the remote
	      <filename>/etc/printcap</filename> files as well, or else users
	      will still be able to submit multiple-copy jobs by using another
	      host.</para>
	    
	    <para>Here is an example.  This is the
	      <filename>/etc/printcap</filename> file for the host rose.  The
	      printer <emphasis remap=tt>rattan</emphasis> is quite hearty, so
	      we will allow multiple copies, but the laser printer <emphasis
		remap=tt>bamboo</emphasis>'s a bit more delicate, so we will
	      disable multiple copies by adding the <emphasis
		remap=tt>sc</emphasis> capability:
	      <informalexample>
		<programlisting># #  /etc/printcap for host rose - restrict
		  multiple copies on bamboo # rattan|line|diablo|lp|Diablo 630
		  Line Printer:\ :sh:sd=/var/spool/lpd/rattan:\
		  :lp=/dev/lpt0:\ :if=/usr/local/libexec/if-simple:
		  bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript
		  v51.4:\ :sh:sd=/var/spool/lpd/bamboo:sc:\
		  :lp=/dev/ttyd5:fs#0x82000e1:xs#0x820:rw:\
		  :if=/usr/local/libexec/psif:\
		  :df=/usr/local/libexec/psdf:</programlisting>
	      </informalexample> Now, we also need to add the <emphasis
		remap=tt>sc</emphasis> capability on the host orchid's
	      <filename>/etc/printcap</filename> (and while we are at it, let
	      us disable multiple copies for the printer <emphasis
		remap=tt>teak</emphasis>):
	      <informalexample>
		<programlisting># #  /etc/printcap for host orchid - no
		  multiple copies for local #  printer teak or remote printer
		  bamboo teak|hp|laserjet|Hewlett Packard LaserJet 3Si:\
		  :lp=/dev/lpt0:sd=/var/spool/lpd/teak:mx#0:sc:\
		  :if=/usr/local/libexec/ifhp:\ :vf=/usr/local/libexec/vfhp:\
		  :of=/usr/local/libexec/ofhp: rattan|line|diablo|lp|Diablo
		  630 Line Printer:\
		  :lp=:rm=rose:rp=rattan:sd=/var/spool/lpd/rattan:
		  bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript
		  v51.4:\
		  :lp=:rm=rose:rp=bamboo:sd=/var/spool/lpd/bamboo:sc:</programlisting>
	      </informalexample> By using the <emphasis remap=tt>sc</emphasis>
	      capability, we prevent the use of <command>lpr -#</command>, but
	      that still does not prevent users from running  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?lpr">lpr</ulink>
	      multiple times, or from submitting the same file multiple times
	      in one job like this:
	      <informalexample>
		<screen>lpr forsale.sign forsale.sign forsale.sign
		  forsale.sign forsale.sign </screen>
	      </informalexample> There are many ways to prevent this abuse
	      (including ignoring it) which you are free to explore.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="printing-advanced-restricting-access">
	    <title>Restricting Access To Printers</title>
	    
	    <para> You can control who can print to what printers by using the
	      UNIX group mechanism and the <emphasis remap=tt>rg</emphasis>
	      capability in <filename>/etc/printcap</filename>.  Just place
	      the users you want to have access to a printer in a certain
	      group, and then name that group in the <emphasis
		remap=tt>rg</emphasis> capability.</para>
	    
	    <para>Users outside the group (including root) will be greeted
	      with
	      <informalexample>
		<screen>lpr: Not a member of the restricted group</screen>
	      </informalexample> if they try to print to the controlled
	      printer.</para>
	    
	    <para>As with the <emphasis remap=tt>sc</emphasis> (suppress
	      multiple copies) capability, you need to specify <emphasis
		remap=tt>rg</emphasis> on remote hosts that also have access
	      to your printers, if you feel it is appropriate (see section
	      <xref linkend="printing-advanced-network-rm"
		remap="Printers Installed on Remote Hosts">).</para>
	    
	    <para>For example, we will let anyone access the printer <emphasis
		remap=tt>rattan</emphasis>, but only those in group <emphasis
		remap=tt>artists</emphasis> can use <emphasis
		remap=tt>bamboo</emphasis>.  Here is the familiar
	      <filename>/etc/printcap</filename> for host rose:
	      <informalexample>
		<programlisting># #  /etc/printcap for host rose - restricted
		  group for bamboo # rattan|line|diablo|lp|Diablo 630 Line
		  Printer:\ :sh:sd=/var/spool/lpd/rattan:\ :lp=/dev/lpt0:\
		  :if=/usr/local/libexec/if-simple:
		  bamboo|ps|PS|S|panasonic|Panasonic KX-P4455 PostScript
		  v51.4:\ :sh:sd=/var/spool/lpd/bamboo:sc:rg=artists:\
		  :lp=/dev/ttyd5:fs#0x82000e1:xs#0x820:rw:\
		  :if=/usr/local/libexec/psif:\
		  :df=/usr/local/libexec/psdf:</programlisting>
	      </informalexample> Let us leave the other example
	      <filename>/etc/printcap</filename> file (for the host orchid)
	      alone.  Of course, anyone on orchid can print to <emphasis
		remap=tt>bamboo</emphasis>.  It might be the case that we only
	      allow certain logins on orchid anyway, and want them to have
	      access to the printer.  Or not.</para>
	    
	    <para><emphasis>Note:</emphasis> there can be only one restricted
	      group per printer.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="printing-advanced-restricting-sizes">
	    <title>Controlling Sizes of Jobs Submitted</title>
	    
	    <para> If you have many users accessing the printers, you probably
	      need to put an upper limit on the sizes of the files users can
	      submit to print.  After all, there is only so much free space on
	      the filesystem that houses the spooling directories, and you
	      also need to make sure there is room for the jobs of other
	      users.</para>
	    
	    <para>LPD enables you to limit the maximum byte size a file in a
	      job can be with the <emphasis remap=tt>mx</emphasis> capability.
	      The units are in BUFSIZ blocks, which are 1024 bytes.  If you
	      put a zero for this capability, there will be no limit on file
	      size. Note that the limit applies to <emphasis>files</emphasis>
	      in a job, and <emphasis>not</emphasis> the total job
	      size.</para>
	    
	    <para>LPD will not refuse a file that is larger than the limit you
	      place on a printer.  Instead, it will queue as much of the file
	      up to the limit, which will then get printed.  The rest will be
	      discarded.  Whether this is correct behavior is up for
	      debate.</para>
	    
	    <para>Let us add limits to our example printers <emphasis
		remap=tt>rattan</emphasis> and <emphasis
		remap=tt>bamboo</emphasis>.  Since those artists' PostScript
	      files tend to be large, we will limit them to five megabytes.
	      We will put no limit on the plain text line printer:
	      <informalexample>
		<programlisting># #  /etc/printcap for host rose # # #  No
		  limit on job size: # rattan|line|diablo|lp|Diablo 630 Line
		  Printer:\ :sh:sd=/var/spool/lpd/rattan:\ :lp=/dev/lpt0:\
		  :if=/usr/local/libexec/if-simple: # #  Limit of five
		  megabytes: # bamboo|ps|PS|S|panasonic|Panasonic KX-P4455
		  PostScript v51.4:\
		  :sh:sd=/var/spool/lpd/bamboo:sc:rg=artists:mx#5000:\
		  :lp=/dev/ttyd5:fs#0x82000e1:xs#0x820:rw:\
		  :if=/usr/local/libexec/psif:\
		  :df=/usr/local/libexec/psdf:</programlisting>
	      </informalexample> Again, the limits apply to the local users
	      only.  If you have set up access to your printers remotely,
	      remote users will not get those limits.  You will need to
	      specify the <emphasis remap=tt>mx</emphasis> capability in the
	      remote <filename>/etc/printcap</filename> files as well.  See
	      section <xref
		linkend="printing-advanced-network-rm" remap="Printers
		Installed      on Remote Hosts"> for more information on
	      remote printing.</para>
	    
	    <para>There is another specialized way to limit job sizes from
	      remote printers; see section <xref
		linkend="printing-advanced-restricting-remote"
		remap="Restricting Jobs from Remote Printers">.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="printing-advanced-restricting-remote">
	    <title>Restricting Jobs from Remote Printers</title>
	    
	    <para> The LPD spooling system provides several ways to restrict
	      print jobs submitted from remote hosts:</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>Host restrictions</term>
		  <listitem>
		    <para>You can control from which remote hosts a local LPD
		      accepts requests with the files
		      <filename>/etc/hosts.equiv</filename> and
		      <filename>/etc/hosts.lpd</filename>. LPD checks to see
		      if an incoming request is from a host listed in either
		      one of these files.  If not, LPD refuses the
		      request.</para>
		    
		    <para>The format of these files is simple: one host name
		      per line.  Note that the file
		      <filename>/etc/hosts.equiv</filename> is also used by
		      the  <ulink
			URL="http://www.freebsd.org/cgi/man.cgi?ruserok(3)">ruserok(3)</ulink> protocol, and affects programs like  <ulink URL="http://www.freebsd.org/cgi/man.cgi?rsh">rsh</ulink> and  <ulink URL="http://www.freebsd.org/cgi/man.cgi?rcp">rcp</ulink>, so be careful.</para>
		    
		    <para>For example, here is the
		      <filename>/etc/hosts.lpd</filename> file on the host
		      rose:
		      <informalexample>
			<programlisting>orchid violet
			  madrigal.fishbaum.de</programlisting>
		      </informalexample> This means rose will accept requests
		      from the hosts orchid, violet, and madrigal.fishbaum.de.
		      If any other host tries to access rose's LPD, LPD will
		      refuse them.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Size restrictions</term>
		  
		  <listitem>
		    <para>You can control how much free space there needs to
		      remain on the filesystem where a spooling directory
		      resides.  Make a file called <emphasis
			remap=tt>minfree</emphasis> in the spooling directory
		      for the local printer.  Insert in that file a number
		      representing how many disk blocks (512 bytes) of free
		      space there has to be for a remote job to be
		      accepted.</para>
		    
		    <para>This lets you insure that remote users will not fill
		      your filesystem.  You can also use it to give a certain
		      priority to local users: they will be able to queue jobs
		      long after the free disk space has fallen below the
		      amount specified in the <emphasis
			remap=tt>minfree</emphasis> file.</para>
		    
		    <para>For example, let us add a <emphasis
			remap=tt>minfree</emphasis> file for the printer
		      <emphasis remap=tt>bamboo</emphasis>.  We examine
		      <filename>/etc/printcap</filename> to find the spooling
		      directory for this printer; here is <emphasis
			remap=tt>bamboo</emphasis>'s entry:
		      <informalexample>
			<screen>bamboo|ps|PS|S|panasonic|Panasonic KX-P4455
			  PostScript v51.4:\
			  :sh:sd=/var/spool/lpd/bamboo:sc:rg=artists:mx#5000:\
			  :lp=/dev/ttyd5:fs#0x82000e1:xs#0x820:rw:mx#5000:\
			  :if=/usr/local/libexec/psif:\
			  :df=/usr/local/libexec/psdf:</screen>
		      </informalexample> The spooling directory is the given
		      in the <emphasis remap=tt>sd</emphasis> capability.  We
		      will make three megabytes (which is 6144 disk blocks)
		      the amount of free disk space that must exist on the
		      filesystem for LPD to accept remote jobs:
		      <informalexample>
			<screen>echo 6144 &gt;
			  /var/spool/lpd/bamboo/minfree</screen>
		      </informalexample>
		    </para>
		    
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>User restrictions</term>
		  
		  <listitem>
		    <para>You can control which remote users can print to
		      local printers by specifying the <emphasis
			remap=tt>rs</emphasis> capability in
		      <filename>/etc/printcap</filename>.  When <emphasis
			remap=tt>rs</emphasis> appears in the entry for a
		      locally-attached printer, LPD will accept jobs from
		      remote hosts <emphasis>if</emphasis> the user submitting
		      the job also has an account of the same login name on
		      the local host.  Otherwise, LPD refuses the job.</para>
		    
		    <para>This capability is particularly useful in an
		      environment where there are (for example) different
		      departments sharing a network, and some users transcend
		      departmental boundaries.  By giving them accounts on
		      your systems, they can use your printers from their own
		      departmental systems.  If you would rather allow them to
		      use <emphasis>only</emphasis> your printers and not your
		      compute resources, you can give them ``token'' accounts,
		      with no home directory and a useless shell like
		      <filename>/usr/bin/false</filename>.</para>
		    
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	  </sect3>
	</sect2>
	
	<sect2
	  id="printing-advanced-acct">
	  <title>Accounting for Printer Usage</title>
	  
	  <para> So, you need to charge for printouts.  And why not?  Paper
	    and ink cost money.  And then there are maintenance
	    costs---printers are loaded with moving parts and tend to break
	    down.  You have examined your printers, usage patterns, and
	    maintenance fees and have come up with a per-page (or per-foot,
	    per-meter, or per-whatever) cost.  Now, how do you actually start
	    accounting for printouts?</para>
	  
	  <para>Well, the bad news is the LPD spooling system does not provide
	    much help in this department.  Accounting is highly dependent on
	    the kind of printer in use, the formats being printed, and
	    <emphasis>your</emphasis> requirements in charging for printer
	    usage.</para>
	  
	  <para>To implement accounting, you have to modify a printer's text
	    filter (to charge for plain text jobs) and the conversion filters
	    (to charge for other file formats), to count pages or query the
	    printer for pages printed.  You cannot get away with using the
	    simple output filter, since it cannot do accounting.  See section
	    <xref
	      linkend="printing-advanced-filter-intro"
	      remap="Filters">.</para>
	  
	  <para>Generally, there are two ways to do accounting:
	    <itemizedlist>
	      
	      <listitem>
		<para><emphasis>Periodic accounting</emphasis> is the more
		  common way, possibly because it is easier.  Whenever someone
		  prints a job, the filter logs the user, host, and number of
		  pages to an accounting file.  Every month, semester, year,
		  or whatever time period you prefer, you collect the
		  accounting files for the various printers, tally up the
		  pages printed by users, and charge for usage.  Then you
		  truncate all the logging files, starting with a clean slate
		  for the next period.
		</para>
	      </listitem>
	      
	      <listitem>
		<para><emphasis>Timely accounting</emphasis> is less common,
		  probably because it is more difficult.  This method has the
		  filters charge users for printouts as soon as they use the
		  printers.  Like disk quotas, the accounting is immediate.
		  You can prevent users from printing when their account goes
		  in the red, and might provide a way for users to check and
		  adjust their ``print quotas.'' But this method requires some
		  database code to track users and their quotas.</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para>The LPD spooling system supports both methods easily: since
	    you have to provide the filters (well, most of the time), you also
	    have to provide the accounting code.  But there is a bright side:
	    you have enormous flexibility in your accounting methods.  For
	    example, you choose whether to use periodic or timely accounting.
	    You choose what information to log: user names, host names, job
	    types, pages printed, square footage of paper used, how long the
	    job took to print, and so forth.  And you do so by modifying the
	    filters to save this information.</para>
	  
	  
	  <sect3>
	    <title>Quick and Dirty Printer Accounting</title>
	    
	    <para> FreeBSD comes with two programs that can get you set up
	      with simple periodic accounting right away.  They are the text
	      filter <emphasis remap=tt>lpf</emphasis>, described in section
	      <xref linkend="printing-advanced-lpf" remap="lpf: a Text
		Filter">, and</para>
	    
	    <para><ulink
		URL="http://www.freebsd.org/cgi/man.cgi?pac">pac</ulink>, a
	      program to gather and total entries from printer accounting
	      files.</para>
	    
	    <para>As mentioned in the section on filters (<xref
		linkend="printing-advanced-filters" remap="Filters">), LPD
	      starts the text and the conversion filters with the name of the
	      accounting file to use on the filter command line.  The filters
	      can use this argument to know where to write an accounting file
	      entry.  The name of this file comes from the <emphasis
		remap=tt>af</emphasis> capability in
	      <filename>/etc/printcap</filename>, and if not specified as an
	      absolute path, is relative to the spooling directory.</para>
	    
	    <para>LPD starts <emphasis remap=tt>lpf</emphasis> with page width
	      and length arguments (from the <emphasis remap=tt>pw</emphasis>
	      and <emphasis remap=tt>pl</emphasis> capabilities).  <emphasis
		remap=tt>lpf</emphasis> uses these arguments to determine how
	      much paper will be used.  After sending the file to the printer,
	      it then writes an accounting entry in the accounting file.  The
	      entries look like this:
	      <informalexample>
		<screen>   2.00 rose:andy 3.00 rose:kelly 3.00 orchid:mary
		  5.00 orchid:mary 2.00 orchid:zhang</screen>
	      </informalexample> You should use a separate accounting file for
	      each printer, as <emphasis remap=tt>lpf</emphasis> has no file
	      locking logic built into it, and two <emphasis
		remap=tt>lpf</emphasis>s might corrupt each other's entries if
	      they were to write to the same file at the same time. A easy way
	      to insure a separate accounting file for each printer is to use
	      <literal>af=acct</literal> in
	      <filename>/etc/printcap</filename>. Then, each accounting file
	      will be in the spooling directory for a printer, in a file named
	      <emphasis remap=tt>acct</emphasis>.</para>
	    
	    <para>When you are ready to charge users for printouts, run
	      the</para>
	    
	    <para><ulink
		URL="http://www.freebsd.org/cgi/man.cgi?pac">pac</ulink>
	      program.  Just change to the spooling directory for the printer
	      you want to collect on and type  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?pac">pac</ulink>. You
	      will get a dollar-centric summary like the following:
	      <informalexample>
		<programlisting>  Login               pages/feet   runs
		  price orchid:kelly                5.00    1   $  0.10
		  orchid:mary                31.00    3   $  0.62 orchid:zhang
		  9.00    1   $  0.18 rose:andy                   2.00    1
		  $  0.04 rose:kelly                177.00  104   $  3.54
		  rose:mary                  87.00   32   $  1.74 rose:root
		  26.00   12   $  0.52 total                     337.00  154
		  $  6.74</programlisting>
	      </informalexample> These are the arguments  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?pac">pac</ulink>
	      expects:
	      <variablelist>
		<varlistentry><term><option>-P<replaceable>printer</replaceable></option></term>
		  <listitem>
		    <para>Which <emphasis remap=it>printer</emphasis> to
		      summarize.  This option works only if there is an
		      absolute path in the <emphasis remap=tt>af</emphasis>
		      capability in <filename>/etc/printcap</filename>.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><option>-c</option></term>
		  
		  <listitem>
		    <para>Sort the output by cost instead of alphabetically by
		      user name.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><option>-m</option></term>
		  
		  <listitem>
		    <para>Ignore host name in the accounting files.  With this
		      option, user smith on host alpha is the same user smith
		      on host gamma.  Without, they are different
		      users.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><option>-p<replaceable>price</replaceable></option></term>
		  
		  <listitem>
		    <para>Compute charges with <emphasis
			remap=it>price</emphasis> dollars per page or per foot
		      instead of the price from the <emphasis
			remap=tt>pc</emphasis> capability in
		      <filename>/etc/printcap</filename>, or two cents (the
		      default).  You can specify <emphasis
			remap=it>price</emphasis> as a floating point
		      number.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><option>-r</option></term>
		  
		  <listitem>
		    <para>Reverse the sort order.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><option>-s</option></term>
		  
		  <listitem>
		    <para>Make an accounting summary file and truncate the
		      accounting file.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><emphasis
		      remap=tt><replaceable>names...</replaceable></emphasis></term>
		  
		  <listitem>
		    <para>Print accounting information for the given user
		      <emphasis remap=it>names</emphasis> only.</para>
		    
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	    <para>In the default summary that  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?pac">pac</ulink>
	      produces, you see the number of pages printed by each user from
	      various hosts. If, at your site, host does not matter (because
	      users can use any host), run <command>pac -m</command>, to
	      produce the following summary:
	      <informalexample>
		<programlisting>  Login               pages/feet   runs
		  price andy                        2.00    1   $  0.04 kelly
		  182.00  105   $  3.64 mary                      118.00   35
		  $  2.36 root                       26.00   12   $  0.52
		  zhang                       9.00    1   $  0.18 total
		  337.00  154   $  6.74</programlisting>
	      </informalexample> To compute the dollar amount due,  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?pac">pac</ulink> uses
	      the <emphasis remap=tt>pc</emphasis> capability in the
	      <filename>/etc/printcap</filename> file (default of 200, or 2
	      cents per page).  Specify, in hundredths of cents, the price per
	      page or per foot you want to charge for printouts in this
	      capability.  You can override this value when you run  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?pac">pac</ulink> with
	      the <option>-p</option> option.  The units for the
	      <option>-p</option> option are in dollars, though, not
	      hundredths of cents.  For example,
	      <informalexample>
		<screen>pac -p1.50</screen>
	      </informalexample> makes each page cost one dollar and fifty
	      cents.  You can really rake in the profits by using this
	      option.</para>
	    
	    <para>Finally, running <command>pac -s</command> will save the
	      summary information in a summary accounting file, which is named
	      the same as the printer's accounting file, but with
	      <symbol>_sum</symbol> appended to the name.  It then truncates
	      the accounting file.  When you run  <ulink
		URL="http://www.freebsd.org/cgi/man.cgi?pac">pac</ulink>
	      again, it rereads the summary file to get starting totals, then
	      adds information from the regular accounting file.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>How Can You Count Pages Printed?</title>
	    
	    <para> In order to perform even remotely accurate accounting, you
	      need to be able to determine how much paper a job uses.  This is
	      the essential problem of printer accounting.</para>
	    
	    <para>For plain text jobs, the problem's not that hard to solve:
	      you count how many lines are in a job and compare it to how many
	      lines per page your printer supports.  Do not forget to take
	      into account backspaces in the file which overprint lines, or
	      long logical lines that wrap onto one or more additional
	      physical lines.</para>
	    
	    <para>The text filter <emphasis remap=tt>lpf</emphasis>
	      (introduced in <xref linkend="printing-advanced-lpf" remap="lpf:
		a Text Filter">) takes into account these things when it does
	      accounting. If you are writing a text filter which needs to do
	      accounting, you might want to examine <emphasis
		remap=tt>lpf</emphasis>'s source code.</para>
	    
	    <para>How do you handle other file formats, though?</para>
	    
	    <para>Well, for DVI-to-LaserJet or DVI-to-PostScript conversion,
	      you can have your filter parse the diagnostic output of</para>
	    
	    <para><ulink
		URL="http://www.freebsd.org/cgi/man.cgi?manpath=FreeBSD+Ports&amp;query=dvilj">dvilj</ulink> or  <ulink URL="http://www.freebsd.org/cgi/man.cgi?manpath=FreeBSD+Ports&amp;query=dvips">dvips</ulink> and look to see how many pages were converted.  You might be able to do similar things with other file formats and conversion programs.</para>
	    
	    <para>But these methods suffer from the fact that the printer may
	      not actually print all those pages.  For example, it could jam,
	      run out of toner, or explode---and the user would still get
	      charged.</para>
	    
	    <para>So, what can you do?</para>
	    
	    <para>There is only one <emphasis>sure</emphasis> way to do
	      <emphasis>accurate</emphasis> accounting.  Get a printer that
	      can tell you how much paper it uses, and attach it via a serial
	      line or a network connection.  Nearly all PostScript printers
	      support this notion.  Other makes and models do as well
	      (networked Imagen laser printers, for example).  Modify the
	      filters for these printers to get the page usage after they
	      print each job and have them log accounting information based on
	      that value <emphasis>only</emphasis>.  There is no line counting
	      nor error-prone file examination required.</para>
	    
	    <para>Of course, you can always be generous and make all printouts
	      free.</para>
	    
	  </sect3>
	</sect2>
      </sect1>
      
      <sect1
	id="printing-lpd-alternatives">
	<title>Alternatives to the Standard Spooler</title>
	
	<para> If you have been reading straight through this manual, by now
	  you have learned just about everything there is to know about the
	  LPD spooling system that comes with FreeBSD.  You can probably
	  appreciate many of its shortcomings, which naturally leads to the
	  question: ``What other spooling systems are out there (and work with
	  FreeBSD)?''</para>
	
	<para>Unfortunately, I have located only <emphasis>two</emphasis>
	  alternatives---and they are almost identical to each other!  They
	  are:
	  <variablelist>
	    <varlistentry><term>PLP, the Portable Line Printer Spooler
		System</term>
	      <listitem>
		<para>PLP was based on software developed by Patrick Powell
		  and then maintained by an Internet-wide group of developers.
		  The main site for the software is at  <ulink
		    URL="ftp://ftp.iona.ie/pub/plp">ftp://ftp.iona.ie/pub/plp</ulink>.  There is also a <ulink URL="http://www.iona.ie:8000/www/hyplan/jmason/plp.html">web page</ulink>.</para>
		
		<para>It is quite similar to the BSD LPD spooler, but boasts a
		  host of features, including:
		  <itemizedlist>
		    
		    <listitem>
		      <para>Better network support, including built-in support
			for networked printers, NIS-maintained printcaps, and
			NFS-mounted spooling directories
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para>Sophisticated queue management, allowing multiple
			printers on a queue, transfer of jobs between queues,
			and queue redirection
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para>Remote printer control functions
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para>Prioritization of jobs
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para>Expansive security and access options</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>LPRng</term>
	      
	      <listitem>
		<para>LPRng, which purportedly means ``LPR: the Next
		  Generation'' is a complete rewrite of PLP.  Patrick Powell
		  and Justin Mason (the principal maintainer of PLP)
		  collaborated to make LPRng.  The main site for LPRng is
		  <ulink
		    URL="ftp://dickory.sdsu.edu/pub/LPRng">ftp://dickory.sdsu.edu/pub/LPRng</ulink>.</para>
		
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
	
      </sect1>
      
      <sect1>
	<title>Acknowledgments</title>
	
	<para> I would like to thank the following people who have assisted in
	  the development of this document:</para>
	
	<para>
	  <variablelist>
	    <varlistentry><term>Daniel Eischen
		<email>&lt;deischen@iworks.interworks.org&gt;</email></term>
	      <listitem>
		<para>For providing a plethora of HP filter programs for
		  perusal.</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>&a.jehamby;</term>
	      
	      <listitem>
		<para>For the Ghostscript-to-HP filter.</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>My wife, Mary Kelly
		<email>&lt;urquhart@argyre.colorado.edu&gt;</email></term>
	      
	      <listitem>
		<para>For allowing me to spend more time with FreeBSD than
		  with her.</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	  
	</para>
	
	<para> </para>
	
      </sect1>
    </chapter>
    
    <chapter
      id="quotas">
      <title>Disk Quotas</title>
      
      <para><emphasis>Contributed by &a.mpp;.<!-- <br> -->26 February
	  1996</emphasis></para>
      
      <para>Quotas are an optional feature of the operating system that allow
	you to limit the amount of disk space and/or the number of files a
	user, or members of a group, may allocate on a per-file system basis.
	This is used most often on timesharing systems where it is desirable
	to limit the amount of resources any one user or group of users may
	allocate.  This will prevent one user from consuming all of the
	available disk space.</para>
      
      
      <sect1>
	<title>Configuring Your System to Enable Disk Quotas</title>
	
	<para>Before attempting to use disk quotas it is necessary to make
	  sure that quotas are configured in your kernel. This is done by
	  adding the following line to your kernel configuration file:
	  <literallayout>options		QUOTA</literallayout> The
	  stock GENERIC kernel does not have this enabled by default, so you
	  will have to configure, build and install a custom kernel in order
	  to use  disk quotas.  Please refer to the
	  <xref linkend="kernelconfig" remap="Configuring the FreeBSD Kernel">
	  section for more information on kernel configuration.</para>
	
	<para>Next you will need to enable disk quotas in
	  <filename>/etc/sysconfig</filename>. This is done by changing the
	  line: <literallayout>quotas=NO</literallayout> to:
	  <literallayout>quotas=YES</literallayout>
	</para>
	
	<para>If you are running FreeBSD 2.2.2 or later, the configuration
	  file will be <filename>/etc/rc.conf</filename> instead and the
	  variable name changed to
	  <literallayout>check_quotas=YES</literallayout>
	</para>
	
	<para>Finally you will need to edit <filename>/etc/fstab</filename> to
	  enable  disk quotas on a per-file system basis.  This is where you
	  can either enable user or group quotas or both for all of your file
	  systems.</para>
	
	<para>To enable per-user quotas on a file system, add the  <emphasis
	    remap=tt>userquota</emphasis> option to the options field in the
	  <filename>/etc/fstab</filename> entry for the file system you want
	  to to enable quotas on.  For example: <literallayout>/dev/sd1s2g
	    /home    ufs rw,userquota 1 2</literallayout>
	</para>
	
	<para>Similarly, to enable group quotas, use the <emphasis
	    remap=tt>groupquota</emphasis> option instead of the <emphasis
	    remap=tt>userquota</emphasis> keyword.  To enable both user and
	  group quotas, change the entry as follows:
	  <literallayout>/dev/sd1s2g    /home    ufs rw,userquota,groupquota 1
	    2</literallayout>
	</para>
	
	<para>By default the quota files are stored in the root directory of
	  the file system with the names <filename>quota.user</filename> and
	  <filename>quota.group</filename> for user and group quotas
	  respectively.  See <emphasis remap=tt>man fstab</emphasis> for more
	  information.  Even though that man page says that you can specify an
	  alternate location for the quota files, this is not recommended
	  since all of the various quota utilities do not seem to handle this
	  properly.</para>
	
	<para>At this point you should reboot your system with your new
	  kernel. <filename>/etc/rc</filename> will automatically run the
	  appropriate commands to  create the initial quota files for all of
	  the quotas you enabled in <filename>/etc/fstab</filename>, so there
	  is no need to manually create any zero length quota files.</para>
	
	<para>In the normal course of operations you should not be required to
	  run the <emphasis remap=tt>quotacheck</emphasis>, <emphasis
	    remap=tt>quotaon</emphasis>, or <emphasis
	    remap=tt>quotaoff</emphasis> commands manually.  However, you may
	  want to read their man pages just to be familiar with their
	  operation.</para>
	
      </sect1>
      
      <sect1>
	<title>Setting Quota Limits</title>
	
	<para>Once you have configured your system to enable quotas, verify
	  that they really are enabled.  An easy way to do this is to run
	  <command>quota -v</command>.  You should see a one line summary of
	  disk usage and current quota limits for each file system that quotas
	  are enabled on.</para>
	
	<para>You are now ready to start assigning quota limits with the
	  <emphasis remap=tt>edquota</emphasis> command.</para>
	
	<para>You have several options on how to enforce limits on the amount
	  of disk space a user or group may allocate, and how many files they
	  may create. You may limit allocations based on disk space (block
	  quotas) or number of files (inode quotas) or a combination of both.
	  Each of these limits are further broken down into two categories:
	  hard and soft limits.  </para>
	
	<para>A hard limit may not be exceeded.  Once a user reaches their
	  hard limit they may not make any further allocations on the file
	  system in question.  For example, if the user has a hard limit of
	  500 blocks on a file system and is currently using 490 blocks, the
	  user can only allocate an additional 10 blocks.  Attempting to
	  allocate an additional 11 blocks  will fail.</para>
	
	<para>Soft limits on the other hand can be exceeded for a limited
	  amount of time.  This period of time is known as the grace period,
	  which is one week by default.  If a user stays over his or her soft
	  limit longer than their grace period, the soft limit will turn into
	  a hard limit and no further allocations will be allowed.  When the
	  user drops back below the soft limit, the grace period will be
	  reset.</para>
	
	<para>The following is an example of what you might see when you run
	  then <emphasis remap=tt>edquota</emphasis> command.  When the
	  <emphasis remap=tt>edquota</emphasis> command is invoked, you are
	  placed into the editor specified by the <acronym>EDITOR</acronym>
	  environment variable, or in the <emphasis remap=tt>vi</emphasis>
	  editor  if the <acronym>EDITOR</acronym> variable is not set, to
	  allow you to edit the quota limits. <literallayout># edquota -u test
	    Quotas for user test: /usr: blocks in use: 65, limits (soft = 50,
	    hard = 75) inodes in use: 7, limits (soft = 50, hard = 60)
	    /usr/var: blocks in use: 0, limits (soft = 50, hard = 75) inodes
	    in use: 0, limits (soft = 50, hard = 60)</literallayout> You will
	  normally see two lines for each file system that has quotas enabled.
	  One line for the block limits, and one line for inode limits.
	  Simply change the value you want updated to modify the quota limit.
	  For example, to raise this users block limit from a soft limit of 50
	  and a hard limit of 75 to a soft limit of 500 and a hard limit of
	  600, change: <literallayout>/usr: blocks in use: 65, limits (soft =
	    50, hard = 75)</literallayout> to: <literallayout>/usr: blocks in
	    use: 65, limits (soft = 500, hard = 600)</literallayout> The new
	  quota limits will be in place when you exit the editor.</para>
	
	<para>Sometimes it is desirable to set quota limits on a range of
	  uids.  This can be done by use of the <option>-p</option> option on
	  the <emphasis remap=tt>edquota</emphasis> command.  First, assign
	  the desired quota limit to a user, and then run  <command>edquota -p
	    protouser startuid-enduid</command>. For example, if user
	  <emphasis remap=tt>test</emphasis> has the desired quota limits, the
	  following command can be used to duplicate those quota limits for
	  uids 10,000 through 19,999: <literallayout>edquota -p test
	    10000-19999</literallayout>
	</para>
	
	<para>The ability to specify uid ranges was added to the system after
	  2.1 was released.  If you need this feature on a 2.1 system, you
	  will need to obtain a newer copy of edquota.</para>
	
	<para>See <emphasis remap=tt>man edquota</emphasis> for more detailed
	  information.</para>
	
      </sect1>
      
      <sect1>
	<title>Checking Quota Limits and Disk Usage</title>
	
	<para>You can use either the <emphasis remap=tt>quota</emphasis> or
	  the <emphasis remap=tt>repquota</emphasis> commands to check quota
	  limits and disk usage.  The <emphasis remap=tt>quota</emphasis>
	  command can be used to check individual user and group quotas and
	  disk usage.  Only the super-user may examine quotas and usage for
	  other users, or for groups that they are not a member of. The
	  <emphasis remap=tt>repquota</emphasis> command can be used to get a
	  summary of all quotas and disk usage for file systems with quotas
	  enabled.  </para>
	
	<para>The following is some sample output from the <command>quota
	    -v</command> command for a user that has quota limits on two file
	  systems.</para>
	
	<para>
	  <literallayout>Disk quotas for user test (uid 1002):  Filesystem
	    blocks   quota   limit   grace   files   quota   limit   grace
	    /usr      65*     50      75   5days       7      50      60
	    /usr/var       0      50      75               0      50      60
	  </literallayout> On the /usr file system in the above example this
	  user is  currently 15 blocks over their soft limit of 50 blocks and
	  has 5 days of  their grace period left.  Note the asterisk (*) which
	  indicates that the user is currently over their quota limit.</para>
	
	<para>Normally file systems that the user is not using any disk space
	  on will not show up in the output from the <emphasis
	    remap=tt>quota</emphasis> command, even if they have a quota limit
	  assigned for that file system. The <option>-v</option> option will
	  display those file systems, such as  the
	  <filename>/usr/var</filename> file system in the above
	  example.</para>
	
      </sect1>
      
      <sect1>
	<title>* Quotas over NFS</title>
	
	<para>This section is still under development.</para>
	
      </sect1>
    </chapter>
    
    <chapter>
      <title>The X Window System</title>
      
      <para>Pending the completion of this section, please refer to
	documentation supplied by the <ulink URL="http://www.xfree86.org/">The
	  XFree86 Project, Inc</ulink>.</para>
      
    </chapter>
    
    <chapter
      id="hw">
      <title>PC Hardware compatibility</title>
      
      <para>Issues of hardware compatibility are among the most troublesome in
	the computer industry today and FreeBSD is by no means immune to
	trouble.  In this respect, FreeBSD's advantage of being able to run on
	inexpensive commodity PC hardware is also its liability when it comes
	to support for the amazing variety of components on the market.  While
	it would be impossible to provide a exhaustive listing of hardware
	that FreeBSD supports, this section serves as a catalog of the device
	drivers included with FreeBSD and the hardware each drivers supports.
	Where possible and appropriate, notes about specific products are
	included. You may also want to refer to <xref
	  linkend="kernelconfig-config"
	  remap="the kernel configuration file"> section in this handbook for
	a list of supported devices.</para>
      
      <para>As FreeBSD is a volunteer project without a funded testing
	department, we depend on you, the user, for much of the information
	contained in this catalog.  If you have direct experience of hardware
	that does or does not work with FreeBSD, please let us know by sending
	e-mail to the &a.doc;. Questions about supported hardware should be
	directed to the &a.questions; (see
	<xref linkend="eresources-mail" remap="Mailing Lists"> for more
	information).  When submitting information or asking a question,
	please remember to specify exactly what version of FreeBSD you are
	using and include as many details of your hardware as possible.</para>
      
      
      <sect1>
	<title>Resources on the Internet</title>
	
	<para>The following links have proven useful in selecting hardware.
	  Though some of what you see won't necessarily be specific (or even
	  applicable) to FreeBSD, most of the hardware information out there
	  is OS independent.  Please check with the FreeBSD hardware guide to
	  make sure that your chosen configuration is supported before making
	  any purchases.</para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para><ulink URL="http://www.tomshardware.com/">The Pentium
		  Systems Hardware Performance Guide</ulink></para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
      
      <sect1
	id="hw-configs">
	<title>Sample Configurations</title>
	
	<para>The following list of sample hardware configurations by no means
	  constitutes an endorsement of a given hardware vendor or product by
	  <emphasis>The FreeBSD Project</emphasis>.  This information is
	  provided only as a public service and merely catalogs some of the
	  experiences that various individuals have had with different
	  hardware combinations.  Your mileage may vary. Slippery when wet.
	  Beware of dog.</para>
	
	
	<sect2
	  id="hw-jordans-picks">
	  <title>Jordan's Picks</title>
	  
	  <para>I have had fairly good luck building workstation and server
	    configurations with the following components.  I can't guarantee
	    that you will too, nor that any of the companies here will remain
	    "best buys" forever.  I will try, when I can, to keep this list
	    up-to-date but cannot obviously guarantee that it will be at any
	    given time.</para>
	  
	  
	  <sect3
	    id="hw-mb">
	    <title>Motherboards</title>
	    
	    <para>For Pentium Pro (P6) systems, I'm quite fond of the <ulink
		URL="http://www.tyan.com/html/products.html">Tyan</ulink>
	      S1668 dual-processor motherboard.  It makes a dandy little
	      single or dual processor system (which is supported in FreeBSD
	      3.0) and the price of the Pentium Pro 180/256K chip has fallen
	      to truly affordable levels.  The Pentium Pro remains my favorite
	      processor solution server systems (Megahertz ratings aren't
	      everything).</para>
	    
	    <para>For the Pentium II, I'm rather partial to the <ulink
		URL="http://www.asus.com.tw">ASUS</ulink> <ulink
		URL="http://www.asus.com.tw/Products/Motherboard/Pentiumpro/P2l97-s/index.html">P2l97-S</ulink> motherboard with the on-board Adaptec SCSI WIDE controller.</para>
	    
	    <para>For Pentium machines, the ASUS <ulink
		URL="http://www.asus.com.tw/Products/Motherboard/Pentium/P55tp4/index.html">P55T2P4</ulink> motherboard appears to be a good choice for mid-to-high range Pentium server and workstation systems.  You might also wish to investigate ASUS's <ulink URL="http://asustek.asus.com.tw/FTP/ASUS/Info/Spec/pvi-486sp3.txt">486SP3G</ulink> offering if it's a 486-class motherboard you're looking for (Note:  These have become increasingly hard to get as ASUS apparently no longer manufactures them).</para>
	    
	    <para>Those wishing to build more fault-tolerant systems should
	      also be sure to use Parity memory or, for truly 24/7
	      applications, ECC memory.  Note that ECC memory does involve a
	      slight performance trade-off (which may or may not be noticeable
	      depending on your application) but buys you significantly
	      increased fault-tolerance to memory errors.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Disk Controllers</title>
	    
	    <para>This one is a bit trickier, and while I used to recommend
	      the <ulink URL="http://www.buslogic.com">Buslogic</ulink>
	      controllers unilaterally for everything from ISA to PCI, now I
	      tend to lean towards the <ulink
		URL="http://www.adaptec.com">Adaptec</ulink> 1542CF for ISA,
	      Buslogic Bt747c for EISA and Adaptec 2940UW for PCI.</para>
	    
	    <para>The NCR/Symbios cards for PCI have also worked well for me,
	      though you need to make sure that your motherboard supports the
	      BIOS-less model if you're using one of those (if your card has
	      nothing which looks even vaguely like a ROM chip on it, you've
	      probably got one which expects its BIOS to be on your
	      motherboard).</para>
	    
	    <para>If you should find that you need more than one SCSI
	      controller in a PCI machine, you may wish to consider conserving
	      your scarce PCI bus resources by buying the Adaptec 3940 card,
	      which puts two SCSI controllers (and internal busses) in a
	      single slot.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="hw-disks">
	    <title>Disk drives</title>
	    
	    <para>In this particular game of Russian roulette, I'll make few
	      specific recommendations except to say "SCSI over IDE whenever
	      you can afford it." Even in small desktop configurations, SCSI
	      often makes more sense since it allows you to easily migrate
	      drives from server to desktop as falling drive prices make it
	      economical to do so.  If you have more than one machine to
	      administer then think of it not simply as storage, think of it
	      as a food chain!</para>
	    
	    <para>I do not currently see SCSI WIDE drives as a necessary
	      expense unless you're putting together an NFS or NEWS server
	      that will be doing a lot of multiuser disk I/O.  </para>
	    
	  </sect3>
	  
	  <sect3
	    id="hw-jordans-picks-cdrom">
	    <title>CDROM drives</title>
	    
	    <para>My SCSI preferences extend to SCSI CDROM drives as well, and
	      while the <ulink URL="http://www.toshiba.com">Toshiba</ulink>
	      XM-3501B (also released in a caddy-less model called the
	      XM-5401B) drive has always performed well for me, I'm now a
	      great fan of the <ulink
		URL="http://www.plextor.com">Plextor</ulink> PX-12CS drive.
	      It's a 12 speed drive with excellent performance and
	      reliability.</para>
	    
	    <para>Generally speaking, most SCSI CDROM drives I've seen have
	      been of pretty solid construction and you probably won't go
	      wrong with an HP or NEC SCSI CDROM drive either.  SCSI CDROM
	      prices also appear to have dropped considerably in the last few
	      months and are now quite competitive with IDE CDROMs while
	      remaining a technically superior solution.  I now see no reason
	      whatsoever to settle for an IDE CDROM drive if given a choice
	      between the two.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="hw-worm">
	    <title>CD Recordable (WORM) drives</title>
	    
	    <para>At the time of this writing, FreeBSD supports 3 types of CDR
	      drives (though I believe they all ultimately come from Phillips
	      anyway): The Phillips CDD 522 (Acts like a Plasmon), the PLASMON
	      RF4100 and the HP 6020i.  I myself use the HP 6020i for burning
	      CDROMs (with 2.2-current - it does not work with 2.1.5 or
	      earlier releases of the SCSI code) and it works very well.  See
	      <ulink
		URL="file:/usr/share/examples/worm">/usr/share/examples/worm</ulink> on your 2.2 system for example scripts used to created ISO9660 filesystem images (with RockRidge extensions) and burn them onto an HP6020i CDR.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="hw-tape">
	    <title>Tape drives</title>
	    
	    <para>I've had pretty good luck with both <ulink
		URL="http://www.Exabyte.COM:80/Products/8mm/8505XL/Rfeatures.html">8mm drives</ulink> from <ulink URL="http://www.exabyte.com">Exabyte</ulink> and  <ulink URL="http://www-dmo.external.hp.com:80/tape/_cpb0001.htm">4mm (DAT)</ulink> drives from <ulink URL="http://www.hp.com">HP</ulink>.</para>
	    
	    <para>For backup purposes, I'd have to give the higher
	      recommendation to the Exabyte due to the more robust nature (and
	      higher storage capacity) of 8mm tape.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="hw-video">
	    <title>Video Cards</title>
	    
	    <para>If you can also afford to buy a commercial X server for
	      US&#36;99 from <ulink URL="http://www.xig.com/">Xi Graphics,
		Inc. (formerly X Inside, Inc)</ulink> then I can heartily
	      recommend the <ulink URL="http://www.matrox.com/">Matrox</ulink>
	      <ulink
		URL="http://www.matrox.com/mgaweb/brochure.htm">Millenium</ulink> card.  Note that support for this card is also excellent with the <ulink URL="http://www.xfree86.org/">XFree86</ulink> server, which is now at version 3.3.2.</para>
	    
	    <para>You also certainly can't go wrong with one of <ulink
		URL="http://www.nine.com/">Number 9's</ulink> cards - their S3
	      Vision 868 and 968 based cards (the 9FX series) also being quite
	      fast and very well supported by XFree86's S3 server.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="hw-monitors">
	    <title>Monitors</title>
	    
	    <para>I have had very good luck with the <ulink
		URL="http://cons3.sel.sony.com/SEL/ccpg/display/ms17se2.html">Sony Multiscan 17seII monitors</ulink>, as have I with  the Viewsonic offering in the same (Trinitron) tube.  For larger than 17", all I can recommend at the time of this writing is to not spend any less than U.S. &#36;2,500 for a 21" monitor or &#36;1,700 for a 20" monitor if that's what you really need.  There are good monitors available in the &gt;=20" range and there are also cheap monitors in the &gt;=20" range.  Unfortunately, very few are both cheap and good!</para>
	    
	  </sect3>
	  
	  <sect3
	    id="hw-networking">
	    <title>Networking</title>
	    
	    <para>I can recommend the <ulink
		URL="http://www.smc.com/">SMC</ulink> Ultra 16 controller for
	      any ISA application and the SMC EtherPower or Compex ENET32
	      cards for any serious PCI based networking.  Both of the PCI
	      cards are based around DEC's DC21041 Ethernet controller chip
	      and other cards using it, such as the Zynx ZX342 or DEC DE435,
	      will generally work as well.  For 100Mbit networking, either the
	      SMC SMC9332DST 10/100MB or Intel EtherExpress Pro/100B cards
	      will do a fine job, the Intel EtherExpress generally getting my
	      vote.</para>
	    
	    <para>If what you're looking for is, on the other hand, the
	      cheapest possible solution which will still work reasonably
	      well, then almost any NE2000 clone is a good choice.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="hw-serial">
	    <title>Serial</title>
	    
	    <para>If you're looking for high-speed serial networking
	      solutions, then <ulink URL="http://www.dgii.com/">Digi
		International</ulink> makes the <ulink
		URL="http://www.dgii.com/prodprofiles/profiles-prices/digiprofiles/digispecs/sync570.html">SYNC/570</ulink> series, with drivers now in FreeBSD-current. <ulink URL="http://www.etinc.com">Emerging Technologies</ulink> also manufactures a board with T1/E1 capabilities, using software they provide.  I have no direct experience using either product, however.</para>
	    
	    <para>Multiport card options are somewhat more numerous, though it
	      has to be said that FreeBSD's support for <ulink
		URL="http://www.cyclades.com/">Cyclades</ulink>'s products is
	      probably the tightest, primarily as a result of that company's
	      commitment to making sure that we are adequately supplied with
	      evaluation boards and technical specs.  I've heard that the
	      Cyclom-16Ye offers the best price/performance, though I've not
	      checked the prices lately. Other multiport cards I've heard good
	      things about are the BOCA and AST cards, and <ulink
		URL="http://www.stallion.com/">Stallion
		Technologies</ulink> apparently offers an unofficial driver
	      for their  cards at <ulink
		URL="ftp://ftp.stallion.com/drivers/unsupported/freebsd/stalbsd-0.0.4.tar.gz">this</ulink> location.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="hw-audio">
	    <title>Audio</title>
	    
	    <para>I currently use a <ulink
		URL="http://www.creaf.com/">Creative Labs</ulink> AWE32 though
	      just about anything from Creative Labs will generally work these
	      days.  This is not to say that other types of sound cards don't
	      also work, simply that I have little experience with them (I was
	      a former GUS fan, but Gravis's soundcard situation has been dire
	      for some time).</para>
	    
	  </sect3>
	  
	  <sect3
	    id="hw-vgrabbers">
	    <title>Video</title>
	    
	    <para>For video capture, there are two good choices - any card
	      based on the Brooktree BT848 chip, such as the Hauppage or WinTV
	      boards, will work very nicely with FreeBSD.  Another board which
	      works for me is the <ulink
		URL="http://www.matrox.com/">Matrox</ulink> <ulink
		URL="http://www.matrox.com/imgweb/meteor.htm">Meteor</ulink>
	      card.  FreeBSD also supports the older video spigot card from
	      Creative Labs, but those are getting somewhat difficult to find.
	      Note that the Meteor frame grabber card <emphasis>will not
		work</emphasis> with motherboards based on the 440FX chipset!
	      See the
	      <xref linkend="hw-mb" remap="motherboard reference"> section for
	      details. In such cases, it's better to go with a BT848 based
	      board.</para>
	    
	  </sect3>
	</sect2>
      </sect1>
      
      <sect1
	id="hw-core">
	<title>Core/Processing</title>
	
	
	<sect2>
	  <title>Motherboards, busses, and chipsets</title>
	  
	  
	  <sect3>
	    <title>* ISA</title>
	    
	  </sect3>
	  
	  <sect3>
	    <title>* EISA</title>
	    
	  </sect3>
	  
	  <sect3>
	    <title>* VLB</title>
	    
	  </sect3>
	  
	  <sect3
	    id="hw-mb-pci">
	    <title>PCI</title>
	    
	    <para><emphasis>Contributed by &a.rgrimes;.<!-- <br> -->25 April
		1995.</emphasis></para>
	    
	    <para><emphasis>Continuing updates by &a.jkh;.</emphasis><!-- <br>
	      -->Last update on <emphasis>26 August 1996.</emphasis></para>
	    
	    <para>Of the Intel PCI chip sets, the following list describes
	      various types of known-brokenness and the degree of breakage,
	      listed from worst to best.</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>Mercury:</term>
		  <listitem>
		    <para>Cache coherency problems, especially if there are
		      ISA bus masters behind the ISA to PCI bridge chip.
		      Hardware flaw, only known work around is to turn the
		      cache off.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Saturn-I <emphasis>(ie, 82424ZX at rev 0,
		      1 or 2)</emphasis>:</term>
		  
		  <listitem>
		    <para>Write back cache coherency problems.  Hardware flaw,
		      only known work around is to set the external cache to
		      write-through mode.  Upgrade to Saturn-II.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Saturn-II <emphasis>(ie, 82424ZX at rev 3
		      or 4)</emphasis>:</term>
		  
		  <listitem>
		    <para>Works fine, but many MB manufactures leave out the
		      external dirty bit SRAM needed for write back operation.
		      Work arounds are either run it in write through mode, or
		      get the dirty bit SRAM installed.  (I have these for the
		      ASUS PCI/I-486SP3G rev 1.6 and later boards).</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Neptune:</term>
		  
		  <listitem>
		    <para>Can not run more than 2 bus master devices.
		      Admitted Intel design flaw. Workarounds include do not
		      run more than 2 bus masters, special hardware design to
		      replace the PCI bus arbiter (appears on Intel Altair
		      board and several other Intel server group MB's).  And
		      of course Intel's official answer, move to the Triton
		      chip set, we ``fixed it there''.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Triton <emphasis>(ie,
		      430FX)</emphasis>:</term>
		  
		  <listitem>
		    <para>No known cache coherency or bus master problems,
		      chip set does not implement parity checking.  Workaround
		      for parity issue. Use Triton-II based motherboards if
		      you have the choice.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Triton-II <emphasis>(ie,
		      430HX)</emphasis>:</term>
		  
		  <listitem>
		    <para>All reports on motherboards using this chipset have
		      been favorable so far.  No known problems.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Orion:</term>
		  
		  <listitem>
		    <para>Early versions of this chipset suffered from a PCI
		      write-posting bug which can cause noticeable performance
		      degradation in applications where large amounts of PCI
		      bus traffic is involved.  B0 stepping or later revisions
		      of the chipset fixed this problem.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><ulink
		      URL="http://developer.intel.com/design/pcisets/desktop.htm#440FX">440FX</ulink>:</term>
		  
		  <listitem>
		    <para>This <ulink
			URL="http://www.intel.com/procs/ppro/index.htm">Pentium Pro</ulink> support chipset seems to work well, and does not suffer from any of the early Orion chipset problems.  It also supports a wider variety of memory, including ECC and parity.  The only known problem with it is that the Matrox Meteor frame grabber card doesn't like it.</para>
		    
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title>CPUs/FPUs</title>
	  
	  <para><emphasis>Contributed by &a.asami;.<!-- <br> -->26 December
	      1997.</emphasis></para>
	  
	  
	  <sect3>
	    <title>P6 class (Pentium Pro/Pentium II)</title>
	    
	    <para>Both the Pentium Pro and Pentium II work fine with FreeBSD.
	      In fact, our main ftp site <ulink
		URL="ftp://ftp.freebsd.org/">ftp.freebsd.org</ulink> (also
	      known as "<filename>ftp.cdrom.com</filename>", world's largest
	      ftp site) runs FreeBSD on a Pentium Pro.  <ulink
		URL="ftp://ftp.cdrom.com/archive-info/wcarchive.txt">Configurations details</ulink> are available for interested parties.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Pentium class</title>
	    
	    <para>The Intel Pentium (P54C), Pentium MMX (P55C), AMD K6 and
	      Cyrix/IBM 6x86MX processors are all reported to work with
	      FreeBSD.  I will not go into details of which processor is
	      faster than what, there are zillions of web sites on the
	      Internet that tells you one way or another. <emphasis
		remap=tt>:)</emphasis></para>
	    
	    <para>Note that various CPUs have different voltage/cooling
	      requirements.  Make sure your motherboard can supply the exact
	      voltage needed by the CPU.  For instance, many recent MMX chips
	      require split voltage (e.g., 2.9V core, 3.3V I/O).  Also, some
	      AMD and Cyrix/IBM chips run hotter than Intel chips.  In that
	      case, make sure you have good heatsink/fans (you can get the
	      list of certified parts from their web pages).</para>
	    
	    
	    <sect4>
	      <title>Clock speeds</title>
	      
	      <para><emphasis>Contributed by &a.rgrimes;.<!-- <br> -->1
		  October 1996.</emphasis></para>
	      
	      <para><emphasis>Updated by &a.asami;.<!-- <br> -->27 December
		  1997.</emphasis></para>
	      
	      <para>Pentium class machines use different clock speeds for the
		various parts of the system.  These being the speed of the
		CPU, external memory bus, and the PCI bus.  It is not always
		true that a "faster" processor will make a system faster than
		a "slower" one, due to the various clock speeds used. Below is
		a table showing the differences:</para>
	      
	      <para>
		<informalexample>
		  <screen>         Rated External Clock  External to     PCI
		    Bus CPU  and Memory Bus  Internal Clock  Clock MHz  MHz**
		    Multiplier      MHz 60   60              1.0
		    30 66   66              1.0             33 75   50
		    1.5             25 90   60              1.5             30
		    100  50*             2               25 100  66
		    1.5             33 120  60              2               30
		    133  66              2               33 150  60
		    2.5             30      (Intel, AMD) 150  75
		    2               37.5    (Cyrix/IBM 6x86MX) 166  66
		    2.5             33 180  60              3               30
		    200  66              3               33 233  66
		    3.5             33 *  The Pentium 100 can be run at either
		    50MHz external clock with a multiplier of 2 or at 66MHz
		    and a multiplier of 1.5. ** 66 MHz may actually be 66.667
		    MHz, but don't assume so.
		  </screen>
		</informalexample>
	      </para>
	      
	      <para>As can be seen the best parts to be using are the 100,
		133, 166, 200 and 233, with the exception that at a multiplier
		of 3 or more  the CPU starves for memory.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>The AMD K6 Bug</title>
	      
	      <para>In 1997, there have been reports of the AMD K6 seg
		faulting during heavy compilation.  That problem has been
		fixed in 3Q '97. According to reports, K6 chips with date mark
		"9733" or larger (i.e., manufactured in the 33rd week of '97
		or later) do not have this bug.</para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title>* 486 class</title>
	    
	  </sect3>
	  
	  <sect3>
	    <title>* 386 class</title>
	    
	  </sect3>
	  
	  <sect3>
	    <title>286 class</title>
	    
	    <para>Sorry, FreeBSD does not run on 80286 machines.  It is nearly
	      impossible to run today's large full-featured UNIXes on such
	      hardware.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title>* Memory</title>
	  
	  <para>The minimum amount of memory you must have to install FreeBSD
	    is 5 MB. Once your system is up and running you can <xref
	      linkend="kernelconfig-building" remap="build a custom kernel">
	    that will use less memory. If you use the boot4.flp you can get
	    away with having only 4 MB.</para>
	  
	</sect2>
	
	<sect2>
	  <title>* BIOS</title>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="hw-io">
	<title>Input/Output Devices</title>
	
	
	<sect2>
	  <title>* Video cards</title>
	  
	</sect2>
	
	<sect2>
	  <title>* Sound cards</title>
	  
	</sect2>
	
	<sect2>
	  <title>Serial ports and multiport cards</title>
	  
	  
	  <sect3
	    id="uart">
	    <title>The UART: What it is and how it works</title>
	    
	    <para><emphasis>Copyright &copy; 1996 &a.uhclem;, All Rights
		Reserved.<!-- <br> --> 13 January 1996.</emphasis></para>
	    
	    <para>The Universal Asynchronous Receiver/Transmitter (UART)
	      controller is the key component of the serial communications
	      subsystem of a computer.  The UART takes bytes of data and
	      transmits the individual bits in a sequential fashion.  At the
	      destination, a second UART re-assembles the bits into complete
	      bytes.</para>
	    
	    <para>Serial transmission is commonly used with modems and for
	      non-networked communication between computers, terminals and
	      other devices.</para>
	    
	    <para>There are two primary forms of serial transmission:
	      Synchronous and Asynchronous.  Depending on the modes that are
	      supported by the  hardware, the name of the communication
	      sub-system will usually include a "A" if it supports
	      Asynchronous communications, and a "S" if it supports
	      Synchronous communications.  Both forms are described
	      below.</para>
	    
	    <para>Some common acronyms are:
	      <blockquote>
		<para>UART	Universal Asynchronous
		  Receiver/Transmitter</para>
	      </blockquote>
	      
	      <blockquote>
		<para>USART	Universal Synchronous-Asynchronous
		  Receiver/Transmitter</para>
	      </blockquote>
	    </para>
	    
	    
	    <sect4>
	      <title>Synchronous Serial Transmission</title>
	      
	      <para>Synchronous serial transmission requires that the sender
		and receiver share a clock with one another, or that the
		sender provide a strobe or other timing signal so that the
		receiver knows when to "read" the next bit of the data.  In
		most forms of serial Synchronous communication, if there is no
		data available at a given instant to transmit, a fill
		character must be sent instead so that data is always being
		transmitted.   Synchronous communication is usually more
		efficient because only data bits are transmitted between
		sender and receiver, and synchronous communication can be more
		more costly if extra wiring and circuits are required to share
		a clock signal between the sender and receiver.</para>
	      
	      <para>A form of Synchronous transmission is used with printers
		and fixed disk devices in that the data is sent on one set of
		wires while a clock or strobe is sent on a different wire.
		Printers and fixed disk devices are not normally serial
		devices because most fixed disk interface standards send an
		entire word of data for each clock or strobe signal by using a
		separate wire for each bit of the word.  In the PC industry,
		these are known as Parallel devices.</para>
	      
	      <para>The standard serial communications hardware in the PC does
		not support Synchronous operations.  This mode is described
		here for comparison purposes only.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Asynchronous Serial Transmission</title>
	      
	      <para>Asynchronous transmission allows data to be transmitted
		without the sender having to send a clock signal to the
		receiver.  Instead, the sender and receiver must agree on
		timing parameters in advance and special bits are added to
		each word which are used to synchronize the sending and
		receiving units.</para>
	      
	      <para>When a word is given to the UART for Asynchronous
		transmissions, a bit called the "Start Bit" is added to the
		beginning of each word  that is to be transmitted.  The Start
		Bit is used to alert the receiver that a word of data is about
		to be sent, and to force the clock in the receiver into
		synchronization with the clock in the transmitter.  These two
		clocks must be accurate enough to not  have the frequency
		drift by more than 10% during the transmission of the
		remaining bits in the word.  (This requirement was set in the
		days of mechanical teleprinters and is easily met by modern
		electronic equipment.)</para>
	      
	      <para>After the Start Bit, the individual bits of the word of
		data are sent, with the Least Significant Bit (LSB) being sent
		first.  Each  bit in the transmission is transmitted for
		exactly the same amount of time as all of the other bits, and
		the receiver "looks" at the wire at approximately halfway
		through the period assigned to each bit to determine if the
		bit is a "1" or a "0".  For example, if it takes two seconds
		to send each bit, the receiver will examine the signal to
		determine if it is a "1" or a "0" after one second has passed,
		then it will wait two seconds and then examine the value of
		the next bit, and so on.</para>
	      
	      <para>The sender does not know when the receiver has "looked" at
		the value of the bit.  The sender only knows when the clock
		says to begin transmitting the next bit of the word.</para>
	      
	      <para>When the entire data word has been sent, the transmitter
		may add a Parity Bit that the transmitter generates.  The
		Parity Bit may be used by the receiver to perform simple error
		checking.  Then at least one Stop Bit is sent by the
		transmitter.  </para>
	      
	      <para>When the receiver has received all of the bits in the data
		word, it may check for the Parity Bits (both sender and
		receiver must agree on whether a Parity Bit is to be used),
		and then the receiver looks for a Stop Bit.  If the Stop Bit
		does not appear when it is supposed to, the UART considers the
		entire word to be garbled and will report a Framing Error to
		the host processor when the data word is read.  The usual
		cause of a Framing Error is that the sender and receiver
		clocks were not running at the same speed, or that the signal
		was interrupted.</para>
	      
	      <para>Regardless of whether the data was received correctly or
		not, the UART automatically discards the Start, Parity and
		Stop bits.  If the sender and receiver are configured
		identically, these bits are not passed to the host.</para>
	      
	      <para>If another word is ready for transmission, the Start Bit
		for the new word can be sent as soon as the Stop Bit for the
		previous word has been sent.</para>
	      
	      <para>Because asynchronous data is "self synchronizing", if
		there is no data to transmit, the transmission line can be
		idle.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Other UART Functions</title>
	      
	      <para>In addition to the basic job of converting data from
		parallel to serial for transmission and from serial to
		parallel on reception, a UART will usually provide additional
		circuits for signals that can be used to indicate the state of
		the transmission media, and to regulate the flow of data in
		the event that the remote device is not prepared to accept
		more data.  For example, when the  device connected to the
		UART is a modem, the modem may report the presence of a
		carrier on the phone line while the computer may be able to
		instruct the modem to reset itself or to not take calls by
		asserting or deasserting one more more of these extra signals.
		The function of each of these additional signals is defined in
		the EIA RS232-C standard.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>The RS232-C and V.24 Standards</title>
	      
	      <para>In most computer systems, the UART is connected to
		circuitry that generates signals that comply with the EIA
		RS232-C specification. There is also a CCITT standard named
		V.24 that mirrors the specifications included in
		RS232-C.</para>
	      
	      
	      <sect5>
		<title>RS232-C Bit Assignments (Marks and Spaces)</title>
		
		<para>In RS232-C, a value of "1" is called a "Mark" and a
		  value of "0" is called a "Space".  When a communication line
		  is idle, the line is said to be "Marking", or transmitting
		  continuous "1" values.</para>
		
		<para>The Start bit always has a value of "0" (a Space).  The
		  Stop Bit always has a value of "1"  (a Mark).  This means
		  that there will always be a Mark (1) to Space (0) transition
		  on the line at the start of every word, even when multiple
		  word are transmitted back to back.  This guarantees that
		  sender and receiver can resynchronize their clocks
		  regardless of the content of the data bits that are being
		  transmitted.</para>
		
		<para>The idle time between Stop and Start bits does not have
		  to be an exact multiple (including zero) of the bit rate of
		  the communication link, but most UARTs are designed this way
		  for simplicity.</para>
		
		<para>In RS232-C, the "Marking" signal (a "1") is represented
		  by a voltage between -2 VDC and -12 VDC, and a "Spacing"
		  signal (a "0") is represented by a voltage between 0 and +12
		  VDC.  The transmitter is supposed to send +12 VDC or -12
		  VDC, and the receiver is supposed to allow for some voltage
		  loss in long cables.  Some transmitters in low power devices
		  (like portable computers) sometimes use only +5 VDC and -5
		  VDC, but these values are still acceptable to a RS232-C
		  receiver, provided that the cable lengths are short.</para>
		
	      </sect5>
	      
	      <sect5>
		<title>RS232-C Break Signal</title>
		
		<para>RS232-C also specifies a signal called a "Break", which
		  is caused by sending continuous Spacing values (no Start or
		  Stop bits).  When there is no electricity present on the
		  data circuit, the line is considered to be sending "Break".
		</para>
		
		<para>The "Break" signal must be of a duration longer than the
		  time it takes to send a complete byte plus Start, Stop and
		  Parity bits. Most UARTs can distinguish between a Framing
		  Error and a Break, but if the UART cannot do this, the
		  Framing Error detection can be used to identify
		  Breaks.</para>
		
		<para>In the days of teleprinters, when numerous printers
		  around the country were wired in series (such as news
		  services), any unit could cause a "Break" by temporarily
		  opening the entire circuit so that no current flowed.  This
		  was used to allow a location with urgent news to interrupt
		  some other location that was currently sending
		  information.</para>
		
		<para>In modern systems there are two types of Break signals.
		  If the Break is longer than 1.6 seconds, it is considered a
		  "Modem Break", and some modems can be programmed to
		  terminate the conversation and go on-hook or enter the
		  modems' command mode when the modem detects this signal.  If
		  the Break is smaller than 1.6 seconds, it signifies a Data
		  Break and it is up to the remote computer to respond to this
		  signal.  Sometimes this form of Break is used as an
		  Attention or Interrupt signal and sometimes is accepted as a
		  substitute for the ASCII CONTROL-C character.</para>
		
		<para>Marks and Spaces are also equivalent to "Holes" and "No
		  Holes" in paper tape systems.</para>
		
		<para>Note that Breaks cannot be generated from paper tape or
		  from any other byte value, since bytes are always sent with
		  Start and Stop bit.  The UART is usually capable of
		  generating the continuous Spacing signal in response to a
		  special command from the host processor.</para>
		
	      </sect5>
	      
	      <sect5>
		<title>RS232-C DTE and DCE Devices</title>
		
		<para>The RS232-C specification defines two types of
		  equipment: the Data Terminal Equipment (DTE) and the Data
		  Carrier Equipment (DCE).   Usually, the DTE device is the
		  terminal (or computer), and the DCE is a modem.  Across the
		  phone line at the other end of a conversation, the receiving
		  modem is also a DCE device and the computer that is
		  connected to that modem is a DTE device.  The DCE device
		  receives signals on the pins that the DTE device transmits
		  on, and vice versa.</para>
		
		<para>When two devices that are both DTE or both DCE must be
		  connected together without a modem or a similar media
		  translater between them, a NULL modem must be used.  The
		  NULL modem electrically re-arranges the cabling so that the
		  transmitter output is connected to the receiver input on the
		  other device, and vice versa.  Similar translations are
		  performed on all of the control signals so that each device
		  will see what it thinks are DCE (or DTE) signals from the
		  other device.</para>
		
		<para>The number of signals generated by the DTE and DCE
		  devices are not symmetrical.  The DTE device generates fewer
		  signals for the DCE device than the DTE device receives from
		  the DCE.</para>
		
	      </sect5>
	      
	      <sect5>
		<title>RS232-C Pin Assignments</title>
		
		<para>The EIA RS232-C specification (and the ITU equivalent,
		  V.24) calls for a twenty-five pin connector (usually a DB25)
		  and defines the purpose of most of the pins in that
		  connector.  </para>
		
		<para>In the IBM Personal Computer and similar systems, a
		  subset of RS232-C signals are provided via nine pin
		  connectors (DB9). The signals that are not included on the
		  PC connector deal mainly with synchronous operation, and
		  this transmission mode is not supported by the UART that IBM
		  selected for use in the IBM PC.</para>
		
		<para>Depending on the computer manufacturer, a DB25, a DB9,
		  or both types of connector may be used for RS232-C
		  communications. (The IBM PC also uses a DB25 connector for
		  the parallel printer interface which causes some
		  confusion.)</para>
		
		<para>Below is a table of the RS232-C signal assignments in
		  the DB25 and DB9 connectors.</para>
		
		<para>
		  <literallayout>DB25	DB9	EIA	CCITT	Common	Signal
		    Description RS232-C	IBM PC	Circuit	Circuit	Name	Source
		    Pin	Pin	Symbol	Symbol	 1	-	AA	101
		    PG/FG	---	Frame/Protective Ground 2	3
		    BA	103	TD	DTE	Transmit Data 3	2	BB
		    104	RD	DCE	Receive Data 4	7	CA	105
		    RTS	DTE	Request to Send 5	8	CB	106
		    CTS	DCE	Clear to Send 6	6	CC	107	DSR
		    DCE	Data Set Ready 7	5	AV	102	SG/GND
		    ---	Signal Ground 8	1	CF	109	DCD/CD	DCE
		    Data Carrier Detect 9	-	-	-	-
		    -	Reserved for Test 10	-	-	-	-
		    -	Reserved for Test 11	-	-	-	-
		    -	Unassigned 12	-	CI	122	SRLSD	DCE
		    Sec. Recv. Line Signal Detector 13	-	SCB	121
		    SCTS	DCE	Secondary Clear To Send 14	-
		    SBA	118	STD	DTE	Secondary Transmit Data 15
		    -	DB	114	TSET	DCE	Trans. Sig. Element
		    Timing 16	-	SBB	119	SRD	DCE
		    Secondary Received Data 17	-	DD	115	RSET
		    DCE	Receiver Signal Element Timing 18	-	-
		    141	LOOP	DTE	Local Loopback  19	-	SCA
		    120	SRS	DTE	Secondary Request to Send 20	4
		    CD	108.2	DTR	DTE	Data Terminal Ready 21	-
		    -	-	RDL	DTE	Remote Digital Loopback 22
		    9	CE	125	RI	DCE	Ring Indicator 23
		    -	CH	111	DSRS	DTE	Data Signal Rate
		    Selector 24	-	DA	113	TSET	DTE	Trans.
		    Sig. Element Timing 25	-	-	142	-
		    DCE	Test Mode</literallayout>
		</para>
		
	      </sect5>
	    </sect4>
	    
	    <sect4>
	      <title>Bits, Baud and Symbols</title>
	      
	      <para>Baud is a measurement of transmission speed in
		asynchronous communication.  Because of advances in modem
		communication technology, this term is frequently misused when
		describing the data rates in newer devices.</para>
	      
	      <para>Traditionally, a Baud Rate represents the number of bits
		that are actually being sent over the media, not the amount of
		data that is actually moved from one DTE device to the other.
		The Baud count includes the overhead bits Start, Stop and
		Parity that are generated by the sending UART and removed by
		the receiving UART.  This means that seven-bit words of data
		actually take 10 bits to be completely transmitted. Therefore,
		a modem capable of moving 300 bits per second from one place
		to another can normally only move 30 7-bit words if Parity is
		used and one Start and Stop bit are present.  </para>
	      
	      <para>If 8-bit data words are used and Parity bits are also
		used, the data rate falls to 27.27 words per second, because
		it now takes 11 bits to send the eight-bit words, and the
		modem still only sends 300 bits per second.</para>
	      
	      <para>The formula for converting bytes per second into a baud
		rate and vice versa was simple until error-correcting modems
		came along.  These modems receive the serial stream of bits
		from the UART in the host computer (even when internal modems
		are used the data is still frequently serialized) and converts
		the bits back into bytes.  These bytes are then combined into
		packets and sent over the phone line using a Synchronous
		transmission method.  This means that the Stop, Start, and
		Parity bits added by the UART in the DTE (the computer) were
		removed by the modem before transmission by the sending modem.
		When these bytes are received by the remote modem, the remote
		modem adds Start, Stop and Parity bits to the words, converts
		them to a serial format and then sends them to the receiving
		UART in the remote computer, who then strips the Start, Stop
		and Parity bits.</para>
	      
	      <para>The reason all these extra conversions are done is so that
		the two modems can perform error correction, which means that
		the receiving modem is able to ask the sending modem to resend
		a block of data that was not received with the correct
		checksum. This checking is handled by the modems, and the DTE
		devices are usually unaware that the process is
		occurring.</para>
	      
	      <para>By striping the Start, Stop and Parity bits, the
		additional bits of data that the two modems must share between
		themselves to perform error-correction are mostly concealed
		from the effective transmission rate seen by the sending and
		receiving DTE equipment. For example, if a modem sends ten
		7-bit words to another modem without including the Start, Stop
		and Parity bits, the sending modem will be able to add 30 bits
		of its own information that the receiving modem can use to do
		error-correction without impacting the transmission speed of
		the real data.</para>
	      
	      <para>The use of the term Baud is further confused by modems
		that perform compression.  A single 8-bit word passed over the
		telephone line might represent a dozen words that were
		transmitted to the sending modem.  The receiving modem will
		expand the data back to its original content and pass that
		data to the receiving DTE.</para>
	      
	      <para>Modern modems also include buffers that allow the rate
		that bits move across the phone line (DCE to DCE) to be a
		different speed than the speed that the bits move between the
		DTE and DCE on both ends of the conversation.  Normally the
		speed between the DTE and DCE is higher than the DCE to DCE
		speed because of the use of compression by the modems.</para>
	      
	      <para>Because the number of bits needed to describe a byte
		varied during the trip between the two machines plus the
		differing  bits-per-seconds speeds that are used present on
		the DTE-DCE and DCE-DCE links, the usage of the term Baud to
		describe the overall communication speed causes problems and
		can misrepresent the true transmission speed.  So Bits Per
		Second (bps) is the correct term to use to describe the
		transmission rate seen at the DCE to DCE interface and Baud or
		Bits Per Second are acceptable terms to use when a connection
		is made between two systems with a wired connection, or if a
		modem is in use that is not performing error-correction or
		compression.</para>
	      
	      <para>Modern high speed modems (2400, 9600, 14,400, and
		19,200bps) in reality still operate at or below 2400 baud, or
		more accurately, 2400 Symbols per second.  High speed modem
		are able to encode more bits of data into each Symbol using a
		technique called Constellation Stuffing, which is why the
		effective bits per second rate of the modem is higher, but the
		modem continues to operate within the limited audio bandwidth
		that the telephone system provides. Modems operating at 28,800
		and higher speeds have variable Symbol rates, but the
		technique is the same.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>The IBM Personal Computer UART</title>
	      
	      <para>Starting with the original IBM Personal Computer, IBM
		selected the National Semiconductor INS8250 UART for use in
		the IBM PC Parallel/Serial Adapter.  Subsequent generations of
		compatible computers from IBM and other vendors continued to
		use the INS8250 or improved versions of the National
		Semiconductor UART family.</para>
	      
	      
	      <sect5>
		<title>National Semiconductor UART Family Tree</title>
		
		<para>There have been several versions and subsequent
		  generations of the INS8250 UART.  Each major version is
		  described below.</para>
		
		<para>
		  <literallayout>	INS8250  -&gt; INS8250B  \ \ \-&gt;
		    INS8250A -&gt; INS82C50A  \ \ \-&gt; NS16450 -&gt;
		    NS16C450 \ \ \-&gt; NS16550 -&gt; NS16550A -&gt;
		    PC16550D</literallayout>
		</para>
		
		<para>
		  <variablelist>
		    <varlistentry><term>INS8250</term>
		      <listitem>
			<para>This part was used in the original IBM PC and
			  IBM PC/XT.  The original name for this part was the
			  INS8250 ACE (Asynchronous Communications Element)
			  and it is made from NMOS technology.</para>
			
			<para>The 8250 uses eight I/O ports and has a one-byte
			  send and a one-byte receive buffer.  This original
			  UART has several race conditions and other flaws.
			  The original IBM BIOS includes code to work around
			  these flaws, but this made the BIOS dependent on the
			  flaws being present, so subsequent parts like the
			  8250A, 16450  or 16550 could not be used in the
			  original IBM PC or IBM PC/XT.</para>
		      </listitem>
		    </varlistentry>
		    
		    <varlistentry><term>INS8250-B</term>
		      
		      <listitem>
			<para>This is the slower speed of the INS8250 made
			  from NMOS technology.  It contains the same problems
			  as the original INS8250.</para>
		      </listitem>
		    </varlistentry>
		    
		    <varlistentry><term>INS8250A</term>
		      
		      <listitem>
			<para>An improved version of the INS8250 using XMOS
			  technology with various functional flaws corrected.
			  The INS8250A was used initially in PC clone
			  computers by vendors who used "clean" BIOS designs.
			  Because of the corrections in the chip, this part
			  could not be used with a BIOS compatible with the
			  INS8250 or INS8250B.</para>
		      </listitem>
		    </varlistentry>
		    
		    <varlistentry><term>INS82C50A</term>
		      
		      <listitem>
			<para>This is a CMOS version (low power consumption)
			  of the INS8250A and has similar functional
			  characteristics.</para>
		      </listitem>
		    </varlistentry>
		    
		    <varlistentry><term>NS16450</term>
		      
		      <listitem>
			<para>Same as NS8250A with improvements so it can be
			  used with faster CPU bus designs.  IBM used this
			  part in the IBM AT and updated the IBM BIOS to no
			  longer rely on the bugs in the INS8250.</para>
		      </listitem>
		    </varlistentry>
		    
		    <varlistentry><term>NS16C450</term>
		      
		      <listitem>
			<para>This is a CMOS version (low power consumption)
			  of the NS16450.</para>
		      </listitem>
		    </varlistentry>
		    
		    <varlistentry><term>NS16550</term>
		      
		      <listitem>
			<para>Same as NS16450 with a 16-byte send and receive
			  buffer but the buffer design was flawed and could
			  not be reliably be used.</para>
		      </listitem>
		    </varlistentry>
		    
		    <varlistentry><term>NS16550A</term>
		      
		      <listitem>
			<para>Same as NS16550 with the buffer flaws corrected.
			  The 16550A and its successors have become the most
			  popular UART design in the PC industry, mainly due
			  it its ability to reliably handle higher data rates
			  on operating systems with sluggish interrupt
			  response times.</para>
		      </listitem>
		    </varlistentry>
		    
		    <varlistentry><term>NS16C552</term>
		      
		      <listitem>
			<para>This component consists of two NS16C550A CMOS
			  UARTs in a single package.  </para>
		      </listitem>
		    </varlistentry>
		    
		    <varlistentry><term>PC16550D</term>
		      
		      <listitem>
			<para>Same as NS16550A with subtle flaws corrected.
			  This is revision D of the 16550 family and is the
			  latest design available from National Semiconductor.
			</para>
			
		      </listitem>
		    </varlistentry>
		  </variablelist>
		</para>
		
	      </sect5>
	      
	      <sect5>
		<title>The NS16550AF and the PC16550D are the same
		  thing</title>
		
		<para>National reorganized their part numbering system a few
		  years ago, and the NS16550AFN no longer exists by that name.
		  (If you have a NS16550AFN, look at the date code on the
		  part, which is a four digit number that usually starts with
		  a nine.  The first two digits of the number are the year,
		  and the last two digits are the week in that year when the
		  part was packaged.  If you have a NS16550AFN, it is probably
		  a few years old.)  </para>
		
		<para>The new numbers are like PC16550DV, with minor
		  differences in the suffix letters depending on the package
		  material and its shape. (A description of the numbering
		  system can be found below.)  </para>
		
		<para>It is important to understand that in some stores, you
		  may pay &#36;15(US) for a NS16550AFN made in 1990 and in the
		  next bin are the new PC16550DN parts with minor fixes that
		  National has made since the AFN part was in production, the
		  PC16550DN was probably made in the past six months and it
		  costs half (as low as &#36;5(US) in volume) as much as the
		  NS16550AFN because they are readily available.</para>
		
		<para>As the supply of NS16550AFN chips continues to shrink,
		  the price will probably continue to increase until more
		  people discover and accept that the PC16550DN really has the
		  same function as the old part number.</para>
		
	      </sect5>
	      
	      <sect5>
		<title>National Semiconductor Part Numbering System</title>
		
		<para>The older  NS<emphasis>nnnnnrqp</emphasis>  part numbers
		  are now of the format
		  PC<emphasis>nnnnnrgp</emphasis>.</para>
		
		<para>The "<emphasis>r</emphasis>" is the revision field.  The
		  current revision of the 16550 from National Semiconductor is
		  "D".  </para>
		
		<para>The "<emphasis>p</emphasis>" is the package-type field.
		  The types are: <literallayout>	"F"	QFP	(quad
		    flat pack) L lead type "N"	DIP	(dual inline package)
		    through hole straight lead type "V"	LPCC	(lead plastic
		    chip carrier) J lead type</literallayout>
		</para>
		
		<para>The "<emphasis>g</emphasis>" is the product grade field.
		  If an "I" precedes the package-type letter, it indicates an
		  "industrial" grade part, which has higher specs than a
		  standard part but not as high as Military Specification
		  (Milspec) component.  This is an optional field.</para>
		
		<para>So what we used to call a NS16550AFN (DIP Package) is
		  now called a PC16550DN or PC16550DIN.</para>
		
	      </sect5>
	    </sect4>
	    
	    <sect4>
	      <title>Other Vendors and Similar UARTs</title>
	      
	      <para>Over the years, the 8250, 8250A, 16450 and 16550 have been
		licensed or copied by other chip vendors.  In the case of the
		8250, 8250A and 16450, the exact circuit (the "megacell") was
		licensed to many vendors, including Western Digital and Intel.
		Other vendors reverse-engineered the part or produced
		emulations that had similar behavior. </para>
	      
	      <para>In internal modems, the modem designer will frequently
		emulate the 8250A/16450 with the modem microprocessor, and the
		emulated UART will frequently have a hidden buffer consisting
		of several hundred bytes. Because of the size of the buffer,
		these emulations can be as reliable as a 16550A in their
		ability to handle high speed data. However, most operating
		systems will still report that the UART is only a 8250A or
		16450, and may not make effective use of the extra buffering
		present in the emulated UART unless special drivers are
		used.</para>
	      
	      <para>Some modem makers are driven by market forces to abandon a
		design that has hundreds of bytes of buffer and instead use a
		16550A UART so that the product will compare favorably in
		market comparisons even though the effective performance may
		be lowered by this action.</para>
	      
	      <para>A common misconception is that all parts with "16550A"
		written on them are identical in performance.  There are
		differences, and in some cases, outright flaws in most of
		these 16550A clones.</para>
	      
	      <para>When the NS16550 was developed, the National Semiconductor
		obtained several patents on the design and they also limited
		licensing, making it harder for other vendors to provide a
		chip with similar features. Because of the patents,
		reverse-engineered designs and emulations had to avoid
		infringing the claims covered by the patents. Subsequently,
		these copies almost never perform exactly the same as the
		NS16550A or PC16550D, which are the parts most computer and
		modem makers want to buy but are sometimes unwilling to pay
		the price required to get the genuine part.  </para>
	      
	      <para>Some of the differences in the clone 16550A parts are
		unimportant, while others can prevent the device from being
		used at all with a given operating system or driver.  These
		differences may show up when using other drivers, or when
		particular combinations of events occur that were not well
		tested or considered in the Windows driver. This is because
		most modem vendors and 16550-clone makers use the Microsoft
		drivers from Windows for Workgroups 3.11 and the Microsoft MSD
		utility as the primary tests for compatibility with the
		NS16550A.  This over-simplistic criteria means that if a
		different operating system is used, problems could appear due
		to subtle differences between the clones and genuine
		components.</para>
	      
	      <para>National Semiconductor has made available a program named
		COMTEST that performs compatibility tests independent of any
		OS drivers. It should be remembered that the purpose of this
		type of program is to demonstrate the flaws in the products of
		the competition, so the program will report major as well as
		extremely subtle differences in behavior in the part being
		tested.</para>
	      
	      <para>In a series of tests performed by the author of this
		document in 1994, components made by National Semiconductor,
		TI, StarTech, and CMD as well as megacells and emulations
		embedded in internal modems were tested with COMTEST.  A
		difference count for some of these components is listed below.
		Because these tests were performed in 1994, they may not
		reflect the current performance of the given product from a
		vendor.</para>
	      
	      <para>It should be noted that COMTEST normally aborts when an
		excessive number or certain types of problems have been
		detected.  As part of this testing, COMTEST was modified so
		that it would not abort no matter how many differences were
		encountered.</para>
	      
	      <para>
		<literallayout>Vendor		Part number		Errors
		  aka "differences" reported National	(PC16550DV)
		  0 * National	(NS16550AFN)			0 National
		  (NS16C552V)			0 * TI		(TL16550AFN)
		  3 CMD		(16C550PE)			19 StarTech
		  (ST16C550J)			23 Rockwell	reference
		  modem with internal 16550 or an emulation
		  (RC144DPi/C3000-25) 	117 Sierra		modem with an
		  internal 16550 (SC11951/SC11351)
		  91</literallayout>
	      </para>
	      
	      <para>It is important to understand that a simple count of
		differences from COMTEST does not reveal a lot about what
		differences are important and which are not.  For example,
		about half of the differences reported in the two modems
		listed above that have internal UARTs were caused by the clone
		UARTs not supporting five- and six-bit character modes.  The
		real 16550, 16450, and 8250 UARTs all support these modes and
		COMTEST checks the functionality of these modes so over fifty
		differences are reported.  However, almost no modern modem
		supports five- or six-bit characters, particularly those with
		error-correction and compression capabilities.   This means
		that the differences related to five- and six-bit character
		modes can be discounted.</para>
	      
	      <para>Many of the differences COMTEST reports have to do with
		timing.  In many of the clone designs, when the host reads
		from one port, the status bits in some other port may not
		update in the same amount of time (some faster, some slower)
		as a <emphasis>real</emphasis> NS16550AFN and COMTEST looks
		for these differences.  This means that the number of
		differences can be misleading in that one device may only have
		one or two differences but they are extremely serious, and
		some other device that updates the status registers faster or
		slower than the reference part (that would probably never
		affect the operation of a properly written driver) could have
		dozens of differences reported.</para>
	      
	      <para>* To date, the author of this document has not found any
		non-National parts that report zero differences using the
		COMTEST program.  It should also be noted that National has
		had five versions of the 16550 over the years and the newest
		parts behave a bit differently than the classic NS16550AFN
		that is considered the benchmark for functionality.  COMTEST
		appears to turn a blind eye to the differences within the
		National product line and reports no errors on the National
		parts (except for the original 16550) even when there are
		official erratas that describe bugs in the A, B and C
		revisions of the parts, so this bias in COMTEST must be taken
		into account.</para>
	      
	      <para>COMTEST can be used as a screening tool to alert the
		administrator to the presence of potentially incompatible
		components that might cause problems or have to be handled as
		a special case.</para>
	      
	      <para>If you run COMTEST on a 16550 that is in a modem or a
		modem is attached to the serial port, you need to first issue
		a ATE0&amp;W command to the modem so that the modem will not
		echo any of the test characters.  If you forget to do this,
		COMTEST will report at least this one difference:
		<blockquote>
		  <para>Error (6)...Timeout interrupt failed: IIR = c1  LSR =
		    61</para>
		</blockquote>
	      </para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>8250/16450/16550 Registers</title>
	      
	      <para>The 8250/16450/16550 UART occupies eight contiguous I/O
		port addresses.  In the IBM PC, there are two defined
		locations for these eight ports and they are known
		collectively as COM1 and COM2. The makers of PC-clones and
		add-on cards have created two additional areas known as COM3
		and COM4, but these extra COM ports conflict with other
		hardware on some systems.  The most common conflict is with
		video adapters that provide IBM 8514 emulation.</para>
	      
	      <para>
		<literallayout>COM1 is located from 0x3f8 to 0x3ff and
		  normally uses IRQ 4 COM2 is located from 0x2f8 to 0x2ff and
		  normally uses IRQ 3 COM3 is located from 0x3e8 to 0x3ef and
		  has no standardized IRQ COM4 is located from 0x2e8 to 0x2ef
		  and has no standardized IRQ</literallayout>
	      </para>
	      
	      <para>A description of the I/O ports of the 8250/16450/16550
		UART is provided below.</para>
	      
	      <para>
		<literallayout>I/O	Access		Description  Port
		  Allowed +0x00	write		Transmit Holding Register
		  (THR) (DLAB==0)	Information written to this port are
		  treated as data words and will be transmitted by the UART.
		  +0x00	read		Receive Buffer Register (RBR)
		  (DLAB==0)	Any data words received by the UART from the
		  serial link are accessed by the host by reading this port.
		  +0x00	write/read	Divisor Latch LSB (DLL) (DLAB==1)
		  This value will be divided from the master input clock (in
		  the IBM PC, the master clock is 1.8432MHz) and the resulting
		  clock will determine the baud rate of the UART. This
		  register holds bits 0 thru 7 of the divisor. +0x01
		  write/read	Divisor Latch MSB (DLH) (DLAB==1)	This
		  value will be divided from the master input clock (in the
		  IBM PC, the master clock is 1.8432MHz) and the resulting
		  clock will determine the baud rate of the UART. This
		  register holds bits 8 thru 15 of the divisor. +0x01
		  write/read	Interrupt Enable Register (IER) (DLAB==0)
		  The 8250/16450/16550 UART classifies events into one of four
		  categories.  Each category can be configured to generate an
		  interrupt when any of the events occurs.  The
		  8250/16450/16550 UART generates a single external interrupt
		  signal regardless of how many events in the enabled
		  categories have occurred.  It is up to the host processor to
		  respond to the interrupt and then poll the enabled interrupt
		  categories (usually all categories have interrupts enabled)
		  to determine the true cause(s) of the interrupt. Bit 7
		  Reserved, always 0. Bit 6	Reserved, always 0. Bit 5
		  Reserved, always 0. Bit 4	Reserved, always 0. Bit 3
		  Enable Modem Status Interrupt (EDSSI) Setting this bit to
		  "1" allows the UART to generate an interrupt when a change
		  occurs on one or more of the status lines. Bit 2	Enable
		  Receiver Line Status  Interrupt (ELSI) Setting this bit to
		  "1" causes the UART to generate an interrupt when the an
		  error (or a BREAK signal) has been detected in the incoming
		  data. Bit 1	Enable Transmitter Holding Register Empty
		  Interrupt (ETBEI) Setting this bit to "1" causes the UART to
		  generate an interrupt when the UART has room for one or more
		  additional characters that are to be transmitted. Bit 0
		  Enable Received Data Available Interrupt (ERBFI) Setting
		  this bit to "1" causes the UART to generate an interrupt
		  when the UART has received enough characters to exceed the
		  trigger level of the FIFO, or the FIFO timer has expired
		  (stale data), or a single character has been received when
		  the FIFO is disabled. +0x02	write		FIFO Control
		  Register (FCR) (This port does not exist on the 8250 and
		  16450 UART.) Bit 7	Receiver Trigger Bit #1 Bit 6
		  Receiver Trigger Bit #0 These two bits control at what point
		  the receiver is to generate an interrupt when the FIFO is
		  active. 7 6	How many words are received before an
		  interrupt is generated. 0 0	1 0 1	4 1 0	8 1 1	14 Bit
		  5	Reserved, always 0. Bit 4	Reserved, always 0.
		  Bit 3	DMA Mode Select  If Bit 0 is set to "1" (FIFOs
		  enabled), setting this bit changes the operation of the
		  -RXRDY and -TXRDY signals from Mode 0 to Mode 1. Bit 2
		  Transmit FIFO Reset When a "1" is written to this bit,  the
		  contents of the FIFO are discarded. Any word currently being
		  transmitted will be sent intact.  This function is useful in
		  aborting transfers. Bit 1	Receiver FIFO Reset When a "1"
		  is written to this bit, the contents of the FIFO are
		  discarded. Any word currently being assembled in the shift
		  register will be received intact.   Bit 0	16550 FIFO
		  Enable When set, both the transmit and receive FIFOs are
		  enabled.  Any contents in the holding register, shift
		  registers or FIFOs are lost when FIFOs are enabled or
		  disabled. +0x02	read		Interrupt
		  Identification Register (IIR) Bit 7	FIFOs enabled. On the
		  8250/16450 UART, this bit is zero. Bit 6	FIFOs enabled.
		  On the 8250/16450 UART, this bit is zero. Bit 5
		  Reserved, always 0. Bit 4	Reserved, always 0. Bit 3
		  Interrupt ID Bit #2 On the 8250/16450 UART, this bit is
		  zero. Bit 2	Interrupt ID Bit #1 Bit 1	Interrupt ID
		  Bit #0 These three bits combine to report the category of
		  event that caused the interrupt that is in progress.  These
		  categories have priorities, so if  multiple categories of
		  events occur at the same time, the UART will report the more
		  important events first and the host must resolve the events
		  in the order they are reported.  All events that caused the
		  current interrupt must be resolved before any new interrupts
		  will be generated.   (This is a limitation of the PC
		  architecture.) 2 1 0	Priority	Description 0 1 1
		  First		Receiver Error (OE, PE, BI or FE) 0 1 0	Second
		  Received Data Available 1 1 0	Second		Trigger level
		  identification (Stale data in receive buffer) 0 0 1	Third
		  Transmitter has room for more words (THRE) 0 0 0	Fourth
		  Modem Status Change (-CTS, -DSR, -RI, or -DCD) Bit 0
		  Interrupt Pending Bit If this bit is set to "0", then at
		  least one interrupt is pending. +0x03	write/read	Line
		  Control Register (LCR) Bit 7	Divisor Latch Access Bit
		  (DLAB) When set, access to the data transmit/receive
		  register (THR/RBR) and the Interrupt Enable Register (IER)
		  is disabled.  Any access to these ports is now redirected to
		  the Divisor Latch Registers.  Setting this bit, loading the
		  Divisor Registers, and clearing DLAB should be done with
		  interrupts disabled. Bit 6	Set Break When set to "1", the
		  transmitter begins to transmit continuous Spacing until this
		  bit is set to "0".  This overrides any bits of characters
		  that are being transmitted. Bit 5	Stick Parity When
		  parity is enabled, setting this bit causes parity to always
		  be "1" or "0", based on the value of Bit 4. Bit 4	Even
		  Parity Select (EPS) When parity is enabled and Bit 5 is "0",
		  setting this bit causes even parity to be transmitted and
		  expected.   Otherwise, odd parity is used. Bit 3	Parity
		  Enable (PEN) When set to "1", a parity bit is inserted
		  between the last bit of the data and the Stop Bit.  The UART
		  will also expect parity to be present in the received data.
		  Bit 2	Number of Stop Bits (STB) If set to "1" and using
		  5-bit data words, 1.5 Stop Bits are transmitted and
		  expected in each data word.  For 6, 7 and 8-bit data words,
		  2 Stop Bits are transmitted and expected.  When this bit is
		  set to "0", one Stop Bit is used on each data word. Bit 1
		  Word Length Select Bit #1 (WLSB1) Bit 0	Word Length
		  Select Bit #0 (WLSB0) Together these bits specify the number
		  of bits in each data word. 1 0	Word Length 0 0	5 Data
		  Bits 0 1	6 Data Bits 1 0	7 Data Bits 1 1	8 Data Bits
		  +0x04	write/read	Modem Control Register (MCR) Bit 7
		  Reserved, always 0. Bit 6	Reserved, always 0. Bit 5
		  Reserved, always 0. Bit 4	Loop-Back Enable  When set to
		  "1", the UART transmitter and receiver are internally
		  connected together to allow diagnostic operations. In
		  addition, the UART modem control outputs are connected to
		  the UART modem  control inputs.  CTS is connected to RTS,
		  DTR is connected to DSR, OUT1 is connected to RI, and OUT 2
		  is connected to DCD. Bit 3	OUT 2 An auxiliary output that
		  the host processor may set high or low. In the IBM PC serial
		  adapter (and most clones), OUT 2 is used to tri-state
		  (disable) the interrupt signal from the 8250/16450/16550
		  UART. Bit 2	OUT 1 An auxiliary output that the host
		  processor may set high or low. This output is not used on
		  the IBM PC serial adapter. Bit 1	Request to Send (RTS)
		  When set to "1", the output of the UART -RTS line is Low
		  (Active). Bit 0	Data Terminal Ready (DTR) When set to
		  "1", the output of the UART -DTR line is Low (Active). +0x05
		  write/read	Line Status Register (LSR) Bit 7	Error
		  in Receiver FIFO On the 8250/16450 UART, this bit is zero.
		  This bit is set to "1" when any of the bytes in the FIFO
		  have one or more of the following error conditions: PE, FE,
		  or BI. Bit 6	Transmitter Empty (TEMT) When set to "1",
		  there are no words  remaining in the transmit FIFO or the
		  transmit shift register.  The transmitter is completely
		  idle. Bit 5	Transmitter Holding Register Empty (THRE) When
		  set to "1", the FIFO (or holding register) now has room for
		  at least one additional word to transmit.  The transmitter
		  may still be transmitting when this bit is set to "1". Bit 4
		  Break Interrupt (BI) The receiver has detected a Break
		  signal. Bit 3	Framing Error (FE) A Start Bit was detected
		  but the Stop Bit did not appear at the expected time. The
		  received word is probably garbled. Bit 2	Parity Error
		  (PE) The parity bit was incorrect for the word received. Bit
		  1	Overrun Error (OE) A new word was received and there
		  was no room in the receive buffer.  The newly-arrived word
		  in the shift register is discarded.  On 8250/16450 UARTs,
		  the word in the holding register is discarded and the newly-
		  arrived word is put in the holding register. Bit 0	Data
		  Ready (DR) One or more words are in the receive FIFO that
		  the host may read. A word must be completely received and
		  moved from the shift register into the FIFO (or holding
		  register for 8250/16450 designs) before this bit is set.
		  +0x06	write/read	Modem Status Register (MSR) Bit 7
		  Data Carrier Detect (DCD) Reflects the state of the DCD line
		  on the UART. Bit 6	Ring Indicator (RI) Reflects the state
		  of the RI line on the UART. Bit 5	Data Set Ready (DSR)
		  Reflects the state of the DSR line on the UART. Bit 4	Clear
		  To Send (CTS) Reflects the state of the CTS line on the
		  UART. Bit 3	Delta Data Carrier Detect (DDCD) Set to "1" if
		  the -DCD line has changed state one more more times since
		  the last time the MSR was read by the host. Bit 2
		  Trailing Edge Ring Indicator (TERI) Set to "1" if the -RI
		  line has had a low to high transition since the last time
		  the MSR was read by the host. Bit 1	Delta Data Set Ready
		  (DDSR) Set to "1" if the -DSR line has changed state one
		  more more times since the last time the MSR was read by the
		  host. Bit 0	Delta Clear To Send (DCTS) Set to "1" if the
		  -CTS line has changed state one more more times since the
		  last time the MSR was read by the host. +0x07	write/read
		  Scratch Register (SCR) This register performs no function in
		  the UART.  Any value can be written by the host to this
		  location and read by the host later on.</literallayout>
	      </para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Beyond the 16550A UART</title>
	      
	      <para>Although National Semiconductor has not offered any
		components compatible with the 16550 that provide additional
		features, various other vendors have.  Some of these
		components are described below.   It should be understood that
		to effectively utilize these improvements, drivers may have to
		be provided by the chip vendor since most of the popular
		operating systems do not support features beyond those
		provided by the 16550.</para>
	      
	      <para>
		<variablelist>
		  <varlistentry><term>ST16650</term>
		    <listitem>
		      <para>By default this part is similar to the NS16550A,
			but an extended 32-byte send and receive buffer can be
			optionally enabled.  Made by Startech.   </para>
		    </listitem>
		  </varlistentry>
		  
		  <varlistentry><term>TIL16660</term>
		    
		    <listitem>
		      <para>By default this part behaves similar to the
			NS16550A, but an extended 64-byte send and receive
			buffer can be optionally enabled.  Made by Texas
			Instruments.  </para>
		    </listitem>
		  </varlistentry>
		  
		  <varlistentry><term>Hayes ESP</term>
		    
		    <listitem>
		      <para>This proprietary plug-in card contains a 2048-byte
			send and receive buffer, and supports data rates to
			230.4Kbit/sec.  Made by Hayes.</para>
		      
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </para>
	      
	      <para>In addition to these "dumb" UARTs, many vendors produce
		intelligent serial communication boards.  This type of design
		usually provides a microprocessor that interfaces with several
		UARTs, processes and buffers the data, and then alerts the
		main PC processor when necessary.  Because the UARTs are not
		directly accessed by the PC processor in this type of
		communication system, it is not necessary for the vendor to
		use UARTs that are compatible with the 8250, 16450, or the
		16550 UART.   This leaves the designer free to components that
		may have better performance characteristics. </para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3
	    id="sio">
	    <title>Configuring the <emphasis remap=tt>sio</emphasis>
	      driver</title>
	    
	    <para>The <emphasis remap=tt>sio</emphasis> driver provides
	      support for NS8250-, NS16450-, NS16550 and NS16550A-based EIA
	      RS-232C (CCITT V.24) communications interfaces.  Several
	      multiport cards are supported as well.  See the <emphasis
		remap=tt>sio(4)</emphasis> manual page for detailed technical
	      documentation.</para>
	    
	    
	    <sect4>
	      <title>Digi International (DigiBoard) PC/8</title>
	      
	      <para><emphasis>Contributed by &a.awebster;.<!-- <br> -->26
		  August 1995.</emphasis></para>
	      
	      <para>Here is a config snippet from a machine with a Digi
		International PC/8 with 16550.  It has 8 modems connected to
		these 8 lines, and they work just great.  Do not forget to add
		<emphasis remap=tt>options COM_MULTIPORT</emphasis> or it will
		not work very well!</para>
	      
	      <para>
		<informalexample>
		  <screen>device          sio4    at isa? port 0x100 tty flags
		    0xb05 device          sio5    at isa? port 0x108 tty flags
		    0xb05 device          sio6    at isa? port 0x110 tty flags
		    0xb05 device          sio7    at isa? port 0x118 tty flags
		    0xb05 device          sio8    at isa? port 0x120 tty flags
		    0xb05 device          sio9    at isa? port 0x128 tty flags
		    0xb05 device          sio10   at isa? port 0x130 tty flags
		    0xb05 device          sio11   at isa? port 0x138 tty flags
		    0xb05 irq 9 vector siointr</screen>
		</informalexample>
	      </para>
	      
	      <para>The trick in setting this up is that the MSB of the flags
		represent the last SIO port, in this case 11 so flags are
		0xb05.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Boca 16</title>
	      
	      <para><emphasis>Contributed by &a.whiteside;.<!-- <br> -->26
		  August 1995.</emphasis></para>
	      
	      <para>The procedures to make a Boca 16 pord board with FreeBSD
		are pretty straightforward, but you will need a couple things
		to make it work:</para>
	      
	      <para>
		<orderedlist>
		  
		  <listitem>
		    <para>You either need the kernel sources installed so you
		      can recompile the necessary options or you will need
		      someone else to compile it for you. The 2.0.5 default
		      kernel does <emphasis remap=bf>not</emphasis> come with
		      multiport support enabled and you will need to add a
		      device entry for each port anyways.</para>
		  </listitem>
		  
		  <listitem>
		    <para>Two, you will need to know the interrupt and IO
		      setting for your Boca Board so you can set these options
		      properly in the kernel.</para>
		  </listitem>
		  
		</orderedlist>
	      </para>
	      
	      <para>One important note - the actual UART chips for the Boca 16
		are in the connector box, not on the internal board itself. So
		if you have it unplugged, probes of those ports will fail. I
		have never tested booting with the box unplugged and plugging
		it back in, and I suggest you do not either.</para>
	      
	      <para>If you do not already have a custom kernel configuration
		file set up, refer to <xref
		  linkend="kernelconfig" remap="Kernel Configuration"> for
		general procedures.  The following are the specifics for the
		Boca 16 board and assume you are using the kernel name
		MYKERNEL and editing with vi.</para>
	      
	      <para>
		<orderedlist>
		  
		  <listitem>
		    <para>Add the line 
		      <informalexample>
			<screen>options COM_MULTIPORT</screen>
		      </informalexample> to the config file.</para>
		  </listitem>
		  
		  <listitem>
		    <para>Where the current <emphasis remap=tt>device sio
			<replaceable>xxx</replaceable></emphasis> lines are,
		      you will need to add 16 more devices.  <emphasis>Only
			the last device includes the interrupt vector for the
			board</emphasis>. (See the <emphasis
			remap=tt>sio(4)</emphasis> manual page for detail as
		      to why.)  The following example is for a Boca Board with
		      an interrupt of 3, and a base IO address 100h.  The IO
		      address for Each port is +8 hexadecimal from the
		      previous port, thus the 100h, 108h, 110h... addresses.
		      
		      <informalexample>
			<screen>device sio1 at isa? port 0x100 tty flags
			  0x1005 device sio2 at isa? port 0x108 tty flags
			  0x1005 device sio3 at isa? port 0x110 tty flags
			  0x1005 device sio4 at isa? port 0x118 tty flags
			  0x1005 [...] device sio15 at isa? port 0x170 tty
			  flags 0x1005 device sio16 at isa? port 0x178 tty
			  flags 0x1005 irq 3 vector siointr</screen>
		      </informalexample> The flags entry
		      <emphasis>must</emphasis> be changed from this example
		      unless you are using the exact same sio assignments.
		      Flags are set according to 0x<acronym>MYY</acronym>
		      where <emphasis>M</emphasis> indicates the minor number
		      of the master port (the last port on a Boca 16) and
		      <acronym>YY</acronym> indicates if FIFO is enabled or
		      disabled(enabled), IRQ sharing is used(yes) and if there
		      is an AST/4 compatible IRQ control register(no). In this
		      example,
		      <informalexample>
			<screen>flags 0x1005</screen>
		      </informalexample> indicates that the master port is
		      sio16. If I added another board and assigned sio17
		      through sio28, the flags for all 16 ports on
		      <emphasis>that</emphasis> board would be 0x1C05, where
		      1C indicates the minor number of the master port. Do not
		      change the 05 setting.</para>
		  </listitem>
		  
		  <listitem>
		    <para>Save and complete the kernel configuration,
		      recompile, install and reboot. Presuming you have
		      successfully installed the recompiled kernel and have it
		      set to the correct address and IRQ, your boot message
		      should indicate the successful probe of the Boca ports
		      as follows: (obviously the sio numbers, IO and IRQ could
		      be different)
		      
		      <informalexample>
			<screen>sio1 at 0x100-0x107 flags 0x1005 on isa sio1:
			  type 16550A (multiport) sio2 at 0x108-0x10f flags
			  0x1005 on isa sio2: type 16550A (multiport) sio3 at
			  0x110-0x117 flags 0x1005 on isa sio3: type 16550A
			  (multiport) sio4 at 0x118-0x11f flags 0x1005 on isa
			  sio4: type 16550A (multiport) sio5 at 0x120-0x127
			  flags 0x1005 on isa sio5: type 16550A (multiport)
			  sio6 at 0x128-0x12f flags 0x1005 on isa sio6: type
			  16550A (multiport) sio7 at 0x130-0x137 flags 0x1005
			  on isa sio7: type 16550A (multiport) sio8 at
			  0x138-0x13f flags 0x1005 on isa sio8: type 16550A
			  (multiport) sio9 at 0x140-0x147 flags 0x1005 on isa
			  sio9: type 16550A (multiport) sio10 at 0x148-0x14f
			  flags 0x1005 on isa sio10: type 16550A (multiport)
			  sio11 at 0x150-0x157 flags 0x1005 on isa sio11: type
			  16550A (multiport) sio12 at 0x158-0x15f flags 0x1005
			  on isa sio12: type 16550A (multiport) sio13 at
			  0x160-0x167 flags 0x1005 on isa sio13: type 16550A
			  (multiport) sio14 at 0x168-0x16f flags 0x1005 on isa
			  sio14: type 16550A (multiport) sio15 at 0x170-0x177
			  flags 0x1005 on isa sio15: type 16550A (multiport)
			  sio16 at 0x178-0x17f irq 3 flags 0x1005 on isa
			  sio16: type 16550A (multiport master)</screen>
		      </informalexample> If the messages go by too fast to
		      see, <emphasis remap=tt>dmesg &gt; more</emphasis> will
		      show you the boot messages.</para>
		  </listitem>
		  
		  <listitem>
		    <para>Next, appropriate entries in
		      <filename>/dev</filename> for the devices must be made
		      using the <filename>/dev/MAKEDEV</filename> script.
		      After becoming root:
		      <informalexample>
			<screen># cd /dev<!-- <br> --> # ./MAKEDEV tty1<!--
			<br> --> # ./MAKEDEV cua1<!-- <br> -->
			  <emphasis>(everything in between)</emphasis><!--
			<br> --> # ./MAKEDEV ttyg<!-- <br> --> # ./MAKEDEV
			  cuag</screen>
		      </informalexample> If you do not want or need callout
		      devices for some reason, you can dispense with making
		      the <emphasis remap=tt>cua*</emphasis> devices.</para>
		  </listitem>
		  
		  <listitem>
		    <para>If you want a quick and sloppy way to make sure the
		      devices are working, you can simply plug a modem into
		      each port and (as root) <emphasis remap=tt>echo at &gt;
			ttyd*</emphasis> for each device you have made. You
		      <emphasis>should</emphasis> see the RX lights flash for
		      each working port.</para>
		  </listitem>
		  
		</orderedlist>
	      </para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3
	    id="cy">
	    <title>Configuring the <emphasis remap=tt>cy</emphasis>
	      driver</title>
	    
	    <para><emphasis>Contributed by &a.alex;.<!-- <br> -->6 June
		1996.</emphasis></para>
	    
	    <para>The Cyclades multiport cards are based on the <emphasis
		remap=tt>cy</emphasis> driver instead of the usual <emphasis
		remap=tt>sio</emphasis> driver used by other multiport cards.
	      Configuration is a simple matter of:</para>
	    
	    <para>
	      <orderedlist>
		
		<listitem>
		  <para>Add the <emphasis remap=tt>cy</emphasis> device to
		    your 
		    <xref linkend="kernelconfig-config" remap="kernel
		      configuration"> (note that your irq and iomem settings
		    may differ).
		    
		    <informalexample>
		      <screen>device cy0 at isa? tty irq 10 iomem 0xd4000
			iosiz 0x2000 vector cyintr</screen>
		    </informalexample>
		    
		  </para>
		</listitem>
		
		<listitem>
		  <para><xref linkend="kernelconfig-building" remap="Rebuild
		      and install">  the new kernel.
		  </para>
		</listitem>
		
		<listitem>
		  <para>Make the <xref linkend="kernelconfig-nodes"
		      remap="device nodes"> by typing (the following example
		    assumes an 8-port board):
		    
		    <informalexample>
		      <screen># cd /dev # for i in 0 1 2 3 4 5 6 7;do
			./MAKEDEV cuac$i ttyc$i;done</screen>
		    </informalexample>
		    
		  </para>
		</listitem>
		
		<listitem>
		  <para>If appropriate, add <xref linkend="dialup"
		      remap="dialup"> entries to <xref linkend="dialup-ttys"
		      remap="/etc/ttys">
		    by  duplicating serial device (<emphasis
		      remap=tt>ttyd</emphasis>) entries and  using <emphasis
		      remap=tt>ttyc</emphasis> in place of <emphasis
		      remap=tt>ttyd</emphasis>.  For example:
		    
		    <informalexample>
		      <screen>ttyc0	"/usr/libexec/getty std.38400"
			unknown	on insecure ttyc1	"/usr/libexec/getty
			std.38400"	unknown	on insecure ttyc2
			"/usr/libexec/getty std.38400"	unknown	on insecure
			[...] ttyc7	"/usr/libexec/getty std.38400"
			unknown	on insecure</screen>
		    </informalexample>
		    
		  </para>
		</listitem>
		
		<listitem>
		  <para>Reboot with the new kernel.
		  </para>
		</listitem>
		
	      </orderedlist>
	      
	    </para>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title>* Parallel ports</title>
	  
	</sect2>
	
	<sect2>
	  <title>* Modems</title>
	  
	</sect2>
	
	<sect2>
	  <title>* Network cards</title>
	  
	</sect2>
	
	<sect2>
	  <title>* Keyboards</title>
	  
	</sect2>
	
	<sect2>
	  <title>* Mice</title>
	  
	</sect2>
	
	<sect2>
	  <title>* Other</title>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="hw-storage">
	<title>Storage Devices</title>
	
	
	<sect2
	  id="esdi">
	  <title>Using ESDI hard disks</title>
	  
	  <para><emphasis>Copyright &copy; 1995, &a.wilko;.<!-- <br> -->24
	      September 1995.</emphasis></para>
	  
	  <para>ESDI is an acronym that means Enhanced Small Device Interface.
	    It is loosely based on the good old ST506/412 interface originally
	    devised by Seagate Technology, the makers of the first affordable
	    5.25" winchester disk.</para>
	  
	  <para>The acronym says Enhanced, and rightly so. In the first place
	    the speed of the interface is higher, 10 or 15 Mbits/second
	    instead of the 5 Mbits/second of ST412 interfaced drives. Secondly
	    some higher level commands are added, making the ESDI interface
	    somewhat 'smarter' to the operating system driver writers. It is
	    by no means as smart as SCSI by the way. ESDI is standardized by
	    ANSI.</para>
	  
	  <para>Capacities of the drives are boosted by putting more sectors
	    on each track. Typical is 35 sectors per track, high capacity
	    drives I have seen were up to 54 sectors/track.</para>
	  
	  <para>Although ESDI has been largely obsoleted by IDE and SCSI
	    interfaces, the availability of free or cheap surplus drives makes
	    them  ideal for low (or now) budget systems.</para>
	  
	  
	  <sect3>
	    <title>Concepts of ESDI</title>
	    
	    
	    <sect4>
	      <title>Physical connections</title>
	      
	      <para>The ESDI interface uses two cables connected to each
		drive.  One cable is a 34 pin flat cable edge connector that
		carries the command and status signals from the controller to
		the drive and vice-versa. The command cable is daisy chained
		between all the drives. So, it forms a bus onto which all
		drives are connected.</para>
	      
	      <para>The second cable is a 20 pin flat cable edge connector
		that carries the data to and from the drive. This cable is
		radially connected, so each drive has its own direct
		connection to the controller.</para>
	      
	      <para>To the best of my knowledge PC ESDI controllers are
		limited to using a maximum of 2 drives per controller. This is
		compatibility feature(?) left over from the WD1003 standard
		that reserves only a single bit for device addressing.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Device addressing</title>
	      
	      <para>On each command cable a maximum of 7 devices and 1
		controller can be present. To enable the controller to
		uniquely  identify which drive it addresses, each ESDI device
		is equipped with jumpers or switches to select the devices
		address.</para>
	      
	      <para>On PC type controllers the first drive is set to address
		0,  the second disk to address 1. <emphasis remap=it>Always
		  make sure</emphasis> you set each disk to an unique address!
		So, on a PC with its two drives/controller maximum the first
		drive is drive 0, the second is drive 1.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Termination</title>
	      
	      <para>The daisy chained command cable (the 34 pin cable
		remember?) needs to be terminated at the last drive on the
		chain. For this purpose ESDI drives come with a termination
		resistor network that can be removed or disabled by a jumper
		when it is not used.</para>
	      
	      <para>So, one and <emphasis remap=it>only</emphasis> one drive,
		the one at  the farthest end of the command cable has its
		terminator installed/enabled. The controller automatically
		terminates the other end of the cable.  Please note that this
		implies that the controller must be  at one end of the cable
		and <emphasis remap=it>not</emphasis> in the middle.</para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title>Using ESDI disks with FreeBSD</title>
	    
	    <para>Why is ESDI such a pain to get working in the first
	      place?</para>
	    
	    <para>People who tried ESDI disks with FreeBSD are known to have
	      developed a profound sense of frustration. A combination of
	      factors works against you to produce effects that are hard to
	      understand when you have never seen them before.</para>
	    
	    <para>This has also led to the popular legend ESDI and FreeBSD is
	      a plain NO-GO. The following sections try to list all the
	      pitfalls and  solutions.</para>
	    
	    
	    <sect4>
	      <title>ESDI speed variants</title>
	      
	      <para>As briefly mentioned before, ESDI comes in two speed
		flavors. The older drives and controllers use a 10
		Mbits/second data transfer rate. Newer stuff uses 15
		Mbits/second.</para>
	      
	      <para>It is not hard to imagine that 15 Mbits/second drive cause
		problems on controllers laid out for 10 Mbits/second. As
		always, consult your controller <emphasis
		  remap=it>and</emphasis> drive  documentation to see if
		things match.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Stay on track</title>
	      
	      <para>Mainstream ESDI drives use 34 to 36 sectors per track.
		Most (older) controllers cannot handle more than this  number
		of sectors. Newer, higher capacity, drives use higher numbers
		of sectors per track. For instance, I own a 670 Mb drive that
		has 54 sectors per track.</para>
	      
	      <para>In my case, the controller could not handle this number of
		sectors. It proved to work well except that it only used 35
		sectors on each track. This meant losing a lot of disk
		space.</para>
	      
	      <para>Once again, check the documentation of your hardware for
		more info. Going out-of-spec like in the example might or
		might not work. Give it a try or get another more capable
		controller.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Hard or soft sectoring</title>
	      
	      <para>Most ESDI drives allow hard or soft sectoring to be
		selected using a jumper. Hard sectoring means that the drive
		will produce a sector pulse on the start of each new sector.
		The controller uses this pulse to tell when it should start to
		write or read.</para>
	      
	      <para>Hard sectoring allows a selection of sector size (normally
		256, 512 or 1024 bytes per formatted sector). FreeBSD uses
		512 byte sectors. The number of sectors per track also varies
		while still using the same number of bytes per formatted
		sector.  The number of <emphasis>unformatted</emphasis> bytes
		per sector varies, dependent on your controller it needs more
		or less overhead  bytes to work correctly. Pushing more
		sectors on a track  of course gives you more usable space, but
		might give  problems if your controller needs more bytes than
		the  drive offers.</para>
	      
	      <para>In case of soft sectoring, the controller itself
		determines where to start/stop reading or writing. For ESDI
		hard sectoring is the default (at least on everything I came
		across). I never felt the urge to try soft sectoring.</para>
	      
	      <para>In general, experiment with sector settings before you
		install FreeBSD because you need to re-run the low-level
		format after each change.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Low level formatting</title>
	      
	      <para>ESDI drives need to be low level formatted before they are
		usable. A reformat is needed whenever you figgle with the
		number of sectors/track jumpers or the physical orientation of
		the drive (horizontal, vertical).  So, first think, then
		format.  The format time must not be underestimated, for big
		disks it can take hours. </para>
	      
	      <para>After a low level format, a surface scan is done to find
		and flag bad sectors. Most disks have a manufacturer bad block
		list listed on a piece of paper or adhesive sticker. In
		addition, on most disks the list is also written onto the
		disk. Please use the manufacturer's list. It is much easier to
		remap a defect now than after FreeBSD is installed.</para>
	      
	      <para>Stay away from low-level formatters that mark all sectors
		of a track as bad as soon as they find one bad sector. Not
		only does this waste space, it also and more importantly
		causes you grief with bad144 (see the section on
		bad144).</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Translations</title>
	      
	      <para>Translations, although not exclusively a ESDI-only
		problem,  might give you real trouble. Translations come in
		multiple flavors. Most of them  have in common that they
		attempt to work around the limitations posed upon disk
		geometries by the original IBM PC/AT design (thanks
		IBM!).</para>
	      
	      <para>First of all there is the (in)famous 1024 cylinder limit.
		For a system to be able to boot, the stuff (whatever
		operating system) must be in the first 1024 cylinders of a
		disk. Only 10 bits are available to encode the cylinder
		number. For the number of sectors the limit is 64 (0-63). When
		you combine the 1024 cylinder limit with the 16 head limit
		(also a design feature) you max out at fairly limited  disk
		sizes. </para>
	      
	      <para>To work around this problem, the manufacturers of ESDI PC
		controllers added a BIOS prom extension on their boards. This
		BIOS extension handles disk I/O for booting (and for some
		operating systems <emphasis remap=it>all</emphasis> disk I/O)
		by using  translation. For instance, a big drive might be
		presented to the system as having 32 heads and 64
		sectors/track.  The result is that the number of cylinders is
		reduced to something below 1024 and is therefore usable by the
		system without problems. It is noteworthy to know that FreeBSD
		does not use the BIOS after its kernel has started.  More on
		this later.</para>
	      
	      <para>A second reason for translations is the fact that most
		older system BIOSes could only handle drives with 17 sectors
		per track (the old ST412 standard). Newer system BIOSes
		usually have a user-defined drive type (in most cases this is
		drive type 47).</para>
	      
	      <para><emphasis>Whatever you do to translations after reading
		  this document, keep in mind that if you have multiple
		  operating systems on the same disk, all must use the same
		  translation</emphasis></para>
	      
	      <para>While on the subject of translations, I have seen one
		controller type (but there are probably more like this) offer
		the option to logically split a drive in multiple partitions
		as a BIOS option. I had select 1 drive == 1 partition because
		this controller wrote this info onto the disk. On power-up it
		read the info and presented itself to the system based on the
		info from the disk.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Spare sectoring</title>
	      
	      <para>Most ESDI controllers offer the possibility to remap bad
		sectors. During/after the low-level format of the disk bad
		sectors are marked as such, and a replacement sector is put in
		place (logically of course) of the bad one. </para>
	      
	      <para>In most cases the remapping is done by using N-1 sectors
		on each track for actual data storage, and sector N itself is
		the spare sector. N is the total number of sectors physically
		available on the track. The idea behind this is that the
		operating system sees a 'perfect' disk without bad sectors. In
		the case of FreeBSD this concept is not usable.</para>
	      
	      <para>The problem is that the translation from <emphasis
		  remap=it>bad</emphasis> to <emphasis
		  remap=it>good</emphasis> is performed by the BIOS of the
		ESDI controller. FreeBSD, being a true 32 bit operating
		system, does not use the BIOS after it has been booted.
		Instead, it has device drivers that talk directly to the
		hardware.</para>
	      
	      <para><emphasis>So: don't use spare sectoring, bad block
		  remapping or whatever it may be called by the controller
		  manufacturer when you want to use the disk for
		  FreeBSD.</emphasis></para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Bad block handling</title>
	      
	      <para>The preceding section leaves us with a problem. The
		controller's bad block handling is not usable and still
		FreeBSD's filesystems assume perfect media without any flaws.
		To solve this problem, FreeBSD use the <emphasis
		  remap=it>bad144</emphasis> tool. Bad144 (named after a
		Digital Equipment standard for bad block handling) scans a
		FreeBSD slice for bad blocks. Having found these bad blocks,
		it writes a table with the offending block numbers to the end
		of the FreeBSD slice. </para>
	      
	      <para>When the disk is in operation, the disk accesses are
		checked  against the table read from the disk. Whenever a
		block number is requested that is in the bad144 list, a
		replacement block (also from the end of the FreeBSD slice) is
		used. In this way, the bad144 replacement scheme presents
		'perfect' media to the FreeBSD filesystems.</para>
	      
	      <para>There are a number of potential pitfalls associated with
		the use of bad144. First of all, the slice cannot have more
		than 126 bad sectors. If your drive has a high number of bad
		sectors, you might need to divide it into multiple FreeBSD
		slices each containing less than 126 bad sectors. Stay away
		from low-level format programs that mark
		<emphasis>every</emphasis> sector of a track as bad when  they
		find a flaw on the track. As you can imagine, the  126 limit
		is quickly reached when the low-level format is done this
		way.</para>
	      
	      <para>Second, if the slice contains the root filesystem, the
		slice should be within the 1024 cylinder BIOS limit. During
		the boot process the bad144 list is read using the BIOS and
		this only succeeds when the list is within the 1024 cylinder
		limit. <emphasis>Note</emphasis> that the restriction is not
		that only the root <emphasis>filesystem</emphasis> must be
		within the 1024 cylinder limit, but rather the entire
		<emphasis>slice</emphasis> that contains the root
		filesystem.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Kernel configuration</title>
	      
	      <para>ESDI disks are handled by the same <emphasis
		  remap=it>wd</emphasis>driver as IDE and ST412 MFM disks. The
		<emphasis remap=it>wd</emphasis> driver should work for all
		WD1003 compatible interfaces. </para>
	      
	      <para>Most hardware is jumperable for one of two different I/O
		address ranges and IRQ lines. This allows you to have  two wd
		type controllers in one system. </para>
	      
	      <para>When your hardware allows non-standard strappings, you can
		use these with FreeBSD as long as you enter the  correct info
		into the kernel config file. An example from the kernel config
		file (they live in <filename>/sys/i386/conf</filename>
		BTW).</para>
	      
	      <para>
		<informalexample>
		  <screen># First WD compatible controller controller
		    wdc0    at isa? port "IO_WD1" bio irq 14 vector wdintr
		    disk            wd0     at wdc0 drive 0 disk
		    wd1     at wdc0 drive 1 # Second WD compatible controller
		    controller      wdc1    at isa? port "IO_WD2" bio irq 15
		    vector wdintr disk            wd2     at wdc1 drive 0 disk
		    wd3     at wdc1 drive 1</screen>
		</informalexample>
	      </para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title>Particulars on ESDI hardware</title>
	    
	    
	    <sect4>
	      <title>Adaptec 2320 controllers</title>
	      
	      <para>I successfully installed FreeBSD onto a ESDI disk
		controlled by a ACB-2320. No other operating system was
		present on the disk.</para>
	      
	      <para>To do so I low level formatted the disk using NEFMT.EXE
		(<emphasis remap=it>ftp</emphasis>able from
		<filename>www.adaptec.com</filename>) and answered NO to the
		question whether the disk should be formatted with a spare
		sector on each track. The BIOS on the ACD-2320 was disabled. I
		used the 'free configurable' option in the system BIOS to
		allow the BIOS to boot it.</para>
	      
	      <para>Before using NEFMT.EXE I tried to format the disk using
		the ACB-2320 BIOS builtin formatter. This proved to be a show
		stopper, because it did not give me an option to disable spare
		sectoring. With spare sectoring enabled the FreeBSD
		installation process broke down on the bad144 run.</para>
	      
	      <para>Please check carefully which ACB-232xy variant you have.
		The x is either 0 or 2, indicating a controller without or
		with a floppy controller on board. </para>
	      
	      <para>The y is more interesting.  It can either be a blank,  a
		"A-8" or a "D".  A blank indicates a plain 10 Mbits/second
		controller. An "A-8" indicates a 15 Mbits/second controller
		capable of handling 52 sectors/track. A "D" means a 15
		Mbits/second controller that can also handle drives with &gt;
		36 sectors/track (also 52 ?).</para>
	      
	      <para>All variations should be capable of using 1:1
		interleaving. Use 1:1, FreeBSD is fast enough to handle
		it.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Western Digital WD1007 controllers</title>
	      
	      <para>I successfully installed FreeBSD onto a ESDI disk
		controlled by a WD1007 controller. To be precise, it was a
		WD1007-WA2. Other variations of the WD1007 do exist.</para>
	      
	      <para>To get it to work, I had to disable the sector translation
		and the WD1007's onboard BIOS. This implied I could not use
		the low-level formatter built into this BIOS. Instead, I
		grabbed WDFMT.EXE from www.wdc.com Running this formatted my
		drive just fine. </para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Ultrastor U14F controllers</title>
	      
	      <para>According to multiple reports from the net, Ultrastor ESDI
		boards work OK with FreeBSD. I lack any further info on
		particular settings.</para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3
	    id="esdi-further-reading">
	    <title>Further reading</title>
	    
	    <para>If you intend to do some serious ESDI hacking, you might
	      want to have the official standard at hand:</para>
	    
	    <para>The latest ANSI X3T10 committee document is:
	      <itemizedlist>
		
		<listitem>
		  <para>Enhanced Small Device Interface (ESDI)
		    [X3.170-1990/X3.170a-1991]    [X3T10/792D Rev 11]</para>
		</listitem>
		
	      </itemizedlist> On Usenet the newsgroup <ulink
		URL="news:comp.periphs">comp.periphs</ulink> is a noteworthy
	      place to look  for more info.</para>
	    
	    <para>The World Wide Web (WWW) also proves to be a very handy info
	      source: For info on Adaptec ESDI controllers see <ulink
		URL="http://www.adaptec.com/">http://www.adaptec.com/</ulink>.
	      For info on Western Digital controllers see <ulink
		URL="http://www.wdc.com/">http://www.wdc.com/</ulink>.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Thanks to...
	    </title>
	    
	    <para>Andrew Gordon for sending me an Adaptec 2320 controller and
	      ESDI disk  for testing.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2
	  id="scsi">
	  <title>What is SCSI?</title>
	  
	  <para><emphasis>Copyright &copy; 1995, &a.wilko;.<!-- <br> -->July
	      6, 1996.</emphasis></para>
	  
	  <para>SCSI is an acronym for Small Computer Systems Interface.  It
	    is an ANSI standard that has become one of the leading I/O buses
	    in the computer industry.  The foundation of the SCSI standard was
	    laid by Shugart Associates (the same guys that gave the world the
	    first mini floppy disks) when they introduced the SASI bus
	    (Shugart Associates Standard Interface).</para>
	  
	  <para>After some time an industry effort was started to come to a
	    more strict standard allowing devices from different vendors to
	    work together. This effort was recognized in the ANSI SCSI-1
	    standard.  The SCSI-1 standard (approx 1985) is rapidly becoming
	    obsolete.  The current standard is SCSI-2 (see <xref
	      linkend="scsi-further-reading"
	      remap="Further         reading">), with SCSI-3 on the drawing
	    boards.</para>
	  
	  <para>In addition to a physical interconnection standard, SCSI
	    defines a logical (command set) standard to which disk devices
	    must adhere. This standard is called the Common Command Set (CCS)
	    and was developed more or less in parallel with ANSI SCSI-1.
	    SCSI-2 includes the (revised) CCS as part of the standard itself.
	    The commands are dependent on the type of device at hand. It does
	    not make much sense of course to define a Write command for a
	    scanner.</para>
	  
	  <para>The SCSI bus is a parallel bus, which comes in a number of
	    variants.  The oldest and most used is an 8 bit wide bus, with
	    single-ended signals, carried on 50 wires.  (If you do not know
	    what single-ended means, do not worry, that is what this document
	    is all about.)  Modern designs also use 16 bit wide buses, with
	    differential signals.  This allows transfer speeds of
	    20Mbytes/second, on cables lengths of up to 25 meters. SCSI-2
	    allows a maximum bus width of 32 bits, using an additional cable.
	    Quickly emerging are Ultra SCSI (also called Fast-20) and Ultra2
	    (also called Fast-40). Fast-20 is 20 million transfers per second
	    (20 Mbytes/sec on a 8 bit bus), Fast-40 is 40 million transfers
	    per second (40 Mbytes/sec on a 8 bit bus).  Most hard drives sold
	    today are single-ended Ultra SCSI (8 or 16 bits).</para>
	  
	  <para>Of course the SCSI bus not only has data lines, but also a
	    number of control signals. A very elaborate protocol is part of
	    the standard to allow multiple devices to share the bus in an
	    efficient manner. In SCSI-2, the data is always checked using a
	    separate parity line. In pre-SCSI-2 designs parity was
	    optional.</para>
	  
	  <para>In SCSI-3 even faster bus types are introduced, along with a
	    serial SCSI busses that reduces the cabling overhead and allows a
	    higher maximum bus length. You might see names like SSA and
	    Fiberchannel in this context. None of the serial buses are
	    currently in widespread use (especially not in the typical FreeBSD
	    environment). For this reason the serial bus types are not
	    discussed any further.</para>
	  
	  <para>As you could have guessed from the description above, SCSI
	    devices are intelligent.  They have to be to adhere to the SCSI
	    standard (which is over 2 inches thick BTW).  So, for a hard disk
	    drive for instance you do not specify a head/cylinder/sector to
	    address a particular block, but simply the number of the block you
	    want. Elaborate caching schemes, automatic bad block replacement
	    etc are all made possible by this 'intelligent device'
	    approach.</para>
	  
	  <para>On a SCSI bus, each possible pair of devices can communicate.
	    Whether their function allows this is another matter, but the
	    standard does not restrict it. To avoid signal contention, the 2
	    devices have to arbitrate for the bus before using it.</para>
	  
	  <para>The philosophy of SCSI is to have a standard that allows
	    older-standard devices to work with newer-standard ones.  So, an
	    old SCSI-1 device should normally work on a SCSI-2 bus.  I say
	    Normally, because it is not absolutely sure that the
	    implementation of an old device follows the (old) standard closely
	    enough to be acceptable on a new bus.  Modern devices are usually
	    more well-behaved, because the standardization has become more
	    strict and is better adhered to by the device manufacturers.
	  </para>
	  
	  <para>Generally speaking, the chances of getting a working set of
	    devices on a single bus is better when all the devices are SCSI-2
	    or newer.  This implies that you do not have to dump all your old
	    stuff when you get that shiny 2GB disk: I own a system on which a
	    pre-SCSI-1 disk, a SCSI-2 QIC tape unit, a SCSI-1 helical scan
	    tape unit and 2 SCSI-1 disks work together quite happily. From a
	    performance standpoint you might want to separate your older and
	    newer (=faster) devices however.</para>
	  
	  
	  <sect3>
	    <title>Components of SCSI</title>
	    
	    <para>As said before, SCSI devices are smart.  The idea is to put
	      the knowledge about intimate hardware details onto the SCSI
	      device itself.  In this way, the host system does not have to
	      worry about things like how many heads are hard disks has, or
	      how many tracks there are on a specific tape device.  If you are
	      curious, the standard specifies commands with which you can
	      query your devices on their hardware particulars. FreeBSD uses
	      this capability during boot to check out what devices are
	      connected and whether they need any special treatment.</para>
	    
	    <para>The advantage of intelligent devices is obvious: the device
	      drivers on the host can be made in a much more generic fashion,
	      there is no longer a need to change (and qualify!) drivers for
	      every odd new device that is introduced.</para>
	    
	    <para>For cabling and connectors there is a golden rule: get good
	      stuff. With bus speeds going up all the time you will save
	      yourself a lot of grief by using good material.</para>
	    
	    <para>So, gold plated connectors, shielded cabling, sturdy
	      connector hoods with strain reliefs etc are the way to go.
	      Second golden rule: do no use cables longer than necessary. I
	      once spent 3 days hunting down a problem with a flaky machine
	      only to discover that shortening the SCSI bus by 1 meter solved
	      the problem.  And the original bus length was well within the
	      SCSI specification.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>SCSI bus types</title>
	    
	    <para>From an electrical point of view, there are two incompatible
	      bus types: single-ended and differential.  This means that there
	      are two different main groups of SCSI devices and controllers,
	      which cannot be mixed on the same bus.  It is possible however
	      to use special converter hardware to transform a single-ended
	      bus into a differential one (and vice versa).  The differences
	      between the bus types are explained in the next sections.</para>
	    
	    <para>In lots of SCSI related documentation there is a sort of
	      jargon in use to abbreviate the different bus types. A small
	      list:</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para>FWD:	Fast Wide Differential</para>
		</listitem>
		
		<listitem>
		  <para>FND:	Fast Narrow Differential</para>
		</listitem>
		
		<listitem>
		  <para>SE:	Single Ended</para>
		</listitem>
		
		<listitem>
		  <para>FN:	Fast Narrow</para>
		</listitem>
		
		<listitem>
		  <para>etc.</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>With a minor amount of imagination one can usually imagine
	      what is meant.</para>
	    
	    <para>Wide is a bit ambiguous, it can indicate 16 or 32 bit buses.
	      As far as I know, the 32 bit variant is not (yet) in use, so
	      wide normally means 16 bit.</para>
	    
	    <para>Fast means that the timing on the bus is somewhat different,
	      so that on a narrow (8 bit) bus 10 Mbytes/sec are possible
	      instead of 5 Mbytes/sec for 'slow' SCSI. As discussed before,
	      bus speeds of 20 and 40 million transfers/second are also
	      emerging  (Fast-20 == Ultra SCSI and Fast-40 == Ultra2 SCSI).
	    </para>
	    
	    <para>It should be noted that the data lines &gt; 8 are only used
	      for data transfers and device addressing. The transfers of
	      commands and status messages etc are only performed on the
	      lowest 8 data lines. The standard allows narrow devices to
	      operate on a wide bus. The usable bus width is negotiated
	      between the devices. You have to watch your device addressing
	      closely when mixing wide and narrow.</para>
	    
	    
	    <sect4>
	      <title>Single ended buses</title>
	      
	      <para>A single-ended SCSI bus uses signals that are either 5
		Volts or 0 Volts (indeed, TTL levels) and are relative to a
		COMMON ground reference. A singled ended 8 bit SCSI bus has
		approximately 25 ground lines, who are all tied to a single
		`rail' on all devices. A standard single ended bus has a
		maximum length of 6 meters. If the same bus is used with
		fast-SCSI devices, the maximum length allowed drops to 3
		meters. Fast-SCSI means that instead of 5Mbytes/sec the bus
		allows 10Mbytes/sec transfers. </para>
	      
	      <para>Fast-20 (Ultra SCSI) and Fast-40 allow for 20 and 40
		million transfers/second respectively. So, F20 is 20
		Mbytes/second on a 8 bit bus, 40 Mbytes/second on a 16 bit bus
		etc. For F20 the max bus length is 1.5 meters, for F40 it
		becomes 0.75 meters. Be aware that F20 is pushing  the limits
		quite a bit, so you will quickly find out if your SCSI bus is
		electrically sound.</para>
	      
	      <para>Please note that this means that if some devices on your
		bus use 'fast' to communicate your bus must adhere to the
		length restrictions for fast buses!</para>
	      
	      <para>It is obvious that with the newer fast-SCSI devices the
		bus length can become a real bottleneck. This is why the
		differential SCSI bus was introduced in the SCSI-2
		standard.</para>
	      
	      <para>For connector pinning and connector types please refer to
		the SCSI-2 standard (see <xref linkend="scsi-further-reading"
		  remap="Further             reading">) itself, connectors etc
		are listed there in painstaking detail.</para>
	      
	      <para>Beware of devices using non-standard cabling. For instance
		Apple uses a 25pin D-type connecter (like the one on serial
		ports and parallel printers). Considering that the official
		SCSI bus needs 50 pins you can imagine the use of this
		connector needs some 'creative cabling'. The reduction of the
		number of ground wires they used is a bad idea, you better
		stick to 50 pins cabling  in accordance with the SCSI
		standard. For Fast-20 and 40 do not even think about buses
		like this.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Differential buses</title>
	      
	      <para>A differential SCSI bus has a maximum length of 25 meters.
		Quite a difference from the 3 meters for a single-ended
		fast-SCSI bus. The idea behind differential signals is that
		each bus signal has its own return wire. So, each signal is
		carried on a (preferably twisted) pair of wires. The voltage
		difference between these two wires determines whether the
		signal is asserted or de-asserted. To a certain extent the
		voltage difference between ground and the signal wire pair is
		not relevant (do not try 10 kVolts though).</para>
	      
	      <para>It is beyond the scope of this document to explain why
		this differential idea is so much better. Just accept that
		electrically seen the use of differential signals gives a much
		better noise margin. You will normally find differential buses
		in use for inter-cabinet connections. Because of the lower
		cost single ended is mostly used for shorter buses like inside
		cabinets.</para>
	      
	      <para>There is nothing that stops you from using differential
		stuff with FreeBSD, as long as you use a controller that has
		device driver support in FreeBSD. As an example, Adaptec
		marketed the AHA1740 as a single ended board, whereas the
		AHA1744 was differential. The software interface to the host
		is identical for both.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Terminators</title>
	      
	      <para>Terminators in SCSI terminology are resistor networks that
		are used to get a correct impedance matching.  Impedance
		matching is important to get clean signals on the bus, without
		reflections or ringing.  If you once made a long distance
		telephone call on a bad line you probably know what
		reflections are.  With 20Mbytes/sec traveling over your SCSI
		bus, you do not want signals echoing back.</para>
	      
	      <para>Terminators come in various incarnations, with more or
		less sophisticated designs.  Of course, there are internal and
		external variants.  Many SCSI devices come with a number of
		sockets in which a number of resistor networks can (must be!)
		installed.  If you remove terminators from a device, carefully
		store them. You will need them when you ever decide to
		reconfigure your SCSI bus.  There is enough variation in even
		these simple tiny things to make finding the exact replacement
		a frustrating business.  There are also SCSI devices that have
		a single jumper to enable or disable a built-in terminator.
		There are special terminators you can stick onto a flat cable
		bus.  Others look like external connectors, or a connector
		hood without a cable.  So, lots of choice as you can
		see.</para>
	      
	      <para>There is much debate going on if and when you should
		switch from simple resistor (passive) terminators to active
		terminators. Active terminators contain slightly more
		elaborate circuit to give cleaner bus signals. The general
		consensus seems to be that the usefulness of active
		termination increases when you have long buses and/or fast
		devices. If you ever have problems with your SCSI buses you
		might consider trying an active terminator. Try to borrow one
		first, they reputedly are quite expensive.</para>
	      
	      <para>Please keep in mind that terminators for differential and
		single-ended buses are not identical. You should <emphasis
		  remap=bf>not mix</emphasis> the two variants.</para>
	      
	      <para>OK, and now where should you install your terminators?
		This is by far the most misunderstood part of SCSI. And it is
		by far the simplest.  The rule is: <emphasis remap=bf>every
		  single line on the SCSI bus has 2 (two) terminators, one at
		  each end of the bus.</emphasis> So, two and not one or three
		or whatever. Do yourself a favor and stick to this rule. It
		will save you endless grief, because wrong termination has the
		potential to introduce highly mysterious bugs.  (Note the
		"potential" here; the nastiest part is that it may or may not
		work.)</para>
	      
	      <para>A common pitfall is to have an internal (flat) cable in a
		machine and also an external cable attached to the controller.
		It seems almost everybody forgets to remove the terminators
		from the controller. The terminator must now be on the last
		external device, and not on the controller! In general, every
		reconfiguration of a SCSI bus must pay attention to
		this.</para>
	      
	      <para>Note that termination is to be done on a per-line basis.
		This means if you have both narrow and wide buses connected to
		the same host adapter, you need to enable termination on the
		higher 8 bits of the bus on the adapter (as well as the last
		devices on each bus, of course).</para>
	      
	      <para>What I did myself is remove all terminators from my SCSI
		devices and controllers. I own a couple of external
		terminators, for both the Centronics-type external cabling and
		for the internal flat cable connectors. This makes
		reconfiguration much easier.</para>
	      
	      <para>On modern devices, sometimes integrated terminators are
		used. These things are special purpose integrated circuits
		that can be dis/en-abled with a control pin. It is not
		necessary to physically remove them from a device.  You may
		find them on newer host adapters, sometimes they are software
		configurable, using some sort of setup tool. Some will even
		auto-detect the cables attached to the connectors and
		automatically set up the termination as necessary.  At any
		rate, consult your documentation!</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Terminator power</title>
	      
	      <para>The terminators discussed in the previous chapter need
		power to operate properly.  On the SCSI bus, a line is
		dedicated to this purpose.  So, simple huh?</para>
	      
	      <para>Not so. Each device can provide its own terminator power
		to the terminator sockets it has on-device. But if you have
		external terminators, or when the device supplying the
		terminator power to the SCSI bus line is switched off you are
		in trouble.</para>
	      
	      <para>The idea is that initiators (these are devices that
		initiate actions on the bus, a discussion follows) must supply
		terminator power. All SCSI devices are allowed (but not
		required) to supply terminator power.</para>
	      
	      <para>To allow for un-powered devices on a bus, the terminator
		power must be supplied to the bus via a diode. This prevents
		the backflow of current to un-powered devices.</para>
	      
	      <para>To prevent all kinds of nastiness, the terminator power is
		usually fused.  As you can imagine, fuses might blow. This
		can, but does not have to, lead to a non functional bus. If
		multiple devices supply terminator power, a single blown fuse
		will not put you out of business. A single supplier with a
		blown fuse certainly will. Clever external terminators
		sometimes have a  LED indication that shows whether terminator
		power is present.</para>
	      
	      <para>In newer designs auto-restoring fuses that 'reset'
		themselves after some time are sometimes used.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Device addressing</title>
	      
	      <para>Because the SCSI bus is, ehh, a bus there must be a way to
		distinguish or address the different devices connected to
		it.</para>
	      
	      <para>This is done by means of the SCSI or target ID. Each
		device has a unique target ID.  You can select the ID to which
		a device must respond using a set of jumpers, or a dip switch,
		or something similar. Some SCSI host adapters let you change
		the target ID from the boot menu.  (Yet some others will not
		let you change the ID from 7.)  Consult the documentation of
		your device for more information.</para>
	      
	      <para>Beware of multiple devices configured to use the same ID.
		Chaos normally reigns in this case. A pitfall is that one of
		the devices sharing the same ID sometimes even manages to
		answer to I/O requests! </para>
	      
	      <para>For an 8 bit bus, a maximum of 8 targets is possible. The
		maximum is 8 because the selection is done bitwise using the 8
		data lines on the bus.  For wide buses this increases to the
		number of data lines (usually 16).</para>
	      
	      <para>Note that a narrow SCSI device can not communicate with a
		SCSI device with a target ID larger than 7.  This means it is
		generally not a good idea to move your SCSI host adapter's
		target ID to something higher than 7 (or your CD-ROM will stop
		working).</para>
	      
	      <para>The higher the SCSI target ID, the higher the priority the
		devices has.  When it comes to arbitration between devices
		that want to use the bus at the same time, the device that has
		the highest SCSI ID will win. This also means that the SCSI
		host adapter usually uses target ID 7. Note however that the
		lower 8 IDs have higher priorities than the higher 8 IDs on a
		wide-SCSI bus.  Thus, the order of target IDs is: <emphasis
		  remap=tt>[7 6 .. 1 0 15 14 .. 9 8]</emphasis> on a wide-SCSI
		system.  (If you you are wondering why the lower 8 have higher
		priority, read the previous paragraph for a hint.)</para>
	      
	      <para>For a further subdivision, the standard allows for Logical
		Units or LUNs for short. A single target ID may have multiple
		LUNs. For example, a tape device including a tape changer may
		have LUN 0 for the tape device itself, and LUN 1 for the tape
		changer. In this way, the host system can address each of the
		functional units of the tape changer as desired.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Bus layout</title>
	      
	      <para>SCSI buses are linear. So, not shaped like Y-junctions,
		star topologies, rings, cobwebs or whatever else people might
		want to invent.  One of the most common mistakes is for people
		with wide-SCSI host adapters to connect devices on all three
		connecters (external connector, internal wide connector,
		internal narrow connector).  Don't do that.  It may appear to
		work if you are really lucky, but I can almost guarantee that
		your system will stop functioning at the most unfortunate
		moment (this is also known as "Murphy's law").</para>
	      
	      <para>You might notice that the terminator issue discussed
		earlier becomes rather hairy if your bus is not linear. Also,
		if you have more connectors than devices on your internal SCSI
		cable, make sure you attach devices on connectors on both ends
		instead of using the connectors in the middle and let one or
		both ends dangle.  This will screw up the termination of the
		bus.</para>
	      
	      <para>The electrical characteristics, its noise margins and
		ultimately the reliability of it all are tightly related to
		linear bus rule.</para>
	      
	      <para><emphasis remap=bf>Stick to the linear bus
		  rule!</emphasis></para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title>Using SCSI with FreeBSD</title>
	    
	    
	    <sect4>
	      <title>About translations, BIOSes and magic...</title>
	      
	      <para>As stated before, you should first make sure that you have
		a electrically sound bus.</para>
	      
	      <para>When you want to use a SCSI disk on your PC as boot disk,
		you must aware of some quirks related to PC BIOSes. The PC
		BIOS in its first incarnation used a low level physical
		interface to the hard disk. So, you had to tell the BIOS
		(using a setup tool or a BIOS built-in setup) how your disk
		physically looked like. This involved stating number of heads,
		number of cylinders, number of sectors per track, obscure
		things like precompensation and reduced write current cylinder
		etc.</para>
	      
	      <para>One might be inclined to think that since SCSI disks are
		smart you can forget about this. Alas, the arcane setup issue
		is still present today. The system BIOS needs to know how to
		access your SCSI disk with the head/cyl/sector method in order
		to load the FreeBSD kernel during boot.</para>
	      
	      <para>The SCSI host adapter or SCSI controller you have put in
		your AT/EISA/PCI/whatever bus to connect your disk therefore
		has its own on-board BIOS. During system startup, the SCSI
		BIOS takes over the hard disk interface routines from the
		system BIOS. To fool the system BIOS, the system setup is
		normally set to No hard disk present. Obvious, isn't
		it?</para>
	      
	      <para>The SCSI BIOS itself presents to the system a so called
		<emphasis remap=bf>translated</emphasis> drive. This means
		that a fake drive table is constructed that allows the PC to
		boot the drive.  This translation is often (but not always)
		done using a pseudo drive with 64 heads and 32 sectors per
		track. By varying the number of cylinders, the SCSI BIOS
		adapts to the actual drive size. It is useful to note that 32
		* 64 / 2 = the size of your drive in megabytes. The division
		by 2 is to get from disk blocks that are normally 512 bytes in
		size to Kbytes.</para>
	      
	      <para>Right. All is well now?! No, it is not. The system BIOS
		has another quirk you might run into. The number of cylinders
		of a bootable hard disk cannot be greater than 1024. Using the
		translation above, this is a show-stopper for disks greater
		than 1 GB. With disk capacities going up all the time this is
		causing problems.</para>
	      
	      <para>Fortunately, the solution is simple: just use another
		translation, e.g. with 128 heads instead of 32. In most cases
		new SCSI BIOS versions are available to upgrade older SCSI
		host adapters. Some newer adapters have an option, in the form
		of a jumper or software setup selection, to switch the
		translation the SCSI BIOS uses.</para>
	      
	      <para>It is very important that <emphasis
		  remap=bf>all</emphasis> operating systems on the disk use
		the <emphasis remap=bf>same translation</emphasis> to get the
		right idea about where to find the relevant partitions. So,
		when installing FreeBSD you must answer any questions about
		heads/cylinders etc using the translated values your host
		adapter uses.</para>
	      
	      <para>Failing to observe the translation issue might lead to
		un-bootable systems or operating systems overwriting each
		others partitions. Using fdisk you should be able to see all
		partitions.</para>
	      
	      <para>You might have heard some talk of 'lying' devices? Older
		FreeBSD kernels used to report the geometry of SCSI disks when
		booting. An example from one of my systems:</para>
	      
	      <para>
		<literallayout>	aha0 targ 0 lun 0: &lt;MICROP
		  1588-15MB1057404HSP4&gt; sd0: 636MB (1303250 total sec),
		  1632 cyl, 15 head, 53 sec, bytes/sec 512 </literallayout>
		Newer kernels usually do not report this information. e.g.
		<literallayout>	 (bt0:0:0): "SEAGATE ST41651 7574" type 0
		  fixed SCSI 2 sd0(bt0:0:0): Direct-Access 1350MB (2766300 512
		  byte sectors) </literallayout>
	      </para>
	      
	      <para>Why has this changed?</para>
	      
	      <para>This info is retrieved from the SCSI disk itself. Newer
		disks often use a technique called zone bit recording. The
		idea is that on the outer cylinders of the drive there is more
		space so more sectors per track can be put on them. This
		results in disks that have more tracks on outer cylinders than
		on the inner cylinders and, last but not least, have more
		capacity. You can imagine that the value reported by the drive
		when inquiring about the geometry now becomes suspect at best,
		and nearly always misleading. When asked for a geometry , it
		is nearly always better to supply the geometry used by the
		BIOS, or <emphasis>if the BIOS is never going to know about
		  this disk</emphasis>, (e.g. it is not a booting disk) to
		supply a fictitious geometry that is convenient.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>SCSI subsystem design</title>
	      
	      <para>FreeBSD uses a layered SCSI subsystem. For each different
		controller card a device driver is written. This driver knows
		all the intimate details about the hardware it controls. The
		driver has a interface to the upper layers of the SCSI
		subsystem through which it receives its commands and reports
		back any status.</para>
	      
	      <para>On top of the card drivers there are a number of more
		generic drivers for a class of devices. More specific: a
		driver for tape devices (abbreviation: st), magnetic disks
		(sd), CD-ROMs (cd) etc. In case you are wondering where you
		can find this stuff, it all lives in
		<filename>/sys/scsi</filename>. See the man pages in section 4
		for more details.</para>
	      
	      <para>The multi level design allows a decoupling of low-level
		bit banging and more high level stuff. Adding support for
		another piece of hardware is a much more manageable
		problem.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Kernel configuration</title>
	      
	      <para>Dependent on your hardware, the kernel configuration file
		must contain one or more lines describing your host
		adapter(s).  This includes I/O addresses, interrupts etc.
		Consult the man page for your adapter driver to get more info.
		Apart from that, check out /sys/i386/conf/LINT for an overview
		of a kernel config file. LINT contains every possible option
		you can dream of. It does <emphasis>not</emphasis> imply LINT
		will actually get you to a working kernel at all.</para>
	      
	      <para>Although it is probably stating the obvious: the kernel
		config file should reflect your actual hardware setup. So,
		interrupts, I/O addresses etc must match the kernel config
		file. During system boot messages will be displayed to
		indicate whether the configured hardware was actually found.
		Note that most of the EISA/PCI drivers (namely <emphasis
		  remap=tt>ahb, ahc, ncr</emphasis> and <emphasis
		  remap=tt>amd</emphasis> will automatically obtain the
		correct parameters from the host adapters themselves at boot
		time; thus, you just need to write, for instance, "<emphasis
		  remap=tt>controller ahc0</emphasis>".</para>
	      
	      <para>An example loosely based on the FreeBSD 2.2.5-Release
		kernel config  file LINT with some added comments (between
		[]):</para>
	      
	      <para>
		<literallayout>		 # SCSI host adapters: `aha', `ahb',
		  `aic', `bt', `nca' # # aha: Adaptec 154x # ahb: Adaptec 174x
		  # ahc: Adaptec 274x/284x/294x # aic: Adaptec 152x and sound
		  cards using the Adaptec AIC-6360 (slow!) # amd: AMD 53c974
		  based SCSI cards (e.g., Tekram DC-390 and 390T) # bt: Most
		  Buslogic controllers # nca: ProAudioSpectrum cards using the
		  NCR 5380 or Trantor T130 # ncr: NCR/Symbios
		  53c810/815/825/875 etc based SCSI cards # uha: UltraStore
		  14F and 34F # sea: Seagate ST01/02 8 bit controller (slow!)
		  # wds: Western Digital WD7000 controller (no
		  scatter/gather!). # [For an Adaptec AHA274x/284x/294x/394x
		  etc controller] controller	ahc0 [For an NCR/Symbios
		  53c875 based controller] controller	ncr0 [For an Ultrastor
		  adapter] controller	uha0	at isa? port "IO_UHA0" bio irq
		  ? drq 5 vector uhaintr # Map SCSI buses to specific SCSI
		  adapters controller	scbus0	at ahc0 controller	scbus2
		  at ncr0 controller	scbus1  at uha0 # The actual SCSI
		  devices disk sd0 at scbus0 target 0 unit 0	[SCSI disk 0
		  is at scbus 0, LUN 0] disk sd1 at scbus0 target 1
		  [implicit LUN 0 if omitted] disk sd2 at scbus1 target 3
		  [SCSI disk on the uha0] disk sd3 at scbus2 target 4
		  [SCSI disk on the ncr0] tape st1 at scbus0 target 6
		  [SCSI tape at target 6] device cd0 at scbus?
		  [the first ever CD-ROM found, no wiring] </literallayout>
	      </para>
	      
	      <para>The example above tells the kernel to look for a ahc
		(Adaptec 274x) controller, then for an NCR/Symbios board, and
		so on. The lines following the controller specifications  tell
		the kernel to configure specific devices but
		<emphasis>only</emphasis> attach them when they match the
		target ID and LUN specified on the corresponding bus. </para>
	      
	      <para>Wired down devices get 'first shot' at the unit numbers so
		the first non 'wired down' device, is allocated the unit
		number  one greater than the highest 'wired down' unit number
		for that kind of device. So, if you had a SCSI tape at target
		ID 2 it would be configured as st2, as the tape at target ID 6
		is wired down to unit number 1. Note that <emphasis>wired down
		  devices need not be found</emphasis> to get their unit
		number. The unit number for a wired down device is reserved
		for that device, even if it is turned off at boot time. This
		allows the device to be turned on and brought on-line at a
		later time, without rebooting. Notice that a device's unit
		number has <emphasis>no</emphasis> relationship with its
		target ID on  the SCSI bus.</para>
	      
	      <para>Below is another example of a kernel config file as used
		by FreeBSD version &lt; 2.0.5. The difference with the first
		example is that devices are not 'wired down'. 'Wired down'
		means that you specify which SCSI target belongs to which
		device.</para>
	      
	      <para>A kernel built to the config file below will attach  the
		first SCSI disk it finds to sd0, the second disk to sd1 etc.
		If you ever removed or added a disk, all other devices of the
		same type (disk in this case) would 'move around'. This
		implies you have to change <filename>/etc/fstab</filename>
		each time.</para>
	      
	      <para>Although the old style still works, you  are
		<emphasis>strongly</emphasis> recommended to use this new
		feature. It will save you a lot of grief whenever you shift
		your hardware around on the SCSI buses. So, when you re-use
		your old trusty config file after upgrading from a
		pre-FreeBSD2.0.5.R system check this out.</para>
	      
	      <para>
		<literallayout>[driver for Adaptec 174x] controller      ahb0
		  at isa? bio irq 11 vector ahbintr [for Adaptec 154x]
		  controller      aha0    at isa? port "IO_AHA0" bio irq 11
		  drq 5 vector ahaintr [for Seagate ST01/02] controller
		  sea0    at isa? bio irq 5 iomem 0xc8000 iosiz 0x2000 vector
		  seaintr controller      scbus0 device          sd0
		  [support for 4 SCSI harddisks, sd0 up sd3] device
		  st0	[support for 2 SCSI tapes] [for the CD-ROM] device
		  cd0     #Only need one of these, the code dynamically grows
		</literallayout>
	      </para>
	      
	      <para>Both examples support SCSI disks. If during boot more
		devices of a specific type (e.g. sd disks) are found than are
		configured in the booting kernel, the system will simply
		allocate more devices, incrementing the unit number starting
		at the last number 'wired down'. If there are no 'wired down'
		devices then counting starts at unit 0.</para>
	      
	      <para>Use <emphasis remap=tt>man 4 scsi</emphasis> to check for
		the latest info on the SCSI subsystem. For more detailed info
		on host adapter drivers use eg <emphasis remap=tt>man 4
		  ahc</emphasis> for info on the Adaptec 294x driver.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Tuning your SCSI kernel setup</title>
	      
	      <para>Experience has shown that some devices are slow to respond
		to INQUIRY  commands after a SCSI bus reset (which happens at
		boot time). An INQUIRY command is sent by the kernel on boot
		to see what kind of device (disk, tape, CD-ROM etc) is
		connected to a specific target ID. This process is called
		device probing by the way.</para>
	      
	      <para>To work around the 'slow response' problem, FreeBSD allows
		a  tunable delay time before the SCSI devices are probed
		following a SCSI bus reset. You can set this delay time in
		your kernel configuration file using a line like:</para>
	      
	      <para>
		<literallayout>options         SCSI_DELAY=15         #Be
		  pessimistic about Joe SCSI device </literallayout> This line
		sets the delay time to 15 seconds. On my own system I had to
		use 3 seconds minimum to get my trusty old CD-ROM drive to be
		recognized. Start with a high value (say 30 seconds or so)
		when you have problems  with device recognition. If this
		helps, tune it back until it just stays working.</para>
	      
	    </sect4>
	    
	    <sect4
	      id="scsi-rogue-devices">
	      <title>Rogue SCSI devices
	      </title>
	      
	      <para>   Although the SCSI standard tries to be complete and
		concise, it is a complex standard and implementing things
		correctly is no easy task. Some vendors do a better job then
		others. </para>
	      
	      <para>This is exactly where the 'rogue' devices come into view.
		Rogues are devices that are recognized by the FreeBSD kernel
		as behaving slightly (...) non-standard. Rogue devices are
		reported by the kernel when booting. An example for two of my
		cartridge tape units:</para>
	      
	      <para>
		<literallayout>Feb 25 21:03:34 yedi /kernel: ahb0 targ 5 lun
		  0: &lt;TANDBERG TDC 3600       -06:&gt; Feb 25 21:03:34 yedi
		  /kernel: st0: Tandberg tdc3600 is a known rogue Mar 29
		  21:16:37 yedi /kernel: aha0 targ 5 lun 0: &lt;ARCHIVE VIPER
		  150  21247-005&gt; Mar 29 21:16:37 yedi /kernel: st1:
		  Archive  Viper 150 is a known rogue </literallayout>
	      </para>
	      
	      <para>For instance, there are devices that respond to  all LUNs
		on a certain target ID, even if they are actually only one
		device. It is easy to see that the kernel might be fooled into
		believing that there are 8 LUNs at that particular target ID.
		The confusion this causes is left as an exercise to the
		reader.</para>
	      
	      <para>The SCSI subsystem of FreeBSD recognizes devices with bad
		habits by looking at the INQUIRY response they send when
		probed. Because the INQUIRY response also includes the version
		number of the device  firmware, it is even possible that for
		different firmware versions different workarounds are used.
		See e.g. /sys/scsi/st.c and /sys/scsi/scsiconf.c for more info
		on how this is done.</para>
	      
	      <para>This scheme works fine, but keep in mind that it of course
		only works for devices that are KNOWN to be weird. If you are
		the first to connect your bogus Mumbletech SCSI CD-ROM you
		might be the one that has to define which workaround is
		needed.</para>
	      
	      <para>After you got your Mumbletech working, please send the
		required workaround to the FreeBSD development team for
		inclusion in the next release of FreeBSD. Other Mumbletech
		owners will be grateful  to you.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Multiple LUN devices</title>
	      
	      <para>   In some cases you come across devices that use multiple
		logical units (LUNs) on a single SCSI ID. In most cases
		FreeBSD only probes devices for LUN 0. An example are so
		called bridge boards that connect 2 non-SCSI harddisks to a
		SCSI bus (e.g. an Emulex MD21 found in old Sun
		systems).</para>
	      
	      <para>This means that any devices with LUNs != 0 are not
		normally found during device probe on system boot. To work
		around this problem you must add an appropriate entry in
		/sys/scsi/scsiconf.c and rebuild your kernel.</para>
	      
	      <para>Look for a struct that is initialized like below:
		<literallayout>	  { T_DIRECT, T_FIXED, "MAXTOR", "XT-4170S",
		  "B5A", "mx1", SC_ONE_LU } </literallayout>
	      </para>
	      
	      <para>For you Mumbletech BRIDGE2000 that has more than one LUN,
		acts as a SCSI disk and has firmware revision 123 you would
		add something like:</para>
	      
	      <para>
		<literallayout>	  { T_DIRECT, T_FIXED, "MUMBLETECH",
		  "BRIDGE2000", "123", "sd", SC_MORE_LUS } </literallayout>
	      </para>
	      
	      <para>The kernel on boot scans the inquiry data it receives
		against the table and acts accordingly. See the source for
		more info.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Tagged command queueing</title>
	      
	      <para>   Modern SCSI devices, particularly magnetic disks,
		support what is called tagged command queuing (TCQ). </para>
	      
	      <para>In a nutshell, TCQ allows the device to have multiple I/O
		requests outstanding at the same time. Because the device is
		intelligent, it can optimise its operations (like head
		positioning) based on its own request queue. On  SCSI devices
		like RAID (Redundant Array of Independent Disks) arrays the
		TCQ function is indispensable to take advantage of the
		device's inherent parallelism.</para>
	      
	      <para>Each I/O request is uniquely identified by a 'tag' (hence
		the name tagged command queuing) and this tag is used by
		FreeBSD to see which I/O in the device drivers queue is
		reported as complete by the device.</para>
	      
	      <para>It should be noted however that TCQ requires device driver
		support and that some devices implemented it 'not quite right'
		in their firmware. This problem bit me once, and it leads to
		highly mysterious problems. In such cases, try to disable
		TCQ.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Busmaster host adapters</title>
	      
	      <para>Most, but not all, SCSI host adapters are bus mastering
		controllers. This means that they can do I/O on their own
		without putting load onto the host CPU for data
		movement.</para>
	      
	      <para>This is of course an advantage for a multitasking
		operating system like FreeBSD. It must be noted however that
		there might be some rough edges.</para>
	      
	      <para>For instance an Adaptec 1542 controller can be set to use
		different transfer speeds on the host bus (ISA or AT in this
		case). The controller is settable to different rates because
		not all motherboards can handle the higher speeds. Problems
		like hangups, bad data etc might be the result of using a
		higher data transfer rate then your motherboard can
		stomach.</para>
	      
	      <para>The solution is of course obvious: switch to a lower data
		transfer rate and try if that works better. </para>
	      
	      <para>In the case of a Adaptec 1542, there is an option that can
		be put into the kernel config file to allow dynamic
		determination of the right, read: fastest feasible, transfer
		rate. This option is  disabled by default:</para>
	      
	      <para>
		<literallayout>options        "TUNE_1542"             #dynamic
		  tune of bus DMA speed </literallayout>
	      </para>
	      
	      <para>Check the man pages for the host adapter that you use. Or
		better still, use the ultimate documentation (read: driver
		source).</para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title>Tracking down problems</title>
	    
	    <para>The following list is an attempt to give a guideline for the
	      most common SCSI problems and their solutions. It is by no means
	      complete.</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para>Check for loose connectors and cables.</para>
		</listitem>
		
		<listitem>
		  <para>Check and double check the location and number of your
		    terminators.</para>
		</listitem>
		
		<listitem>
		  <para>Check if your bus has at least one supplier of
		    terminator power (especially with external
		    terminators.</para>
		</listitem>
		
		<listitem>
		  <para>Check if no double target IDs are used.</para>
		</listitem>
		
		<listitem>
		  <para>Check if all devices to be used are powered up.
		  </para>
		</listitem>
		
		<listitem>
		  <para>Make a minimal bus config with as little devices as
		    possible.</para>
		</listitem>
		
		<listitem>
		  <para>If possible, configure your host adapter to use slow
		    bus speeds.</para>
		</listitem>
		
		<listitem>
		  <para>Disable tagged command queuing to make things as
		    simple as possible (for a NCR hostadapter based system see
		    man ncrcontrol)</para>
		</listitem>
		
		<listitem>
		  <para>If you can compile a kernel, make one with the
		    SCSIDEBUG option, and try accessing the device with
		    debugging turned on for that device. If your device does
		    not even probe at startup, you may have to define the
		    address of the device that is failing, and the desired
		    debug level in <filename>/sys/scsi/scsidebug.h</filename>.
		    If it probes but just does not work, you can use the
		    <command>scsi(8)</command> command to dynamically set a
		    debug level to it in a running kernel (if SCSIDEBUG is
		    defined). This will give you COPIOUS debugging output with
		    which to confuse the gurus. see <emphasis remap=tt>man 4
		      scsi</emphasis> for more exact information. Also look at
		    <emphasis remap=tt>man 8 scsi</emphasis>.</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	  </sect3>
	  
	  <sect3
	    id="scsi-further-reading">
	    <title>Further reading</title>
	    
	    <para>If you intend to do some serious SCSI hacking, you might
	      want to have the official standard at hand:</para>
	    
	    <para>Approved American National Standards can be purchased from
	      ANSI at 11 West 42nd Street, 13th Floor, New York, NY 10036,
	      Sales Dept: (212) 642-4900.  You can also buy many ANSI
	      standards and most committee draft documents from Global
	      Engineering Documents, 15 Inverness Way East, Englewood, CO
	      80112-5704, Phone: (800) 854-7179, Outside USA and Canada: (303)
	      792-2181, FAX: (303) 792- 2192.</para>
	    
	    <para>Many X3T10 draft documents are available electronically on
	      the SCSI BBS (719-574-0424) and on the ncrinfo.ncr.com anonymous
	      ftp site.</para>
	    
	    <para>Latest X3T10 committee documents are:
	      <itemizedlist>
		
		<listitem>
		  <para>AT Attachment (ATA or IDE) [X3.221-1994]
		    (<emphasis>Approved</emphasis>)</para>
		</listitem>
		
		<listitem>
		  <para>ATA Extensions (ATA-2) [X3T10/948D Rev 2i]</para>
		</listitem>
		
		<listitem>
		  <para>Enhanced Small Device Interface (ESDI)
		    [X3.170-1990/X3.170a-1991]
		    (<emphasis>Approved</emphasis>)</para>
		</listitem>
		
		<listitem>
		  <para>Small Computer System Interface - 2 (SCSI-2)
		    [X3.131-1994] (<emphasis>Approved</emphasis>)</para>
		</listitem>
		
		<listitem>
		  <para>SCSI-2 Common Access Method Transport and SCSI
		    Interface Module (CAM)  [X3T10/792D Rev 11]</para>
		</listitem>
		
	      </itemizedlist> Other publications that might provide you with
	      additional information are:
	      <itemizedlist>
		
		<listitem>
		  <para>"SCSI: Understanding the Small Computer System
		    Interface", written by NCR  Corporation.  Available from:
		    Prentice Hall, Englewood Cliffs, NJ, 07632 Phone: (201)
		    767-5937 ISBN 0-13-796855-8
		  </para>
		</listitem>
		
		<listitem>
		  <para>"Basics of SCSI", a SCSI tutorial written by Ancot
		    Corporation Contact Ancot for availability information at:
		    Phone: (415) 322-5322  Fax: (415) 322-0455
		  </para>
		</listitem>
		
		<listitem>
		  <para>"SCSI Interconnection Guide Book", an AMP publication
		    (dated 4/93, Catalog  65237) that lists the various SCSI
		    connectors and suggests cabling schemes.   Available from
		    AMP at (800) 522-6752 or (717) 564-0100
		  </para>
		</listitem>
		
		<listitem>
		  <para>"Fast Track to SCSI", A Product Guide written by
		    Fujitsu. Available from: Prentice Hall, Englewood Cliffs,
		    NJ, 07632 Phone: (201) 767-5937 ISBN 0-13-307000-X
		  </para>
		</listitem>
		
		<listitem>
		  <para>"The SCSI Bench Reference", "The SCSI Encyclopedia",
		    and the "SCSI Tutor", ENDL Publications, 14426 Black
		    Walnut Court, Saratoga CA, 95070 Phone: (408) 867-6642
		  </para>
		</listitem>
		
		<listitem>
		  <para>"Zadian SCSI Navigator" (quick ref. book) and
		    "Discover the Power of SCSI"  (First book along with a
		    one-hour video and tutorial book), Zadian Software,  Suite
		    214, 1210 S. Bascom Ave., San Jose, CA 92128, (408)
		    293-0800</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>On Usenet the newsgroups <ulink
		URL="news:comp.periphs.scsi">comp.periphs.scsi</ulink> and
	      <ulink URL="news:comp.periphs">comp.periphs</ulink> are
	      noteworthy places to look for more info. You can also find the
	      SCSI-Faq there, which is posted periodically.</para>
	    
	    <para>Most major SCSI device and host adapter suppliers operate
	      ftp sites and/or BBS systems. They may be valuable sources of
	      information about the devices you own.
	    </para>
	    
	  </sect3>
	</sect2>
	
	<sect2
	  id="hw-storage-controllers">
	  <title>* Disk/tape controllers
	  </title>
	  
	  
	  <sect3>
	    <title>* SCSI</title>
	    
	  </sect3>
	  
	  <sect3>
	    <title>* IDE</title>
	    
	  </sect3>
	  
	  <sect3>
	    <title>* Floppy</title>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title> Hard drives</title>
	  
	  
	  <sect3>
	    <title> SCSI hard drives</title>
	    
	    <para><emphasis>Contributed by &a.asami;.<!-- <br> -->17 February
		1998.</emphasis></para>
	    
	    <para>As mentioned in the <xref linkend="scsi" remap="SCSI">
	      section, virtually all SCSI hard drives sold today are SCSI-2
	      compliant and thus will work fine as long as you connect them to
	      a supported SCSI host adapter.  Most problems people encounter
	      are either due to badly designed cabling (cable too long, star
	      topology, etc.), insufficient termination, or defective parts.
	      Please refer to the <xref linkend="scsi" remap="SCSI">
	      section first if your SCSI hard drive is not working. However,
	      there are a couple of things you may want to take into account
	      before you purchase SCSI hard drives for your system.</para>
	    
	    
	    <sect4>
	      <title> Rotational speed</title>
	      
	      <para>Rotational speeds of SCSI drives sold today range from
		around 4,500RPM to 10,000RPM. Most of them are either 5,400RPM
		or 7,200RPM.  Even though the 7,200RPM drives can generally
		transfer data faster, they run considerably hotter than their
		5,400RPM counterparts.  A large fraction of today's disk drive
		malfunctions are heat-related.  If you do not have very good
		cooling in your PC case, you may want to stick with 5,400RPM
		or slower drives.</para>
	      
	      <para>Note that newer drives, with higher areal recording
		densities, can deliver much more bits per rotation than older
		ones.  Today's top-of-line 5,400RPM drives can sustain a
		throughput comparable to 7,200RPM drives of one or two model
		generations ago.  The number to find on the spec sheet for
		bandwidth is "internal data (or transfer) rate".  It is
		usually in megabits/sec so divide it by 8 and you'll get the
		rough approximation of how much megabytes/sec you can get out
		of the drive.</para>
	      
	      <para>(If you are a speed maniac and want a 10,000RPM drive for
		your cute little peecee, be my guest; however, those drives
		become extremely hot.  Don't even think about it if you don't
		have a fan blowing air <emphasis>directly at</emphasis> the
		drive or a properly ventilated disk enclosure.)</para>
	      
	      <para>Obviously, the latest 10,000RPM drives and 7,200RPM drives
		can deliver more data than the latest 5,400RPM drives, so if
		absolute bandwidth is the necessity for your applications, you
		have little choice but to get the faster drives.  Also, if you
		need low latency, faster drives are better; not only do they
		usually have lower average seek times, but also the rotational
		delay is one place where slow-spinning drives can never beat a
		faster one.  (The average rotational latency is half the time
		it takes to rotate the drive once; thus, it's 3 milliseconds
		for 10,000RPM drives, 4.2ms for 7,200RPM drives and 5.6ms for
		5,400RPM drives.)  Latency is seek time plus rotational delay.
		Make sure you understand whether you need low latency or more
		accesses per second, though; in the latter case (e.g., news
		servers), it may not be optimal to purchase one big fast
		drive.  You can achieve similar or even better results by
		using the ccd (concatenated disk) driver to create a striped
		disk array out of multiple slower drives for comparable
		overall cost.</para>
	      
	      <para>Make sure you have adequate air flow around the drive,
		especially if you are going to use a fast-spinning drive.  You
		generally need at least 1/2" (1.25cm) of spacing above and
		below a drive.  Understand how the air flows through your PC
		case.  Most cases have the power supply suck the air out of
		the back.  See where the air flows in, and put the drive where
		it will have the largest volume of cool air flowing around it.
		You may need to seal some unwanted holes or add a new fan for
		effective cooling.</para>
	      
	      <para>Another consideration is noise.  Many 7,200 or faster
		drives generate a high-pitched whine which is quite unpleasant
		to most people.  That, plus the extra fans often required for
		cooling, may make 7,200 or faster drives unsuitable for some
		office and home environments.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title> Form factor</title>
	      
	      <para>Most SCSI drives sold today are of 3.5" form factor.  They
		come in two different heights; 1.6" ("half-height") or 1"
		("low-profile"). The half-height drive is the same height as a
		CD-ROM drive.  However, don't forget the spacing rule
		mentioned in the previous section.  If you have three standard
		3.5" drive bays, you will not be able to put three half-height
		drives in there (without frying them, that is).</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title> Interface</title>
	      
	      <para>The majority of SCSI hard drives sold today are Ultra or
		Ultra-wide SCSI.  The maximum bandwidth of Ultra SCSI is
		20MB/sec, and Ultra-wide SCSI is 40MB/sec. There is no
		difference in max cable length between Ultra and Ultra-wide;
		however, the more devices you have on the same bus, the sooner
		you will start having bus integrity problems.  Unless you have
		a well-designed disk enclosure, it is not easy to make more
		than 5 or 6 Ultra SCSI drives work on a single bus.</para>
	      
	      <para>On the other hand, if you need to connect many drives,
		going for Fast-wide SCSI may not be a bad idea.  That will
		have the same max bandwidth as Ultra (narrow) SCSI, while
		electronically it's much easier to get it "right".  My advice
		would be: if you want to connect many disks, get wide SCSI
		drives; they usually cost a little more but it may save you
		down the road.  (Besides, if you can't afford the cost
		difference, you shouldn't be building a disk array.)</para>
	      
	      <para>There are two variant of wide SCSI drives; 68-pin and
		80-pin SCA (Single Connector Attach).  The SCA drives don't
		have a separate 4-pin power connector, and also read the SCSI
		ID settings through the 80-pin connector.  If you are really
		serious about building a large storage system, get SCA drives
		and a good SCA enclosure (dual power supply with at least one
		extra fan).  They are more electronically sound than 68-pin
		counterparts because there is no "stub" of the SCSI bus inside
		the disk canister as in arrays built from 68-pin drives.  They
		are easier to install too (you just need to screw the drive in
		the canister, instead of trying to squeeze in your fingers in
		a tight place to hook up all the little cables (like the SCSI
		ID and disk activity LED lines).
	      </para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title>* IDE hard drives</title>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title> Tape drives</title>
	  
	  <para><emphasis>Contributed by &a.jmb;.<!-- <br> -->2 July
	      1996.</emphasis></para>
	  
	  
	  <sect3>
	    <title> General tape access commands</title>
	    
	    <para><command>mt(1)</command> provides generic access to the tape
	      drives.  Some of the more common commands are <emphasis
		remap=tt>rewind</emphasis>, <emphasis
		remap=tt>erase</emphasis>, and <emphasis
		remap=tt>status</emphasis>.  See the <command>mt(1)</command>
	      manual page for a detailed description.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title> Controller Interfaces</title>
	    
	    <para>There are several different interfaces that support tape
	      drives.  The interfaces are SCSI, IDE, Floppy and Parallel Port.
	      A wide variety of tape drives are available for these
	      interfaces.  Controllers are discussed in
	      <xref linkend="hw-storage-controllers" remap="Disk/tape
		controllers"></para>
	    
	  </sect3>
	  
	  <sect3>
	    <title> SCSI drives</title>
	    
	    <para>The <emphasis remap=tt>st(4)</emphasis> driver provides
	      support for 8mm (Exabyte), 4mm (DAT: Digital Audio Tape), QIC
	      (Quarter-Inch Cartridge), DLT (Digital Linear Tape), QIC
	      Minicartridge and 9-track (remember the big reels that you see
	      spinning in Hollywood computer rooms) tape drives. See the
	      <emphasis remap=tt>st(4)</emphasis> manual page for a detailed
	      description. </para>
	    
	    <para>The drives listed below are currently being used by members
	      of the FreeBSD community.  They are not the only drives that
	      will work with FreeBSD.  They just happen to be the ones that we
	      use.</para>
	    
	    
	    <sect4>
	      <title> 4mm (DAT: Digital Audio Tape)</title>
	      
	      <para><xref linkend="hw-storage-python" remap="Archive
		  Python"></para>
	      
	      <para><xref linkend="hw-storage-hp1533a" remap="HP
		  C1533A"></para>
	      
	      <para><xref linkend="hw-storage-hp1534a" remap="HP
		  C1534A"></para>
	      
	      <para><xref linkend="hw-storage-hp35450a" remap="HP
		  35450A"></para>
	      
	      <para><xref linkend="hw-storage-hp35470a" remap="HP
		  35470A"></para>
	      
	      <para><xref linkend="hw-storage-hp35480a" remap="HP
		  35480A"></para>
	      
	      <para><xref linkend="hw-storage-sdt5000"
		  remap="SDT-5000"></para>
	      
	      <para><xref linkend="hw-storage-wangtek6200" remap="Wangtek
		  6200"></para>
	      
	    </sect4>
	    
	    <sect4>
	      <title> 8mm (Exabyte)</title>
	      
	      <para><xref linkend="hw-storage-exb8200"
		  remap="EXB-8200"></para>
	      
	      <para><xref linkend="hw-storage-exb8500"
		  remap="EXB-8500"></para>
	      
	      <para><xref linkend="hw-storage-exb8505"
		  remap="EXB-8505"></para>
	      
	    </sect4>
	    
	    <sect4>
	      <title> QIC (Quarter-Inch Cartridge)</title>
	      
	      <para><xref linkend="hw-storage-anaconda" remap="Archive
		  Ananconda 2750"></para>
	      
	      <para><xref linkend="hw-storage-viper60" remap="Archive Viper
		  60"></para>
	      
	      <para><xref linkend="hw-storage-viper150" remap="Archive Viper
		  150"></para>
	      
	      <para><xref linkend="hw-storage-viper2525" remap="Archive Viper
		  2525"></para>
	      
	      <para><xref linkend="hw-storage-tandberg3600" remap="Tandberg
		  TDC 3600"></para>
	      
	      <para><xref linkend="hw-storage-tandberg3620" remap="Tandberg
		  TDC 3620"></para>
	      
	      <para><xref linkend="hw-storage-tandberg4222" remap="Tandberg
		  TDC 4222"></para>
	      
	      <para><xref linkend="hw-storage-wangtek5525es" remap="Wangtek
		  5525ES"></para>
	      
	    </sect4>
	    
	    <sect4>
	      <title> DLT (Digital Linear Tape)</title>
	      
	      <para><xref linkend="hw-storage-dectz87" remap="Digital
		  TZ87"></para>
	      
	    </sect4>
	    
	    <sect4>
	      <title> Mini-Cartridge</title>
	      
	      <para><xref linkend="hw-storage-ctms3200" remap="Conner CTMS
		  3200"></para>
	      
	      <para><xref linkend="hw-storage-exb2501" remap="Exabyte
		  2501"></para>
	      
	    </sect4>
	    
	    <sect4>
	      <title> Autoloaders/Changers</title>
	      
	      <para><xref linkend="hw-storage-hp1553a" remap="Hewlett-Packard
		  HP C1553A Autoloading DDS2"></para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title>* IDE drives</title>
	    
	  </sect3>
	  
	  <sect3>
	    <title> Floppy drives</title>
	    
	    <para><xref linkend="hw-storage-conner420r" remap="Conner
		420R"></para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>* Parallel port drives</title>
	    
	  </sect3>
	  
	  <sect3>
	    <title> Detailed Information </title>
	    
	    
	    <sect4
	      id="hw-storage-anaconda">
	      <title>
		Archive Anaconda 2750</title>
	      
	      <para>The boot message identifier for this drive is "ARCHIVE
		ANCDA 2750 28077 -003 type 1 removable SCSI 2"</para>
	      
	      <para>This is a QIC tape drive.</para>
	      
	      <para>Native capacity is 1.35GB when using QIC-1350 tapes. This
		drive will read and write QIC-150 (DC6150), QIC-250 (DC6250),
		and QIC-525 (DC6525) tapes as well.</para>
	      
	      <para>Data transfer rate is 350kB/s using
		<command>dump(8)</command>. Rates of 530kB/s have been
		reported when using <xref
		  linkend="hw-storage-amanda" remap="Amanda"></para>
	      
	      <para>Production of this drive has been discontinued.</para>
	      
	      <para>The SCSI bus connector on this tape drive is reversed from
		that on most other SCSI devices.  Make sure that you have
		enough SCSI cable to twist the cable one-half turn before and
		after the Archive Anaconda tape drive, or turn your other SCSI
		devices upside-down.</para>
	      
	      <para>Two kernel code changes are required to use this drive.
		This drive will not work as delivered.</para>
	      
	      <para>If you have a SCSI-2 controller, short jumper 6.
		Otherwise, the drive behaves are a SCSI-1 device.  When
		operating as a SCSI-1 device, this drive, "locks" the SCSI bus
		during some tape operations, including: fsf, rewind, and
		rewoffl.</para>
	      
	      <para>If you are using the NCR SCSI controllers, patch the file
		/usr/src/sys/pci/ncr.c (as shown below).  Build and install a
		new kernel.</para>
	      
	      <para>
		<informalexample>
		  <screen>*** 4831,4835 **** }; !               if
		    (np-&gt;latetime&gt;4) { /* **      Although we tried to
		    wake it up, --- 4831,4836 ---- }; !               if
		    (np-&gt;latetime&gt;1200) { /* **      Although we tried
		    to wake it up,
		  </screen>
		</informalexample>
	      </para>
	      
	      <para>Reported by: &a.jmb;</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-python">
	      <title>
		Archive Python</title>
	      
	      <para>The boot message identifier for this drive is "ARCHIVE
		Python 28454-XXX4ASB" "type 1 removable SCSI 2" "density code
		0x8c, 512-byte blocks"</para>
	      
	      <para>This is a DDS-1 tape drive.</para>
	      
	      <para>Native capacity is 2.5GB on 90m tapes.</para>
	      
	      <para>Data transfer rate is XXX.</para>
	      
	      <para>This drive was repackaged by Sun Microsystems as model
		411.</para>
	      
	      <para>Reported by: Bob Bishop rb@gid.co.uk</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-viper60">
	      <title>
		Archive Viper 60</title>
	      
	      <para>The boot message identifier for this drive is "ARCHIVE
		VIPER 60 21116 -007" "type 1 removable SCSI 1"</para>
	      
	      <para>This is a QIC tape drive.</para>
	      
	      <para>Native capacity is 60MB.</para>
	      
	      <para>Data transfer rate is XXX.</para>
	      
	      <para>Production of this drive has been discontinued.</para>
	      
	      <para>Reported by: Philippe Regnauld regnauld@hsc.fr</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-viper150">
	      <title>
		Archive Viper 150</title>
	      
	      <para>The boot message identifier for this drive is "ARCHIVE
		VIPER 150 21531 -004" "Archive Viper 150 is a known rogue"
		"type 1 removable SCSI 1".  A multitude of firmware revisions
		exist for this drive. Your drive may report different numbers
		(e.g "21247 -005".</para>
	      
	      <para>This is a QIC tape drive.</para>
	      
	      <para>Native capacity is 150/250MB.  Both 150MB (DC6150) and
		250MB (DC6250) tapes have the recording format.  The 250MB
		tapes are approximately 67% longer than the 150MB tapes.  This
		drive can read 120MB tapes as well.  It can not write 120MB
		tapes.</para>
	      
	      <para>Data transfer rate is 100kB/s</para>
	      
	      <para>This drive reads and writes DC6150 (150MB) and DC6250
		(250MB) tapes.</para>
	      
	      <para>This drives quirks are known and pre-compiled into the
		scsi tape device driver (<emphasis
		  remap=tt>st(4)</emphasis>).</para>
	      
	      <para>Under FreeBSD 2.2-current, use <emphasis remap=tt>mt
		  blocksize 512</emphasis> to set the blocksize.  (The
		particular drive had firmware revision 21247 -005.  Other
		firmware revisions may behave differently) Previous versions
		of FreeBSD did not have this problem.</para>
	      
	      <para>Production of this drive has been discontinued.</para>
	      
	      <para>Reported by: Pedro A M Vazquez
		vazquez@IQM.Unicamp.BR</para>
	      
	      <para>             Mike Smith
		msmith@atrad.adelaide.edu.au</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-viper2525">
	      <title>
		Archive Viper 2525</title>
	      
	      <para>The boot message identifier for this drive is "ARCHIVE
		VIPER 2525 25462 -011" "type 1 removable SCSI 1"</para>
	      
	      <para>This is a QIC tape drive.</para>
	      
	      <para>Native capacity is 525MB.</para>
	      
	      <para>Data transfer rate is 180kB/s at 90 inches/sec.</para>
	      
	      <para>The drive reads QIC-525, QIC-150, QIC-120 and QIC-24
		tapes. Writes QIC-525, QIC-150, and QIC-120.</para>
	      
	      <para>Firmware revisions prior to "25462 -011" are bug ridden
		and will not function properly.</para>
	      
	      <para>Production of this drive has been discontinued.</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-conner420r">
	      <title>
		Conner 420R</title>
	      
	      <para>The boot message identifier for this drive is "Conner
		tape".</para>
	      
	      <para>This is a floppy controller, minicartridge tape
		drive.</para>
	      
	      <para>Native capacity is XXXX</para>
	      
	      <para>Data transfer rate is XXX</para>
	      
	      <para>The drive uses QIC-80 tape cartridges.</para>
	      
	      <para>Reported by: Mark Hannon mark@seeware.DIALix.oz.au</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-ctms3200">
	      <title>
		Conner CTMS 3200</title>
	      
	      <para>The boot message identifier for this drive is "CONNER CTMS
		3200 7.00" "type 1 removable SCSI 2".</para>
	      
	      <para>This is a minicartridge tape drive.</para>
	      
	      <para>Native capacity is XXXX</para>
	      
	      <para>Data transfer rate is XXX</para>
	      
	      <para>The drive uses QIC-3080 tape cartridges.</para>
	      
	      <para>Reported by: Thomas S. Traylor tst@titan.cs.mci.com</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-dectz87">
	      <title>
		<ulink
		  URL="http://www.digital.com/info/Customer-Update/931206004.txt.html">DEC TZ87</ulink></title>
	      
	      <para>The boot message identifier for this drive is "DEC TZ87
		(C) DEC 9206" "type 1 removable SCSI 2" "density code
		0x19"</para>
	      
	      <para>This is a DLT tape drive.</para>
	      
	      <para>Native capacity is 10GB.</para>
	      
	      <para>This drive supports hardware data compression.</para>
	      
	      <para>Data transfer rate is 1.2MB/s.</para>
	      
	      <para>This drive is identical to the Quantum DLT2000.  The drive
		firmware can be set to emulate several well-known drives,
		including an Exabyte 8mm drive.</para>
	      
	      <para>Reported by: &a.wilko;</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-exb2501">
	      <title>
		<ulink
		  URL="http://www.Exabyte.COM:80/Products/Minicartridge/2501/Rfeatures.html">Exabyte EXB-2501</ulink></title>
	      
	      <para>The boot message identifier for this drive is "EXABYTE
		EXB-2501"</para>
	      
	      <para>This is a mini-cartridge tape drive.</para>
	      
	      <para>Native capacity is 1GB when using MC3000XL
		minicartridges.</para>
	      
	      <para>Data transfer rate is XXX</para>
	      
	      <para>This drive can read and write DC2300 (550MB), DC2750
		(750MB), MC3000 (750MB), and MC3000XL (1GB)
		minicartridges.</para>
	      
	      <para>WARNING: This drive does not meet the SCSI-2
		specifications.  The drive locks up completely in response to
		a SCSI MODE_SELECT command unless there is a formatted tape in
		the drive.  Before using this drive, set the tape blocksize
		with</para>
	      
	      <para>
		<literallayout>mt -f /dev/st0ctl.0 blocksize
		  1024</literallayout>
	      </para>
	      
	      <para>Before using a minicartridge for the first time, the
		minicartridge must be formated. FreeBSD 2.1.0-RELEASE and
		earlier:</para>
	      
	      <para>
		<literallayout>/sbin/scsi -f /dev/rst0.ctl -s 600 -c "4 0 0 0
		  0 0"</literallayout>
	      </para>
	      
	      <para>(Alternatively, fetch a copy of the <emphasis
		  remap=tt>scsiformat</emphasis> shell script from FreeBSD
		2.1.5/2.2.) FreeBSD 2.1.5 and later:</para>
	      
	      <para>
		<literallayout>/sbin/scsiformat -q -w
		  /dev/rst0.ctl</literallayout>
	      </para>
	      
	      <para>Right now, this drive cannot really be recommended for
		FreeBSD.</para>
	      
	      <para>Reported by: Bob Beaulieu ez@eztravel.com</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-exb8200">
	      <title> Exabyte EXB-8200</title>
	      
	      <para>The boot message identifier for this drive is "EXABYTE
		EXB-8200 252X" "type 1 removable SCSI 1"</para>
	      
	      <para>This is an 8mm tape drive.</para>
	      
	      <para>Native capacity is 2.3GB.  </para>
	      
	      <para>Data transfer rate is 270kB/s.</para>
	      
	      <para>This drive is fairly slow in responding to the SCSI bus
		during boot.  A custom kernel may be required (set SCSI_DELAY
		to 10 seconds). </para>
	      
	      <para>There are a large number of firmware configurations for
		this drive, some have been customized to a particular vendor's
		hardware.  The firmware can be changed via EPROM
		replacement.</para>
	      
	      <para>Production of this drive has been discontinued.</para>
	      
	      <para>Reported by: Mike Smith
		msmith@atrad.adelaide.edu.au</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-exb8500">
	      <title>
		Exabyte EXB-8500</title>
	      
	      <para>The boot message identifier for this drive is "EXABYTE
		EXB-8500-85Qanx0 0415" "type 1 removable SCSI 2"</para>
	      
	      <para>This is an 8mm tape drive.</para>
	      
	      <para>Native capacity is 5GB.  </para>
	      
	      <para>Data transfer rate is 300kB/s.</para>
	      
	      <para>Reported by: Greg Lehey grog@lemis.de</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-exb8505">
	      <title>
		<ulink
		  URL="http://www.Exabyte.COM:80/Products/8mm/8505XL/Rfeatures.html">Exabyte EXB-8505</ulink></title>
	      
	      <para>The boot message identifier for this drive is "EXABYTE
		EXB-85058SQANXR1 05B0" "type 1 removable SCSI 2"</para>
	      
	      <para>This is an 8mm tape drive which supports compression, and
		is upward compatible with the EXB-5200 and EXB-8500.</para>
	      
	      <para>Native capacity is 5GB.  </para>
	      
	      <para>The drive supports hardware data compression.</para>
	      
	      <para>Data transfer rate is 300kB/s.</para>
	      
	      <para>Reported by: Glen Foster gfoster@gfoster.com</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-hp1533a">
	      <title>
		Hewlett-Packard HP C1533A</title>
	      
	      <para>The boot message identifier for this drive is "HP C1533A
		9503" "type 1 removable SCSI 2".</para>
	      
	      <para>This is a DDS-2 tape drive.  DDS-2 means hardware data
		compression and narrower tracks for increased data
		capacity.</para>
	      
	      <para>Native capacity is 4GB when using 120m tapes.  This drive
		supports hardware data compression.</para>
	      
	      <para>Data transfer rate is 510kB/s.</para>
	      
	      <para>This drive is used in Hewlett-Packard's SureStore 6000eU
		and 6000i tape drives and C1533A DDS-2 DAT drive.</para>
	      
	      <para>The drive has a block of 8 dip switches.  The proper
		settings for FreeBSD are: 1 ON; 2 ON; 3 OFF; 4 ON; 5 ON; 6 ON;
		7 ON; 8 ON.
		<informalexample>
		  <screen>switch	1	2	Result ON	ON
		    Compression enabled at power-on, with host control ON
		    OFF	Compression enabled at power-on, no host control OFF
		    ON	Compression disabled at power-on; the host is allowed
		    to control compression OFF	OFF	Compression disabled
		    at power-on, no host control</screen>
		</informalexample>
	      </para>
	      
	      <para>Switch 3 controls MRS (Media Recognition System).  MRS
		tapes have stripes on the transparent leader.  These identify
		the tape as DDS (Digital Data Storage) grade media.  Tapes
		that do not have the stripes will be treated as
		write-protected. Switch 3 OFF enables MRS.  Switch 3 ON
		disables MRS.</para>
	      
	      <para>See <ulink URL="http://www.hp.com/tape/c_intro.html">HP
		  SureStore Tape Products</ulink> and <ulink
		  URL="http://www.impediment.com/hp/hp_technical.html">Hewlett-Packard Disk and Tape Technical Information</ulink> for more information on configuring this drive.</para>
	      
	      <para><emphasis>Warning:</emphasis> Quality control on these
		drives varies greatly.  One FreeBSD core-team member has
		returned 2 of these drives.  Neither lasted more than 5
		months.</para>
	      
	      <para>Reported by: &a.se;</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-hp1534a">
	      <title>
		Hewlett-Packard HP 1534A</title>
	      
	      <para>The boot message identifier for this drive is "HP HP35470A
		T503" type 1 removable SCSI 2" "Sequential-Access density code
		0x13, variable blocks".</para>
	      
	      <para>This is a DDS-1 tape drive.  DDS-1 is the original DAT
		tape format.</para>
	      
	      <para>Native capacity is 2GB when using 90m tapes.</para>
	      
	      <para>Data transfer rate is 183kB/s.</para>
	      
	      <para>The same mechanism is used in Hewlett-Packard's SureStore
		<ulink
		  URL="http://www.dmo.hp.com/tape/sst2000.htm">2000i</ulink>
		tape drive, C35470A DDS format DAT drive, C1534A DDS format
		DAT drive and HP C1536A DDS format DAT drive.</para>
	      
	      <para>The HP C1534A DDS format DAT drive has two indicator
		lights, one green and one amber.  The green one indicates tape
		action: slow flash during load, steady when loaded, fast flash
		during read/write operations.  The amber one indicates
		warnings: slow flash when cleaning is required or tape is
		nearing the end of its useful life, steady indicates an hard
		fault.  (factory service required?)</para>
	      
	      <para>Reported by Gary Crutcher gcrutchr@nightflight.com</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-hp1553a">
	      <title>
		Hewlett-Packard HP C1553A Autoloading DDS2</title>
	      
	      <para>The boot message identifier for this drive is "".</para>
	      
	      <para>This is a DDS-2 tape drive with a tape changer.  DDS-2
		means hardware data compression and narrower tracks for
		increased data capacity.</para>
	      
	      <para>Native capacity is 24GB when using 120m tapes.  This drive
		supports hardware data compression.</para>
	      
	      <para>Data transfer rate is 510kB/s (native).</para>
	      
	      <para>This drive is used in Hewlett-Packard's SureStore <ulink
		  URL="http://www.dmo.hp.com/tape/sst12000.htm">12000e</ulink>
		tape drive.</para>
	      
	      <para>The drive has two selectors on the rear panel.  The
		selector closer to the fan is SCSI id.  The other selector
		should be set to 7.</para>
	      
	      <para>There are four internal switches.  These should be set: 1
		ON; 2 ON; 3 ON; 4 OFF.</para>
	      
	      <para>At present the kernel drivers do not automatically change
		tapes at the end of a volume.  This shell script can be used
		to change tapes:</para>
	      
	      <para>
		<informalexample>
		  <screen>#!/bin/sh PATH="/sbin:/usr/sbin:/bin:/usr/bin";
		    export PATH usage() { echo "Usage: dds_changer [123456ne]
		    raw-device-name echo "1..6 = Select cartridge" echo "next
		    cartridge" echo "eject magazine" exit 2 } if [ $# -ne 2 ]
		    ; then usage fi cdb3=0 cdb4=0 cdb5=0 case $1 in [123456])
		    cdb3=$1 cdb4=1 ;; n) ;; e) cdb5=0x80 ;; ?) usage ;; esac
		    scsi -f $2 -s 100 -c "1b 0 0 $cdb3 $cdb4 $cdb5"</screen>
		</informalexample>
	      </para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-hp35450a">
	      <title>
		Hewlett-Packard HP 35450A</title>
	      
	      <para>The boot message identifier for this drive is "HP HP35450A
		-A C620" "type 1 removable SCSI 2" "Sequential-Access density
		code 0x13"</para>
	      
	      <para>This is a DDS-1 tape drive.  DDS-1 is the original DAT
		tape format.</para>
	      
	      <para>Native capacity is 1.2GB.</para>
	      
	      <para>Data transfer rate is 160kB/s.</para>
	      
	      <para>Reported by: mark thompson
		mark.a.thompson@pobox.com</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-hp35470a">
	      <title>
		Hewlett-Packard HP 35470A</title>
	      
	      <para>The boot message identifier for this drive is "HP HP35470A
		9 09" type 1 removable SCSI 2"</para>
	      
	      <para>This is a DDS-1 tape drive.  DDS-1 is the original DAT
		tape format.</para>
	      
	      <para>Native capacity is 2GB when using 90m tapes.</para>
	      
	      <para>Data transfer rate is 183kB/s.</para>
	      
	      <para>The same mechanism is used in Hewlett-Packard's SureStore
		<ulink
		  URL="http://www.dmo.hp.com/tape/sst2000.htm">2000i</ulink>
		tape drive, C35470A DDS format DAT drive, C1534A DDS format
		DAT drive, and HP C1536A DDS format DAT drive.</para>
	      
	      <para><emphasis>Warning:</emphasis> Quality control on these
		drives varies greatly.  One FreeBSD core-team member has
		returned 5 of these drives.  None lasted more than 9
		months.</para>
	      
	      <para>Reported by: David Dawes dawes@rf900.physics.usyd.edu.au
		(9 09)</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-hp35480a">
	      <title>
		Hewlett-Packard HP 35480A</title>
	      
	      <para>The boot message identifier for this drive is "HP HP35480A
		1009" "type 1 removable SCSI 2" "Sequential-Access density
		code 0x13".</para>
	      
	      <para>This is a DDS-DC tape drive.  DDS-DC is DDS-1 with
		hardware data compression.  DDS-1 is the original DAT tape
		format.</para>
	      
	      <para>Native capacity is 2GB when using 90m tapes.  It cannot
		handle 120m tapes.  This drive supports hardware data
		compression.  Please refer to the section on <xref
		  linkend="hw-storage-hp1533a" remap="HP
		  C1533A"> for the proper switch settings.</para>
	      
	      <para>Data transfer rate is 183kB/s.</para>
	      
	      <para>This drive is used in Hewlett-Packard's SureStore <ulink
		  URL="http://www.dmo.hp.com/tape/sst5000.htm">5000eU</ulink>
		and <ulink
		  URL="http://www.dmo.hp.com/tape/sst5000.htm">5000i</ulink>
		tape drives and C35480A DDS format DAT drive..</para>
	      
	      <para>This drive will occasionally hang during a tape eject
		operation (<emphasis remap=tt>mt offline</emphasis>).
		Pressing the front panel button will eject the tape and bring
		the tape drive back to life.</para>
	      
	      <para>WARNING: HP 35480-03110 only.  On at least two occasions
		this tape drive when used with FreeBSD 2.1.0, an IBM Server
		320 and an 2940W SCSI controller resulted in all SCSI disk
		partitions being lost.  The problem has not be analyzed or
		resolved at this time.</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-sdt5000">
	      <title>
		<ulink
		  URL="http://www.sel.sony.com/SEL/ccpg/storage/tape/t5000.html">Sony SDT-5000</ulink></title>
	      
	      <para>There are at least two significantly different models: one
		is a DDS-1 and the other DDS-2.  The DDS-1 version is
		"SDT-5000 3.02".  The DDS-2 version is "SONY SDT-5000 327M".
		The DDS-2 version has a 1MB cache.  This cache is able to keep
		the tape streaming in almost any circumstances. </para>
	      
	      <para>The boot message identifier for this drive is "SONY
		SDT-5000 3.02" "type 1 removable SCSI 2" "Sequential-Access
		density code 0x13"</para>
	      
	      <para>Native capacity is 4GB when using 120m tapes.  This drive
		supports hardware data compression.</para>
	      
	      <para>Data transfer rate is depends upon the model or the drive.
		The rate is 630kB/s for the "SONY SDT-5000 327M" while
		compressing the data.  For the "SONY SDT-5000 3.02", the data
		transfer rate is 225kB/s.</para>
	      
	      <para>In order to get this drive to stream, set the blocksize to
		512 bytes (<emphasis remap=tt>mt blocksize 512</emphasis>)
		reported by Kenneth Merry
		ken@ulc199.residence.gatech.edu"</para>
	      
	      <para>"SONY SDT-5000 327M" information reported by Charles
		Henrich henrich@msu.edu</para>
	      
	      <para>Reported by: &a.jmz;</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-tandberg3600">
	      <title>
		Tandberg TDC 3600</title>
	      
	      <para>The boot message identifier for this drive is "TANDBERG
		TDC 3600 =08:" "type 1 removable SCSI 2"</para>
	      
	      <para>This is a QIC tape drive.</para>
	      
	      <para>Native capacity is 150/250MB.</para>
	      
	      <para>This drive has quirks which are known and work around code
		is present in the scsi tape device driver (<emphasis
		  remap=tt>st(4)</emphasis>). Upgrading the firmware to XXX
		version will fix the quirks and provide SCSI 2
		capabilities.</para>
	      
	      <para>Data transfer rate is 80kB/s.</para>
	      
	      <para>IBM and Emerald units will not work.  Replacing the
		firmware EPROM of these units will solve the problem.</para>
	      
	      <para>Reported by: Michael Smith
		msmith@atrad.adelaide.edu.au</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-tandberg3620">
	      <title>
		Tandberg TDC 3620</title>
	      
	      <para>This is very similar to the <xref
		  linkend="hw-storage-tandberg3600" remap="Tandberg TDC 3600">
		drive.</para>
	      
	      <para>Reported by: &a.joerg;</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-tandberg4222">
	      <title>
		Tandberg TDC 4222</title>
	      
	      <para>The boot message identifier for this drive is "TANDBERG
		TDC 4222 =07" "type 1 removable SCSI 2"</para>
	      
	      <para>This is a QIC tape drive.</para>
	      
	      <para>Native capacity is 2.5GB.  The drive will read all
		cartridges from the 60 MB (DC600A) upwards, and write 150 MB
		(DC6150) upwards.  Hardware compression is optionally
		supported for the 2.5 GB cartridges.</para>
	      
	      <para>This drives quirks are known and pre-compiled into the
		scsi tape device driver (<emphasis remap=tt>st(4)</emphasis>)
		beginning with FreeBSD 2.2-current.  For previous versions of
		FreeBSD, use <emphasis remap=tt>mt</emphasis> to read one
		block from the tape, rewind the tape, and then execute the
		backup program (<emphasis remap=tt>mt fsr 1; mt rewind; dump
		  ...</emphasis>)</para>
	      
	      <para>Data transfer rate is 600kB/s (vendor claim with
		compression), 350 KB/s can even be reached in start/stop mode.
		The rate decreases for smaller cartridges.</para>
	      
	      <para>Reported by: &a.joerg;</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-wangtek5525es">
	      <title>
		Wangtek 5525ES</title>
	      
	      <para>The boot message identifier for this drive is "WANGTEK
		5525ES SCSI REV7 3R1" "type 1 removable SCSI 1" "density code
		0x11, 1024-byte blocks"</para>
	      
	      <para>This is a QIC tape drive.</para>
	      
	      <para>Native capacity is 525MB.</para>
	      
	      <para>Data transfer rate is 180kB/s.</para>
	      
	      <para>The drive reads 60, 120, 150, and 525MB tapes.  The drive
		will not write 60MB (DC600 cartridge) tapes.  In order to
		overwrite 120 and 150 tapes reliably, first erase (<emphasis
		  remap=tt>mt erase</emphasis>) the tape.  120 and 150 tapes
		used a wider track (fewer tracks per tape) than 525MB tapes.
		The "extra" width of the previous tracks is not overwritten,
		as a result the new data lies in a band surrounded on both
		sides by the previous data unless the tape have been
		erased.</para>
	      
	      <para>This drives quirks are known and pre-compiled into the
		scsi tape device driver (<emphasis
		  remap=tt>st(4)</emphasis>).</para>
	      
	      <para>Other firmware revisions that are known to work are:
		M75D</para>
	      
	      <para>Reported by: Marc van Kempen marc@bowtie.nl  "REV73R1"
		Andrew Gordon Andrew.Gordon@net-tel.co.uk "M75D"</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-wangtek6200">
	      <title>
		Wangtek 6200</title>
	      
	      <para>The boot message identifier for this drive is "WANGTEK
		6200-HS 4B18" "type 1 removable SCSI 2" "Sequential-Access
		density code 0x13"</para>
	      
	      <para>This is a DDS-1 tape drive.</para>
	      
	      <para>Native capacity is 2GB using 90m tapes.</para>
	      
	      <para>Data transfer rate is 150kB/s.</para>
	      
	      <para>Reported by: Tony Kimball alk@Think.COM</para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title>* Problem drives</title>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title> CD-ROM drives</title>
	  
	  <para><emphasis>Contributed by &a.obrien;.<!-- <br> -->23 November
	      1997.</emphasis></para>
	  
	  <para>As mentioned in
	    <xref linkend="hw-jordans-picks-cdrom" remap="Jordan's Picks">
	    Generally speaking those in <emphasis>The FreeBSD
	      Project</emphasis> prefer SCSI CDROM drives over IDE CDROM
	    drives.  However not all SCSI CDROM drives are equal.  Some feel
	    the quality of some SCSI CDROM drives have been deteriorating to
	    that of IDE CDROM drives.  Toshiba used to be the favored
	    stand-by, but many on the SCSI mailing list have found displeasure
	    with the 12x speed XM-5701TA as its volume (when playing audio
	    CDROMs) is not controllable by the various audio player
	    software.</para>
	  
	  <para>Another area where SCSI CDROM manufacturers are cutting
	    corners is adhearance to the 
	    <xref linkend="scsi-further-reading" remap="SCSI specification">.
	    Many SCSI CDROMs will respond to
	    <xref linkend="scsi-rogue-devices" remap="multiple LUNs"> for its
	    target address. Known violators include the 6x Teac CD-56S
	    1.0D.</para>
	  
	</sect2>
	
	<sect2>
	  <title>* Other</title>
	  
	</sect2>
	
	<sect2>
	  <title>* Adding and reconfiguring disks</title>
	  
	</sect2>
	
	<sect2
	  id="hw-storage-tapebackups">
	  <title> Tapes and backups</title>
	  
	  
	  <sect3>
	    <title>* What about backups to floppies?</title>
	    
	  </sect3>
	  
	  <sect3>
	    <title> Tape Media</title>
	    
	    
	    <sect4
	      id="hw-storage-tapebackups-4mm">
	      <title>
		4mm (DDS: Digital Data Storage)</title>
	      
	      <para>4mm tapes are replacing QIC as the workstation backup
		media of choice.  This trend accelerated greatly when Conner
		purchased Archive, a leading manufacturer of QIC drives, and
		then stopped production of QIC drives.  4mm drives are small
		and quiet but do not have the reputation for reliability that
		is enjoyed by 8mm drives. The cartridges are less expensive
		and smaller (3 x 2 x 0.5 inches, 76 x 51 x 12 mm) than 8mm
		cartridges.  4mm, like 8mm, has comparatively short head life
		for the same reason, both use helical scan.</para>
	      
	      <para>Data thruput on these drives starts ~150kB/s, peaking at
		~500kB/s.  Data capacity starts at 1.3 GB and ends at 2.0 GB.
		Hardware compression, available with most of these drives,
		approximately doubles the capacity.  Multi-drive tape library
		units can have 6 drives in a single cabinet with automatic
		tape changing.  Library capacities reach 240 GB.</para>
	      
	      <para>4mm drives, like 8mm drives, use helical-scan.  All the
		benefits and drawbacks of helical-scan apply to both 4mm and
		8mm drives.</para>
	      
	      <para>Tapes should be retired from use after 2,000 passes or 100
		full backups.</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-tapebackups-8mm">
	      <title>
		8mm (Exabyte)</title>
	      
	      <para>8mm tapes are the most common SCSI tape drives; they are
		the best choice of exchanging tapes.  Nearly every site has an
		exabyte 2 GB 8mm tape drive.  8mm drives are reliable,
		convenient and quiet.  Cartridges are inexpensive and small
		(4.8 x 3.3 x 0.6 inches; 122 x 84 x 15 mm).  One downside of
		8mm tape is relatively short head and tape life due to the
		high rate of relative motion of the tape across the
		heads.</para>
	      
	      <para>Data thruput ranges from ~250kB/s to ~500kB/s.  Data sizes
		start at 300 MB and go up to 7 GB.  Hardware compression,
		available with most of these drives, approximately doubles the
		capacity.  These drives are available as single units or
		multi-drive tape libraries with 6 drives and 120 tapes in a
		single cabinet.  Tapes are changed automatically by the unit.
		Library capacities reach 840+ GB.</para>
	      
	      <para>Data is recorded onto the tape using helical-scan, the
		heads are positioned at an angle to the media (approximately 6
		degrees).  The tape wraps around 270 degrees of the spool that
		holds the heads.  The spool spins while the tape slides over
		the spool.  The result is a high density of data and closely
		packed tracks that angle across the tape from one edge to the
		other.</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-tapebackups-qic">
	      <title>
		QIC</title>
	      
	      <para>QIC-150 tapes and drives are, perhaps, the most common
		tape drive and media around.  QIC tape drives are the least
		expensive "serious" backup drives.  The downside is the cost
		of media.  QIC tapes are expensive compared to 8mm or 4mm
		tapes, up to 5 times the price per GB data storage.  But, if
		your needs can be satisfied with a half-dozen tapes, QIC may
		be the correct choice.  QIC is the <emphasis>most</emphasis>
		common tape drive.  Every site has a QIC drive of some density
		or another.  Therein lies the rub, QIC has a large number of
		densities on physically similar (sometimes identical) tapes.
		QIC drives are not quiet.  These drives audibly seek before
		they begin to record data and are clearly audible whenever
		reading, writing or seeking.  QIC tapes measure (6 x 4 x 0.7
		inches; 15.2 x 10.2 x 1.7 mm). <xref
		  linkend="hw-storage-tapebackups-mini"
		  remap="Mini-cartridges">, which also use 1/4" wide tape are
		discussed separately.  Tape libraries and changers are not
		available.</para>
	      
	      <para>Data thruput ranges from ~150kB/s to ~500kB/s.  Data
		capacity ranges from 40 MB to 15 GB.  Hardware compression is
		available on many of the newer QIC drives.  QIC drives are
		less frequently installed; they are being supplanted by DAT
		drives.</para>
	      
	      <para>Data is recorded onto the tape in tracks.  The tracks run
		along the long axis of the tape media from one end to the
		other.  The number of tracks, and therefore the width of a
		track, varies with the tape's capacity.  Most if not all newer
		drives provide backward-compatibility at least for reading
		(but often also for writing).  QIC has a good reputation
		regarding the safety of the data (the mechanics are simpler
		and more robust than for helical scan drives).</para>
	      
	      <para>Tapes should be retired from use after 5,000
		backups.</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-tapebackups-mini">
	      <title>
		* Mini-Cartridge</title>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-tapebackups-dlt">
	      <title>
		DLT</title>
	      
	      <para>DLT has the fastest data transfer rate of all the drive
		types listed here.  The 1/2" (12.5mm) tape is contained in a
		single spool cartridge (4 x 4 x 1 inches; 100 x 100 x 25 mm).
		The cartridge has a swinging gate along one entire side of the
		cartridge.  The drive mechanism opens this gate to extract the
		tape leader.  The tape leader has an oval hole in it which the
		drive uses to "hook" the tape.  The take-up spool is located
		inside the tape drive.  All the other tape cartridges listed
		here (9 track tapes are the only exception) have both the
		supply and take-up spools located inside the tape cartridge
		itself.</para>
	      
	      <para>Data thruput is approximately 1.5MB/s, three times the
		thruput of 4mm, 8mm, or QIC tape drives.  Data capacities
		range from 10GB to 20GB for a single drive.  Drives are
		available in both multi-tape changers and multi-tape,
		multi-drive tape libraries containing from 5 to 900 tapes over
		1 to 20 drives, providing from 50GB to 9TB of storage.</para>
	      
	      <para>Data is recorded onto the tape in tracks parallel to the
		direction of travel (just like QIC tapes). Two tracks are
		written at once.  Read/write head lifetimes are relatively
		long; once the tape stops moving, there is no relative motion
		between the heads and the tape.</para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title> Using a new tape for the first time</title>
	    
	    <para>The first time that you try to read or write a new,
	      completely blank tape, the operation will fail.  The console
	      messages should be similar to:
	      <informalexample>
		<screen>        st0(ncr1:4:0): NOT READY asc:4,1
		  st0(ncr1:4:0):  Logical unit is in process of becoming
		  ready</screen>
	      </informalexample>
	    </para>
	    
	    <para>The tape does not contain an Identifier Block (block number
	      0). All QIC tape drives since the adoption of QIC-525 standard
	      write an Identifier Block to the tape.  There are two solutions:
	    </para>
	    
	    <para><emphasis remap=tt>mt fsf 1</emphasis> causes the tape drive
	      to write an Identifier Block to the tape.</para>
	    
	    <para>Use the front panel button to eject the tape.</para>
	    
	    <para>Re-insert the tape and <command>dump(8)</command> data to
	      the tape.</para>
	    
	    <para><command>dump(8)</command> will report <emphasis
		remap=tt>DUMP: End of tape detected</emphasis> and the console
	      will show: <emphasis remap=tt>HARDWARE FAILURE info:280
		asc:80,96</emphasis></para>
	    
	    <para>rewind the tape using: <emphasis remap=tt>mt
		rewind</emphasis></para>
	    
	    <para>Subsequent tape operations are successful.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title> Backup Programs</title>
	    
	    <para>The three major programs are <command>dump(8)</command>,
	      <command>tar(1)</command>, and
	      <command>cpio(1)</command>.</para>
	    
	    
	    <sect4>
	      <title> Dump and Restore</title>
	      
	      <para><command>dump(8)</command> and
		<command>restore(8)</command> are the traditional Unix backup
		programs.  They operate on the drive as a collection of disk
		blocks, below the abstractions of files, links and directories
		that are created by the filesystems.
		<command>dump(8)</command> backs up devices, entire
		filesystems, not parts of a filesystem and not directory trees
		that span more than one filesystem, using either soft links
		<command>ln(1)</command> or mounting one filesystem onto
		another.  <command>dump(8)</command> does not write files and
		directories to tape, but rather writes the data blocks that
		are the building blocks of files and directories.
		<command>dump(8)</command> has quirks that remain from its
		early days in Version 6 of ATT Unix (circa 1975).  The default
		parameters are suitable for 9-track tapes (6250 bpi), not the
		high-density media available today (up to 62,182 ftpi).  These
		defaults must be overridden on the command line to utilize the
		capacity of current tape drives.</para>
	      
	      <para><command>rdump(8)</command> and
		<command>rrestore(8)</command> backup data across the network
		to a tape drive attached to another computer. Both programs
		rely upon <function>rcmd(3)</function> and
		<function>ruserok(3)</function> to access the remote tape
		drive.  Therefore, the user performing the backup must have
		<emphasis remap=tt>rhosts</emphasis> access to the remote
		computer.  The arguments to <command>rdump(8)</command> and
		<command>rrestore(8)</command> must suitable to use on the
		remote computer. (e.g. When <emphasis
		  remap=tt>rdump</emphasis>'ing from a FreeBSD computer to an
		Exabyte tape drive connected to a Sun called komodo, use:
		<emphasis remap=tt>/sbin/rdump 0dsbfu 54000 13000 126
		  komodo:/dev/nrst8 /dev/rsd0a 2&gt;&amp;1</emphasis>) Beware:
		there are security implications to allowing <emphasis
		  remap=tt>rhosts</emphasis> commands.  Evaluate your
		situation carefully.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title> Tar</title>
	      
	      <para><command>tar(1)</command> also dates back to Version 6 of
		ATT Unix (circa 1975).  <command>tar(1)</command> operates in
		cooperation with the filesystem; <command>tar(1)</command>
		writes files and directories to tape.
		<command>tar(1)</command> does not support the full range of
		options that are available from <command>cpio(1)</command>,
		but <command>tar(1)</command> does not require the unusual
		command pipeline that <command>cpio(1)</command> uses.
	      </para>
	      
	      <para>Most versions of <command>tar(1)</command> do not support
		backups across the network.  The GNU version of
		<command>tar(1)</command>, which FreeBSD utilizes, supports
		remote devices using the same syntax as <emphasis
		  remap=tt>rdump</emphasis>.  To <command>tar(1)</command> to
		an Exabyte tape drive connected to a Sun called komodo, use:
		<emphasis remap=tt>/usr/bin/tar cf komodo:/dev/nrst8 .
		  2&gt;&amp;1</emphasis>. For versions without remote device
		support, you can use a pipeline and <command>rsh(1)</command>
		to send the data to a remote tape drive. (XXX add an example
		command)</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title> Cpio</title>
	      
	      <para><command>cpio(1)</command> is the original Unix file
		interchange tape program for magnetic media.
		<command>cpio(1)</command> has options (among many others) to
		perform byte-swapping, write a number of different archives
		format, and pipe the data to other programs. This last feature
		makes <command>cpio(1)</command> and excellent choice for
		installation media.  <command>cpio(1)</command> does not know
		how to walk the directory tree and a list of files must be
		provided thru <acronym>STDIN</acronym>.</para>
	      
	      <para><command>cpio(1)</command> does not support backups across
		the network.  You can use a pipeline and
		<command>rsh(1)</command> to send the data to a remote tape
		drive. (XXX add an example command)</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title> Pax</title>
	      
	      <para><command>pax(1)</command> is IEEE/POSIX's answer to
		<emphasis remap=tt>tar</emphasis> and <emphasis
		  remap=tt>cpio</emphasis>.  Over the years the various
		versions of <emphasis remap=tt>tar</emphasis> and <emphasis
		  remap=tt>cpio</emphasis> have gotten slightly incompatible.
		So rather than fight it out to fully standardize them, POSIX
		created a new archive utility. <emphasis
		  remap=tt>pax</emphasis> attempts to read and write many of
		the various cpio and tar formats, plus new formats of its own.
		Its command set more resembles <emphasis
		  remap=tt>cpio</emphasis> than <emphasis
		  remap=tt>tar</emphasis>.</para>
	      
	    </sect4>
	    
	    <sect4
	      id="hw-storage-amanda">
	      <title><ulink
		  URL="http://www.freebsd.org/ports/misc.html#amanda-2.2.6.5">Amanda</ulink></title>
	      
	      <para>Amanda (Advanced Maryland Network Disk Archiver) is a
		client/server backup system, rather than a single program.  An
		Amanda server will backup to a single tape drive any number of
		computers that have Amanda clients and network communications
		with the Amanda server.  A common problem at locations with a
		number of large disks is the length of time required to backup
		to data directly to tape exceeds the amount of time available
		for the task.  Amanda solves this problem.  Amanda can use a
		"holding disk" to backup several filesystems at the same time.
		Amanda creates "archive sets": a group of tapes used over a
		period of time to create full backups of all the filesystems
		listed in Amanda's configuration file.  The "archive set" also
		contains nightly incremental (or differential) backups of all
		the filesystems.  Restoring a damaged filesystem requires the
		most recent full backup and the incremental backups.</para>
	      
	      <para>The configuration file provides fine control backups and
		the network traffic that Amanda generates.  Amanda will use
		any of the above backup programs to write the data to tape.
		Amanda is available as either a port or a package, it is not
		installed by default.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title> Do nothing</title>
	      
	      <para>"Do nothing" is not a computer program, but it is the most
		widely used backup strategy.  There are no initial costs.
		There is no backup schedule to follow.  Just say no.  If
		something happens to your data, grin and bear it!</para>
	      
	      <para>If your time and your data is worth little to nothing,
		then "Do nothing" is the most suitable backup program for your
		computer.  But beware, Unix is a useful tool, you may find
		that within six months you have a collection of files that are
		valuable to you.</para>
	      
	      <para>"Do nothing" is the correct backup method for
		<filename>/usr/obj</filename> and other directory trees that
		can be exactly recreated by your computer.  An example is the
		files that comprise these handbook pages-they have been
		generated from <acronym>SGML</acronym> input files.  Creating
		backups of these <acronym>HTML</acronym> files is not
		necessary.  The <acronym>SGML</acronym> source files are
		backed up regularly.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title> Which Backup Program is Best?</title>
	      
	      <para><command>dump(8)</command> <emphasis>Period.</emphasis>
		Elizabeth D. Zwicky torture tested all the backup programs
		discussed here.  The clear choice for preserving all your data
		and all the peculiarities of Unix filesystems is
		<command>dump(8)</command>.  Elizabeth created filesystems
		containing a large variety of unusual conditions (and some not
		so unusual ones) and tested each program by do a backup and
		restore of that filesystems.  The peculiarities included:
		files with holes, files with holes and a block of nulls, files
		with funny characters in their names, unreadable and
		unwritable files, devices, files that change size during the
		backup, files that are created/deleted during the backup and
		more.  She presented the results at LISA V in Oct.
		1991.</para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title>Emergency Restore Procedure</title>
	    
	    
	    <sect4>
	      <title> Before the Disaster</title>
	      
	      <para>There are only four steps that you need to perform in
		preparation for any disaster that may occur.  </para>
	      
	      <para>First, print the disklabel from each of your disks
		(<emphasis remap=tt>e.g. disklabel sd0 | lpr</emphasis>), your
		filesystem table (<filename>/etc/fstab</filename>) and all
		boot messages, two copies of each.</para>
	      
	      <para>Second, determine the boot and fixit floppies (boot.flp
		and fixit.flp) have all your devices.  The easiest way to
		check is to reboot your machine with the boot floppy in the
		floppy drive and check the boot messages.  If all your devices
		are listed and functional, skip on to step three.</para>
	      
	      <para>Otherwise, you have to create two custom bootable floppies
		which has a kernel that can mount your all of your disks and
		access your tape drive.  These floppies must contain:
		<command>fdisk(8)</command>, <command>disklabel(8)</command>,
		<command>newfs(8)</command>, <command>mount(8)</command>, and
		whichever backup program you use.  These programs must be
		statically linked.  If you use <command>dump(8)</command>, the
		floppy must contain <command>restore(8)</command>.</para>
	      
	      <para>Third, create backup tapes regularly. Any changes that you
		make after your last backup may be irretrievably lost.
		Write-protect the backup tapes.</para>
	      
	      <para>Fourth, test the floppies (either boot.flp and fixit.flp
		or the two custom bootable floppies you made in step two.)
		and backup tapes.  Make notes of the procedure.  Store these
		notes with the bootable floppy, the printouts and the backup
		tapes.  You will be so distraught when restoring that the
		notes may prevent you from destroying your backup tapes (How?
		In place of <command>tar xvf /dev/rst0</command>, you might
		accidently type <command> tar cvf /dev/rst0</command> and
		over-write your backup tape).</para>
	      
	      <para>For an added measure of security, make bootable floppies
		and two backup tapes each time.  Store one of each at a remote
		location.  A remote location is NOT the basement of the same
		office building. A number of firms in the World Trade Center
		learned this lesson the hard way.  A remote location should be
		physically separated from your computers and disk drives by a
		significant distance.</para>
	      
	      <para>An example script for creating a bootable floppy:
		<informalexample>
		  <screen> #!/bin/sh # # create a restore floppy # # format
		    the floppy # PATH=/bin:/sbin:/usr/sbin:/usr/bin fdformat
		    -q fd0 if [ $? -ne 0 ] then echo "Bad floppy, please use a
		    new one" exit 1 fi # place boot blocks on the floppy #
		    disklabel -w -B -b /usr/mdec/fdboot -s /usr/mdec/bootfd
		    /dev/rfd0c fd1440 # # newfs the one and only partition #
		    newfs -t 2 -u 18 -l 1 -c 40 -i 5120 -m 5 -o space
		    /dev/rfd0a # # mount the new floppy # mount /dev/fd0a /mnt
		    # # create required directories  # mkdir /mnt/dev mkdir
		    /mnt/bin mkdir /mnt/sbin mkdir /mnt/etc mkdir /mnt/root
		    mkdir /mnt/mnt			# for the root
		    partition mkdir /mnt/tmp mkdir /mnt/var # # populate the
		    directories # if [ ! -x /sys/compile/MINI/kernel ]  then
		    cat &lt;&lt; EOM The MINI kernel does not exist, please
		    create one. Here is an example config file: # # MINI -- A
		    kernel to get FreeBSD on onto a disk. # machine
		    "i386" cpu		"I486_CPU" ident		MINI
		    maxusers	5 options		INET
		    # needed for _tcp _icmpstat _ipstat #            _udpstat
		    _tcpstat _udb options		FFS
		    #Berkeley Fast File System options		FAT_CURSOR
		    #block cursor in syscons or pccons options
		    SCSI_DELAY=15		#Be pessimistic about Joe SCSI
		    device options		NCONS=2		#1 virtual
		    consoles options		USERCONFIG		#Allow
		    user configuration with -c XXX config		kernel
		    root on sd0 swap on sd0 and sd1 dumps on sd0 controller
		    isa0 controller	pci0 controller	fdc0	at isa? port
		    "IO_FD1" bio irq 6 drq 2 vector fdintr disk		fd0
		    at fdc0 drive 0 controller	ncr0 controller	scbus0 device
		    sc0	at isa? port "IO_KBD" tty irq 1 vector scintr device
		    npx0	at isa? port "IO_NPX" irq 13 vector npxintr
		    device		sd0 device		sd1 device
		    sd2 device		st0 pseudo-device	loop
		    # required by INET pseudo-device	gzip		# Exec
		    gzipped a.out's EOM exit 1 fi cp -f
		    /sys/compile/MINI/kernel /mnt gzip -c -best /sbin/init
		    &gt; /mnt/sbin/init gzip -c -best /sbin/fsck &gt;
		    /mnt/sbin/fsck gzip -c -best /sbin/mount &gt;
		    /mnt/sbin/mount gzip -c -best /sbin/halt &gt;
		    /mnt/sbin/halt gzip -c -best /sbin/restore &gt;
		    /mnt/sbin/restore gzip -c -best /bin/sh &gt; /mnt/bin/sh
		    gzip -c -best /bin/sync &gt; /mnt/bin/sync cp
		    /root/.profile /mnt/root cp -f /dev/MAKEDEV /mnt/dev chmod
		    755 /mnt/dev/MAKEDEV chmod 500 /mnt/sbin/init chmod 555
		    /mnt/sbin/fsck /mnt/sbin/mount /mnt/sbin/halt chmod 555
		    /mnt/bin/sh /mnt/bin/sync chmod 6555 /mnt/sbin/restore # #
		    create the devices nodes  # cd /mnt/dev ./MAKEDEV std
		    ./MAKEDEV sd0 ./MAKEDEV sd1 ./MAKEDEV sd2 ./MAKEDEV st0
		    ./MAKEDEV pty0 cd / # # create minimum filesystem table #
		    cat &gt; /mnt/etc/fstab &lt;&lt;EOM /dev/fd0a	/
		    ufs	rw 1 1 EOM # # create minimum passwd file # cat &gt;
		    /mnt/etc/passwd &lt;&lt;EOM root:*:0:0:Charlie
		    &amp;:/root:/bin/sh EOM cat &gt; /mnt/etc/master.passwd
		    &lt;&lt;EOM root::0:0::0:0:Charlie &amp;:/root:/bin/sh EOM
		    chmod 600 /mnt/etc/master.passwd chmod 644 /mnt/etc/passwd
		    /usr/sbin/pwd_mkdb -d/mnt/etc /mnt/etc/master.passwd # #
		    umount the floppy and inform the user # /sbin/umount
		    /mnt</screen>
		</informalexample>
	      </para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>After the Disaster</title>
	      
	      <para>The key question is: did your hardware survive?  You have
		been doing regular backups so there is no need to worry about
		the software.</para>
	      
	      <para>If the hardware has been damaged.  First, replace those
		parts that have been damaged.</para>
	      
	      <para>If your hardware is okay, check your floppies.  If you are
		using a custom boot floppy, boot single-user (type "-s" at the
		"boot:" prompt).  Skip the following paragraph.</para>
	      
	      <para>If you are using the boot.flp and fixit.flp floppies, keep
		reading.  Insert the boot.flp floppy in the first floppy drive
		and boot the computer.  The original install menu will be
		displayed on the screen.  Select the "Fixit--Repair mode with
		CDROM or floppy." option.  Insert the fixit.flp when prompted.
		<emphasis remap=tt>restore</emphasis> and the other programs
		that you need are located in
		<filename>/mnt2/stand</filename>.</para>
	      
	      <para>Recover each filesystem separately.</para>
	      
	      <para>Try to <emphasis remap=tt>mount(8) (e.g. mount /dev/sd0a
		  /mnt) </emphasis> the root partition of your first disk.  If
		the disklabel was damaged, use <command>disklabel(8)</command>
		to re-partition and label the disk to match the label that
		your printed and saved.  Use <command>newfs(8)</command> to
		re-create the filesystems.  Re-mount the root partition of the
		floppy read-write ("<command>mount -u -o rw /mnt</command>").
		Use your backup program and backup tapes to recover the data
		for this filesystem (e.g. <emphasis remap=tt>restore vrf
		  /dev/st0</emphasis>).  Unmount the filesystem (e.g.
		<filename>umount /mnt</filename>) Repeat for each filesystem
		that was damaged.</para>
	      
	      <para>Once your system is running, backup your data onto new
		tapes.  Whatever caused the crash or data loss may strike
		again. An another hour spent now, may save you from further
		distress later.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>* I did not prepare for the Disaster, What Now?</title>
	      
	    </sect4>
	  </sect3>
	</sect2>
      </sect1>
      
      <sect1
	id="hw-other">
	<title>* Other</title>
	
	
	<sect2>
	  <title>* PCMCIA</title>
	  
	</sect2>
      </sect1>
    </chapter>
    
    <chapter
      id="l10n">
      <title>Localization</title>
      
      
      <sect1
	id="russian">
	<title>Russian Language (KOI8-R encoding)</title>
	
	<para><emphasis>Contributed by &a.ache;<!-- <br> --> 1 May
	    1997</emphasis>.</para>
	
	<para>See more info about KOI8-R encoding at <ulink
	    URL="http://www.nagual.pp.ru/~ache/koi8.html">KOI8-R References
	    (Russian Net Character Set)</ulink>.</para>
	
	
	<sect2
	  id="russian-console">
	  <title>Console Setup</title>
	  
	  <para>
	    <orderedlist>
	      
	      <listitem>
		<para>Add following line to your kernel configuration file:
		  <literallayout>options
		    "SC_MOUSE_CHAR=0x03"</literallayout> to move character
		  codes used for mouse cursor off KOI8-R pseudographics
		  range.</para>
	      </listitem>
	      
	      <listitem>
		<para>Russian console entry in
		  <filename>/etc/rc.conf</filename> should looks like
		  <literallayout>keymap=ru.koi8-r keychange="61 ^[[K"
		    scrnmap=koi8-r2cp866 font8x16=cp866b-8x16
		    font8x14=cp866-8x14 font8x8=cp866-8x8</literallayout>
		  
		</para>
		
		<para><emphasis remap=it>NOTE:</emphasis> ^[ means that real
		  ESC character must be entered into
		  <filename>/etc/rc.conf</filename>, not just ^[
		  string.</para>
		
		<para>This tuning means KOI8-R keyboard with Alternative
		  screen font mapped to KOI8-R encoding to preserve
		  pseudographics, <emphasis remap=it>Gray Delete</emphasis>
		  key remapped to match Russian <emphasis
		    remap=tt>termcap(5)</emphasis> entry for FreeBSD
		  console.</para>
		
		<para>RUS/LAT switch will be <emphasis
		    remap=bf>CapsLock</emphasis>. Old CapsLock function still
		  available via <emphasis remap=bf>Shift+CapsLock</emphasis>.
		  CapsLock LED will indicate RUS mode, not CapsLock
		  mode.</para>
	      </listitem>
	      
	      <listitem>
		<para>For each <emphasis remap=tt>ttyv?</emphasis> entry in
		  <filename>/etc/ttys</filename> change terminal type from
		  <emphasis remap=tt>cons25</emphasis> to <emphasis
		    remap=tt>cons25r</emphasis>, i.e. each entry should looks
		  like <literallayout>ttyv0	"/usr/libexec/getty Pc"
		    cons25r	on  secure</literallayout>
		</para>
	      </listitem>
	      
	    </orderedlist>
	  </para>
	  
	</sect2>
	
	<sect2
	  id="russian-locale">
	  <title>Locale Setup</title>
	  
	  <para><anchor id="russian-env"> There is two environment variables
	    for locale setup:
	    <itemizedlist>
	      
	      <listitem>
		<para><acronym>LANG</acronym> for POSIX
		  <function>setlocale(3)</function> family functions;</para>
	      </listitem>
	      
	      <listitem>
		<para><symbol>MM_CHARSET</symbol> for applications MIME
		  chararter set.</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para>The best way is using <filename>/etc/login.conf</filename>
	    <emphasis remap=tt>russian</emphasis> user's login class in
	    <emphasis remap=tt>passwd(5)</emphasis> entry login class
	    position. See <emphasis remap=tt>login.conf(5)</emphasis> for
	    details.</para>
	  
	  
	  <sect3
	    id="russian-class">
	    <title>Login Class Method</title>
	    
	    <para>First of all check your <filename>/etc/login.conf</filename>
	      have <emphasis remap=tt>russian</emphasis> login class, this
	      entry may looks like: <literallayout>russian:Russian Users
		Accounts:\ :charset=KOI8-R:\ :lang=ru_RU.KOI8-R:\
		:tc=default:</literallayout>
	    </para>
	    
	    
	    <sect4>
	      <title>How to do it with vipw(8)</title>
	      
	      <para>If you use <command>vipw(8)</command> for adding new
		users, <filename>/etc/master.passwd</filename> entry should
		looks like:
		<literallayout>user:password:1111:11:russian:0:0:User
		  Name:/home/user:/bin/csh</literallayout>
	      </para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>How to do it with adduser(8)</title>
	      
	      <para>If you use <command>adduser(8)</command> for adding new
		users:
		<itemizedlist>
		  
		  <listitem>
		    <para>Set <literallayout>defaultclass =
			russian</literallayout> in
		      <filename>/etc/adduser.conf</filename> (you must enter
		      <emphasis remap=tt>default</emphasis> class for all
		      non-Russian users in this case);<!-- <br> --><!-- <br>
		      -->
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>Alternative variant will be answering <emphasis
			remap=tt>russian</emphasis> each time when you see
		      <literallayout>Enter login class: default
			[]:</literallayout> prompt from
		      <command>adduser(8)</command>;<!-- <br> --><!-- <br> -->
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>Another variant: call <literallayout># adduser
			-class russian</literallayout> for each Russian user
		      you want to add.</para>
		  </listitem>
		  
		</itemizedlist>
	      </para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>How to do it with pw(8)</title>
	      
	      <para>If you use <command>pw(8)</command> for adding new users,
		call it in this form: <literallayout># pw useradd user_name -L
		  russian</literallayout>
	      </para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title>Shell Startup Files Method</title>
	    
	    <para>If you don't want to use
	      <xref linkend="russian-class" remap="login class method"> for
	      some reasons, just set this
	      <xref linkend="russian-env" remap="two environment variables">
	      in the following shell startup files:
	      <itemizedlist>
		
		<listitem>
		  <para><filename>/etc/profile</filename>:
		    <literallayout>LANG=ru_RU.KOI8-R; export LANG
		      MM_CHARSET=KOI8-R; export MM_CHARSET</literallayout>
		    
		  </para>
		</listitem>
		
		<listitem>
		  <para><filename>/etc/csh.login</filename>:
		    <literallayout>setenv LANG ru_RU.KOI8-R setenv MM_CHARSET
		      KOI8-R</literallayout>
		  </para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>Alternatively you can add this instructions to
	      <itemizedlist>
		
		<listitem>
		  <para><filename>/usr/share/skel/dot.profile</filename>:
		  </para>
		  
		  <para>(similar to <filename>/etc/profile</filename>
		    above);</para>
		</listitem>
		
		<listitem>
		  <para><filename>/usr/share/skel/dot.login</filename>:
		  </para>
		  
		  <para>(similar to <filename>/etc/csh.login</filename>
		    above).</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	  </sect3>
	</sect2>
	
	<sect2
	  id="russian-printer">
	  <title>Printer Setup</title>
	  
	  <para>Since most printers with Russian characters comes with
	    hardware code page CP866, special output filter needed for KOI8-R
	    -&gt; CP866 conversion. Such filter installed by default as
	    <filename>/usr/libexec/lpr/ru/koi2alt</filename>. So, Russian
	    printer <filename>/etc/printcap</filename> entry should looks
	    like: <literallayout>lp|Russian local line printer:\
	      :sh:of=/usr/libexec/lpr/ru/koi2alt:\
	      :lp=/dev/lpt0:sd=/var/spool/output/lpd:lf=/var/log/lpd-errs:</literallayout> see <emphasis remap=tt>printcap(5)</emphasis> for detailed description.</para>
	  
	</sect2>
	
	<sect2
	  id="russian-msdosfs">
	  <title>MSDOS FS and Russian file names</title>
	  
	  <para>Look at following example <emphasis
	      remap=tt>fstab(5)</emphasis> entry to enable support for Russian
	    file names in MSDOS FS: <literallayout>/dev/sd0s1        /dos/c
	      msdos   rw,-W=koi2dos,-L=ru_RU.KOI8-R 0 0</literallayout> see
	    <command>mount_msdos(8)</command> for detailed description of
	    <option>-W</option> and <option>-L</option> options.</para>
	  
	</sect2>
	
	<sect2
	  id="russian-xwindow">
	  <title>X Window Setup</title>
	  
	  <para>Step by step instructions:
	    <orderedlist>
	      
	      <listitem>
		<para>Do
		  <xref linkend="russian-locale" remap="non-X locale setup">
		  first as described.
		</para>
		
		<para><emphasis remap=it>NOTE:</emphasis><anchor
		    id="russian-note"> Russian KOI8-R locale may not work with
		  old XFree86 releases (lower than 3.3). XFree86 port from
		  <filename>/usr/ports/x11/XFree86</filename> already have
		  most recent XFree86 version, so it will work, if you install
		  XFree86 from this port. XFree86 version shipped with the
		  latest FreeBSD distribution should work too (check XFree86
		  version number not less than 3.3 first).</para>
	      </listitem>
	      
	      <listitem>
		<para>Go to <filename>/usr/ports/russian/X.language</filename>
		  directory and say <literallayout># make all
		    install</literallayout> there. This port install latest
		  version of KOI8-R fonts. XFree86 3.3 already have some
		  KOI8-R fonts, but this ones scaled better.
		</para>
		
		<para>Check find <emphasis remap=tt>"Files"</emphasis> section
		  in your <filename>/etc/XF86Config</filename>, following
		  lines must be before any other <emphasis
		    remap=tt>FontPath</emphasis> entries: <literallayout>
		    FontPath   "/usr/X11R6/lib/X11/fonts/cyrillic/misc"
		    FontPath   "/usr/X11R6/lib/X11/fonts/cyrillic/75dpi"
		    FontPath
		    "/usr/X11R6/lib/X11/fonts/cyrillic/100dpi"</literallayout>
		</para>
		
		<para>If you use high resolution video mode, swap 75 dpi and
		  100 dpi lines.</para>
	      </listitem>
	      
	      <listitem>
		<para>To activate Russian keyboard add <literallayout>
		    XkbKeymap   "xfree86(ru)"</literallayout> line into
		  <emphasis remap=tt>"Keyboard"</emphasis> section in your
		  <filename>/etc/XF86Config</filename>, also make sure that
		  <emphasis remap=tt>XkbDisable</emphasis> is turned off
		  (commented out) there.
		</para>
		
		<para>RUS/LAT switch will be <emphasis
		    remap=bf>CapsLock</emphasis>. Old CapsLock function still
		  available via <emphasis remap=bf>Shift+CapsLock</emphasis>
		  (in LAT mode only).</para>
		
		<para><emphasis remap=it>NOTE:</emphasis> Russian XKB keyboard
		  may not work with old XFree86 versions, see <xref
		    linkend="russian-note" remap="locale note"> for
		  more info. Russian XKB keyboard may not work with
		  non-localized applications too, minimally localized
		  application should call <emphasis
		    remap=bf>XtSetLanguageProc</emphasis> (NULL, NULL, NULL);
		  function early in the program.</para>
	      </listitem>
	      
	    </orderedlist>
	    
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="german">
	<title>German Language (ISO 8859-1)</title>
	
	<para>Slaven Rezic <emphasis remap=tt><ulink
	      URL="mailto:eserte@cs.tu-berlin.de">&lt;eserte@cs.tu-berlin.de&gt;</ulink></emphasis> wrote a tutorial how to use umlauts on a FreeBSD machine. The tutorial  is written in German and available at <ulink URL="http://www.de.freebsd.org/de/umlaute/">http://www.de.freebsd.org/de/umlaute/</ulink>.
	</para>
	
	<para>	      </para>
	
      </sect1>
    </chapter>
  </part>
  
  <part>
    <title>Network Communications</title>
    
    
    <chapter>
      <title>Serial Communications</title>
      
      
      <sect1
	id="serial">
	<title>Serial Basics</title>
	
	<para><emphasis>Assembled from FAQ.</emphasis></para>
	
	<para>This section should give you some general information about
	  serial ports.  If you do not find what you want here, check into the
	  Terminal and Dialup sections of the handbook.</para>
	
	<para>The <emphasis remap=tt>ttydX</emphasis> (or <emphasis
	    remap=tt>cuaaX</emphasis>) device is the regular device you will
	  want to open for your applications.  When a process opens the
	  device, it will have a default set of terminal I/O settings. You can
	  see these settings with the command <literallayout>            stty
	    -a -f /dev/ttyd1 </literallayout>
	</para>
	
	<para>When you change the settings to this device, the settings are in
	  effect until the device is closed.  When it is reopened, it goes
	  back to the default set.  To make changes to the default set, you
	  can open and adjust the settings of the ``initial state'' device.
	  For example, to turn on <acronym>CLOCAL</acronym> mode, 8 bits, and
	  <filename>XON/XOFF</filename> flow control by default for ttyd5, do:
	  <literallayout>            stty -f /dev/ttyid5 clocal cs8 ixon ixoff
	  </literallayout>
	</para>
	
	<para>A good place to do this is in
	  <filename>/etc/rc.serial</filename>. Now, an application will have
	  these settings by default when it opens <emphasis
	    remap=tt>ttyd5</emphasis>.  It can still change these settings to
	  its liking, though.</para>
	
	<para>You can also prevent certain settings from being changed by an
	  application by making adjustments to the ``lock state'' device. For
	  example, to lock the speed of <emphasis remap=tt>ttyd5</emphasis> to
	  57600 bps, do <literallayout>            stty -f /dev/ttyld5 57600
	  </literallayout>
	</para>
	
	<para>Now, an application that opens <emphasis
	    remap=tt>ttyd5</emphasis> and tries to change the speed of the
	  port will be stuck with 57600 bps.</para>
	
	<para>Naturally, you should make the initial state and lock state
	  devices writable only by <emphasis remap=tt>root</emphasis>. The
	  <acronym>MAKEDEV</acronym> script does <acronym>NOT</acronym> do
	  this when it creates the device entries.
	</para>
	
      </sect1>
      
      <sect1
	id="term">
	<title>Terminals</title>
	
	<para><emphasis>Contributed by &a.kelly;<!-- <br> -->28 July
	    1996</emphasis></para>
	
	<para>Terminals provide a convenient and low-cost way to access the
	  power of your FreeBSD system when you are not at the computer's
	  console or on a connected network.  This section describes how to
	  use terminals with FreeBSD.</para>
	
	
	<sect2
	  id="term-uses">
	  <title>Uses and Types of Terminals</title>
	  
	  <para>The original Unix systems did not have consoles.  Instead,
	    people logged in and ran programs through terminals that were
	    connected to the computer's serial ports.  It is quite similar to
	    using a modem and some terminal software to dial into a remote
	    system to do text-only work.</para>
	  
	  <para>Today's PCs have consoles capable of high quality graphics,
	    but the ability to establish a login session on a serial port
	    still exists in nearly every Unix-style operating system today;
	    FreeBSD is no exception.  By using a terminal attached to a unused
	    serial port, you can log in and run any text program that you
	    would normally run on the console or in an <emphasis
	      remap=tt>xterm</emphasis> window in the X Window System.</para>
	  
	  <para>For the business user, you can attach many terminals to a
	    FreeBSD system and place them on your employees' desktops. For a
	    home user, a spare computer such as an older IBM PC or a Macintosh
	    can be a terminal wired into a more powerful computer running
	    FreeBSD.  You can turn what might otherwise be a single-user
	    computer into a powerful multiple user system.</para>
	  
	  <para>For FreeBSD, there are three kinds of terminals:</para>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para><xref linkend="term-dumb" remap="Dumb terminals"></para>
	      </listitem>
	      
	      <listitem>
		<para><xref linkend="term-pcs" remap="PCs acting as
		    terminals"></para>
	      </listitem>
	      
	      <listitem>
		<para><xref linkend="term-x" remap="X terminals"></para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para>The remaining subsections describe each kind.</para>
	  
	  
	  <sect3
	    id="term-dumb">
	    <title>Dumb Terminals</title>
	    
	    <para>Dumb terminals are specialized pieces of hardware that let
	      you connect to computers over serial lines.  They are called
	      ``dumb'' because they have only enough computational power to
	      display, send, and receive text.  You cannot run any programs on
	      them.  It is the computer to which you connect them that has all
	      the power to run text editors, compilers, email, games, and so
	      forth.</para>
	    
	    <para>There are hundreds of kinds of dumb terminals made by many
	      manufacturers, including Digital Equipment Corporation's VT-100
	      and Wyse's WY-75.  Just about any kind will work with FreeBSD.
	      Some high-end terminals can even display graphics, but only
	      certain software packages can take advantage of these advanced
	      features.</para>
	    
	    <para>Dumb terminals are popular in work environments where
	      workers do not need access to graphic applications such as those
	      provided by the X Window System.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="term-pcs">
	    <title>PCs Acting As Terminals</title>
	    
	    <para>If a <xref linkend="term-dumb" remap="dumb terminal"> has
	      just enough ability to display, send, and receive text, then
	      certainly any spare personal computer can be a dumb terminal.
	      All you need is the proper cable and some <emphasis>terminal
		emulation</emphasis> software to run on the computer.</para>
	    
	    <para>Such a configuration is popular in homes.  For example, if
	      your spouse is busy working on your FreeBSD system's console,
	      you can do some text-only work at the same time from a less
	      powerful personal computer hooked up as a terminal to the
	      FreeBSD system.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="term-x">
	    <title>X Terminals</title>
	    
	    <para>X terminals are the most sophisticated kind of terminal
	      available.  Instead of connecting to a serial port, they usually
	      connect to a network like Ethernet.  Instead of being relegated
	      to text-only applications, they can display any X
	      application.</para>
	    
	    <para>We introduce X terminals just for the sake of completeness.
	      However, this chapter does <emphasis>not</emphasis> cover setup,
	      configuration, or use of X terminals.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2
	  id="term-cables-ports">
	  <title>Cables and Ports</title>
	  
	  <para>To connect a terminal to your FreeBSD system, you need the
	    right kind of cable and a serial port to which to connect it. This
	    section tells you what to do.  If you are already familiar with
	    your terminal and the cable it requires, skip to
	    <xref linkend="term-config" remap="Configuration">.</para>
	  
	  
	  <sect3
	    id="term-cables">
	    <title>Cables</title>
	    
	    <para>Because terminals use serial ports, you need to use
	      serial---also known as RS-232C---cables to connect the terminal
	      to the FreeBSD system.</para>
	    
	    <para>There are a couple of kinds of serial cables.  Which one
	      you'll use depends on the terminal you want to connect:</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para>If you are connecting a personal computer to act as a
		    terminal, use a <xref linkend="term-null"
		      remap="null-modem"> cable.  A null-modem cable connects
		    two computers or terminals together.
		  </para>
		</listitem>
		
		<listitem>
		  <para>If you have an actual terminal, your best source of
		    information on what cable to use is the documentation that
		    accompanied the terminal.  If you do not have the
		    documentation, then try a <xref linkend="term-null"
		      remap="null-modem"> cable.  If that does not work, then
		    try a <xref linkend="term-std" remap="standard">
		    cable.</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>Also, the serial port on <emphasis>both</emphasis> the
	      terminal and your FreeBSD system must have connectors that will
	      fit the cable you are using.</para>
	    
	    
	    <sect4
	      id="term-null">
	      <title>Null-modem cables</title>
	      
	      <para>A null-modem cable passes some signals straight through,
		like ``signal ground,'' but switches other signals.  For
		example, the ``send data'' pin on one end goes to the
		``receive data'' pin on the other end.</para>
	      
	      <para>If you like making your own cables, here is a table
		showing a recommended way to construct a null-modem cable for
		use with terminals.  This table shows the RS-232C signal names
		and the pin numbers on a DB-25 connector.
		<informalexample>
		  <screen>   Signal     Pin#                        Pin#
		    Signal TxD        2  -----------------------  3
		    RxD RxD        3  -----------------------  2         TxD
		    DTR        20 -----------------------  6         DSR DSR
		    6  -----------------------  20        DTR SG         7
		    -----------------------  7         SG DCD        8
		    ----------------------+  4         RTS* *RTS        4  +
		    +  5         CTS* *CTS        5  +----------------------
		    8         DCD * Connect pins 4 to 5 internally in the
		    connector hood, and then to pin 8 in the remote
		    hood.</screen>
		</informalexample>
	      </para>
	      
	    </sect4>
	    
	    <sect4
	      id="term-std">
	      <title>Standard RS-232C Cables</title>
	      
	      <para>A standard serial cable passes all the RS-232C signals
		straight-through.  That is, the ``send data'' pin on one end
		of the cable goes to the ``send data'' pin on the other end.
		This is the type of cable to connect a modem to your FreeBSD
		system, and the type of cable needed for some
		terminals.</para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3
	    id="term-ports">
	    <title>Ports</title>
	    
	    <para>Serial ports are the devices through which data is
	      transferred between the FreeBSD host computer and the terminal.
	      This section describes the kinds of ports that exist and how
	      they are addressed in FreeBSD.</para>
	    
	    
	    <sect4
	      id="term-portkinds">
	      <title>Kinds of Ports</title>
	      
	      <para>Several kinds of serial ports exist.  Before you purchase
		or construct a cable, you need to make sure it will fit the
		ports on your terminal and on the FreeBSD system.</para>
	      
	      <para>Most terminals will have DB25 ports.  Personal computers,
		including PCs running FreeBSD, will have DB25 or DB9 ports.
		If you have a multiport serial card for your PC, you may have
		RJ-12 or RJ-45 ports.</para>
	      
	      <para>See the documentation that accompanied the hardware for
		specifications on the kind of port in use.  A visual
		inspection of the port often works, too.</para>
	      
	    </sect4>
	    
	    <sect4
	      id="term-portnames">
	      <title>Port Names</title>
	      
	      <para>In FreeBSD, you access each serial port through an entry
		in the <filename>/dev</filename> directory.  There are two
		different kinds of entries:
		<itemizedlist>
		  
		  <listitem>
		    <para>Callin ports are named
		      <filename>/dev/ttyd<replaceable>X</replaceable></filename> where <emphasis remap=it>X</emphasis> is the port number, starting from zero. Generally, you use the callin port for terminals. Callin ports require that the serial line assert the data carrier detect (DCD) signal to work.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>Callout ports are named
		      <filename>/dev/cuaa<replaceable>X</replaceable></filename>. You usually do not use the callout port for terminals, just for modems.  You may use the callout port if the serial cable or the terminal does not support the carrier detect signal.</para>
		  </listitem>
		  
		</itemizedlist>
	      </para>
	      
	      <para>See the sio(4) manual page for more information.</para>
	      
	      <para>If you have connected a terminal to the first serial port
		(COM1 in DOS parlance), then you want to use
		<filename>/dev/ttyd0</filename> to refer to the terminal.  If
		it is on the second serial port (also known as COM2), it is
		<filename>/dev/ttyd1</filename>, and so forth.</para>
	      
	      <para>Note that you may have to configure your kernel to support
		each serial port, especially if you have a multiport serial
		card.  See <xref linkend="kernelconfig"
		  remap="Configuring the FreeBSD      Kernel"> for more
		information.</para>
	      
	    </sect4>
	  </sect3>
	</sect2>
	
	<sect2
	  id="term-config">
	  <title>Configuration</title>
	  
	  <para>This section describes what you need to configure on your
	    FreeBSD system to enable a login session on a terminal.  It
	    assumes you have already configured your kernel to support the
	    serial port to which the terminal is connected---and that you have
	    connected it.</para>
	  
	  <para>In a nutshell, you need to tell the <emphasis
	      remap=tt>init</emphasis> process, which is responsible for
	    process control and initialization, to start a <emphasis
	      remap=tt>getty</emphasis> process, which is responsible for
	    reading a login name and starting the <emphasis
	      remap=tt>login</emphasis> program.</para>
	  
	  <para>To do so, you have to edit the <filename>/etc/ttys</filename>
	    file. First, use the <emphasis remap=tt>su</emphasis> command to
	    become root.  Then, make the following changes to
	    <filename>/etc/ttys</filename>:
	    <orderedlist>
	      
	      <listitem>
		<para>Add an line to <filename>/etc/ttys</filename> for the
		  entry in the <filename>/dev</filename> directory for the
		  serial port if it is not already there.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Specify that <filename>/usr/libexec/getty</filename> be
		  run on the port, and specify the appropriate <emphasis
		    remap=tt>getty</emphasis> type from the
		  <filename>/etc/gettytab</filename> file.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Specify the default terminal type.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Set the port to ``on.''
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Specify whether the port should be ``secure.''
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Force <emphasis remap=tt>init</emphasis> to reread the
		  <filename>/etc/ttys</filename> file.</para>
	      </listitem>
	      
	    </orderedlist>
	  </para>
	  
	  <para>As an optional step, you may wish to create a custom <emphasis
	      remap=tt>getty</emphasis> type for use in step 2 by making an
	    entry in <filename>/etc/gettytab</filename>.  This document does
	    not explain how to do so; you are encouraged to see the
	    gettytab(5) and the getty(8) manual pages for more
	    information.</para>
	  
	  <para>The remaining sections detail how to do these steps.  We will
	    use a running example throughout these sections to illustrate what
	    we need to do.  In our example, we will connect two terminals to
	    the system: a Wyse-50 and a old 286 IBM PC running Procomm
	    terminal software emulating a VT-100 terminal. We connect the Wyse
	    to the second serial port and the 286 to the sixth serial port (a
	    port on a multiport serial card).</para>
	  
	  <para>For more information on the <filename>/etc/ttys</filename>
	    file, see the ttys(5) manual page.</para>
	  
	  
	  <sect3
	    id="term-etcttys">
	    <title>Adding an Entry to <filename>/etc/ttys</filename></title>
	    
	    <para>First, you need to add an entry to the
	      <filename>/etc/ttys</filename> file, unless one is already
	      there.</para>
	    
	    <para>The <filename>/etc/ttys</filename> file lists all of the
	      ports on your FreeBSD system where you want to allow logins.
	      For example, the first virtual console <emphasis
		remap=tt>ttyv0</emphasis> has an entry in this file.  You can
	      log in on the console using this entry. This file contains
	      entries for the other virtual consoles, serial ports, and
	      pseudo-ttys.  For a hardwired terminal, just list the serial
	      port's <filename>/dev</filename> entry without the
	      <filename>/dev</filename> part.</para>
	    
	    <para>When you installed your FreeBSD system, the
	      <filename>/etc/ttys</filename> file included entries for the
	      first four serial ports: <emphasis remap=tt>ttyd0</emphasis>
	      through <emphasis remap=tt>ttyd3</emphasis>.  If you are
	      attaching a terminal on one of those ports, you do not need to
	      add an entry.</para>
	    
	    <para>In our example, we attached a Wyse-50 to the second serial
	      port, <emphasis remap=tt>ttyd1</emphasis>, which is already in
	      the file.  We need to add an entry for the 286 PC connected to
	      the sixth serial port.  Here is an excerpt of the
	      <filename>/etc/ttys</filename> file after we add the new entry:
	      <informalexample>
		<screen>ttyd1   "/usr/libexec/getty std.9600"   unknown off
		  secure ttyd5   </screen>
	      </informalexample>
	    </para>
	    
	  </sect3>
	  
	  <sect3
	    id="term-getty">
	    <title>Specifying the <emphasis remap=tt>getty</emphasis>
	      Type</title>
	    
	    <para>Next, we need to specify what program will be run to handle
	      the logins on a terminal.  For FreeBSD, the standard program to
	      do that is <filename>/usr/libexec/getty</filename>.  It is what
	      provides the <emphasis remap=tt>login:</emphasis> prompt.</para>
	    
	    <para>The program <emphasis remap=tt>getty</emphasis> takes one
	      (optional) parameter on its command line, the
	      <emphasis><emphasis remap=tt>getty</emphasis> type</emphasis>.
	      A <emphasis remap=tt>getty</emphasis> type tells about
	      characteristics on the terminal line, like bps rate and parity.
	      The <emphasis remap=tt>getty</emphasis> program reads these
	      characteristics from the file
	      <filename>/etc/gettytab</filename>.</para>
	    
	    <para>The file <filename>/etc/gettytab</filename> contains lots of
	      entries for terminal lines both old and new.  In almost all
	      cases, the entries that start with the text <emphasis
		remap=tt>std</emphasis> will work for hardwired terminals.
	      These entries ignore parity.  There is a <emphasis
		remap=tt>std</emphasis> entry for each bps rate from 110 to
	      115200.  Of course, you can add your own entries to this file.
	      The manual page gettytab(5) provides more information.</para>
	    
	    <para>When setting the <emphasis remap=tt>getty</emphasis> type in
	      the <filename>/etc/ttys</filename> file, make sure that the
	      communications settings on the terminal match.</para>
	    
	    <para>For our example, the Wyse-50 uses no parity and connects at
	      38400 bps.  The 286 PC uses no parity and connects at 19200 bps.
	      Here is the <filename>/etc/ttys</filename> file so far (showing
	      just the two terminals in which we are interested):
	      <informalexample>
		<screen>ttyd1   "/usr/libexec/getty std.38400"   unknown off
		  secure ttyd5   "/usr/libexec/getty std.19200"</screen>
	      </informalexample> Note that the second field---where we specify
	      what program to run---appears in quotes.  This is important,
	      otherwise the type argument to <emphasis
		remap=tt>getty</emphasis> might be interpreted as the next
	      field.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="term-deftermtype">
	    <title>Specifying the Default Terminal Type</title>
	    
	    <para>The third field in the <filename>/etc/ttys</filename> file
	      lists the default terminal type for the port.  For dialup ports,
	      you typically put <emphasis remap=tt>unknown</emphasis> or
	      <emphasis remap=tt>dialup</emphasis> in this field because users
	      may dial up with practically any kind of terminal or software.
	      For hardwired terminals, the terminal type does not change, so
	      you can put a real terminal type in this field.</para>
	    
	    <para>Users will usually use the <emphasis
		remap=tt>tset</emphasis> program in  their
	      <filename>.login</filename> or <filename>.profile</filename>
	      files to check the terminal type and prompt for one if
	      necessary.  By setting a terminal type in the
	      <filename>/etc/ttys</filename> file, users can forego such
	      prompting.</para>
	    
	    <para>To find out what terminal types FreeBSD supports, see the
	      file <filename>/usr/share/misc/termcap</filename>.  It lists
	      about 600 terminal types.  You can add more if you wish.  See
	      the termcap(5) manual page for information.</para>
	    
	    <para>In our example, the Wyse-50 is a Wyse-50 type of terminal
	      (although it can emulate others, we will leave it in Wyse-50
	      mode).  The 286 PC is running Procomm which will be set to
	      emulate a VT-100.  Here are the pertinent yet unfinished entries
	      from the <filename>/etc/ttys</filename> file:
	      <informalexample>
		<screen>ttyd1   "/usr/libexec/getty std.38400"   wy50  off
		  secure ttyd5   "/usr/libexec/getty std.19200"
		  vt100</screen>
	      </informalexample>
	    </para>
	    
	  </sect3>
	  
	  <sect3
	    id="term-enable">
	    <title>Enabling the Port</title>
	    
	    <para>The next field in <filename>/etc/ttys</filename>, the fourth
	      field, tells whether to enable the port.  Putting <emphasis
		remap=tt>on</emphasis> here will have the <emphasis
		remap=tt>init</emphasis> process start the program in the
	      second field, <emphasis remap=tt>getty</emphasis>, which will
	      prompt for a login.  If you put <emphasis
		remap=tt>off</emphasis> in the fourth field, there will be no
	      <emphasis remap=tt>getty</emphasis>, and hence no logins on the
	      port.</para>
	    
	    <para>So, naturally, you want an <emphasis remap=tt>on</emphasis>
	      in this field.  Here again is the <filename>/etc/ttys</filename>
	      file.  We have turned each port <emphasis
		remap=tt>on</emphasis>.
	      <informalexample>
		<screen>ttyd1   "/usr/libexec/getty std.38400"   wy50  on
		  secure ttyd5   "/usr/libexec/getty std.19200"	 vt100
		  on</screen>
	      </informalexample>
	    </para>
	    
	  </sect3>
	  
	  <sect3
	    id="term-secure">
	    <title>Specifying Secure Ports</title>
	    
	    <para>We have arrived at the last field (well, almost: there is an
	      optional <emphasis remap=tt>window</emphasis> specifier, but we
	      will ignore that). The last field tells whether the port is
	      secure.</para>
	    
	    <para>What does ``secure'' mean?</para>
	    
	    <para>It means that the root account (or any account with a user
	      ID of 0) may login on the port.  Insecure ports do not allow
	      root to login.</para>
	    
	    <para>How do you use secure and insecure ports?</para>
	    
	    <para>By marking a port as insecure, the terminal to which it is
	      connected will not allow root to login.  People who know the
	      root password to your FreeBSD system will first have to login
	      using a regular user account.  To gain superuser privileges,
	      they will then have to use the <emphasis remap=tt>su</emphasis>
	      command.</para>
	    
	    <para>Because of this, you will have two records to help track
	      down possible compromises of root privileges: both the login and
	      the <emphasis remap=tt>su</emphasis> command make records in the
	      system log (and logins are also recorded in the <emphasis
		remap=tt>wtmp</emphasis> file).</para>
	    
	    <para>By marking a port as secure, the terminal will allow root
	      in.  People who know the root password will just login as root.
	      You will not have the potentially useful login and <emphasis
		remap=tt>su</emphasis> command records.</para>
	    
	    <para>Which should you use?</para>
	    
	    <para>Just use ``insecure.''  Use ``insecure''
	      <emphasis>even</emphasis> for terminals <emphasis>not</emphasis>
	      in public user areas or behind locked doors.  It is quite easy
	      to login and use <emphasis remap=tt>su</emphasis> if you need
	      superuser privileges.</para>
	    
	    <para>Here finally are the completed entries in the
	      <filename>/etc/ttys</filename> file, with comments added to
	      describe where the terminals are:
	      <informalexample>
		<screen>ttyd1   "/usr/libexec/getty std.38400"   wy50  on
		  insecure # Kitchen ttyd5   "/usr/libexec/getty std.19200"
		  vt100 on insecure # Guest bathroom</screen>
	      </informalexample>
	    </para>
	    
	  </sect3>
	  
	  <sect3
	    id="term-hup">
	    <title>Force <emphasis remap=tt>init</emphasis> to Reread
	      <filename>/etc/ttys</filename></title>
	    
	    <para>When you boot FreeBSD, the first process, <emphasis
		remap=tt>init</emphasis>, will read the
	      <filename>/etc/ttys</filename> file and start the programs
	      listed for each enabled port to prompt for logins.</para>
	    
	    <para>After you edit <filename>/etc/ttys</filename>, you do not
	      want to have to reboot your system to get <emphasis
		remap=tt>init</emphasis> to see the changes. So, <emphasis
		remap=tt>init</emphasis> will reread
	      <filename>/etc/ttys</filename> if it receives a SIGHUP (hangup)
	      signal.</para>
	    
	    <para>So, after you have saved your changes to
	      <filename>/etc/ttys</filename>, send SIGHUP to <emphasis
		remap=tt>init</emphasis> by typing:
	      <informalexample>
		<screen>kill -HUP 1</screen>
	      </informalexample> (The <emphasis remap=tt>init</emphasis>
	      process <emphasis>always</emphasis> has process ID 1.)</para>
	    
	    <para>If everything is set up correctly, all cables are in place,
	      and the terminals are powered up, you should see login prompts.
	      Your terminals are ready for their first logins!</para>
	    
	  </sect3>
	</sect2>
	
	<sect2
	  id="term-debug">
	  <title>Debugging your connection</title>
	  
	  <para>Even with the most meticulous attention to detail, something
	    could still go wrong while setting up a terminal.  Here is a list
	    of symptoms and some suggested fixes.</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>No login prompt appears</term>
		<listitem>
		  <para>Make sure the terminal is plugged in and powered up.
		    If it is a personal computer acting as a terminal, make
		    sure it is running terminal emulation software on the
		    correct serial port.</para>
		  
		  <para>Make sure the cable is connected firmly to both the
		    terminal and the FreeBSD computer.  Make sure it is the
		    right kind of cable.</para>
		  
		  <para>Make sure the terminal and FreeBSD agree on the bps
		    rate and parity settings.  If you have a video display
		    terminal, make sure the contrast and brightness controls
		    are turned up.  If it is a printing terminal, make sure
		    paper and ink are in good supply.</para>
		  
		  <para>Make sure that a <emphasis remap=tt>getty</emphasis>
		    process is running and serving the terminal.  Type
		    <informalexample>
		      <screen>ps -axww|grep getty</screen>
		    </informalexample> to get a list of running <emphasis
		      remap=tt>getty</emphasis> processes.  You should see an
		    entry for the terminal.  For example, the display
		    <informalexample>
		      <screen>22189  d1  Is+    0:00.03 /usr/libexec/getty
			std.38400 ttyd1</screen>
		    </informalexample> shows that a <emphasis
		      remap=tt>getty</emphasis> is running on the second
		    serial port <emphasis remap=tt>ttyd1</emphasis> and is
		    using the <emphasis remap=tt>std.38400</emphasis> entry in
		    <filename>/etc/gettytab</filename>.</para>
		  
		  <para>If no <emphasis remap=tt>getty</emphasis> process is
		    running, make sure you have enabled the port in
		    <filename>/etc/ttys</filename>.  Make sure you have run
		    <command>kill -HUP 1</command>.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>Garbage appears instead of a login
		  prompt</term>
		
		<listitem>
		  <para>Make sure the terminal and FreeBSD agree on the bps
		    rate and parity settings.  Check the getty processes to
		    make sure the correct <emphasis remap=tt>getty</emphasis>
		    type is in use.  If not, edit
		    <filename>/etc/ttys</filename> and run <command>kill -HUP
		      1</command>.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>Characters appear doubled; the password
		  appears when typed</term>
		
		<listitem>
		  <para>Switch the terminal (or the terminal emulation
		    software) from ``half duplex'' or ``local echo'' to ``full
		    duplex.''</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="dialup">
	<title>Dialin Service</title>
	
	<para><emphasis>Contributed by &a.ghelmer;.</emphasis></para>
	
	<para>This document provides suggestions for configuring a FreeBSD
	  system to handle dialup modems.  This document is written based on
	  the author's experience with FreeBSD versions 1.0, 1.1, and 1.1.5.1
	  (and experience with dialup modems on other UNIX-like operating
	  systems); however, this document may not answer all of your
	  questions or provide examples specific enough to your environment.
	  The author cannot be responsible if you damage your system or lose
	  data due to attempting to follow the suggestions here.</para>
	
	
	<sect2
	  id="dialup-prereqs">
	  <title>Prerequisites</title>
	  
	  <para>To begin with, the author assumes you have some basic
	    knowledge of FreeBSD.  You need to have FreeBSD installed, know
	    how to edit files in a UNIX-like environment, and how to look up
	    manual pages on the system.  As discussed below, you will need
	    certain versions of FreeBSD, and knowledge of some terminology
	    &amp; modem and cabling.</para>
	  
	  
	  <sect3>
	    <title>FreeBSD Version</title>
	    
	    <para>First, it is assumed that you are using FreeBSD version 1.1
	      or higher (including versions 2.x).  FreeBSD version 1.0
	      included two different serial drivers, which complicates the
	      situation.  Also, the serial device driver (<emphasis
		remap=tt>sio</emphasis>) has improved in every release of
	      FreeBSD, so more recent versions of FreeBSD are assumed to have
	      better and more efficient drivers than earlier versions.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Terminology</title>
	    
	    <para>A quick rundown of terminology:</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>bps</term>
		  <listitem>
		    <para>Bits per Second - the rate at which data is
		      transmitted</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>DTE</term>
		  
		  <listitem>
		    <para>Data Terminal Equipment - for example, your
		      computer</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>DCE</term>
		  
		  <listitem>
		    <para>Data Communications Equipment -  your modem</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>RS-232</term>
		  
		  <listitem>
		    <para>EIA standard for serial communications via
		      hardware</para>
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	    <para>If you need more information about these terms and data
	      communications in general, the author remembers reading that
	      <emphasis>The RS-232 Bible</emphasis> (anybody have an ISBN?) is
	      a good reference.</para>
	    
	    <para>When talking about communications data rates, the author
	      does not use the term <emphasis remap=bf>baud</emphasis>.  Baud
	      refers to the number of electrical state transitions that may be
	      made in a period of time, while <emphasis
		remap=bf>bps</emphasis> (bits per second) is the ``correct''
	      term to use (at least it does not seem to bother the curmudgeons
	      quite a much).</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>External vs. Internal Modems</title>
	    
	    <para>External modems seem to be more convenient for dialup,
	      because external modems often can be semi-permanently configured
	      via parameters stored in non-volatile RAM and they usually
	      provide lighted indicators that display the state of important
	      RS-232 signals. Blinking lights impress visitors, but lights are
	      also very useful to see whether a modem is operating
	      properly.</para>
	    
	    <para>Internal modems usually lack non-volatile RAM, so their
	      configuration may be limited only to setting DIP switches.  If
	      your internal modem has any signal indicator lights, it is
	      probably difficult to view the lights when the system's cover is
	      in place.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Modems and Cables</title>
	    
	    <para>A background knowledge of these items is assumed</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para> You know how to connect your modem to your computer
		    so that the two can communicate (unless you have an
		    internal modem, which does not need such a cable)
		  </para>
		</listitem>
		
		<listitem>
		  <para> You are familiar with your modem's command set, or
		    know where to look up needed commands
		  </para>
		</listitem>
		
		<listitem>
		  <para> You know how to configure your modem (probably via a
		    terminal communications program) so you can set the
		    non-volatile RAM parameters
		  </para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>The first, connecting your modem, is usually simple - most
	      straight-through serial cables work without any problems.  You
	      need to have a cable with appropriate connectors (DB-25 or DB-9,
	      male or female) on each end, and the cable must be a DCE-to-DTE
	      cable with these signals wired:</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para> Transmitted Data (<acronym>SD</acronym>)</para>
		</listitem>
		
		<listitem>
		  <para> Received Data (<acronym>RD</acronym>)</para>
		</listitem>
		
		<listitem>
		  <para> Request to Send (<acronym>RTS</acronym>)</para>
		</listitem>
		
		<listitem>
		  <para> Clear to Send (<acronym>CTS</acronym>)</para>
		</listitem>
		
		<listitem>
		  <para> Data Set Ready (<acronym>DSR</acronym>)</para>
		</listitem>
		
		<listitem>
		  <para> Data Terminal Ready (<acronym>DTR</acronym>)</para>
		</listitem>
		
		<listitem>
		  <para> Carrier Detect (<acronym>CD</acronym>)</para>
		</listitem>
		
		<listitem>
		  <para> Signal Ground (<acronym>SG</acronym>)</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>FreeBSD needs the <acronym>RTS</acronym> and
	      <acronym>CTS</acronym> signals for flow-control at speeds above
	      2400bps, the <acronym>CD</acronym> signal to detect when a call
	      has been answered or the line has been hung up, and the
	      <acronym>DTR</acronym> signal to reset the modem after a session
	      is complete.  Some cables are wired without all of the needed
	      signals, so if you have problems, such as a login session not
	      going away when the line hangs up, you may have a problem with
	      your cable.</para>
	    
	    <para>The second prerequisite depends on the modem(s) you use.  If
	      you do not know your modem's command set by heart, you will need
	      to have the modem's reference book or user's guide handy.
	      Sample commands for USR Sportster 14,400 external modems will be
	      given, which you may be able to use as a reference for your own
	      modem's commands.</para>
	    
	    <para>Lastly, you will need to know how to setup your modem so
	      that it will work well with FreeBSD.  Like other UNIX-like
	      operating systems, FreeBSD uses the hardware signals to find out
	      when a call has been answered or a line has been hung up and to
	      hangup and reset the modem after a call.  FreeBSD avoids sending
	      commands to the modem or watching for status reports from the
	      modem.  If you are familiar with connecting modems to PC-based
	      bulletin board systems, this may seem awkward.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Serial Interface Considerations</title>
	    
	    <para>FreeBSD supports NS8250-, NS16450-, NS16550-, and
	      NS16550A-based EIA RS-232C (CCITT V.24) communications
	      interfaces.  The 8250 and 16450 devices have single-character
	      buffers.  The 16550 device provides a 16-character buffer, which
	      allows for better system performance. (Bugs in plain 16550's
	      prevent the use of the 16-character buffer, so use 16550A's if
	      possible).  Because single-character-buffer devices require more
	      work by the operating system than the 16-character-buffer
	      devices, 16550A-based serial interface cards are much prefered.
	      If the system has many active serial ports or will have a heavy
	      load, 16550A-based cards are better for low-error-rate
	      communications.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title>Quick Overview</title>
	  
	  <para>Here is the process that FreeBSD follows to accept dialup
	    logins.  A <emphasis remap=tt>getty</emphasis> process, spawned by
	    <emphasis remap=tt>init</emphasis>, patiently waits to open the
	    assigned serial port (<filename>/dev/ttyd0</filename>, for our
	    example).  The command <emphasis remap=tt>ps ax</emphasis> might
	    show this:</para>
	  
	  <para>
	    <informalexample>
	      <screen> 4850 ??  I      0:00.09 /usr/libexec/getty V19200
		ttyd0</screen>
	    </informalexample>
	  </para>
	  
	  <para>When a user dials the modem's line and the modems connect, the
	    <acronym>CD</acronym> line is asserted by the modem.  The kernel
	    notices that carrier has been detected and completes <emphasis
	      remap=tt>getty</emphasis>'s open of the port.  <emphasis
	      remap=tt>getty</emphasis> sends a <emphasis
	      remap=tt>login:</emphasis> prompt at the specified initial line
	    speed. <emphasis remap=tt>getty</emphasis> watches to see if
	    legitimate characters are received, and, in a typical
	    configuration, if it finds junk (probably due to the modem's
	    connection speed being different than <emphasis
	      remap=tt>getty</emphasis>'s speed), <emphasis
	      remap=tt>getty</emphasis> tries adjusting the line speeds until
	    it receives reasonable characters.</para>
	  
	  <para>We hope <emphasis remap=tt>getty</emphasis> finds the correct
	    speed and the user sees a <emphasis remap=tt>login:</emphasis>
	    prompt.  After the user enters his/her login name, <emphasis
	      remap=tt>getty</emphasis> executes
	    <filename>/usr/bin/login</filename>, which completes the login by
	    asking for the user's password and then starting the user's
	    shell.</para>
	  
	  <para>Let's dive into the configuration...</para>
	  
	</sect2>
	
	<sect2>
	  <title>Kernel Configuration</title>
	  
	  <para>FreeBSD kernels typically come prepared to search for four
	    serial ports, known in the PC-DOS world as <emphasis
	      remap=tt>COM1:</emphasis>, <emphasis remap=tt>COM2:</emphasis>,
	    <emphasis remap=tt>COM3:</emphasis>, and <emphasis
	      remap=tt>COM4:</emphasis>.  FreeBSD can presently also handle
	    ``dumb'' multiport serial interface cards, such as the Boca Board
	    1008 and 2016 (please see the manual page <emphasis
	      remap=tt>sio(4)</emphasis> for kernel configuration information
	    if you have a multiport serial card).  The default kernel only
	    looks for the standard COM ports, though.</para>
	  
	  <para>To see if your kernel recognizes any of your serial ports,
	    watch for messages while the kernel is booting, or use the
	    <filename>/sbin/dmesg</filename> command to replay the kernel's
	    boot messages.  In particular, look for messages that start with
	    the characters <emphasis remap=tt>sio</emphasis>. Hint: to view
	    just the messages that have the word <emphasis
	      remap=tt>sio</emphasis>, use the command: </para>
	  
	  <para>
	    <informalexample>
	      <screen>/sbin/dmesg | grep 'sio'</screen>
	    </informalexample>
	  </para>
	  
	  <para>For example, on a system with four serial ports, these are the
	    serial-port specific kernel boot messages:</para>
	  
	  <para>
	    <informalexample>
	      <screen>sio0 at 0x3f8-0x3ff irq 4 on isa sio0: type 16550A sio1
		at 0x2f8-0x2ff irq 3 on isa sio1: type 16550A sio2 at
		0x3e8-0x3ef irq 5 on isa sio2: type 16550A sio3 at 0x2e8-0x2ef
		irq 9 on isa sio3: type 16550A</screen>
	    </informalexample>
	  </para>
	  
	  <para>If your kernel does not recognize all of your serial ports,
	    you will probably need to configure a custom FreeBSD kernel for
	    your system.</para>
	  
	  <para>Please see the BSD System Manager's Manual chapter on
	    ``Building Berkeley Kernels with Config'' [the source for which is
	    in <filename>/usr/src/share/doc/smm</filename>] and ``FreeBSD
	    Configuration Options'' [in <filename>/sys/conf/options</filename>
	    and in
	    <filename>/sys/<replaceable>arch</replaceable>/conf/options.<replaceable>arch</replaceable></filename>, with <emphasis>arch</emphasis> for example being <emphasis remap=tt>i386</emphasis>] for more information on configuring and building kernels.  You may have to unpack the kernel source distribution if have not installed the system sources already (<filename>srcdist/srcsys.??</filename> in FreeBSD 1.1, <filename>srcdist/sys.??</filename> in FreeBSD 1.1.5.1, or the entire source distribution in FreeBSD 2.0) to be able to configure and build kernels.</para>
	  
	  <para>Create a kernel configuration file for your system (if you
	    have not already) by <emphasis remap=tt>cd</emphasis>ing to
	    <filename>/sys/i386/conf</filename>.  Then, if you are creating a
	    new custom configuration file, copy the file GENERICAH (or
	    GENERICBT, if you have a BusTek SCSI controller on FreeBSD 1.x) to
	    <acronym>YOURSYS</acronym>, where <acronym>YOURSYS</acronym> is
	    the name of your system, but in upper-case letters.  Edit the
	    file, and change the device lines:</para>
	  
	  <para>
	    <informalexample>
	      <screen>device		sio0	at isa? port "IO_COM1" tty irq
		4 vector siointr device		sio1	at isa? port "IO_COM2"
		tty irq 3 vector siointr device		sio2	at isa? port
		"IO_COM3" tty irq 5 vector siointr device		sio3
		at isa? port "IO_COM4" tty irq 9 vector siointr</screen>
	    </informalexample>
	  </para>
	  
	  <para>You can comment-out or completely remove lines for devices you
	    do not have.  If you have a multiport serial board, such as the
	    Boca Board BB2016, please see the <emphasis
	      remap=tt>sio(4)</emphasis> man page for complete information on
	    how to write configuration lines for multiport boards.  Be careful
	    if you are using a configuration file that was previously used for
	    a different version of FreeBSD because the device flags have
	    changed between versions.</para>
	  
	  <para>Note that <emphasis remap=tt>port "IO_COM1"</emphasis> is a
	    substitution for <literal>port 0x3f8</literal>,
	    <symbol>IO_COM2</symbol> is <literal>0x2f8</literal>,
	    <symbol>IO_COM3</symbol> is <literal>0x3e8</literal>, and
	    <symbol>IO_COM4</symbol> is <literal>0x2e8</literal>, which are
	    fairly common port addresses for their respective serial ports;
	    interrupts 4, 3, 5, and 9 are fairly common interrupt request
	    lines.  Also note that regular serial ports <emphasis
	      remap=bf>cannot</emphasis> share interrupts on ISA-bus PCs
	    (multiport boards have on-board electronics that allow all the
	    16550A's on the board to share one or two interrupt request
	    lines).</para>
	  
	  <para>When you are finished adjusting the kernel configuration file,
	    use the program <emphasis remap=tt>config</emphasis> as documented
	    in ``Building Berkeley Kernels with Config'' and the
	    <command>config(8)</command> manual page to prepare a kernel
	    building directory, then build, install, and test the new
	    kernel.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Device Special Files</title>
	  
	  <para>Most devices in the kernel are accessed through ``device
	    special files'', which are located in the
	    <filename>/dev</filename> directory.  The <emphasis
	      remap=tt>sio</emphasis> devices are accessed through the
	    <filename>/dev/ttyd?</filename> (dial-in) and
	    <filename>/dev/cua0?</filename> (call-out) devices.  On FreeBSD
	    version 1.1.5 and higher, there are also initialization devices
	    (<filename>/dev/ttyid?</filename> and
	    <filename>/dev/cuai0?</filename>) and locking devices
	    (<filename>/dev/ttyld?</filename> and
	    <filename>/dev/cual0?</filename>).  The initialization devices are
	    used to initialize communications port parameters each time a port
	    is opened, such as <emphasis remap=tt>crtscts</emphasis> for
	    modems which use <filename>CTS/RTS</filename> signaling for flow
	    control.  The locking devices are used to lock flags on ports to
	    prevent users or programs changing certain parameters; see the
	    manual pages <emphasis remap=tt>termios(4)</emphasis>, <emphasis
	      remap=tt>sio(4)</emphasis>, and <command>stty(1)</command> for
	    information on the terminal settings, locking &amp; initializing
	    devices, and setting terminal options, respectively.</para>
	  
	  
	  <sect3>
	    <title>Making Device Special Files</title>
	    
	    <para>A shell script called <acronym>MAKEDEV</acronym> in the
	      <filename>/dev</filename> directory manages the device special
	      files.  (The manual page for <command>MAKEDEV(8)</command> on
	      FreeBSD 1.1.5 is fairly bogus in its discussion of
	      <acronym>COM</acronym> ports, so ignore it.)  To use
	      <acronym>MAKEDEV</acronym> to make dialup device special files
	      for <emphasis remap=tt>COM1:</emphasis> (port 0), <emphasis
		remap=tt>cd</emphasis> to <filename>/dev</filename> and issue
	      the command <emphasis remap=tt>MAKEDEV ttyd0</emphasis>.
	      Likewise, to make dialup device special files for <emphasis
		remap=tt>COM2:</emphasis> (port 1), use <emphasis
		remap=tt>MAKEDEV ttyd1</emphasis>.</para>
	    
	    <para><acronym>MAKEDEV</acronym> not only creates the
	      <filename>/dev/ttyd?</filename> device special files, but also
	      creates the <filename>/dev/cua0?</filename> (and all of the
	      initializing and locking special files under FreeBSD 1.1.5 and
	      up) and removes the hardwired terminal special file
	      <filename>/dev/tty0?</filename>, if it exists. </para>
	    
	    <para>After making new device special files, be sure to check the
	      permissions on the files (especially the
	      <filename>/dev/cua*</filename> files) to make sure that only
	      users who should have access to those device special files can
	      read &amp; write on them - you probably do not want to allow
	      your average user to use your modems to dialout.  The default
	      permissions on the <filename>/dev/cua*</filename> files should
	      be sufficient:</para>
	    
	    <para>
	      <informalexample>
		<screen>crw-rw----    1 uucp     dialer    28, 129 Feb 15
		  14:38 /dev/cua01 crw-rw----    1 uucp     dialer    28, 161
		  Feb 15 14:38 /dev/cuai01 crw-rw----    1 uucp     dialer
		  28, 193 Feb 15 14:38 /dev/cual01</screen>
	      </informalexample>
	    </para>
	    
	    <para>These permissions allow the user <emphasis
		remap=tt>uucp</emphasis> and users in the group <emphasis
		remap=tt>dialer</emphasis> to use the call-out devices.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title>Configuration Files</title>
	  
	  <para>There are three system configuration files in the
	    <filename>/etc</filename> directory that you will probably need to
	    edit to allow dialup access to your FreeBSD system.  The first,
	    <filename>/etc/gettytab</filename>, contains configuration
	    information for the <filename>/usr/libexec/getty</filename>
	    daemon. Second, <filename>/etc/ttys</filename> holds information
	    that tells <filename>/sbin/init</filename> what <emphasis
	      remap=tt>tty</emphasis> devices should have <emphasis
	      remap=tt>getty</emphasis> processes running on them.  Lastly,
	    you can place port initialization commands in the
	    <filename>/etc/rc.serial</filename> script if you have FreeBSD
	    1.1.5.1 or higher; otherwise, you can initialize ports in the
	    <filename>/etc/rc.local</filename> script.</para>
	  
	  <para>There are two schools of thought regarding dialup modems on
	    UNIX.  One group likes to configure their modems and system so
	    that no matter at what speed a remote user dials in, the local
	    computer-to-modem RS-232 interface runs at a locked speed.  The
	    benefit of this configuration is that the remote user always sees
	    a system login prompt immediately. The downside is that the system
	    does not know what a user's true data rate is, so full-screen
	    programs like Emacs will not adjust their screen-painting methods
	    to make their response better for slower connections.</para>
	  
	  <para>The other school configures their modems' RS-232 interface to
	    vary its speed based on the remote user's connection speed.  For
	    example, V.32bis (14.4 Kbps) connections to the modem might make
	    the modem run its RS-232 interface at 19.2 Kbps, while 2400 bps
	    connections make the modem's RS-232 interface run at 2400 bps.
	    Because <emphasis remap=tt>getty</emphasis> does not understand
	    any particular modem's connection speed reporting, <emphasis
	      remap=tt>getty</emphasis> gives a <emphasis
	      remap=tt>login:</emphasis> message at an initial speed and
	    watches the characters that come back in response.  If the user
	    sees junk, it is assumed that they know they should press the
	    <emphasis remap=tt>&lt;Enter&gt;</emphasis> key until they see a
	    recognizable prompt.  If the data rates do not match, <emphasis
	      remap=tt>getty</emphasis> sees anything the user types as
	    ``junk'', tries going to the next speed and gives the <emphasis
	      remap=tt>login:</emphasis> prompt again.  This procedure can
	    continue ad nauseum, but normally only takes a keystroke or two
	    before the user sees a good prompt. Obviously, this login sequence
	    does not look as clean as the former ``locked-speed'' method, but
	    a user on a low-speed connection should receive better interactive
	    response from full-screen programs.</para>
	  
	  <para>The author will try to give balanced configuration
	    information, but is biased towards having the modem's data rate
	    follow the connection rate.</para>
	  
	  
	  <sect3>
	    <title>/etc/gettytab</title>
	    
	    <para><filename>/etc/gettytab</filename> is a <emphasis
		remap=tt>termcap(5)</emphasis>-style file of configuration
	      information for <command>getty(8)</command>.  Please see the
	      <emphasis remap=tt>gettytab(5)</emphasis> manual page for
	      complete information on the format of the file and the list of
	      capabilities.</para>
	    
	    
	    <sect4>
	      <title>Locked-Speed Config</title>
	      
	      <para>If you are locking your modem's data communications rate
		at a particular speed, you probably will not need to make any
		changes to <filename>/etc/gettytab</filename>.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Matching-Speed Config</title>
	      
	      <para>You will need to setup an entry in
		<filename>/etc/gettytab</filename> to give <emphasis
		  remap=tt>getty</emphasis> information about the speeds you
		wish to use for your modem.  If you have a 2400 bps modem, you
		can probably use the existing <emphasis
		  remap=tt>D2400</emphasis> entry.  This entry already exists
		in the FreeBSD 1.1.5.1 <emphasis remap=tt>gettytab</emphasis>
		file, so you do not need to add it unless it is missing under
		your version of FreeBSD:</para>
	      
	      <para>
		<informalexample>
		  <screen># # Fast dialup terminals, 2400/1200/300 rotary (can
		    start either way) # D2400|d2400|Fast-Dial-2400:\
		    :nx=D1200:tc=2400-baud: 3|D1200|Fast-Dial-1200:\
		    :nx=D300:tc=1200-baud: 5|D300|Fast-Dial-300:\
		    :nx=D2400:tc=300-baud:</screen>
		</informalexample>
	      </para>
	      
	      <para>If you have a higher speed modem, you will probably need
		to add an entry in <filename>/etc/gettytab</filename>; here is
		an entry you could use for a 14.4 Kbps modem with a top
		interface speed of 19.2 Kbps:</para>
	      
	      <para>
		<informalexample>
		  <screen># # Additions for a V.32bis Modem # um|V300|High
		    Speed Modem at 300,8-bit:\ :nx=V19200:tc=std.300:
		    un|V1200|High Speed Modem at 1200,8-bit:\
		    :nx=V300:tc=std.1200: uo|V2400|High Speed Modem at
		    2400,8-bit:\ :nx=V1200:tc=std.2400: up|V9600|High Speed
		    Modem at 9600,8-bit:\ :nx=V2400:tc=std.9600:
		    uq|V19200|High Speed Modem at 19200,8-bit:\
		    :nx=V9600:tc=std.19200:</screen>
		</informalexample>
	      </para>
	      
	      <para>On FreeBSD 1.1.5 and later, this will result in 8-bit, no
		parity connections.  Under FreeBSD 1.1, add <emphasis
		  remap=tt>:np:</emphasis> parameters to the <emphasis
		  remap=tt>std.<replaceable>xxx</replaceable></emphasis>
		entries at the top of the file for 8 bits, no parity;
		otherwise, the default is 7 bits, even parity.</para>
	      
	      <para>The example above starts the communications rate at 19.2
		Kbps (for a V.32bis connection), then cycles through 9600 bps
		(for V.32), 2400 bps, 1200 bps, 300 bps, and back to 19.2
		Kbps.  Communications rate cycling is implemented with the
		<literal>nx=</literal> (<emphasis remap=bf>next
		  table</emphasis>) capability. Each of the lines uses a
		<literal>tc=</literal> (<emphasis remap=bf>table
		  continuation</emphasis>) entry to pick up the rest of the
		``standard'' settings for a particular data rate.</para>
	      
	      <para>If you have a 28.8 Kbps modem and/or you want to take
		advantage of compression on a 14.4 Kbps modem, you need to use
		a higher communications rate than 19.2 Kbps.  Here is an
		example of a <emphasis remap=tt>gettytab</emphasis> entry
		starting a 57.6 Kbps:</para>
	      
	      <para>
		<informalexample>
		  <screen># # Additions for a V.32bis or V.34 Modem # Starting
		    at 57.6 Kbps # vm|VH300|Very High Speed Modem at
		    300,8-bit:\ :nx=VH57600:tc=std.300: vn|VH1200|Very High
		    Speed Modem at 1200,8-bit:\ :nx=VH300:tc=std.1200:
		    vo|VH2400|Very High Speed Modem at 2400,8-bit:\
		    :nx=VH1200:tc=std.2400: vp|VH9600|Very High Speed Modem at
		    9600,8-bit:\ :nx=VH2400:tc=std.9600: vq|VH57600|Very High
		    Speed Modem at 57600,8-bit:\
		    :nx=VH9600:tc=std.57600:</screen>
		</informalexample>
	      </para>
	      
	      <para>If you have a slow CPU or a heavily loaded system and you
		do not have 16550A-based serial ports, you may receive sio
		``silo'' errors at 57.6 Kbps.</para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3
	    id="dialup-ttys">
	    <title>/etc/ttys</title>
	    
	    <para><filename>/etc/ttys</filename> is the list of <emphasis
		remap=tt>ttys</emphasis> for <emphasis
		remap=tt>init</emphasis> to monitor.
	      <filename>/etc/ttys</filename> also provides security
	      information to <emphasis remap=tt>login</emphasis> (user
	      <emphasis remap=tt>root</emphasis> may only login on ttys marked
	      <emphasis remap=tt>secure</emphasis>).  See the manual page for
	      <emphasis remap=tt>ttys(5)</emphasis> for more
	      information.</para>
	    
	    <para>You will need to either modify existing lines in
	      <filename>/etc/ttys</filename> or add new lines to make
	      <emphasis remap=tt>init</emphasis> run <emphasis
		remap=tt>getty</emphasis> processes automatically on your new
	      dialup ports.  The general format of the line will be the same,
	      whether you are using a locked-speed or matching-speed
	      configuration: </para>
	    
	    <para>
	      <informalexample>
		<screen>ttyd0   "/usr/libexec/getty xxx"   dialup on</screen>
	      </informalexample>
	    </para>
	    
	    <para>The first item in the above line is the device special file
	      for this entry - <emphasis remap=tt>ttyd0</emphasis> means
	      <filename>/dev/ttyd0</filename> is the file that this <emphasis
		remap=tt>getty</emphasis> will be watching.  The second item,
	      <filename>"/usr/libexec/getty
		<replaceable>xxx</replaceable>"</filename>
	      (<emphasis>xxx</emphasis> will be replaced by the initial
	      <emphasis remap=tt>gettytab</emphasis> capability) is the
	      process <emphasis remap=tt>init</emphasis> will run on the
	      device.  The third item, <emphasis remap=tt>dialup</emphasis>,
	      is the default terminal type.  The fourth parameter, <emphasis
		remap=tt>on</emphasis>, indicates to <emphasis
		remap=tt>init</emphasis> that the line is operational.  There
	      can be a fifth parameter, <emphasis remap=tt>secure</emphasis>,
	      but it should only be used for terminals which are physically
	      secure (such as the system console).</para>
	    
	    <para>The default terminal type (<emphasis
		remap=tt>dialup</emphasis> in the example above) may depend on
	      local preferences.  <emphasis remap=tt>dialup</emphasis> is the
	      traditional default terminal type on dialup lines so that users
	      may customize their login scripts to notice when the terminal is
	      <emphasis remap=tt>dialup</emphasis> and automatically adjust
	      their terminal type.  However, the author finds it easier at his
	      site to specify <emphasis remap=tt>vt102</emphasis> as the
	      default terminal type, since the users just use VT102 emulation
	      on their remote systems.</para>
	    
	    <para>After you have made changes to
	      <filename>/etc/ttys</filename>, you may send the <emphasis
		remap=tt>init</emphasis> process a <acronym>HUP</acronym>
	      signal to re-read the file.  You can use the command</para>
	    
	    <para>
	      <informalexample>
		<screen>kill -1 1</screen>
	      </informalexample>
	    </para>
	    
	    <para>to send the signal.  If this is your first time setting up
	      the system, though, you may want to wait until your modem(s) are
	      properly configured and connected before signaling <emphasis
		remap=tt>init</emphasis>.</para>
	    
	    
	    <sect4>
	      <title>Locked-Speed Config</title>
	      
	      <para>For a locked-speed configuration, your <emphasis
		  remap=tt>ttys</emphasis> entry needs to have a fixed-speed
		entry provided to <emphasis remap=tt>getty</emphasis>.  For a
		modem whose port speed is locked at 19.2 Kbps, the <emphasis
		  remap=tt>ttys</emphasis> entry might look like this: </para>
	      
	      <para>
		<informalexample>
		  <screen>ttyd0   "/usr/libexec/getty std.19200"   dialup
		    on</screen>
		</informalexample>
	      </para>
	      
	      <para>If your modem is locked at a different data rate,
		substitute the appropriate name for the <emphasis
		  remap=tt>std.<replaceable>speed</replaceable></emphasis>
		entry for <emphasis remap=tt>std.19200</emphasis> from
		<filename>/etc/gettytab</filename> for your modem's data
		rate.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Matching-Speed Config</title>
	      
	      <para>In a matching-speed configuration, your <emphasis
		  remap=tt>ttys</emphasis> entry needs to reference the
		appropriate beginning ``auto-baud'' (sic) entry in
		<filename>/etc/gettytab</filename>.  For example, if you added
		the above suggested entry for a matching-speed modem that
		starts at 19.2 Kbps (the <emphasis
		  remap=tt>gettytab</emphasis> entry containing the <emphasis
		  remap=tt>V19200</emphasis> starting point), your <emphasis
		  remap=tt>ttys</emphasis> entry might look like this:</para>
	      
	      <para>
		<informalexample>
		  <screen>ttyd0   "/usr/libexec/getty V19200"   dialup
		    on</screen>
		</informalexample>
	      </para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title>/etc/rc.serial or /etc/rc.local</title>
	    
	    <para>High-speed modems, like V.32, V.32bis, and V.34 modems, need
	      to use hardware (<filename>RTS/CTS</filename>) flow control.
	      You can add <emphasis remap=tt>stty</emphasis> commands to
	      <filename>/etc/rc.serial</filename> on FreeBSD 1.1.5.1 and up,
	      or <filename>/etc/rc.local</filename> on FreeBSD 1.1, to set the
	      hardware flow control flag in the FreeBSD kernel for the modem
	      ports.</para>
	    
	    <para>For example, on a sample FreeBSD 1.1.5.1 system,
	      <filename>/etc/rc.serial</filename> reads:</para>
	    
	    <para>
	      <informalexample>
		<screen>#!/bin/sh # # Serial port initial configuration stty
		  -f /dev/ttyid1 crtscts stty -f /dev/cuai01 crtscts</screen>
	      </informalexample>
	    </para>
	    
	    <para>which sets the <emphasis remap=tt>termios</emphasis> flag
	      <emphasis remap=tt>crtscts</emphasis> on serial port #1's
	      (<emphasis remap=tt>COM2:</emphasis>) dialin and dialout
	      initialization devices.</para>
	    
	    <para>On an old FreeBSD 1.1 system, these entries were added to
	      /etc/rc.local to set the <emphasis remap=tt>crtscts</emphasis>
	      flag on the devices:</para>
	    
	    <para>
	      <informalexample>
		<screen># Set serial ports to use RTS/CTS flow control stty -f
		  /dev/ttyd0 crtscts stty -f /dev/ttyd1 crtscts stty -f
		  /dev/ttyd2 crtscts stty -f /dev/ttyd3 crtscts</screen>
	      </informalexample>
	    </para>
	    
	    <para>Since there is no initialization device special file on
	      FreeBSD 1.1, one has to just set the flags on the sole device
	      special file and hope the flags are not cleared by a
	      miscreant.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title>Modem Settings</title>
	  
	  <para>If you have a modem whose parameters may be permanently set in
	    non-volatile RAM, you will need to use a terminal program (such as
	    Telix under PC-DOS or <emphasis remap=tt>tip</emphasis> under
	    FreeBSD) to set the parameters. Connect to the modem using the
	    same communications speed as the initial speed <emphasis
	      remap=tt>getty</emphasis> will use and configure the modem's
	    non-volatile RAM to match these requirements:</para>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para> <acronym>CD</acronym> asserted when connected
		</para>
	      </listitem>
	      
	      <listitem>
		<para> <acronym>DTR</acronym> asserted for operation; dropping
		  DTR hangs up line &amp; resets modem
		</para>
	      </listitem>
	      
	      <listitem>
		<para> <acronym>CTS</acronym> transmitted data flow control
		</para>
	      </listitem>
	      
	      <listitem>
		<para> Disable <filename>XON/XOFF</filename> flow control
		</para>
	      </listitem>
	      
	      <listitem>
		<para> <acronym>RTS</acronym> received data flow control
		</para>
	      </listitem>
	      
	      <listitem>
		<para> Quiet mode (no result codes)
		</para>
	      </listitem>
	      
	      <listitem>
		<para> No command echo
		</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para>Please read the documentation for your modem to find out what
	    commands and/or DIP switch settings you need to give it.</para>
	  
	  <para>For example, to set the above parameters on a USRobotics
	    Sportster 14,400 external modem, one could give these commands to
	    the modem:</para>
	  
	  <para>
	    <informalexample>
	      <screen>ATZ AT&amp;C1&amp;D2&amp;H1&amp;I0&amp;R2&amp;W</screen>
	    </informalexample>
	  </para>
	  
	  <para>You might also want to take this opportunity to adjust other
	    settings in the modem, such as whether it will use V.42bis and/or
	    MNP5 compression.</para>
	  
	  <para>The USR Sportster 14,400 external modem also has some DIP
	    switches that need to be set; for other modems, perhaps you can
	    use these settings as an example:</para>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para> Switch 1: UP - DTR Normal
		</para>
	      </listitem>
	      
	      <listitem>
		<para> Switch 2: Do not care (Verbal Result Codes/Numeric
		  Result Codes)
		</para>
	      </listitem>
	      
	      <listitem>
		<para> Switch 3: UP - Suppress Result Codes
		</para>
	      </listitem>
	      
	      <listitem>
		<para> Switch 4: DOWN - No echo, offline commands
		</para>
	      </listitem>
	      
	      <listitem>
		<para> Switch 5: UP - Auto Answer
		</para>
	      </listitem>
	      
	      <listitem>
		<para> Switch 6: UP - Carrier Detect Normal
		</para>
	      </listitem>
	      
	      <listitem>
		<para> Switch 7: UP - Load NVRAM Defaults
		</para>
	      </listitem>
	      
	      <listitem>
		<para> Switch 8: Do not care (Smart Mode/Dumb Mode)
		</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para>Result codes should be disabled/suppressed for dialup modems
	    to avoid problems that can occur if <emphasis
	      remap=tt>getty</emphasis> mistakenly gives a <emphasis
	      remap=tt>login:</emphasis> prompt to a modem that is in command
	    mode and the modem echoes the command or returns a result code.  I
	    have heard this sequence can result in a extended, silly
	    conversation between <emphasis remap=tt>getty</emphasis> and the
	    modem.</para>
	  
	  
	  <sect3>
	    <title>Locked-speed Config</title>
	    
	    <para>For a locked-speed configuration, you will need to configure
	      the modem to maintain a constant modem-to-computer data rate
	      independent of the communications rate.  On a USR Sportster
	      14,400 external modem, these commands will lock the
	      modem-to-computer data rate at the speed used to issue the
	      commands:</para>
	    
	    <para>
	      <informalexample>
		<screen>ATZ AT&amp;B1&amp;W</screen>
	      </informalexample>
	    </para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Matching-speed Config</title>
	    
	    <para>For a variable-speed configuration, you will need to
	      configure your modem to adjust its serial port data rate to
	      match the incoming call rate.  On a USR Sportster 14,400
	      external modem, these commands will lock the modem's
	      error-corrected data rate to the speed used to issue the
	      commands, but allow the serial port rate to vary for
	      non-error-corrected connections:</para>
	    
	    <para>
	      <informalexample>
		<screen>ATZ AT&amp;B2&amp;W</screen>
	      </informalexample>
	    </para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Checking the Modem's Configuration</title>
	    
	    <para>Most high-speed modems provide commands to view the modem's
	      current operating parameters in a somewhat human-readable
	      fashion.  On the USR Sportster 14,400 external modems, the
	      command <emphasis remap=tt>ATI5</emphasis> displays the settings
	      that are stored in the non-volatile RAM.  To see the true
	      operating parameters of the modem (as influenced by the USR's
	      DIP switch settings), use the commands <acronym>ATZ</acronym>
	      and then <emphasis remap=tt>ATI4</emphasis>.</para>
	    
	    <para>If you have a different brand of modem, check your modem's
	      manual to see how to double-check your modem's configuration
	      parameters.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title>Troubleshooting</title>
	  
	  <para>Here are a few steps you can follow to check out the dialup
	    modem on your system.</para>
	  
	  
	  <sect3>
	    <title>Checking out the FreeBSD system</title>
	    
	    <para>Hook up your modem to your FreeBSD system, boot the system,
	      and, if your modem has status indication lights, watch to see
	      whether the modem's <acronym>DTR</acronym> indicator lights when
	      the <emphasis remap=tt>login:</emphasis> prompt appears on the
	      system's console - if it lights up, that should mean that
	      FreeBSD has started a <emphasis remap=tt>getty</emphasis>
	      process on the appropriate communications port and is waiting
	      for the modem to accept a call.</para>
	    
	    <para>If the <acronym>DTR</acronym> indicator doesn't light, login
	      to the FreeBSD system through the console and issue a <emphasis
		remap=tt>ps ax</emphasis> to see if FreeBSD is trying to run a
	      <emphasis remap=tt>getty</emphasis> process on the correct port.
	      You should see a lines like this among the processes
	      displayed:</para>
	    
	    <para>
	      <informalexample>
		<screen>  114 ??  I      0:00.10 /usr/libexec/getty V19200
		  ttyd0 115 ??  I      0:00.10 /usr/libexec/getty V19200
		  ttyd1</screen>
	      </informalexample>
	    </para>
	    
	    <para>If you see something different, like this:</para>
	    
	    <para>
	      <informalexample>
		<screen>  114 d0  I      0:00.10 /usr/libexec/getty V19200
		  ttyd0 ^
		</screen>
	      </informalexample>
	    </para>
	    
	    <para>and the modem has not accepted a call yet, this means that
	      <emphasis remap=tt>getty</emphasis> has completed its open on
	      the communications port.  This could indicate a problem with the
	      cabling or a mis-configured modem, because <emphasis
		remap=tt>getty</emphasis> should not be able to open the
	      communications port until <acronym>CD</acronym> (carrier detect)
	      has been asserted by the modem.</para>
	    
	    <para>If you do not see any <emphasis remap=tt>getty</emphasis>
	      processes waiting to open the desired <emphasis
		remap=tt>ttyd?</emphasis> port, double-check your entries in
	      <filename>/etc/ttys</filename> to see if there are any mistakes
	      there.  Also, check the log file
	      <filename>/var/log/messages</filename> to see if there are any
	      log messages from <emphasis remap=tt>init</emphasis> or
	      <emphasis remap=tt>getty</emphasis> regarding any problems.  If
	      there are any messages, triple-check the configuration files
	      <filename>/etc/ttys</filename> and
	      <filename>/etc/gettytab</filename>, as well as the appropriate
	      device special files <filename>/dev/ttyd?</filename>, for any
	      mistakes, missing entries, or missing device special
	      files.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Try Dialing In</title>
	    
	    <para>Try dialing into the system; be sure to use 8 bits, no
	      parity, 1 stop bit on the remote system.  If you do not get a
	      prompt right away, or get garbage, try pressing <emphasis
		remap=tt>&lt;Enter&gt;</emphasis> about once per second.  If
	      you still do not see a <emphasis remap=tt>login:</emphasis>
	      prompt after a while, try sending a <acronym>BREAK</acronym>.
	      If you are using a high-speed modem to do the dialing, try
	      dialing again after locking the dialing modem's interface speed
	      (via <emphasis remap=tt>AT&amp;B1</emphasis> on a USR Sportster,
	      for example).</para>
	    
	    <para>If you still cannot get a <emphasis
		remap=tt>login:</emphasis> prompt, check
	      <filename>/etc/gettytab</filename> again and double-check
	      that</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para> The initial capability name specified in
		    <filename>/etc/ttys</filename> for the line matches a name
		    of a capability in <filename>/etc/gettytab</filename>
		  </para>
		</listitem>
		
		<listitem>
		  <para> Each <literal>nx=</literal> entry matches another
		    <emphasis remap=tt>gettytab</emphasis> capability name
		  </para>
		</listitem>
		
		<listitem>
		  <para> Each <literal>tc=</literal> entry matches another
		    <emphasis remap=tt>gettytab</emphasis> capability name
		  </para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>If you dial but the modem on the FreeBSD system will not
	      answer, make sure that the modem is configured to answer the
	      phone when <acronym>DTR</acronym> is asserted.  If the modem
	      seems to be configured correctly, verify that the
	      <acronym>DTR</acronym> line is asserted by checking the modem's
	      indicator lights (if it has any).</para>
	    
	    <para>If you have gone over everything several times and it still
	      does not work, take a break and come back to it later.  If it
	      still does not work, perhaps you can send an electronic mail
	      message to the &a.questions;describing your modem and your
	      problem, and the good folks on the list will try to help.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title>Acknowledgments</title>
	  
	  <para>Thanks to these people for comments and advice:</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>&a.kelly;</term>
		<listitem>
		  <para>for a number of good suggestions</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="dialout">
	<title>Dialout Service</title>
	
	<para><emphasis>Information integrated from FAQ.</emphasis></para>
	
	<para>The following are tips to getting your host to be able to
	  connect over the modem to another computer.  This is appropriate for
	  establishing a terminal session with a remote host.  </para>
	
	<para>This is useful to log onto a BBS.</para>
	
	<para>This kind of connection can be extremely helpful to get a file
	  on the Internet if you have problems with PPP.  If you need to ftp
	  something and PPP is broken, use the terminal session to ftp it.
	  Then use zmodem to transfer it to your machine. </para>
	
	
	<sect2>
	  <title>Why cannot I run <emphasis remap=tt>tip</emphasis> or
	    <emphasis remap=tt>cu</emphasis>?</title>
	  
	  <para>On your system, the programs <emphasis remap=tt>tip</emphasis>
	    and <emphasis remap=tt>cu</emphasis> are probably executable only
	    by <emphasis remap=tt>uucp</emphasis> and group <emphasis
	      remap=tt>dialer</emphasis>.  You can use the group <emphasis
	      remap=tt>dialer</emphasis> to control who has access to your
	    modem or remote systems.  Just add yourself to group
	    dialer.</para>
	  
	  <para>Alternatively, you can let everyone on your system run
	    <emphasis remap=tt>tip</emphasis> and <emphasis
	      remap=tt>cu</emphasis> by typing: <literallayout>
	      chmod 4511 /usr/bin/tip </literallayout> You do not have to run
	    this command for <emphasis remap=tt>cu</emphasis>, since <emphasis
	      remap=tt>cu</emphasis> is just a hard link to <emphasis
	      remap=tt>tip</emphasis>.</para>
	  
	</sect2>
	
	<sect2>
	  <title>My stock Hayes modem is not supported, what can I do?</title>
	  
	  <para>Actually, the man page for <emphasis remap=tt>tip</emphasis>
	    is out of date.  There is a generic Hayes dialer already built in.
	    Just use ``<literal>at=hayes</literal>'' in your
	    <filename>/etc/remote</filename> file.</para>
	  
	  <para>The Hayes driver is not smart enough to recognize some of the
	    advanced features of newer modems--messages like
	    <acronym>BUSY</acronym>, <emphasis remap=tt>NO
	      DIALTONE</emphasis>, or <emphasis remap=tt>CONNECT
	      115200</emphasis> will just confuse it. You should turn those
	    messages off when you use <emphasis remap=tt>tip</emphasis> (using
	    <emphasis remap=tt>ATX0&amp;W</emphasis>).</para>
	  
	  <para>Also, the dial timeout for <emphasis remap=tt>tip</emphasis>
	    is 60 seconds.  Your modem should use something less, or else tip
	    will think there is a communication problem.  Try
	    <literal>ATS7=45&amp;W</literal>.</para>
	  
	  <para>Actually, as shipped <emphasis remap=tt>tip</emphasis> does
	    not yet support it fully. The solution is to edit the file
	    <filename>tipconf.h</filename> in the directory
	    <filename>/usr/src/usr.bin/tip/tip</filename> Obviously you need
	    the source distribution to do this.</para>
	  
	  <para>Edit the line ``<emphasis remap=tt>#define HAYES
	      0</emphasis>'' to ``<emphasis remap=tt>#define HAYES
	      1</emphasis>''. Then ``<emphasis remap=tt>make</emphasis>'' and
	    ``<emphasis remap=tt>make install</emphasis>''. Everything works
	    nicely after that.</para>
	  
	</sect2>
	
	<sect2
	  id="direct-at">
	  <title>How am I expected to enter these AT commands?</title>
	  
	  <para>Make what is called a ``<emphasis remap=tt>direct</emphasis>''
	    entry in your <filename>/etc/remote</filename> file.  For example,
	    if your modem is hooked up to the first serial port,
	    <filename>/dev/cuaa0</filename>, then put in the following line:
	    <literallayout>            cuaa0:dv=/dev/cuaa0:br#19200:pa=none
	    </literallayout> Use the highest bps rate your modem supports in
	    the br capability.  Then, type ``<emphasis remap=tt>tip
	      cuaa0</emphasis>'' and you will be connected to your
	    modem.</para>
	  
	  <para>If there is no <filename>/dev/cuaa0</filename> on your system,
	    do this: <literallayout>            cd /dev MAKEDEV cuaa0
	    </literallayout>
	  </para>
	  
	  <para>Or use cu as root with the following command: <literallayout>
	      cu -l``line'' -s``speed'' </literallayout> with line being the
	    serial port (e.g.<filename>/dev/cuaa0</filename>) and speed being
	    the speed (e.g.<emphasis remap=tt>57600</emphasis>). When you are
	    done entering the AT commands hit <emphasis remap=tt>~.</emphasis>
	    to exit.</para>
	  
	</sect2>
	
	<sect2>
	  <title>The <email>@</email> sign for the pn capability does not
	    work!</title>
	  
	  <para>The <email>@</email> sign in the phone number capability tells
	    tip to look in <filename>/etc/phones</filename> for a phone
	    number.  But the <email>@</email> sign is also a special character
	    in capability files like <filename>/etc/remote</filename>.  Escape
	    it with a backslash: <literallayout>            pn=\@
	    </literallayout>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>How can I dial a phone number on the command line?</title>
	  
	  <para>Put what is called a ``<emphasis remap=tt>generic</emphasis>''
	    entry in your <filename>/etc/remote</filename> file.  For example:
	    <literallayout>            tip115200|Dial any phone number at
	      115200 bps:\ :dv=/dev/cuaa0:br#115200:at=hayes:pa=none:du:
	      tip57600|Dial any phone number at 57600 bps:\
	      :dv=/dev/cuaa0:br#57600:at=hayes:pa=none:du: </literallayout>
	  </para>
	  
	  <para>Then you can things like ``<command>tip -115200
	      5551234</command>''.  If you prefer <emphasis
	      remap=tt>cu</emphasis> over <emphasis remap=tt>tip</emphasis>,
	    use a generic cu entry: <literallayout>            cu115200|Use cu
	      to dial any number at 115200bps:\
	      :dv=/dev/cuaa1:br#57600:at=hayes:pa=none:du: </literallayout>
	    and type ``<command>cu 5551234 -s 115200</command>''.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Do I have to type in the bps rate every time I do
	    that?</title>
	  
	  <para>Put in an entry for <emphasis remap=tt>tip1200</emphasis> or
	    <emphasis remap=tt>cu1200</emphasis>, but go ahead and use
	    whatever bps rate is appropriate with the br capability. <emphasis
	      remap=tt>tip</emphasis> thinks a good default is 1200 bps which
	    is why it looks for a ``<emphasis remap=tt>tip1200</emphasis>''
	    entry.  You do not have to use 1200 bps, though.</para>
	  
	</sect2>
	
	<sect2>
	  <title>I access a number of hosts through a terminal server.</title>
	  
	  <para>Rather than waiting until you are connected and typing
	    ``<emphasis remap=tt>CONNECT &lt;host&gt;</emphasis>'' each time,
	    use tip's <emphasis remap=tt>cm</emphasis> capability. For
	    example, these entries in <filename>/etc/remote</filename>:
	    <literallayout>            pain|pain.deep13.com|Forrester's
	      machine:\ :cm=CONNECT pain\n:tc=deep13:
	      muffin|muffin.deep13.com|Frank's machine:\ :cm=CONNECT
	      muffin\n:tc=deep13: deep13:Gizmonics Institute terminal server:\
	      :dv=/dev/cua02:br#38400:at=hayes:du:pa=none:pn=5551234:
	    </literallayout>
	  </para>
	  
	  <para>will let you type ``<emphasis remap=tt>tip pain</emphasis>''
	    or ``<emphasis remap=tt>tip muffin</emphasis>'' to connect to the
	    hosts pain or muffin; and ``<emphasis remap=tt>tip
	      deep13</emphasis>'' to get to the terminal server.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Can tip try more than one line for each site?</title>
	  
	  <para>This is often a problem where a university has several modem
	    lines and several thousand students trying to use them...</para>
	  
	  <para>Make an entry for your university in
	    <filename>/etc/remote</filename> and use <email>@</email> for the
	    <emphasis remap=tt>pn</emphasis> capability: <literallayout>
	      big-university:\ :pn=\@:tc=dialout dialout:\
	      :dv=/dev/cuaa3:br#9600:at=courier:du:pa=none: </literallayout>
	  </para>
	  
	  <para>Then, list the phone numbers for the university in
	    <filename>/etc/phones</filename>: <literallayout>
	      big-university 5551111 big-university 5551112 big-university
	      5551113 big-university 5551114 </literallayout>
	  </para>
	  
	  <para><emphasis remap=tt>tip</emphasis> will try each one in the
	    listed order, then give up.  If you want to keep retrying, run
	    <emphasis remap=tt>tip</emphasis> in a while loop.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Why do I have to hit CTRL+P twice to send CTRL+P
	    once?</title>
	  
	  <para>CTRL+P is the default ``force'' character, used to tell
	    <emphasis remap=tt>tip</emphasis> that the next character is
	    literal data.  You can set the force character to any other
	    character with the <emphasis remap=tt>~s</emphasis> escape, which
	    means ``set a variable.''</para>
	  
	  <para>Type ``<literal>~sforce=&lt;single-char&gt;</literal>''
	    followed by a newline. <emphasis
	      remap=tt>&lt;single-char&gt;</emphasis> is any single character.
	    If you leave out <emphasis
	      remap=tt>&lt;single-char&gt;</emphasis>, then the force
	    character is the nul character, which you can get by typing CTRL+2
	    or CTRL+SPACE.  A pretty good value for <emphasis
	      remap=tt>&lt;single-char&gt;</emphasis> is SHIFT+CTRL+6, which I
	    have seen only used on some terminal servers.</para>
	  
	  <para>You can have the force character be whatever you want by
	    specifying the following in your
	    <filename>&#36;HOME/.tiprc</filename> file: <literallayout>
	      force=&lt;single-char&gt; </literallayout>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Suddenly everything I type is in UPPER CASE??</title>
	  
	  <para>You must have pressed CTRL+A, <emphasis
	      remap=tt>tip</emphasis>'s ``raise character,'' specially
	    designed for people with broken caps-lock keys. Use <emphasis
	      remap=tt>~s</emphasis> as above and set the variable
	    ``raisechar'' to something reasonable.  In fact, you can set it to
	    the same as the force character, if you never expect to use either
	    of these features.</para>
	  
	  <para>Here is a sample .tiprc file perfect for Emacs users who need
	    to type CTRL+2 and CTRL+A a lot: <literallayout>
	      force=^^ raisechar=^^ </literallayout> The ^^ is
	    SHIFT+CTRL+6.</para>
	  
	</sect2>
	
	<sect2>
	  <title>How can I do file transfers with <emphasis
	      remap=tt>tip</emphasis>?</title>
	  
	  <para>If you are talking to another UNIX system, you can send and
	    receive files with <emphasis remap=tt>~p</emphasis> (put) and
	    <emphasis remap=tt>~t</emphasis> (take).  These commands run
	    ``<emphasis remap=tt>cat</emphasis>'' and ``<emphasis
	      remap=tt>echo</emphasis>'' on the remote system to accept and
	    send files.  The syntax is: <literallayout>            ~p
	      &lt;local-file&gt; [&lt;remote-file&gt;] ~t &lt;remote-file&gt;
	      [&lt;local-file&gt;] </literallayout>
	  </para>
	  
	  <para>There is no error checking, so you probably should use another
	    protocol, like zmodem.</para>
	  
	</sect2>
	
	<sect2>
	  <title>How can I run zmodem with <emphasis
	      remap=tt>tip</emphasis>?</title>
	  
	  <para>To receive files, start the sending program on the remote end.
	    Then, type ``<emphasis remap=tt>~C rz</emphasis>'' to begin
	    receiving them locally.</para>
	  
	  <para>To send files, start the receiving program on the remote end.
	    Then, type ``<emphasis remap=tt>~C sz &lt;files&gt;</emphasis>''
	    to send them to the remote system.</para>
	  
	</sect2>
      </sect1>
    </chapter>
    
    <chapter>
      <title>PPP and SLIP</title>
      
      <para>If your connection to the Internet is through a modem, or you wish
	to provide other people with dialup connections to the Internet using
	FreeBSD, you have the option of using PPP or SLIP.  Furthermore, two
	varieties of PPP are provided: <emphasis>user</emphasis> (sometimes
	referred to as iijppp) and <emphasis>kernel</emphasis>.  The
	procedures for configuring both types of PPP, and for setting up SLIP
	are described in this chapter.</para>
      
      
      <sect1
	id="userppp">
	<title>Setting up User PPP</title>
	
	<para>User PPP was introduced to FreeBSD in release 2.0.5 as an
	  addition to the existing kernel implementation of PPP.  So, what is
	  different about this new PPP that warrants its addition?  To quote
	  from the manual page:</para>
	
	<para>
	  <blockquote>
	    <para>This is a user process PPP software package. Normally, PPP
	      is implemented as a part of the kernel (e.g. as managed by pppd)
	      and it is thus somewhat hard to debug and/or modify its
	      behavior. However, in this implementation PPP is done as a user
	      process with the help of the tunnel device driver (tun).</para>
	  </blockquote>
	</para>
	
	<para>In essence, this means that rather than running a PPP daemon,
	  the ppp program can be run as and when desired. No PPP interface
	  needs to be compiled into the kernel, as the program can use the
	  generic tunnel device to get data into and out of the kernel.</para>
	
	<para>From here on out, user ppp will be referred to simply as ppp
	  unless a distinction needs to be made between it and any other PPP
	  client/server software such as pppd.  Unless otherwise stated, all
	  commands in this section should be executed as root.</para>
	
	
	<sect2>
	  <title>Before you start</title>
	  
	  <para>This document assumes you are in roughly this position:</para>
	  
	  <para>You have an account with an Internet Service Provider (ISP)
	    which lets you use PPP. Further, you have a modem (or other
	    device) connected and configured correctly which allows you to
	    connect to your ISP.</para>
	  
	  <para>You are going to need the following information to
	    hand:</para>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para>Your ISPs phone number(s).</para>
	      </listitem>
	      
	      <listitem>
		<para>Your login name and password.  This can be either a
		  regular unix style login/password pair, or a PPP PAP or CHAP
		  login/password pair.</para>
	      </listitem>
	      
	      <listitem>
		<para>The IP address of your ISP's gateway.  The gateway is
		  the machine to which you will connect and will be set up as
		  your <emphasis remap=tt>default route</emphasis>.  If your
		  ISP hasn't given you this number, don't worry.  We can make
		  one up and your ISP's PPP server will tell us when we
		  connect.</para>
		
		<para>This number is known from now on as
		  <acronym>HISADDR</acronym>.</para>
	      </listitem>
	      
	      <listitem>
		<para>Your ISP's netmask setting.  Again, if your ISP hasn't
		  given you this information, you can safely use a netmask of
		  255.255.255.0.</para>
	      </listitem>
	      
	      <listitem>
		<para>The IP addresses of one or more nameservers.  Normally,
		  you will be given two IP numbers.  You
		  <acronym>MUST</acronym> have this information unless you run
		  your own nameserver.</para>
	      </listitem>
	      
	      <listitem>
		<para>If your ISP allocates you a static IP address and
		  hostname then you will need this information too.  If not,
		  you will need to know from what range of IP addresses your
		  allocated IP address will belong.  If you haven't been given
		  this range, don't worry. You can configure PPP to accept any
		  IP number (as explained later).</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para>If you do not have any of the required information, contact
	    your ISP and make sure they provide it to you.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Building a ppp ready kernel</title>
	  
	  <para>As the description states, ``ppp'' uses the kernel ``tun''
	    device. It is necessary to make sure that your kernel has support
	    for this device compiled in.</para>
	  
	  <para>To check this, go to your kernel compile directory
	    (<filename>/sys/i386/conf</filename> or
	    <filename>/sys/pc98/conf</filename>) and examine your kernel
	    configuration file. It needs to have the line</para>
	  
	  <para>
	    <informalexample>
	      <screen>   pseudo-device tun 1</screen>
	    </informalexample>
	  </para>
	  
	  <para>in it somewhere. The stock GENERIC kernel has this as
	    standard, so if you have not installed a custom kernel or you do
	    not have a /sys directory, you do not have to change
	    anything.</para>
	  
	  <para>If your kernel configuration file does not have this line in
	    it, or you need to configure more than one tun device (for
	    example, if you are setting up a server and could have 16 dialup
	    ppp connections at any one time then you will need to use ``16''
	    instead of ``1''), then you should add the line, re-compile,
	    re-install and boot the new kernel.  Please refer to the 
	    <xref linkend="kernelconfig" remap="Configuring the FreeBSD
	      Kernel"> section for more information on kernel
	    configuration.</para>
	  
	  <para>You can check how many tunnel devices your current kernel has
	    by typing the following:</para>
	  
	  <para>
	    <informalexample>
	      <screen>   # ifconfig -a tun0:
		flags=8051&lt;UP,POINTOPOINT,RUNNING,MULTICAST&gt; mtu 1500
		inet 200.10.100.1 --&gt; 203.10.100.24 netmask 0xffffffff
		tun1: flags=8050&lt;POINTOPOINT,RUNNING,MULTICAST&gt; mtu 576
		tun2: flags=8051&lt;UP,POINTOPOINT,RUNNING,MULTICAST&gt; mtu
		1500 inet 203.10.100.1 --&gt; 203.10.100.20 netmask 0xffffffff
		tun3: flags=8050&lt;POINTOPOINT,RUNNING,MULTICAST&gt; mtu
		1500</screen>
	    </informalexample>
	  </para>
	  
	  <para>which in this case shows four tunnel devices, two of which are
	    currently configured and being used.</para>
	  
	  <para>If you have a kernel without the tun device, and you can not
	    rebuild it for some reason, all is not lost.  You should be able
	    to dynamically load the code.  Refer to the appropriate modload(8)
	    and lkm(4) pages for further details.</para>
	  
	  <para>You may also wish to take this opportunity to configure a
	    firewall. Details can be found in the <xref linkend="firewalls"
	      remap="Firewalls"> section.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Check the tun device</title>
	  
	  <para>Most users will only require one ``tun'' device (tun0). If you
	    have used more (i.e., a number other than `1' in the pseudo-device
	    line in the kernel configuration file) then alter all references
	    to ``tun0'' below to reflect whichever device number you are
	    using.</para>
	  
	  <para>The easiest way to make sure that the tun0 device is
	    configured correctly is to re-make it. To do this, execute the
	    following commands:</para>
	  
	  <para>
	    <informalexample>
	      <screen>   # cd /dev # ./MAKEDEV tun0</screen>
	    </informalexample>
	  </para>
	  
	  <para>If you require 16 tunnel devices in your kernel, you will need
	    to create more than just tun0:</para>
	  
	  <para>
	    <informalexample>
	      <screen>   # cd /dev # ./MAKEDEV tun15</screen>
	    </informalexample>
	  </para>
	  
	  <para>Also, to confirm that the kernel is configured correctly, the
	    following command should give the indicated output:</para>
	  
	  <para>
	    <informalexample>
	      <screen>   $ ifconfig tun0 tun0:
		flags=8050&lt;POINTOPOINT,RUNNING,MULTICAST&gt; mtu 1500 $
	      </screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Name Resolution Configuration</title>
	  
	  <para>The resolver is the part of the system that turns IP addresses
	    into hostnames and vice versa.  It can be configured to look for
	    maps that describe IP to hostname mappings in one of two places.
	    The first is a file called <filename>/etc/hosts</filename>
	    (<emphasis remap=tt>man 5 hosts</emphasis>). The second is the
	    Internet Domain Name Service (DNS), a distributed data base, the
	    discussion of which is beyond the scope of this document.</para>
	  
	  <para>This section describes briefly how to configure your
	    resolver.</para>
	  
	  <para>The resolver is a set of system calls that do the name
	    mappings, but you have to tell them where to find their
	    information.  You do this by first editing the file
	    <filename>/etc/host.conf</filename>.  Do <emphasis
	      remap=bf>not</emphasis> call this file
	    <filename>/etc/hosts.conf</filename> (note the extra ``s'') as the
	    results can be confusing.</para>
	  
	  
	  <sect3>
	    <title>Edit the /etc/host.conf file</title>
	    
	    <para>This file should contain the following two lines:</para>
	    
	    <para>
	      <informalexample>
		<screen>   hosts bind</screen>
	      </informalexample> which instructs the resolver to first look in
	      the file <filename>/etc/hosts</filename>, and then to consult
	      the DNS if the name was not found.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Edit the /etc/hosts(5) file</title>
	    
	    <para>This file should contain the IP addresses and names of
	      machines on your network. At a bare minimum it should contain
	      entries for the machine which will be running ppp. Assuming that
	      your machine is called foo.bar.com with the IP address 10.0.0.1,
	      <filename>/etc/hosts</filename> should contain:</para>
	    
	    <para>
	      <informalexample>
		<screen>   127.0.0.1    localhost 10.0.0.1     foo.bar.com
		  foo</screen>
	      </informalexample>
	    </para>
	    
	    <para>The first line defines the alias ``localhost'' as a synonym
	      for the current machine. Regardless of your own IP address, the
	      IP address for this line should always be 127.0.0.1. The second
	      line maps the name ``foo.bar.com'' (and the shorthand ``foo'')
	      to the IP address 10.0.0.1.</para>
	    
	    <para>If your provider allocates you a static IP address and name,
	      then use these in place of the 10.0.0.1 entry.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Edit the /etc/resolv.conf file</title>
	    
	    <para><filename>/etc/resolv.conf</filename> tells the resolver how
	      to behave.  If you are running your own DNS, you may leave this
	      file empty.  Normally, you will need to enter the following
	      line(s):</para>
	    
	    <para>
	      <informalexample>
		<screen>   nameserver x.x.x.x nameserver y.y.y.y domain
		  bar.com</screen>
	      </informalexample>
	    </para>
	    
	    <para>The <filename>x.x.x.x</filename> and
	      <filename>y.y.y.y</filename> addresses are those given to you by
	      your ISP.  Add as many ``nameserver'' lines as your ISP
	      provides.  The ``domain'' line defaults to your hostname's
	      domain, and is probably unnecessary.  Refer to the resolv.conf
	      manual page for details of other possible entries in this
	      file.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title>PPP Configuration</title>
	  
	  <para>Both user ppp and pppd (the kernel level implementation of
	    PPP) use configuration files located in the
	    <filename>/etc/ppp</filename> directory. The sample configuration
	    files provided are a good reference for user ppp, so don't delete
	    them.</para>
	  
	  <para>Configuring ppp requires that you edit a number of files,
	    depending on your requirements. What you put in them depends to
	    some extent on whether your ISP allocates IP addresses statically
	    (i.e., you get given one IP address, and always use that one) or
	    dynamically (i.e., your IP address can be different for each PPP
	    session).</para>
	  
	  
	  <sect3
	    id="userppp-staticIP">
	    <title>PPP and Static IP addresses
	    </title>
	    
	    <para>You will need to create a configuration file called
	      <filename>/etc/ppp/ppp.conf</filename>.  It should look similar
	      to the example below.  Note that lines that end in a ``:'' start
	      in the first column, all other lines should be indented as shown
	      using spaces or tabs.</para>
	    
	    <para>
	      <informalexample>
		<screen>1     default: 2       set device /dev/cuaa0 3
		  set speed 115200 4       set dial "ABORT BUSY ABORT
		  NO\\sCARRIER TIMEOUT 5 \"\" ATE1Q0 OK-AT-OK \\dATDT\\T
		  TIMEOUT 40 CONNECT" 5     provider: 6       set phone
		  "(0123) 456 7890" 7       set login "TIMEOUT 10
		  gin:-BREAK-gin: foo word: bar col: ppp" 8       set timeout
		  300 9       deny lqr 10      set ifaddr x.x.x.x y.y.y.y 11
		  delete ALL 12      add 0 0 HISADDR</screen>
	      </informalexample> Do not include the line numbers, they are
	      just for reference in this discussion.</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>Line 1:</term>
		  <listitem>
		    <para>Identifies the default entry.  Commands in this
		      entry are executed automatically when ppp is run.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Line 2:</term>
		  
		  <listitem>
		    <para>Identifies the device to which the modem is
		      connected. COM1: is <filename>/dev/cuaa0</filename> and
		      COM2: is <filename>/dev/cuaa1</filename>.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Line 3:</term>
		  
		  <listitem>
		    <para>Sets the speed you want to connect at.  If 115200
		      doesn't work (it should with any reasonably new modem),
		      try 38400 instead.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Line 4:</term>
		  
		  <listitem>
		    <para>The dial string.  User ppp uses an expect-send
		      syntax similar to the <command>chat(8)</command>
		      program.  Refer to the manual page for information on
		      the features of this language.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Line 5:</term>
		  
		  <listitem>
		    <para>Identifies an entry for a provider called
		      ``provider''.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Line 6:</term>
		  
		  <listitem>
		    <para>Sets the phone number for this provider.  Multiple
		      phone numbers may be specified using the ``:'' or ``|''
		      character as a separator.  The difference between these
		      spearators is described in the ppp manual page.  To
		      summarize, if you want to rotate through the numbers,
		      use the ``:''.  If you want to always attempt to dial
		      the first number first and only use the other numbers if
		      the first number fails, use the ``|''. Always quote the
		      entire set of phone numbers as shown.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Line 7:</term>
		  
		  <listitem>
		    <para>The login string is of the same chat-like syntax as
		      the dial string.  In this example, the string works for
		      a service whose login session looks like this:</para>
		    
		    <para>
		      <informalexample>
			<screen>   J. Random Provider login: foo password: bar
			  protocol: ppp</screen>
		      </informalexample>
		    </para>
		    
		    <para>You will need to alter this script to suit your own
		      needs. If you're using PAP or CHAP, there will be no
		      login at this point, so your login string can be left
		      blank.  See
		      <xref linkend="userppp-PAPnCHAP" remap="PAP and CHAP
			authentication"> for further details.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Line 8:</term>
		  
		  <listitem>
		    <para>Sets the default timeout (in seconds) for the
		      connection. Here, the connection will be closed
		      automatically after 300 seconds of inactivity.  If you
		      never want to timeout, set this value to zero.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Line 9:</term>
		  
		  <listitem>
		    <para>Ppp can be configured to exchange Link Quality
		      Report (LQR) packets.  These packets describe how good
		      the physical link is.  Ppp's LQR strategy is to close
		      the connection when a number of these packets are
		      missed.  This is useful when you have a direct serial
		      link to another machine and the DSR modem signal is not
		      available to indicate that the line is up.  When data
		      saturates the line, LQR packets are sometimes
		      ``missed'', causing ppp to close the connection
		      prematurely.  Refusing to negotiate lqr is sometimes
		      prudent (if you are going through a modem) as it avoids
		      this whole mess.  By default, ppp will not attempt to
		      negotiate LQR, but will accept LQR negotiation from the
		      peer.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Line 10:</term>
		  
		  <listitem>
		    <para>Sets the interface addresses. The string x.x.x.x
		      should be replaced by the IP address that your provider
		      has allocated to you.  The string y.y.y.y should be
		      replaced by the IP address that your ISP indicated for
		      their gateway (the machine to which you connect).  If
		      your ISP hasn't given you a gateway address, use
		      <filename>10.0.0.2/0</filename>.  If you need to use a
		      ``guessed'' address, make sure that you create an entry
		      in <filename>/etc/ppp/ppp.linkup</filename> as per the
		      instructions for
		      <xref linkend="userppp-dynamicIP" remap="PPP and Dynamic
			IP addresses">. If this line is omitted, ppp cannot
		      run in <option>-auto</option> or
		      <option>-dynamic</option> mode.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Line 11:</term>
		  
		  <listitem>
		    <para>Deletes all existing routing table entries for the
		      acquired tun device.  This should not normally be
		      necessary, but will make sure that PPP is starting with
		      a clean bill of health.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Line 12:</term>
		  
		  <listitem>
		    <para>Adds a default route to your ISPs gateway.  The
		      special word <acronym>HISADDR</acronym> is replaced with
		      the gateway address specified on line 9.  It is
		      important that this line appears after line 9, otherwise
		      <acronym>HISADDR</acronym> will not yet be
		      initialized.</para>
		    
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	    <para>It is not necessary to add an entry to
	      <filename>ppp.linkup</filename> when you have a static IP
	      address as your routing table entries are already correct before
	      you connect.  You may however wish to create an entry to invoke
	      programs after connection.  This is explained later with the
	      sendmail example.</para>
	    
	    <para>Example configuration files can be found in the
	      <filename>/etc/ppp</filename> directory.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="userppp-dynamicIP">
	    <title>PPP and Dynamic IP addresses
	    </title>
	    
	    <para>If your service provider does not assign static IP numbers,
	      <emphasis remap=tt>ppp</emphasis> can be configured to negotiate
	      the local and remote addresses.  This is done by "guessing" an
	      IP number and allowing ppp to set it up correctly using the IP
	      Configuration Protocol (IPCP) after connecting.  The
	      <filename>ppp.conf</filename> configuration is the same as <xref
		linkend="userppp-staticIP" remap="PPP and
		Static IP addresses">, with the following change:</para>
	    
	    <para>
	      <informalexample>
		<screen>10      set ifaddr 10.0.0.1/0 10.0.0.2/0
		  255.255.255.0</screen>
	      </informalexample>
	    </para>
	    
	    <para>Again, do not include the line numbers, they are just for
	      reference in this discussion.  Indentation of at least one space
	      is required.</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>Line 10:</term>
		  <listitem>
		    <para>The number after the ``/'' character is the number
		      of bits of the address that ppp will insist on.  You may
		      wish to use IP numbers more appropriate to your
		      circumstances, but the above example will almost always
		      work.  If it fails, you may be able to defeat some
		      broken ppp implementations by supplying an additional
		      <emphasis remap=tt>0.0.0.0</emphasis> argument:</para>
		    
		    <para>
		      <informalexample>
			<screen>  set ifaddr 10.0.0.1/0 10.0.0.2/0
			  255.255.255.0 0.0.0.0</screen>
		      </informalexample>
		    </para>
		    
		    <para>This tells ppp to negotiate using address <emphasis
			remap=tt>0.0.0.0</emphasis> rather than <emphasis
			remap=tt>10.0.0.1</emphasis>.  Do not use
		      <filename>0.0.0.0/0</filename> as the first argument to
		      <emphasis remap=tt>set ifaddr</emphasis> as it prevents
		      ppp from setting up an initial route in
		      <option>-auto</option> and <option>-ddial</option>
		      mode.</para>
		    
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	    <para>You will also need to create an entry in
	      <filename>/etc/ppp/ppp.linkup</filename>.
	      <filename>Ppp.linkup</filename> is used after a connection has
	      been established.  At this point, ppp will know what IP
	      addresses should <emphasis remap=bf>really</emphasis> be used.
	      The following entry will delete the existing bogus routes, and
	      create correct ones:</para>
	    
	    <para>
	      <informalexample>
		<screen>1     provider: 2       delete ALL 3       add 0 0
		  HISADDR</screen>
	      </informalexample>
	    </para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>Line 1:</term>
		  <listitem>
		    <para>On establishing a connection, ppp will look for an
		      entry in <filename>ppp.linkup</filename> according to
		      the following rules:  First, try to match the same label
		      as we used in <filename>ppp.conf</filename>. If that
		      fails, look for an entry for the IP number of our
		      gateway.  This entry is a four-octet IP style label.  If
		      we still haven't found an entry, look for the
		      <acronym>MYADDR</acronym> entry.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Line 2:</term>
		  
		  <listitem>
		    <para>This line tells ppp to delete all existing routes
		      for the acquired tun interface (except the direct route
		      entry).</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Line 3:</term>
		  
		  <listitem>
		    <para>This line tells ppp to add a default route that
		      points to <acronym>HISADDR</acronym>.
		      <acronym>HISADDR</acronym> will be replaced with the IP
		      number of the gateway as negotiated in the IPCP.</para>
		    
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	    <para>See the pmdemand entry in the files
	      <filename>/etc/ppp/ppp.conf.sample</filename> and
	      <filename>/etc/ppp/ppp.linkup.sample</filename> for a detailed
	      example.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Receiving incoming calls with PPP</title>
	    
	    <para>This section describes setting up ppp in a server
	      role.</para>
	    
	    <para>When you configure <emphasis remap=tt>ppp</emphasis> to
	      receive incoming calls, you must decide whether you wish to
	      forward packets for just <emphasis remap=tt>ppp</emphasis>
	      connections, for all interfaces, or not at all. To forward for
	      just ppp connections, include the line</para>
	    
	    <para>
	      <informalexample>
		<screen>    enable proxy</screen>
	      </informalexample>
	    </para>
	    
	    <para>in your <filename>ppp.conf</filename> file.  If you wish to
	      forward packets on all interfaces, use the</para>
	    
	    <para>
	      <informalexample>
		<screen>    gateway=YES</screen>
	      </informalexample>
	    </para>
	    
	    <para>option in <filename>/etc/rc.conf</filename> (this file used
	      to be called <filename>/etc/sysconfig</filename>).</para>
	    
	    
	    <sect4>
	      <title>Which getty?</title>
	      
	      <para><xref linkend="dialup" remap="Configuring FreeBSD for
		  Dialup Services"> provides a good description on enabling
		dialup services using getty.</para>
	      
	      <para>An alternative to getty is <ulink
		  URL="http://www.leo.org/~doering/mgetty/index.html">mgetty</ulink>, a smarter version of getty designed with dialup lines in mind.</para>
	      
	      <para>The advantages of using mgetty is that it actively
		<emphasis>talks</emphasis> to modems, meaning if port is
		turned off in <filename>/etc/ttys</filename> then your modem
		won't answer the phone.</para>
	      
	      <para>Later versions of mgetty (from 0.99beta onwards) also
		support the automatic detection of PPP streams, allowing your
		clients script-less access to your server.</para>
	      
	      <para>Refer to <xref linkend="userppp-mgetty" remap="Mgetty and
		  AutoPPP"> for more information on mgetty.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>PPP permissions</title>
	      
	      <para>PPP must normally be run as user id 0.  If however you
		wish to allow ppp to run in server mode as a normal user by
		executing ppp as described below, that user must be given
		permission to run ppp by adding them to the <emphasis
		  remap=tt>network</emphasis> group in
		<filename>/etc/group</filename>.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Setting up a PPP shell for dynamic-IP users</title>
	      
	      <para>Create a file called
		<filename>/etc/ppp/ppp-shell</filename> containing the
		following:</para>
	      
	      <para>
		<informalexample>
		  <screen>   #!/bin/sh IDENT=`echo $0 | sed -e
		    's/^.*-\(.*\)$/\1/'` CALLEDAS="$IDENT" TTY=`tty` if [
		    x$IDENT = xdialup ]; then IDENT=`basename $TTY` fi echo
		    "PPP for $CALLEDAS on $TTY" echo "Starting PPP for $IDENT"
		    exec /usr/sbin/ppp -direct $IDENT</screen>
		</informalexample>
	      </para>
	      
	      <para>This script should be executable.  Now make a symbolic
		link called <emphasis remap=tt>ppp-dialup</emphasis> to this
		script using the following commands:</para>
	      
	      <para>
		<informalexample>
		  <screen>   # ln -s /etc/ppp/ppp-shell
		    /etc/ppp/ppp-dialup</screen>
		</informalexample>
	      </para>
	      
	      <para>You should use this script as the
		<emphasis>shell</emphasis> for all your dialup ppp users.
		This is an example from <filename>/etc/password</filename> for
		a dialup PPP user with username pchilds. (remember don't
		directly edit the password file, use <emphasis
		  remap=tt>vipw</emphasis>)</para>
	      
	      <para>
		<informalexample>
		  <screen>   pchilds:*:1011:300:Peter Childs
		    PPP:/home/ppp:/etc/ppp/ppp-dialup</screen>
		</informalexample>
	      </para>
	      
	      <para>Create a <filename>/home/ppp</filename> directory that is
		world readable containing the following 0 byte files</para>
	      
	      <para>
		<informalexample>
		  <screen>   -r--r--r--   1 root     wheel           0 May 27
		    02:23 .hushlogin -r--r--r--   1 root     wheel           0
		    May 27 02:22 .rhosts</screen>
		</informalexample>
	      </para>
	      
	      <para>which prevents <filename>/etc/motd</filename> from being
		displayed.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Setting up a PPP shell for static-IP users</title>
	      
	      <para>Create the <emphasis remap=tt>ppp-shell</emphasis> file as
		above and for each account with statically assigned IPs create
		a symbolic link to <emphasis
		  remap=tt>ppp-shell</emphasis>.</para>
	      
	      <para>For example, if you have three dialup customers fred, sam,
		and mary, that you route class C networks for, you would type
		the following:</para>
	      
	      <para>
		<informalexample>
		  <screen>   # ln -s /etc/ppp/ppp-shell /etc/ppp/ppp-fred # ln
		    -s /etc/ppp/ppp-shell /etc/ppp/ppp-sam # ln -s
		    /etc/ppp/ppp-shell /etc/ppp/ppp-mary</screen>
		</informalexample>
	      </para>
	      
	      <para>Each of these users dialup accounts should have their
		shell set to the symbolic link created above. (ie. mary's
		shell should be
		<filename>/etc/ppp/ppp-mary</filename>).</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Setting up ppp.conf for dynamic-IP users</title>
	      
	      <para>The <filename>/etc/ppp/ppp.conf</filename> file should
		contain something along the lines of</para>
	      
	      <para>
		<informalexample>
		  <screen>   default: set debug phase lcp chat set timeout 0
		    ttyd0:  set ifaddr 203.14.100.1 203.14.100.20
		    255.255.255.255 enable proxy ttyd1: set ifaddr
		    203.14.100.1 203.14.100.21 255.255.255.255 enable
		    proxy</screen>
		</informalexample>
	      </para>
	      
	      <para>Note the indenting is important.</para>
	      
	      <para>The <emphasis remap=tt>default:</emphasis> section is
		loaded for each session.  For each dialup line enabled in
		<filename>/etc/ttys</filename> create an entry similar to the
		one for <emphasis remap=tt>ttyd0:</emphasis> above.  Each line
		should get a unique IP from your pool of ip address for
		dynamic users.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Setting up ppp.conf for static-IP users</title>
	      
	      <para>Along with the contents of the sample
		<filename>/etc/ppp/ppp.conf</filename> above you should add a
		section for each of the statically assigned dialup users.  We
		will continue with our fred, sam, and mary example.</para>
	      
	      <para>
		<informalexample>
		  <screen>   fred: set ifaddr 203.14.100.1 203.14.101.1
		    255.255.255.255 sam: set ifaddr 203.14.100.1 203.14.102.1
		    255.255.255.255 mary: set ifaddr 203.14.100.1 203.14.103.1
		    255.255.255.255</screen>
		</informalexample>
	      </para>
	      
	      <para>The file <filename>/etc/ppp/ppp.linkup</filename> should
		also contain routing information for each static IP user if
		required.  The line below  would add a route for the <emphasis
		  remap=tt>203.14.101.0</emphasis> class C via  the client's
		ppp link.</para>
	      
	      <para>
		<informalexample>
		  <screen>   fred: add 203.14.101.0 netmask 255.255.255.0
		    HISADDR sam: add 203.14.102.0 netmask 255.255.255.0
		    HISADDR mary: add 203.14.103.0 netmask 255.255.255.0
		    HISADDR</screen>
		</informalexample>
	      </para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>More on mgetty, AutoPPP, and MS extensions</title>
	      
	      
	      <sect5
		id="userppp-mgetty">
		<title>Mgetty and AutoPPP
		</title>
		
		<para>Configuring and compiling mgetty with the AUTO_PPP
		  option enabled allows mgetty to detect the LCP phase of PPP
		  connections and automatically spawn off a ppp shell.
		  However, since the default login/password sequence does not
		  occur it is necessary to authenticate users using either PAP
		  or CHAP.</para>
		
		<para>This section assumes the user has successfully
		  configured, compiled, and installed a version of mgetty with
		  the AUTO_PPP option (v0.99beta or later)</para>
		
		<para>Make sure your
		  <filename>/usr/local/etc/mgetty+sendfax/login.config</filename> file has the following in it:</para>
		
		<para>
		  <informalexample>
		    <screen>   /AutoPPP/ -     -
		      /etc/ppp/ppp-pap-dialup</screen>
		  </informalexample>
		</para>
		
		<para>This will tell mgetty to run the <emphasis
		    remap=tt>ppp-pap-dialup</emphasis> script for detected PPP
		  connections.</para>
		
		<para>Create a file called
		  <filename>/etc/ppp/ppp-pap-dialup</filename> containing the
		  following (the file should be executable):</para>
		
		<para>
		  <informalexample>
		    <screen>   #!/bin/sh TTY=`tty` IDENT=`basename $TTY` exec
		      /usr/sbin/ppp -direct pap$IDENT</screen>
		  </informalexample>
		</para>
		
		<para>For each dialup line enabled in
		  <filename>/etc/ttys</filename> create a corresponding entry
		  in <filename>/etc/ppp/ppp.conf</filename>.  This will
		  happily co-exist with the definitions we created
		  above.</para>
		
		<para>
		  <informalexample>
		    <screen>   papttyd0: enable pap set ifaddr 203.14.100.1
		      203.14.100.20 255.255.255.255 enable proxy papttyd1:
		      enable pap set ifaddr 203.14.100.1 203.14.100.21
		      255.255.255.255 enable proxy</screen>
		  </informalexample>
		</para>
		
		<para>Each user logging in with this method will need to have
		  a username/password in
		  <filename>/etc/ppp/ppp.secret</filename> file, or
		  alternatively add the</para>
		
		<para>
		  <informalexample>
		    <screen>  enable passwdauth</screen>
		  </informalexample>
		</para>
		
		<para>option to authenticate users via pap from the
		  <filename>/etc/password</filename>d file. (*) </para>
		
		<para>(*) Note this option only available in 2.2-961014-SNAP
		  or later, or by getting the updated ppp code for 2.1.x. (see
		  MS extensions below for details)</para>
		
	      </sect5>
	      
	      <sect5>
		<title>MS extentions</title>
		
		<para>From 2.2-961014-SNAP onwards it is possible to allow the
		  automatic negotiation of DNS and NetBIOS name servers with
		  clients supporting this feature (namely Win95/NT clients).
		  See RFC1877 for more details on the protocol.</para>
		
		<para>An example of enabling these extensions in your
		  <filename>/etc/ppp/ppp.conf</filename> file is illustrated
		  below.</para>
		
		<para>
		  <informalexample>
		    <screen>   default: set debug phase lcp chat set timeout 0
		      enable msext set ns 203.14.100.1 203.14.100.2 set nbns
		      203.14.100.5</screen>
		  </informalexample>
		</para>
		
		<para>This will tell the clients the primary and secondary
		  name server addresses, and a netbios nameserver host.</para>
		
	      </sect5>
	    </sect4>
	  </sect3>
	  
	  <sect3
	    id="userppp-PAPnCHAP">
	    <title>PAP and CHAP authentication
	    </title>
	    
	    <para>Some ISPs set their system up so that the authentication
	      part of your connection is done using either of the PAP or CHAP
	      authentication mechanisms.  If this is the case, your ISP will
	      not give a <emphasis remap=tt>login:</emphasis> prompt when you
	      connect, but will start talking PPP immediately.</para>
	    
	    <para>PAP is less secure than CHAP, but security is not normally
	      an issue here as passwords, although being sent as plain text
	      with PAP, are being transmitted down a serial line only.
	      There's not much room for hackers to "eavesdrop".</para>
	    
	    <para>Referring back to the <xref linkend="userppp-staticIP"
		remap="PPP and Static IP addresses"> or <xref
		linkend="userppp-dynamicIP" remap="PPP and Dynamic IP
		addresses"> sections, the following alterations must be
	      made:</para>
	    
	    <para>
	      <informalexample>
		<screen>7       set login ..... 13      set authname
		  MyUserName 14      set authkey MyPassword</screen>
	      </informalexample>
	    </para>
	    
	    <para>As always, do not include the line numbers, they are just
	      for reference in this discussion.  Indentation of at least one
	      space is required.</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>Line 7:</term>
		  <listitem>
		    <para>Your ISP will not normally require that you log into
		      the server if you're using PAP or CHAP.  You must
		      therefore disable your "set login" string.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Line 13:</term>
		  
		  <listitem>
		    <para>This line specifies your PAP/CHAP user name.  You
		      will need to insert the correct value for <emphasis
			remap=tt>MyUserName</emphasis>.</para>
		    
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Line 14:</term>
		  
		  <listitem>
		    <para>This line specifies your PAP/CHAP password.  You
		      will need to insert the correct value for <emphasis
			remap=tt>MyPassword</emphasis>. You may want to add an
		      additional line
		      <informalexample>
			<screen>15      accept PAP</screen>
		      </informalexample> or
		      <informalexample>
			<screen>15      accept CHAP</screen>
		      </informalexample> to make it obvious that this is the
		      intention, but PAP and CHAP are accepted by
		      default.</para>
		    
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	    <para><emphasis remap=bf>NOTE:</emphasis> Your <emphasis
		remap=tt>authkey</emphasis> will be logged if you have command
	      logging turned on (<emphasis remap=tt>set log
		+command</emphasis>).  Care should be taken when deciding the
	      ppp log file permissions.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Changing your ppp configuration on the fly</title>
	    
	    <para>It is possible to talk to the ppp program while it is
	      running in the background, but only if a suitable password has
	      been set up.</para>
	    
	    <para>By default, ppp will listen to a TCP port of 3000 +
	      <emphasis remap=tt>tunno</emphasis>, where <emphasis
		remap=tt>tunno</emphasis> is the number of the tun device
	      acquired, however, if a password for the local machine is not
	      set up in <filename>/etc/ppp/ppp.secret</filename>, no server
	      connection will be created. To set your password, put the
	      following line in
	      <filename>/etc/ppp/ppp.secret</filename>:</para>
	    
	    <para>
	      <informalexample>
		<screen>foo MyPassword</screen>
	      </informalexample>
	    </para>
	    
	    <para>where <emphasis remap=tt>foo</emphasis> is your local
	      hostname (run <command>hostname -s</command> to determine the
	      correct name), and <emphasis remap=tt>MyPassword</emphasis> is
	      the unencrypted password that you wish to use.
	      <filename>/etc/ppp/ppp.secret</filename> should
	      <acronym>NOT</acronym> be accessable by anyone without user id
	      0.  This means that <filename>/</filename>,
	      <filename>/etc</filename> and <filename>/etc/ppp</filename>
	      should not be writable, and <filename>ppp.secret</filename>
	      should be owned by user id 0 and have permissions 0600.</para>
	    
	    <para>It is also possible to select a specific port number or to
	      have ppp listen to a local unix domain socket rather than to a
	      TCP socket.  Refer to the <emphasis remap=tt>set
		socket</emphasis> command in manual page for further
	      details.</para>
	    
	    <para>Once a socket has been set up, the
	      <command>pppctl(8)</command> program may be used in scripts that
	      wish to manipulate the running program.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2
	  id="userppp-final">
	  <title>Final system configuration
	  </title>
	  
	  <para>You now have PPP configured, but there are a few more things
	    to do before it is ready to work. They all involve editing the
	    <filename>/etc/rc.conf</filename> file (was
	    <filename>/etc/sysconfig</filename>).</para>
	  
	  <para>Working from the top down in this file, make sure the
	    ``hostname='' line is set, e.g.:</para>
	  
	  <para>
	    <informalexample>
	      <screen>   hostname=foo.bar.com</screen>
	    </informalexample>
	  </para>
	  
	  <para>If your ISP has supplied you with a static IP address and
	    name, it's probably best that you use this name as your host
	    name.</para>
	  
	  <para>Look for the network_interfaces variable.  If you want to
	    configure your system to dial your ISP on demand, make sure the
	    tun0 device is added to the list, otherwise remove it.</para>
	  
	  <para>
	    <informalexample>
	      <screen>   network_interfaces="lo0 tun0" ifconfig_tun0=</screen>
	    </informalexample>
	  </para>
	  
	  <para>Note, the <symbol>ifconfig_tun0</symbol> variable should be
	    empty, and a file called /etc/start_if.tun0 should be created.
	    This file should contain the line</para>
	  
	  <para>
	    <informalexample>
	      <screen>   ppp -auto mysystem</screen>
	    </informalexample>
	  </para>
	  
	  <para>This script is executed at network configuration time,
	    starting your ppp daemon in automatic mode.  If you have a LAN for
	    which this machine is a gateway, you may also wish to use the
	    <option>-alias</option> switch.  Refer to the manual page for
	    further details.</para>
	  
	  <para>Set the router program to ``NO'' with the line</para>
	  
	  <para>
	    <informalexample>
	      <screen>   router_enable=NO            (/etc/rc.conf) router=NO
		(/etc/sysconfig)</screen>
	    </informalexample>
	  </para>
	  
	  <para>It is important that the <emphasis remap=tt>routed</emphasis>
	    daemon is not started (it's started by default) as <emphasis
	      remap=tt>routed</emphasis> tends to delete the default routing
	    table entries created by ppp.</para>
	  
	  <para>It is probably worth your while ensuring that the
	    ``sendmail_flags'' line does not include the ``-q'' option,
	    otherwise sendmail will attempt to do a network lookup every now
	    and then, possibly causing your machine to dial out.  You may
	    try:</para>
	  
	  <para>
	    <informalexample>
	      <screen>   sendmail_flags="-bd"</screen>
	    </informalexample>
	  </para>
	  
	  <para>The upshot of this is that you must force sendmail to
	    re-examine the mail queue whenever the ppp link is up by
	    typing:</para>
	  
	  <para>
	    <informalexample>
	      <screen>   # /usr/sbin/sendmail -q</screen>
	    </informalexample>
	  </para>
	  
	  <para>You may wish to use the <emphasis remap=tt>!bg</emphasis>
	    command in ppp.linkup to do this automatically:</para>
	  
	  <para>
	    <informalexample>
	      <screen>1     provider: 2       delete ALL 3       add 0 0
		HISADDR 4       !bg sendmail -bd -q30m</screen>
	    </informalexample>
	  </para>
	  
	  <para>If you don't like this, it is possible to set up a "dfilter"
	    to block SMTP traffic.  Refer to the sample files for further
	    details.</para>
	  
	  <para>All that is left is to reboot the machine.</para>
	  
	  <para>After rebooting, you can now either type</para>
	  
	  <para>
	    <informalexample>
	      <screen>   # ppp</screen>
	    </informalexample>
	  </para>
	  
	  <para>and then ``dial provider'' to start the PPP session, or, if
	    you want ppp to establish sessions automatically when there is
	    outbound traffic (and you haven't created the start_if.tun0
	    script), type</para>
	  
	  <para>
	    <informalexample>
	      <screen>   # ppp -auto provider</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Summary</title>
	  
	  <para>To recap, the following steps are necessary when setting up
	    ppp for the first time:</para>
	  
	  <para>Client side:</para>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para>Ensure that the tun device is built into your
		  kernel.</para>
	      </listitem>
	      
	      <listitem>
		<para>Ensure that the tunX device file is available in the
		  <filename>/dev</filename> directory.</para>
	      </listitem>
	      
	      <listitem>
		<para>Create an entry in
		  <filename>/etc/ppp/ppp.conf</filename>.  The <emphasis
		    remap=tt>pmdemand</emphasis> example should suffice for
		  most ISPs.</para>
	      </listitem>
	      
	      <listitem>
		<para>If you have a dynamic IP address, create an entry in
		  <filename>/etc/ppp/ppp.linkup</filename>.</para>
	      </listitem>
	      
	      <listitem>
		<para>Update your <filename>/etc/rc.conf</filename> (or
		  <emphasis remap=tt>sysconfig</emphasis>) file.</para>
	      </listitem>
	      
	      <listitem>
		<para>Create a start_if.tun0 script if you require demand
		  dialing.</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para>Server side:
	    <itemizedlist>
	      
	      <listitem>
		<para>Ensure that the tun device is built into your
		  kernel.</para>
	      </listitem>
	      
	      <listitem>
		<para>Ensure that the tunX device file is available in the
		  <filename>/dev</filename> directory.</para>
	      </listitem>
	      
	      <listitem>
		<para>Create an entry in /etc/passwd (using the vipw(8)
		  program).</para>
	      </listitem>
	      
	      <listitem>
		<para>Create a profile in this users home directory that runs
		  ``ppp -direct direct-server'' or similar.</para>
	      </listitem>
	      
	      <listitem>
		<para>Create an entry in
		  <filename>/etc/ppp/ppp.conf</filename>.  The <emphasis
		    remap=tt>direct-server</emphasis> example should
		  suffice.</para>
	      </listitem>
	      
	      <listitem>
		<para>Create an entry in
		  <filename>/etc/ppp/ppp.linkup</filename>.</para>
	      </listitem>
	      
	      <listitem>
		<para>Update your <filename>/etc/rc.conf</filename> (or
		  <emphasis remap=tt>sysconfig</emphasis>) file.</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Acknowledgments</title>
	  
	  <para>This section of the handbook was last updated on Sun Sep 7,
	    1997 by &a.brian;</para>
	  
	  <para>Thanks to the following for their input, comments &amp;
	    suggestions:</para>
	  
	  <para>&a.nik;</para>
	  
	  <para>&a.dirkvangulik;</para>
	  
	  <para>&a.pjc;</para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="ppp">
	<title>Setting up Kernel PPP</title>
	
	<para><emphasis>Contributed by &a.gena;.</emphasis></para>
	
	<para>Before you start setting up PPP on your machine make sure that
	  pppd is located in /usr/sbin and directory /etc/ppp exists.</para>
	
	<para>pppd can work in two modes:
	  <orderedlist>
	    
	    <listitem>
	      <para> as a "client" , i.e. you want to connect your machine to
		outside world via PPP serial connection or modem line.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para> as a "server" , i.e. your machine is located on the
		network and used to connect other computers using PPP.</para>
	    </listitem>
	    
	  </orderedlist> In both cases you will need to set up an options file
	  (<filename>/etc/ppp/options</filename> or
	  <filename>~/.ppprc</filename> if you have more then one user on your
	  machine that uses PPP).</para>
	
	<para>You also will need some modem/serial software ( preferably
	  kermit ) so you can dial and establish connection with remote
	  host.</para>
	
	
	<sect2>
	  <title>Working as a PPP client</title>
	  
	  <para>I used the following <filename>/etc/ppp/options</filename> to
	    connect to CISCO terminal server PPP line. <literallayout>crtscts
	      # enable hardware flow control modem		# modem
	      control line noipdefault	# remote PPP server must supply your
	      IP address. # if the remote host doesn't send your IP during
	      IPCP # negotiation , remove this option passive		# wait
	      for LCP packets domain ppp.foo.com	# put your domain name
	      here :&lt;remote_ip&gt;	# put the IP of remote PPP host here #
	      it will be used to route packets via PPP link # if you didn't
	      specified the noipdefault option # change this line to
	      &lt;local_ip&gt;:&lt;remote_ip&gt; defaultroute	# put this if
	      you want that PPP server will be your # default
	      router</literallayout>
	  </para>
	  
	  <para>To connect:
	    <orderedlist>
	      
	      <listitem>
		<para> Dial to the remote host using kermit ( or other modem
		  program ) enter your user name and password ( or whatever is
		  needed to enable PPP on the remote host )
		</para>
	      </listitem>
	      
	      <listitem>
		<para> Exit kermit. ( without hanging up the line )
		</para>
	      </listitem>
	      
	      <listitem>
		<para> enter:  <literallayout>/usr/src/usr.sbin/pppd.new/pppd
		    /dev/tty01 19200</literallayout> ( put the appropriate
		  speed and device name )</para>
	      </listitem>
	      
	    </orderedlist>
	  </para>
	  
	  <para>Now your computer is connected with PPP. If the connection
	    fails for some reasons you can add the "debug" option to the
	    <filename>/etc/ppp/options</filename> file and check messages on
	    the console to track the problem</para>
	  
	  <para>Following <filename>/etc/ppp/pppup</filename> script will make
	    all 3 stages automatically: <literallayout>#!/bin/sh  ps ax |grep
	      pppd |grep -v grep pid=`ps ax |grep pppd |grep -v grep|awk
	      '{print $1;}'` if [ "X${pid}" != "X" ] ; then echo 'killing
	      pppd, PID=' ${pid} kill ${pid} fi ps ax |grep kermit |grep -v
	      grep pid=`ps ax |grep kermit |grep -v grep|awk '{print $1;}'` if
	      [ "X${pid}" != "X" ] ; then echo 'killing kermit, PID=' ${pid}
	      kill -9 ${pid} fi ifconfig ppp0 down ifconfig ppp0 delete kermit
	      -y /etc/ppp/kermit.dial pppd /dev/tty01 19200</literallayout>
	  </para>
	  
	  <para><filename>/etc/ppp/kermit.dial</filename> is kermit script
	    that dials and makes all necessary authorization on the remote
	    host. ( Example of such script is attached to the end of this
	    document )</para>
	  
	  <para>Use the following <filename>/etc/ppp/pppdown</filename> script
	    to disconnect the PPP line: <literallayout>#!/bin/sh pid=`ps ax
	      |grep pppd |grep -v grep|awk '{print $1;}'` if [ X${pid} != "X"
	      ] ; then echo 'killing pppd, PID=' ${pid} kill -TERM ${pid} fi
	      ps ax |grep kermit |grep -v grep pid=`ps ax |grep kermit |grep
	      -v grep|awk '{print $1;}'` if [ "X${pid}" != "X" ] ; then echo
	      'killing kermit, PID=' ${pid} kill -9 ${pid} fi /sbin/ifconfig
	      ppp0 down /sbin/ifconfig ppp0 delete kermit -y
	      /etc/ppp/kermit.hup  /etc/ppp/ppptest</literallayout>
	  </para>
	  
	  <para>Check if PPP is still running
	    (<filename>/usr/etc/ppp/ppptest</filename>):
	    <literallayout>#!/bin/sh pid=`ps ax| grep pppd |grep -v grep|awk
	      '{print $1;}'` if [ X${pid} != "X" ] ; then echo 'pppd running:
	      PID=' ${pid-NONE} else echo 'No pppd running.' fi set -x netstat
	      -n -I ppp0 ifconfig ppp0</literallayout>
	  </para>
	  
	  <para>Hangs up modem line
	    (<filename>/etc/ppp/kermit.hup</filename>): <literallayout>set
	      line /dev/tty01	; put your modem device here set speed 19200
	      set file type binary set file names literal set win 8 set rec
	      pack 1024 set send pack 1024 set block 3 set term bytesize 8 set
	      command bytesize 8 set flow none pau 1 out +++ inp 5 OK out
	      ATH0\13 echo \13 exit</literallayout>
	  </para>
	  
	  <para>Here is an alternate method using <emphasis
	      remap=tt>chat</emphasis> instead of <emphasis
	      remap=tt>kermit</emphasis>.</para>
	  
	  <para><emphasis>Contributed by &a.rhuff;.</emphasis></para>
	  
	  <para>The following two files are sufficient to accomplish a pppd
	    connection.</para>
	  
	  <para><filename>/etc/ppp/options</filename>: <literallayout>
	      /dev/cuaa1 115200 crtscts		# enable hardware flow control
	      modem		# modem control line connect "/usr/bin/chat -f
	      /etc/ppp/login.chat.script" noipdefault	# remote PPP server
	      must supply your IP address. # if the remote host doesn't send
	      your IP during # IPCP negotiation, remove this option passive
	      # wait for LCP packets domain &lt;your.domain&gt;	# put your
	      domain name here :		# put the IP of remote PPP
	      host here # it will be used to route packets via PPP link # if
	      you didn't specified the noipdefault option # change this line
	      to &lt;local_ip&gt;:&lt;remote_ip&gt; defaultroute	# put
	      this if you want that PPP server will be # your default
	      router</literallayout>
	  </para>
	  
	  <para><filename>/etc/ppp/login.chat.script</filename>:</para>
	  
	  <para>(This should actually go into a single line.)</para>
	  
	  <para>
	    <literallayout>ABORT BUSY ABORT 'NO CARRIER' "" AT OK
	      ATDT&lt;phone.number&gt; CONNECT "" TIMEOUT 10 ogin:-\\r-ogin:
	      &lt;login-id&gt; TIMEOUT 5 sword:
	      &lt;password&gt;</literallayout>
	  </para>
	  
	  <para>Once these are installed and modified correctly, all you need
	    to do is</para>
	  
	  <para><emphasis remap=tt>pppd</emphasis>.</para>
	  
	  <para><emphasis> This sample based primarily on information provided
	      by: Trev Roydhouse
	      &lt;Trev.Roydhouse@f401.n711.z3.fidonet.org&gt; and used by
	      permission.</emphasis></para>
	  
	</sect2>
	
	<sect2>
	  <title>Working as a PPP server</title>
	  
	  <para><filename>/etc/ppp/options</filename>: <literallayout>crtscts
	      # Hardware flow control netmask 255.255.255.0		#
	      netmask ( not required ) 192.114.208.20:192.114.208.165  # ip's
	      of local and remote hosts # local ip must be different from one
	      # you assigned to the ethernet ( or other ) # interface on your
	      machine. # remote IP is ip address that will be  # assigned to
	      the remote machine domain ppp.foo.com		# your domain
	      passive				# wait for LCP modem
	      # modem line</literallayout>
	  </para>
	  
	  <para>Following <filename>/etc/ppp/pppserv</filename> script will
	    enable ppp server on your machine <literallayout>#!/bin/sh  ps ax
	      |grep pppd |grep -v grep pid=`ps ax |grep pppd |grep -v grep|awk
	      '{print $1;}'` if [ "X${pid}" != "X" ] ; then echo 'killing
	      pppd, PID=' ${pid} kill ${pid} fi ps ax |grep kermit |grep -v
	      grep pid=`ps ax |grep kermit |grep -v grep|awk '{print $1;}'` if
	      [ "X${pid}" != "X" ] ; then echo 'killing kermit, PID=' ${pid}
	      kill -9 ${pid} fi # reset ppp interface ifconfig ppp0 down
	      ifconfig ppp0 delete # enable autoanswer mode kermit -y
	      /etc/ppp/kermit.ans # run ppp pppd /dev/tty01
	      19200</literallayout>
	  </para>
	  
	  <para>Use this <filename>/etc/ppp/pppservdown</filename> script to
	    stop ppp server: <literallayout>#!/bin/sh  ps ax |grep pppd |grep
	      -v grep pid=`ps ax |grep pppd |grep -v grep|awk '{print $1;}'`
	      if [ "X${pid}" != "X" ] ; then echo 'killing pppd, PID=' ${pid}
	      kill ${pid} fi ps ax |grep kermit |grep -v grep pid=`ps ax |grep
	      kermit |grep -v grep|awk '{print $1;}'` if [ "X${pid}" != "X" ]
	      ; then echo 'killing kermit, PID=' ${pid} kill -9 ${pid} fi
	      ifconfig ppp0 down ifconfig ppp0 delete kermit -y
	      /etc/ppp/kermit.noans</literallayout>
	  </para>
	  
	  <para>Following kermit script will enable/disable autoanswer mode
	    on your modem (<filename>/etc/ppp/kermit.ans</filename>):
	    <literallayout>set line /dev/tty01 set speed 19200 set file type
	      binary set file names literal set win 8 set rec pack 1024 set
	      send pack 1024 set block 3 set term bytesize 8 set command
	      bytesize 8 set flow none pau 1 out +++ inp 5 OK out ATH0\13 inp
	      5 OK echo \13 out ATS0=1\13	; change this to out ATS0=0\13
	      if you want to disable ; autoanswer mod inp 5 OK echo \13
	      exit</literallayout>
	  </para>
	  
	  <para>This <filename>/etc/ppp/kermit.dial</filename> script is used
	    for dialing and authorizing on remote host. You will need to
	    customize it for your needs. Put your login and password in this
	    script , also you will need to change input statement depending on
	    responses from your modem and remote host. <literallayout>; ; put
	      the com line attached to the modem here: ; set line /dev/tty01 ;
	      ; put the modem speed here: ; set speed 19200 set file type
	      binary		; full 8 bit file xfer set file names literal
	      set win 8 set rec pack 1024 set send pack 1024 set block 3 set
	      term bytesize 8 set command bytesize 8 set flow none set modem
	      hayes set dial hangup off set carrier auto		; Then
	      SET CARRIER if necessary, set dial display on		; Then
	      SET DIAL if necessary, set input echo on set input timeout
	      proceed set input case ignore def \%x 0			;
	      login prompt counter goto slhup :slcmd
	      ; put the modem in command mode echo Put the modem in command
	      mode. clear				; Clear unread
	      characters from input buffer pause 1 output +++
	      ; hayes escape sequence input 1 OK\13\10		; wait for OK
	      if success goto slhup output \13 pause 1 output at\13 input 1
	      OK\13\10 if fail goto slcmd		; if modem doesn't
	      answer OK, try again :slhup				; hang
	      up the phone clear				; Clear unread
	      characters from input buffer pause 1 echo Hanging up the phone.
	      output ath0\13			; hayes command for on hook
	      input 2 OK\13\10 if fail goto slcmd		; if no OK
	      answer, put modem in command mode :sldial
	      ; dial the number pause 1 echo Dialing. output
	      atdt9,550311\13\10		; put phone number here assign
	      \%x 0			; zero the time counter :look clear
	      ; Clear unread characters from input buffer increment \%x
	      ; Count the seconds input 1 {CONNECT } if success goto sllogin
	      reinput 1 {NO CARRIER\13\10} if success goto sldial reinput 1
	      {NO DIALTONE\13\10} if success goto slnodial reinput 1 {\255} if
	      success goto slhup reinput 1 {\127} if success goto slhup if
	      &lt; \%x 60 goto look else goto slhup :sllogin
	      ; login assign \%x 0			; zero the time
	      counter pause 1 echo Looking for login prompt. :slloop increment
	      \%x			; Count the seconds clear
	      ; Clear unread characters from input buffer output \13 ; ; put
	      your expected login prompt here: ; input 1 {Username: } if
	      success goto sluid reinput 1 {\255} if success goto slhup
	      reinput 1 {\127} if success goto slhup if &lt; \%x 10 goto
	      slloop		; try 10 times to get a login prompt else goto
	      slhup			; hang up and start again if 10
	      failures :sluid ; ; put your userid here: ; output ppp-login\13
	      input 1 {Password: } ; ; put your password here: ; output
	      ppp-password\13 input 1 {Entering SLIP mode.} echo quit
	      :slnodial echo \7No dialtone.  Check the telephone line!\7 exit
	      1 ; local variables: ; mode: csh ; comment-start: "; " ;
	      comment-start-skip: "; " ; end:</literallayout>
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="slipc">
	<title>Setting up a SLIP Client</title>
	
	<para><emphasis>Contributed by &a.asami;<!-- <br> -->8 Aug
	    1995.</emphasis></para>
	
	<para>The following is one way to set up a FreeBSD machine for SLIP on
	  a static host network.  For dynamic hostname assignments (i.e., your
	  address changes each time you dial up), you probably need to do
	  something much fancier.</para>
	
	<para>First, determine which serial port your modem is connected to.
	  I have a symbolic link <emphasis remap=tt>/dev/modem -&gt;
	    cuaa1</emphasis>, and only use the modem name in my configuration
	  files.  It can become quite cumbersome when you need to fix a bunch
	  of files in <filename>/etc</filename> and
	  <filename>.kermrc</filename>'s all over the system!  (Note that
	  <filename>/dev/cuaa0</filename> is COM1, <emphasis
	    remap=tt>cuaa1</emphasis> is COM2, etc.)</para>
	
	<para>Make sure you have <literallayout>pseudo-device   sl
	    1</literallayout> in your kernel's config file.  It is included in
	  the GENERIC kernel, so this will not be a problem unless you deleted
	  it.</para>
	
	
	<sect2>
	  <title>Things you have to do only once</title>
	  
	  <para>
	    <orderedlist>
	      
	      <listitem>
		<para>Add your home machine, the gateway and nameservers to
		  your <filename>/etc/hosts</filename> file.  Mine looks like
		  this: <literallayout>127.0.0.1               localhost
		    loghost 136.152.64.181          silvia.HIP.Berkeley.EDU
		    silvia.HIP silvia 136.152.64.1
		    inr-3.Berkeley.EDU inr-3 slip-gateway 128.32.136.9
		    ns1.Berkeley.edu ns1 128.32.136.12
		    ns2.Berkeley.edu ns2</literallayout> By the way, silvia is
		  the name of the car that I had when I was back in Japan (it
		  is called 2?0SX here in U.S.).
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Make sure you have "hosts" before "bind" in your
		  <filename>/etc/host.conf</filename>. Otherwise, funny things
		  may happen.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Edit the file <filename>/etc/rc.conf</filename>.  Note
		  that you should edit the file
		  <filename>/etc/sysconfig</filename> instead if you are
		  running FreeBSD previous to version 2.2.2.
		  <orderedlist>
		    
		    <listitem>
		      <para>Set your hostname by editing the line that says:
			<literallayout>hostname=myname.my.domain</literallayout> You should give it your full Internet hostname.
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para>Add sl0 to the list of network interfaces by
			changing the line that says:
			<literallayout>network_interfaces="lo0"</literallayout> to: <literallayout>network_interfaces="lo0 sl0"</literallayout>
			
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para>Set the startup flags of sl0 by adding a line:
			<literallayout>ifconfig_sl0="inet ${hostname}
			  slip-gateway netmask 0xffffff00 up"
			</literallayout>
			
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para>Designate the default router by changing the line:
			<literallayout>defaultrouter=NO</literallayout> to:
			<literallayout>defaultrouter=slip-gateway</literallayout>
		      </para>
		    </listitem>
		    
		  </orderedlist>
		  
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Make a file <filename>/etc/resolv.conf</filename> which
		  contains: <literallayout>domain HIP.Berkeley.EDU nameserver
		    128.32.136.9 nameserver 128.32.136.12</literallayout> As
		  you can see, these set up the nameserver hosts.  Of course,
		  the actual domain names and addresses depend on your
		  environment.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Set the password for root and toor (and any other
		  accounts that does not have a password).  Use passwd, do not
		  edit the <filename>/etc/passwd</filename> or
		  <filename>/etc/master.passwd</filename> files!
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Reboot your machine and make sure it comes up with the
		  correct hostname.</para>
	      </listitem>
	      
	    </orderedlist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Making a SLIP connection</title>
	  
	  <para>
	    <orderedlist>
	      
	      <listitem>
		<para>Dial up, type "slip" at the prompt, enter your machine
		  name and password.  The things you need to enter depends on
		  your environment.  I use kermit, with a script like this:
		  <literallayout># kermit setup set modem hayes set line
		    /dev/modem set speed 115200 set parity none set flow
		    rts/cts set terminal bytesize 8 set file type binary # The
		    next macro will dial up and login define slip dial
		    643-9600, input 10 =&gt;, if failure stop, - output
		    slip\x0d, input 10 Username:, if failure stop, - output
		    silvia\x0d, input 10 Password:, if failure stop, - output
		    ***\x0d, echo \x0aCONNECTED\x0a</literallayout> (of
		  course, you have to change the hostname and password to fit
		  yours).  Then you can just type "slip" from the kermit
		  prompt to get connected. <emphasis remap=bf>Note</emphasis>:
		  leaving your password in plain text anywhere in the
		  filesystem is generally a BAD idea.  Do it at your own risk.
		  I am just too lazy.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Leave the kermit there (you can suspend it by "z") and
		  as root, type <literallayout>slattach -h -c -s 115200
		    /dev/modem</literallayout> if you are able to "ping" hosts
		  on the other side of the router, you are connected! If it
		  does not work, you might want to try "-a" instead of "-c" as
		  an argument to slattach.</para>
	      </listitem>
	      
	    </orderedlist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>How to shutdown the connection</title>
	  
	  <para>Type "kill -INT `cat /var/run/slattach.modem.pid`" (as root)
	    to kill slattach.  Then go back to kermit ("fg" if you suspended
	    it) and exit from it ("q").</para>
	  
	  <para>The slattach man page says you have to use "ifconfig sl0 down"
	    to mark the interface down, but this does not seem to make any
	    difference for me.  ("ifconfig sl0" reports the same
	    thing.)</para>
	  
	  <para>Some times, your modem might refuse to drop the carrier (mine
	    often does).  In that case, simply start kermit and quit it again.
	    It usually goes out on the second try.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Troubleshooting</title>
	  
	  <para>If it does not work, feel free to ask me.  The things that
	    people tripped over so far:
	    <itemizedlist>
	      
	      <listitem>
		<para>Not using "-c" or "-a" in slattach (I have no idea why
		  this can be fatal, but adding this flag solved the problem
		  for at least one person)
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Using "s10" instead of "sl0" (might be hard to see the
		  difference on some fonts).
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Try "ifconfig sl0" to see your interface status.  I get:
		  <literallayout>silvia# ifconfig sl0 sl0:
		    flags=10&lt;POINTOPOINT&gt; inet 136.152.64.181 --&gt;
		    136.152.64.1 netmask ffffff00</literallayout>
		  
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Also, <command>netstat -r</command> will give the
		  routing table, in case you get the "no route to host"
		  messages from ping.  Mine looks like: <literallayout>silvia#
		    netstat -r Routing tables Destination      Gateway
		    Flags     Refs     Use  IfaceMTU    Rtt    Netmasks: (root
		    node) (root node) Route Tree for Protocol Family inet:
		    (root node) =&gt; default          inr-3.Berkeley.EDU UG
		    8   224515  sl0 -      -      localhost.Berkel
		    localhost.Berkeley UH          5    42127  lo0 -
		    0.438 inr-3.Berkeley.E silvia.HIP.Berkele UH          1
		    0  sl0 -      -      silvia.HIP.Berke localhost.Berkeley
		    UGH        34 47641234  lo0 -       0.438 (root
		    node)</literallayout> (this is after transferring a bunch
		  of files, your numbers should be smaller).</para>
	      </listitem>
	      
	    </itemizedlist>
	    
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="slips">
	<title>Setting up a SLIP Server</title>
	
	<para><emphasis>Contributed by &a.ghelmer;.<!-- <br> --> v1.0, 15 May
	    1995.</emphasis></para>
	
	<para>This document provides suggestions for setting up SLIP Server
	  services on a FreeBSD system, which typically means configuring your
	  system to automatically startup connections upon login for remote
	  SLIP clients. The author has written this document based on his
	  experience; however, as your system and needs may be different, this
	  document may not answer all of your questions, and the author cannot
	  be responsible if you damage your system or lose data due to
	  attempting to follow the suggestions here.</para>
	
	<para>This guide was originally written for SLIP Server services on a
	  FreeBSD 1.x system.  It has been modified to reflect changes in the
	  pathnames and the removal of the SLIP interface compression flags in
	  early versions of FreeBSD 2.X, which appear to be the only major
	  changes between FreeBSD versions.  If you do encounter mistakes in
	  this document, please email the author with enough information to
	  help correct the problem.</para>
	
	
	<sect2
	  id="slips-prereqs">
	  <title>Prerequisites</title>
	  
	  <para>This document is very technical in nature, so background
	    knowledge is required.  It is assumed that you are familiar with
	    the TCP/IP network protocol, and in particular, network and node
	    addressing, network address masks, subnetting, routing, and
	    routing protocols, such as RIP.  Configuring SLIP services on a
	    dial-up server requires a knowledge of these concepts, and if you
	    are not familiar with them, please read a copy of either Craig
	    Hunt's <emphasis>TCP/IP Network Administration</emphasis>
	    published by O'Reilly &amp; Associates, Inc. (ISBN Number
	    0-937175-82-X), or Douglas Comer's books on the TCP/IP
	    protocol.</para>
	  
	  <para>It is further assumed that you have already setup your
	    modem(s) and configured the appropriate system files to allow
	    logins through your modems.  If you have not prepared your system
	    for this yet, please see the tutorial for configuring dialup
	    services; if you have a World-Wide Web browser available, browse
	    the list of tutorials at
	    <filename>http://www.freebsd.org/</filename>; otherwise, check the
	    place where you found this document for a document named
	    <filename>dialup.txt</filename> or something similar.  You may
	    also want to check the manual pages for <emphasis
	      remap=tt>sio(4)</emphasis> for information on the serial port
	    device driver and <emphasis remap=tt>ttys(5)</emphasis>, <emphasis
	      remap=tt>gettytab(5)</emphasis>, <command>getty(8)</command>,
	    &amp; <command>init(8)</command> for information relevant to
	    configuring the system to accept logins on modems, and perhaps
	    <command>stty(1)</command> for information on setting serial port
	    parameters [such as <emphasis remap=tt>clocal</emphasis> for
	    directly-connected serial interfaces].</para>
	  
	</sect2>
	
	<sect2>
	  <title>Quick Overview</title>
	  
	  <para>In its typical configuration, using FreeBSD as a SLIP server
	    works as follows: a SLIP user dials up your FreeBSD SLIP Server
	    system and logs in with a special SLIP login ID that uses
	    <filename>/usr/sbin/sliplogin</filename> as the special user's
	    shell.  The <emphasis remap=tt>sliplogin</emphasis> program
	    browses the file <filename>/etc/sliphome/slip.hosts</filename> to
	    find a matching line for the special user, and if it finds a
	    match, connects the serial line to an available SLIP interface and
	    then runs the shell script
	    <filename>/etc/sliphome/slip.login</filename> to configure the
	    SLIP interface.</para>
	  
	  
	  <sect3>
	    <title>An Example of a SLIP Server Login</title>
	    
	    <para>For example, if a SLIP user ID were <emphasis
		remap=tt>Shelmerg</emphasis>, <emphasis
		remap=tt>Shelmerg</emphasis>'s entry in
	      <filename>/etc/master.passwd</filename> would look something
	      like this (except it would be all on one line):</para>
	    
	    <para>
	      <informalexample>
		<screen>Shelmerg:password:1964:89::0:0:Guy Helmer - SLIP:
		  /usr/users/Shelmerg:/usr/sbin/sliplogin</screen>
	      </informalexample>
	    </para>
	    
	    <para>and, when <emphasis remap=tt>Shelmerg</emphasis> logs in,
	      <emphasis remap=tt>sliplogin</emphasis> will search
	      <filename>/etc/sliphome/slip.hosts</filename> for a line that
	      had a matching user ID; for example, there may be a line in
	      <filename>/etc/sliphome/slip.hosts</filename> that reads:</para>
	    
	    <para>
	      <informalexample>
		<screen>Shelmerg        dc-slip sl-helmer       0xfffffc00
		  autocomp</screen>
	      </informalexample>
	    </para>
	    
	    <para><emphasis remap=tt>sliplogin</emphasis> will find that
	      matching line, hook the serial line into the next available SLIP
	      interface, and then execute
	      <filename>/etc/sliphome/slip.login</filename> like this:</para>
	    
	    <para>
	      <informalexample>
		<screen>/etc/sliphome/slip.login 0 19200 Shelmerg dc-slip
		  sl-helmer 0xfffffc00 autocomp</screen>
	      </informalexample>
	    </para>
	    
	    <para>If all goes well,
	      <filename>/etc/sliphome/slip.login</filename> will issue an
	      <emphasis remap=tt>ifconfig</emphasis> for the SLIP interface to
	      which <emphasis remap=tt>sliplogin</emphasis> attached itself
	      (slip interface 0, in the above example, which was the first
	      parameter in the list given to <filename>slip.login</filename>)
	      to set the local IP address (<emphasis
		remap=tt>dc-slip</emphasis>), remote IP address (<emphasis
		remap=tt>sl-helmer</emphasis>), network mask for the SLIP
	      interface (<literal>0xfffffc00</literal>), and any additional
	      flags (<emphasis remap=tt>autocomp</emphasis>). If something
	      goes wrong, <emphasis remap=tt>sliplogin</emphasis> usually logs
	      good informational messages via the daemon syslog facility,
	      which usually goes into <filename>/var/log/messages</filename>
	      (see the manual pages for <command>syslogd(8)</command> and
	      <emphasis remap=tt>syslog.conf(5)</emphasis>, and perhaps check
	      <filename>/etc/syslog.conf</filename> to see to which files
	      <emphasis remap=tt>syslogd</emphasis> is logging).</para>
	    
	    <para>OK, enough of the examples -- let us dive into setting up
	      the system.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title>Kernel Configuration</title>
	  
	  <para>FreeBSD's default kernels usually come with two SLIP
	    interfaces defined (<emphasis remap=tt>sl0</emphasis> and
	    <emphasis remap=tt>sl1</emphasis>); you can use <emphasis
	      remap=tt>netstat -i</emphasis> to see whether these interfaces
	    are defined in your kernel.</para>
	  
	  <para>Sample output from <command>netstat -i</command>:</para>
	  
	  <para>
	    <informalexample>
	      <screen>Name  Mtu   Network     Address            Ipkts Ierrs
		Opkts Oerrs  Coll ed0   1500  &lt;Link&gt;0.0.c0.2c.5f.4a
		291311     0   174209     0   133 ed0   1500  138.247.224
		ivory             291311     0   174209     0   133 lo0
		65535 &lt;Link&gt;                            79     0
		79     0     0 lo0   65535 loop        localhost
		79     0       79     0     0 sl0*  296   &lt;Link&gt;
		0     0        0     0     0 sl1*  296   &lt;Link&gt;
		0     0        0     0     0</screen>
	    </informalexample>
	  </para>
	  
	  <para>The <emphasis remap=tt>sl0</emphasis> and <emphasis
	      remap=tt>sl1</emphasis> interfaces shown in <emphasis
	      remap=tt>netstat -i</emphasis>'s output indicate that there are
	    two SLIP interfaces built into the kernel.  (The asterisks after
	    the <emphasis remap=tt>sl0</emphasis> and <emphasis
	      remap=tt>sl1</emphasis> indicate that the interfaces are
	    ``down''.)</para>
	  
	  <para>However, FreeBSD's default kernels do not come configured to
	    forward packets (ie, your FreeBSD machine will not act as a
	    router) due to Internet RFC requirements for Internet hosts (see
	    RFC's 1009 [Requirements for Internet Gateways], 1122
	    [Requirements for Internet Hosts -- Communication Layers], and
	    perhaps 1127 [A Perspective on the Host Requirements RFCs]), so if
	    you want your FreeBSD SLIP Server to act as a router, you will
	    have to edit the <filename>/etc/rc.conf</filename> file (called
	    <filename>/etc/sysconfig</filename> in FreeBSD releases prior to
	    2.2.2) and change the setting of the <emphasis
	      remap=bf>gateway</emphasis> variable to <acronym>YES</acronym>.
	    If you have an older system which predates even the
	    <filename>/etc/sysconfig</filename> file, then add the following
	    command: <literallayout>sysctl -w net.inet.ip.forwarding =
	      1</literallayout> to your <filename>/etc/rc.local</filename>
	    file.</para>
	  
	  <para>You will then need to reboot for the new settings to take
	    effect.</para>
	  
	  <para>You will notice that near the end of the default kernel
	    configuration file (<filename>/sys/i386/conf/GENERIC</filename>)
	    is a line that reads:</para>
	  
	  <para>
	    <informalexample>
	      <screen>pseudo-device sl 2</screen>
	    </informalexample>
	  </para>
	  
	  <para>which is the line that defines the number of SLIP devices
	    available in the kernel; the number at the end of the line is the
	    maximum number of SLIP connections that may be operating
	    simultaneously.</para>
	  
	  <para>Please refer to <xref linkend="kernelconfig"
	      remap="Configuring the FreeBSD Kernel"> for help in
	    reconfiguring your kernel.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Sliplogin Configuration</title>
	  
	  <para>As mentioned earlier, there are three files in the
	    <filename>/etc/sliphome</filename> directory that are part of the
	    configuration for <filename>/usr/sbin/sliplogin</filename> (see
	    <command>sliplogin(8)</command> for the actual manual page for
	    <emphasis remap=tt>sliplogin</emphasis>):
	    <filename>slip.hosts</filename>, which defines the SLIP users
	    &amp; their associated IP addresses;
	    <filename>slip.login</filename>, which usually just configures the
	    SLIP interface; and (optionally) <filename>slip.logout</filename>,
	    which undoes <filename>slip.login</filename>'s effects when the
	    serial connection is terminated.</para>
	  
	  
	  <sect3>
	    <title>slip.hosts Configuration</title>
	    
	    <para><filename>/etc/sliphome/slip.hosts</filename> contains lines
	      which have at least four items, separated by whitespace:</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para> SLIP user's login ID</para>
		</listitem>
		
		<listitem>
		  <para> Local address (local to the SLIP server) of the SLIP
		    link</para>
		</listitem>
		
		<listitem>
		  <para> Remote address of the SLIP link</para>
		</listitem>
		
		<listitem>
		  <para> Network mask</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>The local and remote addresses may be host names (resolved
	      to IP addresses by <filename>/etc/hosts</filename> or by the
	      domain name service, depending on your specifications in
	      <filename>/etc/host.conf</filename>), and I believe the network
	      mask may be a name that can be resolved by a lookup into
	      <filename>/etc/networks</filename>.  On a sample system,
	      <filename>/etc/sliphome/slip.hosts</filename> looks like
	      this:</para>
	    
	    <para>
	      <informalexample>
		<screen>----- begin /etc/sliphome/slip.hosts ----- # # login
		  local-addr      remote-addr     mask            opt1    opt2
		  #
		  (normal,compress,noicmp) # Shelmerg  dc-slip
		  sl-helmerg      0xfffffc00      autocomp ----- end
		  /etc/sliphome/slip.hosts ------</screen>
	      </informalexample>
	    </para>
	    
	    <para>At the end of the line is one or more of the options.</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para> <emphasis remap=tt>normal</emphasis> - no header
		    compression</para>
		</listitem>
		
		<listitem>
		  <para> <emphasis remap=tt>compress</emphasis> - compress
		    headers</para>
		</listitem>
		
		<listitem>
		  <para> <emphasis remap=tt>autocomp</emphasis> - compress
		    headers if the remote end allows it</para>
		</listitem>
		
		<listitem>
		  <para> <emphasis remap=tt>noicmp</emphasis> - disable ICMP
		    packets (so any ``ping'' packets will be dropped instead
		    of using up your bandwidth)</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>Note that <emphasis remap=tt>sliplogin</emphasis> under
	      early releases of FreeBSD 2 ignored the options that FreeBSD 1.x
	      recognized, so the options <emphasis remap=tt>normal</emphasis>,
	      <emphasis remap=tt>compress</emphasis>, <emphasis
		remap=tt>autocomp</emphasis>, and <emphasis
		remap=tt>noicmp</emphasis> had no effect until support was
	      added in FreeBSD 2.2 (unless your
	      <filename>slip.login</filename> script included code to make use
	      of the flags).</para>
	    
	    <para>Your choice of local and remote addresses for your SLIP
	      links depends on whether you are going to dedicate a TCP/IP
	      subnet or if you are going to use ``proxy ARP'' on your SLIP
	      server (it is not ``true'' proxy ARP, but that is the
	      terminology used in this document to describe it).  If you are
	      not sure which method to select or how to assign IP addresses,
	      please refer to the TCP/IP books referenced in the <xref
		linkend="slips-prereqs" remap="slips-prereqs"> section
	      and/or consult your IP network manager.</para>
	    
	    <para>If you are going to use a separate subnet for your SLIP
	      clients, you will need to allocate the subnet number out of your
	      assigned IP network number and assign each of your SLIP client's
	      IP numbers out of that subnet.  Then, you will probably either
	      need to configure a static route to the SLIP subnet via your
	      SLIP server on your nearest IP router, or install <emphasis
		remap=tt>gated</emphasis> on your FreeBSD SLIP server and
	      configure it to talk the appropriate routing protocols to your
	      other routers to inform them about your SLIP server's route to
	      the SLIP subnet.</para>
	    
	    <para>Otherwise, if you will use the ``proxy ARP'' method, you
	      will need to assign your SLIP client's IP addresses out of your
	      SLIP server's Ethernet subnet, and you will also need to adjust
	      your <filename>/etc/sliphome/slip.login</filename> and
	      <filename>/etc/sliphome/slip.logout</filename> scripts to use
	      <command>arp(8)</command> to manage the proxy-ARP entries in the
	      SLIP server's ARP table.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>slip.login Configuration</title>
	    
	    <para>The typical <filename>/etc/sliphome/slip.login</filename>
	      file looks like this:</para>
	    
	    <para>
	      <informalexample>
		<screen>----- begin /etc/sliphome/slip.login ----- #!/bin/sh -
		  # #	@(#)slip.login  5.1 (Berkeley) 7/1/90 # # generic
		  login file for a slip line.  sliplogin invokes this with #
		  the parameters: #      1        2         3        4
		  5         6     7-n #   slipunit ttyspeed loginname
		  local-addr remote-addr mask opt-args # /sbin/ifconfig sl$1
		  inet $4 $5 netmask $6 ----- end /etc/sliphome/slip.login
		  -----</screen>
	      </informalexample>
	    </para>
	    
	    <para>This <filename>slip.login</filename> file merely ifconfig's
	      the appropriate SLIP interface with the local and remote
	      addresses and network mask of the SLIP interface.</para>
	    
	    <para>If you have decided to use the ``proxy ARP'' method (instead
	      of using a separate subnet for your SLIP clients), your
	      <filename>/etc/sliphome/slip.login</filename> file will need to
	      look something like this:</para>
	    
	    <para>
	      <informalexample>
		<screen>----- begin /etc/sliphome/slip.login for "proxy ARP"
		  ----- #!/bin/sh - # #	@(#)slip.login  5.1 (Berkeley) 7/1/90
		  # # generic login file for a slip line.  sliplogin invokes
		  this with # the parameters: #      1        2         3
		  4          5         6     7-n #   slipunit ttyspeed
		  loginname local-addr remote-addr mask opt-args #
		  /sbin/ifconfig sl$1 inet $4 $5 netmask $6  # Answer ARP
		  requests for the SLIP client with our Ethernet addr
		  /usr/sbin/arp -s $5 00:11:22:33:44:55 pub ----- end
		  /etc/sliphome/slip.login for "proxy ARP" -----</screen>
	      </informalexample>
	    </para>
	    
	    <para>The additional line in this <filename>slip.login</filename>,
	      <command>arp -s &#36;5 00:11:22:33:44:55 pub</command>, creates
	      an ARP entry in the SLIP server's ARP table.  This ARP entry
	      causes the SLIP server to respond with the SLIP server's
	      Ethernet MAC address whenever a another IP node on the Ethernet
	      asks to speak to the SLIP client's IP address.</para>
	    
	    <para>When using the example above, be sure to replace the
	      Ethernet MAC address (<emphasis
		remap=tt>00:11:22:33:44:55</emphasis>) with the MAC address of
	      your system's Ethernet card, or your ``proxy ARP'' will
	      definitely not work! You can discover your SLIP server's
	      Ethernet MAC address by looking at the results of running
	      <command>netstat -i</command>; the second line of the output
	      should look something like:</para>
	    
	    <para>
	      <informalexample>
		<screen>ed0   1500  &lt;Link&gt;0.2.c1.28.5f.4a         191923
		  0   129457     0   116 ^^^^^^^^^^^^^^
		</screen>
	      </informalexample>
	    </para>
	    
	    <para>which indicates that this particular system's Ethernet MAC
	      address is <emphasis remap=tt>00:02:c1:28:5f:4a</emphasis> --
	      the periods in the Ethernet MAC address given by
	      <command>netstat -i</command> must be changed to colons and
	      leading zeros should be added to each single-digit hexadecimal
	      number to convert the address into the form that
	      <command>arp(8)</command> desires; see the manual page on
	      <command>arp(8)</command> for complete information on
	      usage.</para>
	    
	    <para>Note that when you create
	      <filename>/etc/sliphome/slip.login</filename> and
	      <filename>/etc/sliphome/slip.logout</filename>, the ``execute''
	      bit (ie, <command>chmod 755 /etc/sliphome/slip.login
		/etc/sliphome/slip.logout</command>) must be set, or <emphasis
		remap=tt>sliplogin</emphasis> will be unable to execute
	      it.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>slip.logout Configuration</title>
	    
	    <para><filename>/etc/sliphome/slip.logout</filename> is not
	      strictly needed (unless you are implementing ``proxy ARP''), but
	      if you decide to create it, this is an example of a basic
	      <filename>slip.logout</filename> script:</para>
	    
	    <para>
	      <informalexample>
		<screen>----- begin /etc/sliphome/slip.logout ----- #!/bin/sh
		  - # #	slip.logout # # logout file for a slip line.
		  sliplogin invokes this with # the parameters: #      1
		  2         3        4          5         6     7-n #
		  slipunit ttyspeed loginname local-addr remote-addr mask
		  opt-args # /sbin/ifconfig sl$1 down ----- end
		  /etc/sliphome/slip.logout -----</screen>
	      </informalexample>
	    </para>
	    
	    <para>If you are using ``proxy ARP'', you will want to have
	      <filename>/etc/sliphome/slip.logout</filename> remove the ARP
	      entry for the SLIP client:</para>
	    
	    <para>
	      <informalexample>
		<screen>----- begin /etc/sliphome/slip.logout for "proxy ARP"
		  ----- #!/bin/sh - # #       @(#)slip.logout # # logout file
		  for a slip line.  sliplogin invokes this with # the
		  parameters: #      1        2         3        4          5
		  6     7-n #   slipunit ttyspeed loginname local-addr
		  remote-addr mask opt-args # /sbin/ifconfig sl$1 down # Quit
		  answering ARP requests for the SLIP client /usr/sbin/arp -d
		  $5 ----- end /etc/sliphome/slip.logout for "proxy ARP"
		  -----</screen>
	      </informalexample>
	    </para>
	    
	    <para>The <command>arp -d &#36;5</command> removes the ARP entry
	      that the ``proxy ARP'' <filename>slip.login</filename> added
	      when the SLIP client logged in.</para>
	    
	    <para>It bears repeating: make sure
	      <filename>/etc/sliphome/slip.logout</filename> has the execute
	      bit set for after you create it (ie, <emphasis remap=tt>chmod
		755 /etc/sliphome/slip.logout</emphasis>).</para>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title>Routing Considerations</title>
	  
	  <para>If you are not using the ``proxy ARP'' method for routing
	    packets between your SLIP clients and the rest of your network
	    (and perhaps the Internet), you will probably either have to add
	    static routes to your closest default router(s) to route your SLIP
	    client subnet via your SLIP server, or you will probably need to
	    install and configure <emphasis remap=tt>gated</emphasis> on your
	    FreeBSD SLIP server so that it will tell your routers via
	    appropriate routing protocols about your SLIP subnet.</para>
	  
	  
	  <sect3>
	    <title>Static Routes</title>
	    
	    <para>Adding static routes to your nearest default routers can be
	      troublesome (or impossible, if you do not have authority to do
	      so...). If you have a multiple-router network in your
	      organization, some routers, such as Cisco and Proteon, may not
	      only need to be configured with the static route to the SLIP
	      subnet, but also need to be told which static routes to tell
	      other routers about, so some expertise and
	      troubleshooting/tweaking may be necessary to get
	      static-route-based routing to work.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Running gated</title>
	    
	    <para>An alternative to the headaches of static routes is to
	      install <emphasis remap=tt>gated</emphasis> on your FreeBSD SLIP
	      server and configure it to use the appropriate routing protocols
	      (RIP/OSPF/BGP/EGP) to tell other routers about your SLIP subnet.
	      You can use <emphasis remap=tt>gated</emphasis> from the
	      <xref linkend="ports" remap="ports collection"> or retrieve and
	      build it yourself from <ulink
		URL="ftp://ftp.gated.merit.edu/research.and.development/gated/">the GateD anonymous ftp site</ulink>; I believe the current version as of this writing is <filename>gated-R3_5Alpha_8.tar.Z</filename>, which includes support for FreeBSD ``out-of-the-box''.  Complete information and documentation on <emphasis remap=tt>gated</emphasis> is available on the Web starting at <ulink URL="http://www.gated.merit.edu/">the Merit GateD Consortium</ulink>. Compile and install it, and then write a <filename>/etc/gated.conf</filename> file to configure your gated; here is a sample, similar to what the author used on a FreeBSD SLIP server:</para>
	    
	    <para>
	      <informalexample>
		<screen>----- begin sample /etc/gated.conf for gated version
		  3.5Alpha5 ----- # # gated configuration file for dc.dsu.edu;
		  for gated version 3.5alpha5 # Only broadcast RIP information
		  for xxx.xxx.yy out the ed Ethernet interface # # # tracing
		  options # traceoptions "/var/tmp/gated.output" replace size
		  100k files 2 general ; rip yes { interface sl noripout
		  noripin ; interface ed ripin ripout version 1 ; traceoptions
		  route ; } ; # # Turn on a bunch of tracing info for the
		  interface to the kernel: kernel { traceoptions remnants
		  request routes info interface ; } ; # # Propagate the route
		  to xxx.xxx.yy out the Ethernet interface via RIP # export
		  proto rip interface ed { proto direct { xxx.xxx.yy mask
		  255.255.252.0 metric 1; # SLIP connections } ; } ; # #
		  Accept routes from RIP via ed Ethernet interfaces import
		  proto rip interface ed { all ; } ; ----- end sample
		  /etc/gated.conf -----</screen>
	      </informalexample>
	    </para>
	    
	    <para>The above sample <filename>gated.conf</filename> file
	      broadcasts routing information regarding the SLIP subnet
	      <filename>xxx.xxx.yy</filename> via RIP onto the Ethernet; if
	      you are using a different Ethernet driver than the <emphasis
		remap=tt>ed</emphasis> driver, you will need to change the
	      references to the <emphasis remap=tt>ed</emphasis> interface
	      appropriately.  This sample file also sets up tracing to
	      <filename>/var/tmp/gated.output</filename> for debugging
	      <emphasis remap=tt>gated</emphasis>'s activity; you can
	      certainly turn off the tracing options if <emphasis
		remap=tt>gated</emphasis> works OK for you.  You will need to
	      change the <filename>xxx.xxx.yy</filename>'s into the network
	      address of your own SLIP subnet (be sure to change the net mask
	      in the <emphasis remap=tt>proto direct</emphasis> clause as
	      well).</para>
	    
	    <para>When you get <emphasis remap=tt>gated</emphasis> built and
	      installed and create a configuration file for it, you will need
	      to run <emphasis remap=tt>gated</emphasis> in place of <emphasis
		remap=tt>routed</emphasis> on your FreeBSD system; change the
	      <filename>routed/gated</filename> startup parameters in
	      <filename>/etc/netstart</filename> as appropriate for your
	      system.  Please see the manual page for <emphasis
		remap=tt>gated</emphasis> for information on <emphasis
		remap=tt>gated</emphasis>'s command-line parameters.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title>Acknowledgments</title>
	  
	  <para>Thanks to these people for comments and advice regarding this
	    tutorial:</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>&a.wilko;</term>
		<listitem>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>Piero Serini</term>
		
		<listitem>
		  <para>&lt;Piero@Strider.Inet.IT&gt;</para>
		  
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
      </sect1>
    </chapter>
    
    <chapter>
      <title>Advanced Networking</title>
      
      
      <sect1
	id="routing">
	<title>Gateways and Routes</title>
	
	<para><emphasis>Contributed by &a.gryphon;.<!-- <br> -->6 October
	    1995.</emphasis></para>
	
	<para>For one machine to be able to find another, there must be a
	  mechanism in place to describe how to get from one to the other.
	  This is called Routing.  A ``route'' is a defined pair of addresses:
	  a <emphasis remap=bf>destination</emphasis> and a <emphasis
	    remap=bf>gateway</emphasis>.  The pair indicates that if you are
	  trying to get to this <emphasis>destination</emphasis>, send along
	  through this <emphasis>gateway</emphasis>. There are three types of
	  destinations: individual hosts, subnets, and ``default''. The
	  ``default route'' is used if none of the other routes apply. We will
	  talk a little bit more about default routes later on.  There are
	  also three types of gateways: individual hosts, interfaces (also
	  called ``links''), and ethernet hardware addresses.</para>
	
	
	<sect2>
	  <title>An example</title>
	  
	  <para>To illustrate different aspects of routing, we will use the
	    following example which is the output of the command
	    <command>netstat -r</command>:</para>
	  
	  <para>
	    <informalexample>
	      <screen>Destination      Gateway            Flags     Refs
		Use     Netif Expire default          outside-gw         UGSc
		37      418      ppp0 localhost        localhost          UH
		0      181       lo0 test0            0:e0:b5:36:cf:4f   UHLW
		5    63288       ed0     77 10.20.30.255     link#1
		UHLW        1     2421  foobar.com       link#1             UC
		0        0  host1            0:e0:a8:37:8:1e    UHLW        3
		4601       lo0 host2            0:e0:a8:37:8:1e    UHLW
		0        5       lo0 =&gt; host2.foobar.com link#1
		UC          0        0 224              link#1	            UC
		0        0</screen>
	    </informalexample>
	  </para>
	  
	  <para>The first two lines specify the default route (which we will
	    cover in the next section) and the <emphasis
	      remap=tt>localhost</emphasis> route.</para>
	  
	  <para>The interface (<emphasis remap=tt>Netif</emphasis> column)
	    that it specifies to use for <emphasis
	      remap=tt>localhost</emphasis> is <emphasis
	      remap=tt>lo0</emphasis>, also known as the loopback device. This
	    says to keep all traffic for this destination internal, rather
	    than sending it out over the LAN, since it will only end up back
	    where it started anyway.</para>
	  
	  <para>The next thing that stands out are the ``<emphasis
	      remap=tt>0:e0:...</emphasis>'' addresses. These are ethernet
	    hardware addresses. FreeBSD will automatically identify any hosts
	    (<emphasis remap=tt>test0</emphasis> in the example) on the local
	    ethernet and add a route for that host, directly to it over the
	    ethernet interface, <emphasis remap=tt>ed0</emphasis>. There is
	    also a timeout (<emphasis remap=tt>Expire</emphasis> column)
	    associated with this type of route, which is used if we fail to
	    hear from the host in a specific amount of time. In this case the
	    route will be automatically deleted. These hosts are identified
	    using a mechanism known as RIP (Routing Information Protocol),
	    which figures out routes to local hosts based upon a shortest path
	    determination.</para>
	  
	  <para>FreeBSD will also add subnet routes for the local subnet
	    (<emphasis remap=tt>10.20.30.255</emphasis> is the broadcast
	    address for the subnet <emphasis remap=tt>10.20.30</emphasis>, and
	    <filename>foobar.com</filename> is the domain name associated with
	    that subnet). The designation <emphasis remap=tt>link#1</emphasis>
	    refers to the first ethernet card in the machine. You will notice
	    no additional interface is specified for those.</para>
	  
	  <para>Both of these groups (local network hosts and local subnets)
	    have their routes automatically configured by a daemon called
	    <emphasis remap=tt>routed</emphasis>. If this is not run, then
	    only routes which are statically defined (ie. entered explicitly)
	    will exist.</para>
	  
	  <para>The <emphasis remap=tt>host1</emphasis> line refers to our
	    host, which it knows by ethernet address.  Since we are the
	    sending host, FreeBSD knows to use the loopback interface
	    (<emphasis remap=tt>lo0</emphasis>) rather than sending it out
	    over the ethernet interface.</para>
	  
	  <para>The two <emphasis remap=tt>host2</emphasis> lines are an
	    example of what happens when we use an ifconfig alias (see the
	    section of ethernet for reasons why we would do this).  The
	    <literal>=&gt;</literal> symbol after the <emphasis
	      remap=tt>lo0</emphasis> interface says that not only are we
	    using the loopback (since this is address also refers to the local
	    host), but specifically it is an alias. Such routes only show up
	    on the host that supports the alias; all other hosts on the local
	    network will simply have a <emphasis remap=tt>link#1</emphasis>
	    line for such.</para>
	  
	  <para>The final line (destination subnet <emphasis
	      remap=tt>224</emphasis>) deals with MultiCasting, which will be
	    covered in a another section.</para>
	  
	  <para>The other column that we should talk about are the <emphasis
	      remap=tt>Flags</emphasis>.  Each route has different attributes
	    that are described in the column.  Below is a short table of some
	    of these flags and their meanings:</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>U</term>
		<listitem>
		  <para><emphasis remap=bf>Up:</emphasis> The route is
		    active.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>H</term>
		
		<listitem>
		  <para><emphasis remap=bf>Host:</emphasis> The route
		    destination is a single host.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>G</term>
		
		<listitem>
		  <para><emphasis remap=bf>Gateway:</emphasis> Send anything
		    for this destination on to this remote system, which will
		    figure out from there where to send it.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>S</term>
		
		<listitem>
		  <para><emphasis remap=bf>Static:</emphasis> This route was
		    configured manually, not automatically generated by the
		    system.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>C</term>
		
		<listitem>
		  <para><emphasis remap=bf>Clone:</emphasis> Generates a new
		    route based upon this route for machines we connect to.
		    This type of route is normally used for local
		    networks.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>W</term>
		
		<listitem>
		  <para><emphasis remap=bf>WasCloned</emphasis> Indicated a
		    route that was auto-configured based upon a local area
		    network (Clone) route.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>L</term>
		
		<listitem>
		  <para><emphasis remap=bf>Link:</emphasis> Route involves
		    references to ethernet hardware.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Default routes</title>
	  
	  <para>When the local system needs to make a connection to remote
	    host, it checks the routing table to determine if a known path
	    exists. If the remote host falls into a subnet that we know how to
	    reach (Cloned routes), then the system checks to see if it can
	    connect along that interface.</para>
	  
	  <para>If all known paths fail, the system has one last option: the
	    <emphasis remap=bf>default</emphasis> route.  This route is a
	    special type of gateway route (usually the only one present in the
	    system), and is always marked with a ``<emphasis
	      remap=tt>c</emphasis>'' in the flags field.  For hosts on a
	    local area network, this gateway is set to whatever machine has a
	    direct connection to the outside world (whether via PPP link, or
	    your hardware device attached to a dedicated data line).</para>
	  
	  <para>If you are configuring the default route for a machine which
	    itself is functioning as the gateway to the outside world, then
	    the default route will be the gateway machine at your Internet
	    Service Provider's (ISP) site.</para>
	  
	  <para>Let us look at an example of default routes. This is a common
	    configuration:
	    <informalexample>
	      <screen>[Local2]  &lt;--ether--&gt;  [Local1]  &lt;--PPP--&gt;
		[ISP-Serv]  &lt;--ether--&gt;  [T1-GW]</screen>
	    </informalexample>
	  </para>
	  
	  <para>The hosts <emphasis remap=tt>Local1</emphasis> and <emphasis
	      remap=tt>Local2</emphasis> are at your site, with the formed
	    being your PPP connection to your ISP's Terminal Server. Your ISP
	    has a local network at their site, which has, among other things,
	    the server where you connect and a hardware device (T1-GW)
	    attached to the ISP's Internet feed.</para>
	  
	  <para>The default routes for each of your machines will be:</para>
	  
	  <para>
	    <informalexample>
	      <screen>host            default gateway        interface ----
		---------------        --------- Local2          Local1
		ethernet Local1          T1-GW                  PPP</screen>
	    </informalexample>
	  </para>
	  
	  <para>A common question is ``Why (or how) would we set the T1-GW to
	    be the default gateway for Local1, rather than the ISP server it
	    is connected to?''.</para>
	  
	  <para>Remember, since the PPP interface is using an address on the
	    ISP's local network for your side of the connection, routes for
	    any other machines on the ISP's local network will be
	    automatically generated. Hence, you will already know how to reach
	    the T1-GW machine, so there is no need for the intermediate step
	    of sending traffic to the ISP server.</para>
	  
	  <para>As a final note, it is common to use the address ``<emphasis
	      remap=tt>...1</emphasis>'' as the gateway address for your local
	    network. So (using the same example), if your local class-C
	    address space was <emphasis remap=tt>10.20.30</emphasis> and your
	    ISP was using <emphasis remap=tt>10.9.9</emphasis> then the
	    default routes would be:</para>
	  
	  <para>
	    <informalexample>
	      <screen>Local2 (10.20.30.2)             --&gt;  Local1
		(10.20.30.1) Local1 (10.20.30.1, 10.9.9.30)  --&gt;  T1-GW
		(10.9.9.1)</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Dual homed hosts</title>
	  
	  <para>There is one other type of configuration that we should cover,
	    and that is a host that sits on two different networks.
	    Technically, any machine functioning as a gateway (in the example
	    above, using a PPP connection) counts as a dual-homed host. But
	    the term is really only used to refer to a machine that sits on
	    two local-area networks.</para>
	  
	  <para>In one case, the machine as two ethernet cards, each having an
	    address on the separate subnets. Alternately, the machine may only
	    have one ethernet card, and be using ifconfig aliasing. The former
	    is used if two physically separate ethernet networks are in use,
	    the latter if there is one physical network segment, but two
	    logically separate subnets.</para>
	  
	  <para>Either way, routing tables are set up so that each subnet
	    knows that this machine is the defined gateway (inbound route) to
	    the other subnet.  This configuration, with the machine acting as
	    a Bridge between the two subnets, is often used when we need to
	    implement packet filtering or firewall security in either or both
	    directions.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Routing propagation</title>
	  
	  <para>We have already talked about how we define our routes to the
	    outside world, but not about how the outside world finds
	    us.</para>
	  
	  <para>We already know that routing tables can be set up so that all
	    traffic for a particular address space (in our examples, a class-C
	    subnet) can be sent to a particular host on that network, which
	    will forward the packets inbound.</para>
	  
	  <para>When you get an address space assigned to your site, your
	    service provider will set up their routing tables so that all
	    traffic for your subnet will be sent down your PPP link to your
	    site. But how do sites across the country know to send to your
	    ISP?</para>
	  
	  <para>There is a system (much like the distributed DNS information)
	    that keeps track of all assigned address-spaces, and defines their
	    point of connection to the Internet Backbone. The ``Backbone'' are
	    the main trunk lines that carry Internet traffic across the
	    country, and around the world. Each backbone machine has a copy of
	    a master set of tables, which direct traffic for a particular
	    network to a specific backbone carrier, and from there down the
	    chain of service providers until it reaches your network.</para>
	  
	  <para>It is the task of your service provider to advertise to the
	    backbone sites that they are the point of connection (and thus the
	    path inward) for your site.  This is known as route
	    propagation.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Troubleshooting</title>
	  
	  <para>Sometimes, there is a problem with routing propagation, and
	    some sites are unable to connect to you. Perhaps the most useful
	    command for trying to figure out where a routing is breaking down
	    is the <command>traceroute(8)</command> command.  It is equally
	    useful if you cannot seem to make a connection to a remote machine
	    (ie. <command>ping(8)</command> fails).</para>
	  
	  <para>The <command>traceroute(8)</command> command is run with the
	    name of the remote host you are trying to connect to. It will show
	    the gateway hosts along the path of the attempt, eventually either
	    reaching the target host, or terminating because of a lack of
	    connection.</para>
	  
	  <para>For more information, see the manual page for
	    <command>traceroute(8)</command>.</para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="nfs">
	<title>NFS</title>
	
	<para><emphasis>Contributed by &a.jlind;.</emphasis></para>
	
	<para>Certain Ethernet adapters for ISA PC systems have limitations
	  which can lead to serious network problems, particularly with NFS.
	  This difficulty is not specific to FreeBSD, but FreeBSD systems are
	  affected by it.</para>
	
	<para>The problem nearly always occurs when (FreeBSD) PC systems are
	  networked with high-performance workstations, such as those made by
	  Silicon Graphics, Inc., and Sun Microsystems, Inc.  The NFS mount
	  will work fine, and some operations may succeed, but suddenly the
	  server will seem to become unresponsive to the client, even though
	  requests to and from other systems continue to be processed.  This
	  happens to the client system, whether the client is the FreeBSD
	  system or the workstation.  On many systems, there is no way to shut
	  down the client gracefully once this problem has manifested itself.
	  The only solution is often to reset the client, because the NFS
	  situation cannot be resolved.</para>
	
	<para>Though the "correct" solution is to get a higher performance and
	  capacity Ethernet adapter for the FreeBSD system, there is a simple
	  workaround that will allow satisfactory operation.  If the FreeBSD
	  system is the SERVER, include the option "-w=1024" on the mount from
	  the client.  If the FreeBSD system is the CLIENT, then mount the NFS
	  file system with the option "-r=1024".  These options may be
	  specified using the fourth field of the fstab entry on the client
	  for automatic mounts, or by using the "-o" parameter of the mount
	  command for manual mounts.</para>
	
	<para>It should be noted that there is a different problem, sometimes
	  mistaken for this one, when the NFS servers and clients are on
	  different networks. If that is the case, make CERTAIN that your
	  routers are routing the necessary UDP information, or you will not
	  get anywhere, no matter what else you are doing.</para>
	
	<para>In the following examples, "fastws" is the host (interface) name
	  of a high-performance workstation, and "freebox" is the host
	  (interface) name of a FreeBSD system with a lower-performance
	  Ethernet adapter.  Also, "/sharedfs" will be the exported NFS
	  filesystem (see "man exports"), and "/project" will be the mount
	  point on the client for the exported file system.  In all cases,
	  note that additional options, such as "hard" or "soft" and "bg" may
	  be desirable in your application.</para>
	
	<para>Examples for the FreeBSD system ("freebox") as the client: in
	  <filename>/etc/fstab</filename> on freebox: fastws:/sharedfs
	  /project nfs rw,-r=1024 0 0 as a manual mount command on freebox:
	  mount -t nfs -o -r=1024 fastws:/sharedfs /project</para>
	
	<para>Examples for the FreeBSD system as the server: in
	  <filename>/etc/fstab</filename> on fastws: freebox:/sharedfs
	  /project nfs rw,-w=1024 0 0 as a manual mount command on fastws:
	  mount -t nfs -o -w=1024 freebox:/sharedfs /project</para>
	
	<para>Nearly any 16-bit Ethernet adapter will allow operation without
	  the above restrictions on the read or write size.</para>
	
	<para>For anyone who cares, here is what happens when the failure
	  occurs, which also explains why it is unrecoverable.  NFS typically
	  works with a "block" size of 8k (though it may do fragments of
	  smaller sizes).  Since the maximum Ethernet packet is around 1500
	  bytes, the NFS "block" gets split into multiple Ethernet packets,
	  even though it is still a single unit to the upper-level code, and
	  must be received, assembled, and ACKNOWLEDGED as a unit.  The
	  high-performance workstations can pump out the packets which
	  comprise the NFS unit one right after the other, just as close
	  together as the standard allows.  On the smaller, lower capacity
	  cards, the later packets overrun the earlier packets of the same
	  unit before they can be transferred to the host and the unit as a
	  whole cannot be reconstructed or acknowledged.  As a result, the
	  workstation will time out and try again, but it will try again with
	  the entire 8K unit, and the process will be repeated, ad
	  infinitum.</para>
	
	<para>By keeping the unit size below the Ethernet packet size
	  limitation, we ensure that any complete Ethernet packet received can
	  be acknowledged individually, avoiding the deadlock
	  situation.</para>
	
	<para>Overruns may still occur when a high-performance workstations is
	  slamming data out to a PC system, but with the better cards, such
	  overruns are not guaranteed on NFS "units".  When an overrun occurs,
	  the units affected will be retransmitted, and there will be a fair
	  chance that they will be received, assembled, and acknowledged.
	</para>
	
      </sect1>
      
      <sect1
	id="diskless">
	<title>Diskless Operation</title>
	
	<para><emphasis>Contributed by &a.martin;.</emphasis></para>
	
	<para><filename>netboot.com/netboot.rom</filename> allow you to boot
	  your FreeBSD machine over the network and run FreeBSD without having
	  a disk on your client.  Under 2.0 it is now possible to have local
	  swap.  Swapping over NFS is also still supported.</para>
	
	<para>Supported Ethernet cards include: Western Digital/SMC 8003,
	  8013, 8216 and compatibles; NE1000/NE2000 and compatibles (requires
	  recompile)</para>
	
	
	<sect2>
	  <title>Setup Instructions</title>
	  
	  <para>
	    <orderedlist>
	      
	      <listitem>
		<para> Find a machine that will be your server.  This machine
		  will require enough disk space to hold the FreeBSD 2.0
		  binaries and have bootp, tftp and NFS services available.
		  Tested machines:
		  <itemizedlist>
		    
		    <listitem>
		      <para>HP9000/8xx running HP-UX 9.04 or later (pre 9.04
			doesn't work)</para>
		    </listitem>
		    
		    <listitem>
		      <para>Sun/Solaris 2.3. (you may need to get
			bootp)</para>
		    </listitem>
		    
		  </itemizedlist>
		  
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Set up a bootp server to provide the client with IP,
		  gateway, netmask.
		  <informalexample>
		    <screen>diskless:\ :ht=ether:\ :ha=0000c01f848a:\
		      :sm=255.255.255.0:\ :hn:\ :ds=192.1.2.3:\
		      :ip=192.1.2.4:\ :gw=192.1.2.5:\ :vm=rfc1048:</screen>
		  </informalexample>
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Set up a TFTP server (on same machine as bootp server)
		  to provide booting information to client. The name of this
		  file is <filename>cfg.X.X.X.X</filename> (or
		  <filename>/tftpboot/cfg.X.X.X.X</filename>, it will try
		  both) where <filename>X.X.X.X</filename> is the IP address
		  of the client.  The contents of this file can be any valid
		  netboot commands.  Under 2.0, netboot has the following
		  commands:
		  <informalexample>
		    <screen>help			- print help list ip
		      &lt;X.X.X.X&gt;		- print/set client's IP
		      address server &lt;X.X.X.X&gt;	- print/set bootp/tftp
		      server address netmask &lt;X.X.X.X&gt;	- print/set
		      netmask hostname &lt;name&gt;		- print/set
		      hostname kernel &lt;name&gt;		- print/set
		      kernel name rootfs &lt;ip:/fs&gt;		- print/set
		      root filesystem swapfs &lt;ip:/fs&gt;		-
		      print/set swap filesystem swapsize &lt;size&gt;
		      - set diskless swapsize in Kbytes diskboot
		      - boot from disk autoboot		- continue boot
		      process trans &lt;on|off&gt;		- turn
		      transceiver on|off flags [bcdhsv]		- set boot
		      flags</screen>
		  </informalexample> A typical completely diskless cfg file
		  might contain:
		  <informalexample>
		    <screen>rootfs 192.1.2.3:/rootfs/myclient swapfs
		      192.1.2.3:/swapfs swapsize 20000 hostname
		      myclient.mydomain</screen>
		  </informalexample> A cfg file for a machine with local swap
		  might contain:
		  <informalexample>
		    <screen>rootfs 192.1.2.3:/rootfs/myclient hostname
		      myclient.mydomain</screen>
		  </informalexample>
		  
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Ensure that your NFS server has exported the root (and
		  swap if applicable) filesystems to your client, and that the
		  client has root access to these filesystems A typical
		  <filename>/etc/exports</filename> file on FreeBSD might look
		  like:
		  <informalexample>
		    <screen>/rootfs/myclient -maproot=0:0 myclient.mydomain
		      /swapfs -maproot=0:0 myclient.mydomain</screen>
		  </informalexample> And on HP-UX:
		  <informalexample>
		    <screen>/rootfs/myclient -root=myclient.mydomain /swapfs
		      -root=myclient.mydomain</screen>
		  </informalexample>
		  
		</para>
	      </listitem>
	      
	      <listitem>
		<para>If you are swapping over NFS (completely diskless
		  configuration) create a swap file for your client using
		  <emphasis remap=tt>dd</emphasis>.  If your <emphasis
		    remap=tt>swapfs</emphasis> command has the arguments
		  <filename>/swapfs</filename> and the size 20000 as in the
		  example above, the swapfile for myclient will be called
		  <filename>/swapfs/swap.X.X.X.X</filename> where
		  <filename>X.X.X.X</filename> is the client's IP addr, eg:   
		  <informalexample>
		    <screen># dd if=/dev/zero of=/swapfs/swap.192.1.2.4 bs=1k
		      count=20000</screen>
		  </informalexample> Also, the client's swap space might
		  contain sensitive information once swapping starts, so make
		  sure to restrict read and write access to this file to
		  prevent unauthorized access:
		  <informalexample>
		    <screen># chmod 0600 /swapfs/swap.192.1.2.4</screen>
		  </informalexample>
		  
		</para>
	      </listitem>
	      
	      <listitem>
		<para> Unpack the root filesystem in the directory the client
		  will use for its root filesystem
		  (<filename>/rootfs/myclient</filename> in the example
		  above).
		  
		  <itemizedlist>
		    
		    <listitem>
		      <para> On HP-UX systems: The server should be running
			HP-UX 9.04 or later for HP9000/800 series machines.
			Prior versions do not allow the creation of device
			files over NFS.
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para> When extracting <filename>/dev</filename> in
			<filename>/rootfs/myclient</filename>, beware that
			some systems (HPUX) will not create device files that
			FreeBSD is happy with.  You may have to go to single
			user mode on the first bootup (press control-c during
			the bootup phase), cd <filename>/dev</filename> and do
			a "<emphasis remap=tt>sh ./MAKEDEV all</emphasis>"
			from the client to fix this.</para>
		    </listitem>
		    
		  </itemizedlist>
		  
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Run <filename>netboot.com</filename> on the client or
		  make an EPROM from the <filename>netboot.rom</filename>
		  file</para>
	      </listitem>
	      
	    </orderedlist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Using Shared <filename>/</filename> and
	    <filename>/usr</filename> filesystems</title>
	  
	  <para>At present there isn't an officially sanctioned way of doing
	    this, although I have been using a shared
	    <filename>/usr</filename> filesystem and individual
	    <filename>/</filename> filesystems for each client. If anyone has
	    any suggestions on how to do this cleanly, please let me and/or
	    the &a.core; know.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Compiling netboot for specific setups</title>
	  
	  <para>Netboot can be compiled to support NE1000/2000 cards by
	    changing the configuration in
	    <filename>/sys/i386/boot/netboot/Makefile</filename>.  See the
	    comments at the top of this file.</para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="isdn">
	<title>ISDN</title>
	
	<para><emphasis>Last modified by &a.wlloyd;</emphasis>.</para>
	
	<para>A good resource for information on ISDN technology and hardware
	  is <ulink URL="http://alumni.caltech.edu/~dank/isdn/">Dan Kegel's
	    ISDN Page</ulink>.</para>
	
	<para>A quick simple roadmap to ISDN follows:
	  <itemizedlist>
	    
	    <listitem>
	      <para>If you live in Europe I suggest you investigate the ISDN
		card section.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>If you are planning to use ISDN primarily to connect to
		the Internet with an Internet Provider on a dialup
		non-dedicated basis, I suggest you look into Terminal
		Adapters.  This will give you the most flexibility, with the
		fewest problems, if you change providers.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>If you are connecting two lans together, or connecting to
		the Internet with a dedicated ISDN connection, I suggest you
		consider the stand alone router/bridge option.</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
	<para>Cost is a significant factor in determining what solution you
	  will choose.  The following options are listed from least expensive
	  to most expensive.</para>
	
	
	<sect2>
	  <title>ISDN Cards</title>
	  
	  <para><emphasis>Original Contribution by &a.hm;.</emphasis></para>
	  
	  <para>This section is really only relevant to European ISDN users.
	    The cards supported are not yet(?) available for North American
	    ISDN standards.</para>
	  
	  <para>You should be aware that this code is largely under
	    development. Specifically, drivers have only been written for two
	    manufacturers cards.</para>
	  
	  <para>PC ISDN cards support the full bandwidth of ISDN, 128Kbs.
	    These cards are often the least expensive type of ISDN equipment.
	  </para>
	  
	  <para>Under FreeBSD 2.1.0 and 2.1.5, there is early unfinished ISDN
	    code under /usr/src/gnu/isdn.  This code is out of date and should
	    not be used.  If you want to go this route, get the bisdn stuff.
	    This code has been removed from the main source tree starting with
	    FreeBSD 2.2.</para>
	  
	  <para>There is the bisdn ISDN package available from  <ulink
	      URL="ftp://hub.freebsd.org/pub/bisdn">hub.freebsd.org</ulink>
	    supporting FreeBSD 2.1R, FreeBSD-current and NetBSD. The latest
	    source can be found on the above mentioned ftp server under
	    directory isdn as file bisdn-097.tar.gz.</para>
	  
	  <para>There are drivers for the following cards:
	    <itemizedlist>
	      
	      <listitem>
		<para>Currently all (passive) Teles cards and their clones are
		  supported for the EuroISDN (DSS1) and 1TR6 protocols.</para>
	      </listitem>
	      
	      <listitem>
		<para>Dr. Neuhaus - Niccy 1016</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para>There are several limitations with the bisdn stuff.
	    Specifically the following features usually associated with ISDN
	    are not supported.</para>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para>No PPP support, only raw hdlc.  This means you cannot
		  connect to most standalone routers.</para>
	      </listitem>
	      
	      <listitem>
		<para>Bridging Control Protocol not supported.</para>
	      </listitem>
	      
	      <listitem>
		<para>Multiple cards are not supported.</para>
	      </listitem>
	      
	      <listitem>
		<para>No bandwidth on demand.</para>
	      </listitem>
	      
	      <listitem>
		<para>No channel bundling.</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para>A majordomo maintained mailing list is available. To join the
	    list, send mail to &a.majordomo; and specify:
	    <literallayout>subscribe freebsd-isdn</literallayout> In the body
	    of your message. </para>
	  
	</sect2>
	
	<sect2>
	  <title>ISDN Terminal Adapters</title>
	  
	  <para>Terminal adapters(TA), are to ISDN what modems are to regular
	    phone lines.</para>
	  
	  <para>Most TA's use the standard hayes modem AT command set, and can
	    be used as a drop in replacement for a modem.</para>
	  
	  <para>A TA will operate basically the same as a modem except
	    connection and throughput speeds will be much faster than your old
	    modem.  You will need to configure <xref linkend="ppp"
	      remap="PPP"> exactly the
	    same as for a modem setup.  Make sure you set your serial speed as
	    high as possible.</para>
	  
	  <para>The main advantage of using a TA to connect to an Internet
	    Provider is that you can do Dynamic PPP.  As IP address space
	    becomes more and more scarce, most providers are not willing to
	    provide you with a static IP anymore.  Most standalone routers are
	    not able to accommodate dynamic IP allocation.</para>
	  
	  <para>TA's completely rely on the PPP daemon that you are running
	    for their features and stability of connection.  This allows you
	    to upgrade easily from using a modem to ISDN on a FreeBSD machine,
	    if you already have PPP setup.  However, at the same time any
	    problems you experienced with the PPP program and are going to
	    persist.</para>
	  
	  <para>If you want maximum stability, use the kernel  <xref
	      linkend="ppp" remap="PPP"> option, not the user-land <xref
	      linkend="userppp" remap="iijPPP">.
	  </para>
	  
	  <para>The following TA's are know to work with FreeBSD.</para>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para>Motorola BitSurfer and Bitsurfer Pro</para>
	      </listitem>
	      
	      <listitem>
		<para>Adtran</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para>Most other TA's will probably work as well, TA vendors try to
	    make sure their product can accept most of the standard modem AT
	    command set.</para>
	  
	  <para>The real problem with external TA's is like modems you need a
	    good serial card in your computer.  </para>
	  
	  <para>You should read the <xref linkend="uart" remap="serial ports">
	    section in the handbook for a detailed understanding of serial
	    devices, and the differences between asynchronous and synchronous
	    serial ports.</para>
	  
	  <para>A TA running off a standard PC serial port (asynchronous)
	    limits you to 115.2Kbs, even though you have a 128Kbs connection.
	    To fully utilize the 128Kbs that ISDN is capable of, you must move
	    the TA to a synchronous serial card. </para>
	  
	  <para>Do not be fooled into buying an internal TA and thinking you
	    have avoided the synchronous/asynchronous issue.  Internal TA's
	    simply have a standard PC serial port chip built into them.  All
	    this will do, is save you having to buy another serial cable, and
	    find another empty electrical socket.</para>
	  
	  <para>A synchronous card with a TA is at least as fast as a
	    standalone router, and with a simple 386 FreeBSD box driving it,
	    probably more flexible.</para>
	  
	  <para>The choice of sync/TA vs standalone router is largely a
	    religious issue.  There has been some discussion of this in the
	    mailing lists.  I suggest you search the <ulink
	      URL="http://www.freebsd.org/search.html">archives</ulink> for
	    the complete discussion.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Standalone ISDN Bridges/Routers</title>
	  
	  <para>ISDN bridges or routers are not at all specific to FreeBSD or
	    any other operating system.  For a more complete description of
	    routing and bridging technology, please refer to a Networking
	    reference book.</para>
	  
	  <para>In the context of this page, I will use router and bridge
	    interchangeably.</para>
	  
	  <para>As the cost of low end ISDN routers/bridges comes down, it
	    will likely become a more and more popular choice.  An ISDN router
	    is a small box that plugs directly into your local Ethernet
	    network(or card), and manages its own connection to the other
	    bridge/router.  It has all the software to do PPP and other
	    protocols built in.</para>
	  
	  <para>A router will allow you much faster throughput that a standard
	    TA, since it will be using a full synchronous ISDN
	    connection.</para>
	  
	  <para>The main problem with ISDN routers and bridges is that
	    interoperability between manufacturers can still be a problem.  If
	    you are planning to connect to an Internet provider, I recommend
	    that you discuss your needs with them.</para>
	  
	  <para>If you are planning to connect two lan segments together, ie:
	    home lan to the office lan, this is the simplest lowest
	    maintenance solution.  Since you are buying the equipment for both
	    sides of the connection you can be assured that the link will
	    work.</para>
	  
	  <para>For example to connect a home computer or branch office
	    network to a head office network the following setup could be
	    used.</para>
	  
	  <para><emphasis>Branch office or Home network</emphasis></para>
	  
	  <para>Network is 10 Base T Ethernet.  Connect router to network
	    cable with AUI/10BT transceiver, if necessary.</para>
	  
	  <para>
	    <literallayout>---Sun workstation      | ---FreeBSD box |
	      ---Windows 95 (Do not admit to owning it) | Standalone router |
	      ISDN BRI line</literallayout> If your home/branch office is only
	    one computer you can use a twisted pair crossover cable to connect
	    to the standalone router directly.</para>
	  
	  <para><emphasis>Head office or other lan</emphasis> </para>
	  
	  <para>Network is Twisted Pair Ethernet. <literallayout>
	      -------Novell Server | H	| |	---Sun       |	| | U
	      ---FreeBSD |	| |	---Windows 95 | B	|
	      |___---Standalone router | ISDN BRI line</literallayout>
	  </para>
	  
	  <para>One large advantage of most routers/bridges is that they allow
	    you to have 2 SEPARATE INDEPENDENT PPP connections to 2 separate
	    sites at the SAME time.  This is not supported on most TA's,
	    except for specific(expensive) models that have two serial ports.
	    Do not confuse this with channel bonding, MPP etc.</para>
	  
	  <para>This can be very useful feature, for example if you have an
	    dedicated internet ISDN connection at your office and would like
	    to tap into it, but don't want to get another ISDN line at work.
	    A router at the office location can manage a dedicated B channel
	    connection (64Kbs) to the internet, as well as a use the other B
	    channel for a separate data connection. The second B channel can
	    be used for dialin, dialout or dynamically bond(MPP etc.) with the
	    first B channel for more bandwidth.</para>
	  
	  <para>An Ethernet bridge will also allow you to transmit more than
	    just IP traffic, you can also send IPX/SPX or whatever other
	    protocols you use.</para>
	  
	</sect2>
      </sect1>
    </chapter>
    
    <chapter
      id="mail">
      <title>Electronic Mail</title>
      
      <para><emphasis>Contributed by &a.wlloyd;.</emphasis></para>
      
      <para>   Electronic Mail configuration is the subject of many <xref
	  linkend="bibliography" remap="System Administration"> books.  If you
	plan on doing anything beyond setting up one mailhost for your
	network, you need industrial strength help.</para>
      
      <para>Some parts of E-Mail configuration are controlled in the Domain
	Name System (DNS).  If you are going to run your own own DNS server
	check out <emphasis remap=bf> <command> /etc/namedb
	  </command></emphasis> and ' <emphasis remap=bf><command>man -k named
	  </command></emphasis> ' for more information.</para>
      
      
      <sect1>
	<title>Basic Information</title>
	
	<para>These are the major programs involved in an E-Mail exchange. A
	  <emphasis remap=tt>mailhost</emphasis> is a server that is
	  responsible for delivering and receiving all email for your host,
	  and possibly your network.</para>
	
	
	<sect2>
	  <title>User program</title>
	  
	  <para> This is a program like <emphasis remap=tt>elm, pine,
	      mail</emphasis> , or something more sophisticated like a WWW
	    browser.  This program will simply pass off all e-mail
	    transactions to the local <emphasis remap=tt>mailhost</emphasis> ,
	    either by calling <emphasis remap=tt>sendmail</emphasis> or
	    delivering it over TCP.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Mailhost Server Daemon</title>
	  
	  <para> Usually this program is <emphasis remap=tt>sendmail or
	      smail</emphasis> running in the background.  Turn it off or
	    change the command line options in
	    <filename>/etc/rc.conf</filename> (or, prior to FreeBSD 2.2.2,
	    <filename>/etc/sysconfig</filename>). It is best to leave it on,
	    unless you have a specific reason to want it off.  Example: You
	    are building a <xref
	      linkend="firewalls" remap="Firewall">.</para>
	  
	  <para>You should be aware that <emphasis
	      remap=tt>sendmail</emphasis> is a potential weak link in a
	    secure site.  Some versions of <emphasis
	      remap=tt>sendmail</emphasis> have known security
	    problems.</para>
	  
	  <para> <emphasis remap=tt><emphasis remap=bf> sendmail
	      </emphasis></emphasis> does two jobs.  It looks after delivering
	    and receiving mail.</para>
	  
	  <para>If <emphasis remap=bf><emphasis remap=tt>sendmail</emphasis>
	    </emphasis> needs to deliver mail off your site it will look up in
	    the DNS to determine the actual host that will receive mail for
	    the destination.</para>
	  
	  <para> If it is acting as a delivery agent <emphasis
	      remap=tt>sendmail</emphasis> will take the message from the
	    local queue and deliver it across the Internet to another sendmail
	    on the receivers computer. </para>
	  
	</sect2>
	
	<sect2>
	  <title>DNS - Name Service</title>
	  
	  <para>The Domain Name System and its daemon <emphasis
	      remap=tt>named</emphasis> , contain the database mapping
	    hostname to IP address, and hostname to mailhost.  The IP address
	    is specified in an "A" record.  The "MX" record specifies the
	    mailhost that will receive mail for you.  If you do not have a
	    "MX" record mail for your hostname,  the mail will be delivered to
	    your host directly.  </para>
	  
	  <para>Unless you are running your own DNS server, you will not be
	    able to change any information in the DNS yourself. If you are
	    using an Internet Provider, speak to them.</para>
	  
	</sect2>
	
	<sect2>
	  <title>POP Servers</title>
	  
	  <para> This program gets the mail from your mailbox and gives it to
	    your browser.  If you want to run a POP server on your computer,
	    you will need to do 2 things.
	    <itemizedlist>
	      
	      <listitem>
		<para>Get pop software from the <ulink
		    URL="../ports/mail.html">Ports collection</ulink>  that
		  can be found in <emphasis remap=tt><emphasis
		      remap=bf>/usr/ports </emphasis></emphasis> or packages
		  collection.  This handbook section has a complete reference
		  on the <xref linkend="ports"
		    remap="Ports"> system.</para>
	      </listitem>
	      
	      <listitem>
		<para>Modify <emphasis
		    remap=bf><filename>/etc/inetd.conf</filename></emphasis>
		  to load the POP server.</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para>The pop program will have instructions with it.  Read
	    them.</para>
	  
	</sect2>
      </sect1>
      
      <sect1>
	<title>Configuration</title>
	
	
	<sect2>
	  <title>Basic</title>
	  
	  <para>As your FreeBSD system comes "out of the box"[TM], you should
	    be able to send E-mail to external hosts as long as you have
	    <emphasis remap=bf><filename>/etc/resolv.conf</filename>
	    </emphasis> setup or are running a name server.  If you want to
	    have mail for your host delivered to your specific host,there are
	    two methods: </para>
	  
	  <para>- Run a name server ( <emphasis remap=tt><command>man -k
		named</command></emphasis> ) and have your own domain
	    <emphasis remap=tt>smallminingco.com </emphasis></para>
	  
	  <para>- Get mail delivered to the current DNS name for your host.
	    Ie: <emphasis remap=tt>dorm6.ahouse.school.edu </emphasis> </para>
	  
	  <para>No matter what option you choose, to have mail delivered
	    directly to your host, you must be a full Internet host.  You must
	    have a permanent IP address.  IE: NO dynamic PPP.  If you are
	    behind a firewall, the firewall must be passing on smtp traffic to
	    you.  From <emphasis remap=bf><command> /etc/services
	      </command></emphasis> <literallayout>smtp             25/tcp
	      mail         #Simple Mail Transfer</literallayout> If you want
	    to receive mail at your host itself, you must make sure that the
	    DNS MX entry points to your host address, or there is no MX entry
	    for your DNS name.</para>
	  
	  <para>Try this  <literallayout>newbsdbox# hostname
	      newbsdbox.freebsd.org newbsdbox# host newbsdbox.freebsd.org
	      newbsdbox.freebsd.org has address 204.216.27.xx</literallayout>
	  </para>
	  
	  <para>If that is all that comes out for your machine, mail directory
	    to <emphasis remap=tt><emphasis
		remap=bf>root@newbsdbox.freebsd.org </emphasis></emphasis>
	    will work no problems.</para>
	  
	  <para>If instead, you have this <literallayout>newbsdbox# host
	      newbsdbox.freebsd.org newbsdbox.FreeBSD.org has address
	      204.216.27.xx newbsdbox.FreeBSD.org mail is handled (pri=10) by
	      freefall.FreeBSD.org</literallayout> All mail sent to your host
	    directly will end up on freefall, under the same username.
	  </para>
	  
	  <para>This information is setup in your domain name server.  This
	    should be the same host that is listed as your primary nameserver
	    in <emphasis remap=bf><command>
		/etc/resolv.conf</command></emphasis></para>
	  
	  <para>The DNS record that carries mail routing information is the
	    Mail eXchange entry.  If no MX entry exists, mail will be
	    delivered directly to the host by way of the Address
	    record.</para>
	  
	  <para>The MX entry for freefall.freebsd.org at one time.
	    <literallayout> freefall                       MX    30
	      mail.crl.net freefall                       MX    40
	      agora.rdrop.com freefall                       HINFO Pentium
	      FreeBSD freefall                       MX    10
	      freefall.FreeBSD.org freefall                       MX    20
	      who.cdrom.com freefall                       A     204.216.27.xx
	      freefall                       CNAME
	      www.FreeBSD.org</literallayout>
	  </para>
	  
	  <para>Freefall has many MX entries.  The lowest MX number gets the
	    mail in the end.  The others will queue mail temporarily, if
	    freefall is busy or down.</para>
	  
	  <para>Alternate MX sites should have separate connections to the
	    Internet, to be most useful.  An Internet Provider or other
	    friendly site can provide this service.</para>
	  
	  <para><emphasis remap=bf><emphasis remap=tt>dig, nslookup,
	      </emphasis></emphasis>and<emphasis remap=bf><emphasis remap=tt>
		host </emphasis></emphasis>are your friends.</para>
	  
	</sect2>
	
	<sect2
	  id="mail-domain">
	  <title>Mail for your Domain (Network).</title>
	  
	  <para>To setup up a network mailhost, you need to direct the mail
	    from arriving at all the workstations. In other words, you want to
	    hijack all mail for <emphasis remap=tt> *.smallminingco.com
	    </emphasis> and divert it to one machine, your mailhost.</para>
	  
	  <para>The network users on their workstations will most likely pick
	    up their mail over POP or telnet.  </para>
	  
	  <para>A user account with the SAME USERNAME should exist on both
	    machines.  Please use <emphasis remap=tt>adduser</emphasis> to do
	    this as required.  If you set the <emphasis
	      remap=it>shell</emphasis> to <filename>/nonexistent</filename>
	    the user will not be allowed to login.</para>
	  
	  <para>The mailhost that you will be using must be designated the
	    Mail eXchange for each workstation.  This must be arranged in DNS
	    (ie BIND, named).  Please refer to a Networking book for in-depth
	    information.</para>
	  
	  <para>You basically need to add these lines in your DNS server.
	    <literallayout>pc24.smallminingco.com	A
	      xxx.xxx.xxx.xxx		; Workstation ip  MX  10
	      smtp.smallminingco.com	; Your mailhost</literallayout>
	  </para>
	  
	  <para>You cannot do this yourself unless you are running a DNS
	    server.  If you do not want to run a DNS server, get somebody else
	    like your Internet Provider to do it.</para>
	  
	  <para>This will redirect mail for the workstation to the Mail
	    eXchange host.  It does not matter what machine the A record
	    points to, the mail will be sent to the MX host.</para>
	  
	  <para>This feature is used to implement Virtual E-Mail Hosting.
	  </para>
	  
	  <para>Example</para>
	  
	  <para>I have a customer with domain foo.bar and I want all mail for
	    foo.bar to be sent to my machine smtp.smalliap.com.  You must make
	    an entry in your DNS server like: <literallayout>  foo.bar
	      MX  10	smtp.smalliap.com	; your
	      mailhost</literallayout> The A record is not needed if you only
	    want E-Mail for the domain.  IE: Don't expect <emphasis
	      remap=bf><emphasis remap=tt>ping foo.bar</emphasis></emphasis>
	    to work unless an Address record for <filename>foo.bar</filename>
	    exists as well.</para>
	  
	  <para>On the mailhost that actually accepts mail for final delivery
	    to a mailbox, sendmail must be told what hosts it will be
	    accepting mail for.</para>
	  
	  <para>Add pc24.smallminingco.com to /etc/sendmail.cw (if you are
	    using FEATURE(use_cw_file)), or add a "Cw myhost.smalliap.com"
	    line to <emphasis
	      remap=bf><filename>/etc/sendmail.cf</filename></emphasis></para>
	  
	  <para>If you plan on doing anything serious with <emphasis
	      remap=tt>sendmail</emphasis> you should install the sendmail
	    source.  The source has plenty of documentation with it.  You will
	    find information on getting <emphasis remap=tt>sendmail</emphasis>
	    source from <xref linkend="sendmailuucp" remap="the UUCP
	      information">.</para>
	  
	</sect2>
	
	<sect2
	  id="sendmailuucp">
	  <title> Setting up UUCP.</title>
	  
	  <para><emphasis>Stolen from the FAQ.</emphasis></para>
	  
	  <para>The sendmail configuration that ships with FreeBSD is suited
	    for sites that connect directly to the Internet. Sites that wish
	    to exchange their mail via UUCP must install another sendmail
	    configuration file.</para>
	  
	  <para>Tweaking <filename>/etc/sendmail.cf</filename> manually is
	    considered something for purists.  Sendmail version 8 comes with a
	    new approach of generating config files via some <emphasis
	      remap=tt>m4</emphasis> preprocessing, where the actual
	    hand-crafted configuration is on a higher abstraction level.  You
	    should use the configuration files under</para>
	  
	  <para>
	    <literallayout>     /usr/src/usr.sbin/sendmail/cf</literallayout>
	  </para>
	  
	  <para>If you did not install your system with full sources, the
	    sendmail config stuff has been broken out into a separate source
	    distribution tarball just for you.  Assuming you have your CD-ROM
	    mounted, do:</para>
	  
	  <para>
	    <literallayout>     cd /usr/src tar -xvzf
	      /cdrom/dists/src/ssmailcf.aa</literallayout>
	  </para>
	  
	  <para>Do not panic, this is only a few hundred kilobytes in size.
	    The file <acronym>README</acronym> in the <emphasis
	      remap=tt>cf</emphasis> directory can serve as a basic
	    introduction to m4 configuration.</para>
	  
	  <para>For UUCP delivery, you are best advised to use the
	    <emphasis>mailertable</emphasis> feature.  This constitutes a
	    database that sendmail can use to base its routing decision
	    upon.</para>
	  
	  <para>First, you have to create your <filename>.mc</filename> file.
	    The directory
	    <filename>/usr/src/usr.sbin/sendmail/cf/cf</filename> is the home
	    of these files.  Look around, there are already a few examples.
	    Assuming you have named your file <filename>foo.mc</filename>, all
	    you need to do in order to convert it into a valid
	    <filename>sendmail.cf</filename> is:</para>
	  
	  <para>
	    <literallayout>     cd /usr/src/usr.sbin/sendmail/cf/cf make
	      foo.cf</literallayout>
	  </para>
	  
	  <para>If you don't have a <filename>/usr/obj</filename> hiearchy,
	    then:</para>
	  
	  <para>
	    <literallayout>     cp foo.cf /etc/sendmail.cf</literallayout>
	  </para>
	  
	  <para>Otherwise:</para>
	  
	  <para>
	    <literallayout>     cp /usr/obj/`pwd`/foo.cf
	      /etc/sendmail.cf</literallayout>
	  </para>
	  
	  <para>A typical <filename>.mc</filename> file might look
	    like:</para>
	  
	  <para>
	    <literallayout>     include(`../m4/cf.m4') VERSIONID(`Your version
	      number') OSTYPE(bsd4.4) FEATURE(nodns) FEATURE(nocanonify)
	      FEATURE(mailertable) define(`UUCP_RELAY', your.uucp.relay)
	      define(`UUCP_MAX_SIZE', 200000) MAILER(local) MAILER(smtp)
	      MAILER(uucp) Cw    your.alias.host.name Cw
	      youruucpnodename.UUCP</literallayout>
	  </para>
	  
	  <para>The <emphasis>nodns</emphasis> and
	    <emphasis>nocanonify</emphasis> features will prevent any usage of
	    the DNS during mail delivery.  The <symbol>UUCP_RELAY</symbol>
	    clause is needed for bizarre reasons, do not ask.  Simply put an
	    Internet hostname there that is able to handle .UUCP pseudo-domain
	    addresses; most likely, you will enter the mail relay of your ISP
	    there.</para>
	  
	  <para>Once you have this, you need this file called
	    <filename>/etc/mailertable</filename>.  A typical example of this
	    gender again:</para>
	  
	  <para>
	    <literallayout>     # # makemap hash /etc/mailertable.db &lt;
	      /etc/mailertable # horus.interface-business.de   uucp-dom:horus
	      .interface-business.de        uucp-dom:if-bus
	      interface-business.de         uucp-dom:if-bus .heep.sax.de
	      smtp8:%1 horus.UUCP                    uucp-dom:horus
	      if-bus.UUCP                   uucp-dom:if-bus .
	      uucp-dom:sax</literallayout>
	  </para>
	  
	  <para>As you can see, this is part of a real-life file.  The first
	    three lines handle special cases where domain-addressed mail
	    should not be sent out to the default route, but instead to some
	    UUCP neighbor in order to ``shortcut'' the delivery path.  The
	    next line handles mail to the local Ethernet domain that can be
	    delivered using SMTP.  Finally, the UUCP neighbors are mentioned
	    in the .UUCP pseudo-domain notation, to allow for a
	    ``uucp-neighbor!recipient'' override of the default rules.  The
	    last line is always a single dot, matching everything else, with
	    UUCP delivery to a UUCP neighbor that serves as your universal
	    mail gateway to the world.  All of the node names behind the
	    <emphasis remap=tt>uucp-dom:</emphasis> keyword must be valid UUCP
	    neighbors, as you can verify using the command <emphasis
	      remap=tt>uuname</emphasis>.</para>
	  
	  <para>As a reminder that this file needs to be converted into a DBM
	    database file before being usable, the command line to accomplish
	    this is best placed as a comment at the top of the mailertable.
	    You always have to execute this command each time you change your
	    mailertable.</para>
	  
	  <para>Final hint: if you are uncertain whether some particular mail
	    routing would work, remember the <option>-bt</option> option to
	    sendmail.  It starts sendmail in <emphasis>address test
	      mode</emphasis>; simply enter ``0 '', followed by the address
	    you wish to test for the mail routing.  The last line tells you
	    the used internal mail agent, the destination host this agent will
	    be called with, and the (possibly translated) address.  Leave this
	    mode by typing Control-D.</para>
	  
	  <para>
	    <literallayout>     j@uriah 191% sendmail -bt ADDRESS TEST MODE
	      (ruleset 3 NOT automatically invoked) Enter &lt;ruleset&gt;
	      &lt;address&gt; &gt; 0 foo@interface-business.de  rewrite:
	      ruleset  0   input: foo @ interface-business . de ... rewrite:
	      ruleset  0 returns: $# uucp-dom $@ if-bus $: foo \ &lt; @
	      interface-business . de &gt; &gt; ^D j@uriah 192%
	    </literallayout>
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="mailfaq">
	<title>FAQ</title>
	
	<para><emphasis>Migration from FAQ.</emphasis></para>
	
	
	<sect2>
	  <title>Why do I have to use the FQDN for hosts on my site?</title>
	  
	  <para>You will probably find that the host is actually in a
	    different domain; for example, if you are in foo.bar.edu and you
	    wish to reach a host called ``mumble'' in the bar.edu domain, you
	    will have to refer to it by the fully-qualified domain name,
	    ``mumble.bar.edu'',  instead of just ``mumble''.     </para>
	  
	  <para>Traditionally, this was allowed by BSD BIND resolvers. However
	    the current version of <acronym>BIND</acronym> that ships with
	    FreeBSD no longer provides default abbreviations for non-fully
	    qualified domain names other than the domain you are in. So an
	    unqualified host <emphasis remap=tt>mumble</emphasis> must either
	    be found as <filename>mumble.foo.bar.edu</filename>, or it will be
	    searched for in the root domain.</para>
	  
	  <para>This is different from the previous behavior, where the search
	    continued across <filename>mumble.bar.edu</filename>, and
	    <filename>mumble.edu</filename>.  Have a look at RFC 1535 for why
	    this was considered bad practice, or even a security hole.</para>
	  
	  <para>As a good workaround, you can place the line</para>
	  
	  <para><emphasis remap=tt>search foo.bar.edu
	      bar.edu</emphasis></para>
	  
	  <para>instead of the previous</para>
	  
	  <para><emphasis remap=tt>domain foo.bar.edu</emphasis></para>
	  
	  <para>into your <filename>/etc/resolv.conf</filename>.  However,
	    make sure that the search order does not go beyond the ``boundary
	    between local and public administration'', as RFC 1535 calls
	    it.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Sendmail says ``mail loops back to myself''</title>
	  
	  <para>This is answered in the sendmail FAQ as follows:-
	    <literallayout>          * I am getting "Local configuration
	      error" messages, such as: 553 relay.domain.net config error:
	      mail loops back to myself 554 &lt;user@domain.net&gt;... Local
	      configuration error How can I solve this problem? You have asked
	      mail to the domain (e.g., domain.net) to be forwarded to a
	      specific host (in this case, relay.domain.net) by using an MX
	      record, but the relay machine does not recognize itself as
	      domain.net.  Add domain.net to /etc/sendmail.cw (if you are
	      using FEATURE(use_cw_file)) or add "Cw domain.net" to
	      /etc/sendmail.cf. </literallayout>
	  </para>
	  
	  <para>The sendmail FAQ is in
	    <filename>/usr/src/usr.sbin/sendmail</filename> and is recommended
	    reading if you want to do any ``tweaking'' of your mail
	    setup.</para>
	  
	</sect2>
	
	<sect2>
	  <title>How can I do E-Mail with a dialup PPP host?</title>
	  
	  <para>You want to connect a FreeBSD box on a lan, to the Internet.
	    The FreeBSD box will be a mail gateway for the lan.  The PPP
	    connection is non-dedicated.</para>
	  
	  <para>There are at least two way to do this.</para>
	  
	  <para>The other is to use UUCP.</para>
	  
	  <para>The key is to get a Internet site to provide secondary MX
	    services for your domain.   For example: <literallayout>bigco.com.
	      MX	10	bigco.com. MX	20
	      smalliap.com.</literallayout>
	  </para>
	  
	  <para>Only one host should be specified as the final recipient ( add
	    ``Cw bigco.com'' in <filename>/etc/sendmail.cf</filename> on
	    bigco.com).</para>
	  
	  <para>When the senders sendmail is trying to deliver the mail it
	    will try to connect to you over the modem link.  It will most
	    likely time out because you are not online.  Sendmail will
	    automatically deliver it to the secondary MX site, ie your
	    Internet provider.  The secondary MX site will try every
	    (<literal>sendmail_flags = "-bd -q15m"</literal> in
	    <filename>/etc/rc.conf</filename> ) 15 minutes to connect to your
	    host to deliver the mail to the primary MX site.  </para>
	  
	  <para>You might wat to use something like this as a login script.
	    <literallayout>#!/bin/sh # Put me in /usr/local/bin/pppbigco (
	      sleep 60 ; /usr/sbin/sendmail -q ) &amp;   /usr/sbin/ppp -direct
	      pppbigco</literallayout> If you are going to create a separate
	    login script for a user you could use <command>sendmail
	      -qRbigco.com</command> instead in the script above.  This will
	    force all mail in your queue for bigco.com to be processed
	    immediately.</para>
	  
	  <para>A further refinement of the situation is as follows.</para>
	  
	  <para>Message stolen from the freebsd-isp mailing list.
	    <literallayout>&gt; we provide the secondary mx for a customer.
	      The customer connects to  &gt; our services several times a day
	      automatically to get the mails to  &gt; his primary mx (We do
	      not call his site when a mail for his domains  &gt; arrived).
	      Our sendmail sends the mailqueue every 30 minutes. At the  &gt;
	      moment he has to stay 30 minutes online to be sure that all mail
	      is  &gt; gone to the primary mx. &gt;  &gt; Is there a command
	      that would initiate sendmail to send all the mails  &gt; now?
	      The user has not root-privileges on our machine of course. In
	      the 'privacy flags' section of sendmail.cf, there is a
	      definition Opgoaway,restrictqrun Remove restrictqrun to allow
	      non-root users to start the queue processing. You might also
	      like to rearrange the MXs.  We are the 1st MX for our  customers
	      like this, and we have defined: # If we are the best MX for a
	      host, try directly instead of generating # local config error.
	      OwTrue That way a remote site will deliver straight to you,
	      without trying  the customer connection.  You then send to your
	      customer.  Only works for  "hosts", so you need to get your
	      customer to name their mail machine  "customer.com" as well as
	      "hostname.customer.com" in the DNS.  Just put  an A record in
	      the DNS for "customer.com".</literallayout>
	  </para>
	  
	</sect2>
      </sect1>
    </chapter>
  </part>
  
  <part>
    <title>Advanced topics</title>
    
    
    <chapter>
      <title>The Cutting Edge: FreeBSD-current and FreeBSD-stable</title>
      
      <para>FreeBSD is under constant development between releases.  For
	people who want to be on the cutting edge, there are several easy
	mechanisms for keeping your system in sync with the latest
	developments.  Be warned: the cutting edge is not for everyone! This
	chapter will help you decide if you want to track the development
	system, or stick with one of the released versions.</para>
      
      
      <sect1
	id="current">
	<title>Staying Current with FreeBSD</title>
	
	<para><emphasis>Contributed by &a.jkh;.</emphasis></para>
	
	
	<sect2>
	  <title>What is FreeBSD-current?</title>
	  
	  <para>FreeBSD-current is, quite literally, nothing more than a daily
	    snapshot of the working sources for FreeBSD.  These include work
	    in progress, experimental changes and transitional mechanisms that
	    may or may not be present in the next official release of the
	    software. While many of us compile almost daily from
	    FreeBSD-current sources, there are periods of time when the
	    sources are literally un-compilable. These problems are generally
	    resolved as expeditiously as possible, but whether or not
	    FreeBSD-current sources bring disaster or greatly desired
	    functionality can literally be a matter of which part of any given
	    24 hour period you grabbed them in!</para>
	  
	</sect2>
	
	<sect2>
	  <title>Who needs FreeBSD-current?</title>
	  
	  <para>FreeBSD-current is made generally available for 3 primary
	    interest groups:
	    <orderedlist>
	      
	      <listitem>
		<para>  Members of the FreeBSD group who are actively working
		  on some part of the source tree and for whom keeping
		  `current' is an absolute requirement.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>  Members of the FreeBSD group who are active testers,
		  willing to spend time working through problems in order to
		  ensure that FreeBSD-current remains as sane as possible.
		  These are also people who wish to make topical suggestions
		  on changes and the general direction of FreeBSD.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>  Peripheral members of the FreeBSD (or some other)
		  group who merely wish to keep an eye on things and use the
		  current sources for reference purposes (e.g. for
		  <emphasis>reading</emphasis>, not running).  These people
		  also make the occasional comment or contribute code.</para>
	      </listitem>
	      
	    </orderedlist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>What is FreeBSD-current <acronym>NOT</acronym>?</title>
	  
	  <para>
	    <orderedlist>
	      
	      <listitem>
		<para>  A fast-track to getting pre-release bits because you
		  heard there is some cool new feature in there and you want
		  to be the first on your block to have it.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>  A quick way of getting bug fixes.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>  In any way ``officially supported'' by us. We do our
		  best to help people genuinely in one of the 3 ``legitimate''
		  FreeBSD-current categories, but we simply <emphasis>do not
		    have the time</emphasis> to provide tech support for it.
		  This is not because we are mean and nasty people who do not
		  like helping people out (we would not even be doing FreeBSD
		  if we were), it is literally because we cannot answer 400
		  messages a day <emphasis>and</emphasis> actually work on
		  FreeBSD!  I am sure that, if given the choice between having
		  us answer lots of questions or continuing to improve
		  FreeBSD, most of you would vote for us improving it.</para>
	      </listitem>
	      
	    </orderedlist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Using FreeBSD-current</title>
	  
	  <para>
	    <orderedlist>
	      
	      <listitem>
		<para> Join the &a.current; and the &a.cvsall; . This is not
		  just a good idea, it is <emphasis>essential</emphasis>. If
		  you are not on the <emphasis>FreeBSD-current</emphasis>
		  mailing list you will not see the comments that people are
		  making about the current state of the system and thus will
		  probably end up stumbling over a lot of problems that others
		  have already found and solved.  Even more importantly, you
		  will miss out on potentially critical information (e.g.
		  ``Yo, Everybody! Before you rebuild
		  <filename>/usr/src</filename>, you <emphasis>must</emphasis>
		  rebuild the kernel or your system will crash horribly!").
		  The <emphasis>cvs-all</emphasis> mailing list will allow you
		  to see the commit log entry for each change as it is made
		  along with any pertinent information on possible
		  side-effects. To join these lists, send mail to
		  &a.majordomo; and specify: <literallayout>subscribe
		    freebsd-current subscribe cvs-all</literallayout> In the
		  body of your message.  Optionally, you can also say `help'
		  and Majordomo will send you full help on how to subscribe
		  and unsubscribe to the various other mailing lists we
		  support.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>  Grab the sources from ftp.FreeBSD.ORG.  You can do
		  this in three ways:
		  
		  <orderedlist>
		    
		    <listitem>
		      <para> Use the <xref linkend="ctm" remap="CTM">
			facility.  Unless you  have a good TCP/IP connection
			at a flat rate, this is  the way to do it.
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para>  Use the <xref linkend="cvsup" remap="cvsup">
			program with <ulink
			  URL="ftp://ftp.freebsd.org/pub/FreeBSD/FreeBSD-current/src/share/examples/cvsup/standard-supfile">this supfile</ulink>. This is the second most recommended method, since it allows  you to grab the entire collection once and then only what has changed from then on.  Many people run cvsup from cron and keep their sources up-to-date automatically.
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para>  Use ftp.  The source tree for FreeBSD-current is
			always "exported" on: <ulink
			  URL="ftp://ftp.FreeBSD.ORG/pub/FreeBSD/FreeBSD-current">ftp://ftp.FreeBSD.ORG/pub/FreeBSD/FreeBSD-current</ulink> We also use `wu-ftpd' which allows compressed/tar'd grabbing of whole trees.  e.g. you see: <literallayout>            usr.bin/lex</literallayout> You can do: <literallayout>            ftp&gt; cd usr.bin ftp&gt; get lex.tar.Z</literallayout> And it will get the whole directory for you as a compressed tar file.</para>
		    </listitem>
		    
		  </orderedlist>
		  
		</para>
	      </listitem>
	      
	      <listitem>
		<para>  Essentially, if you need rapid on-demand access to the
		  source and communications bandwidth is not a consideration,
		  use cvsup or ftp. Otherwise, use CTM.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>  If you are grabbing the sources to run, and not just
		  look at, then grab <emphasis>all</emphasis> of current, not
		  just selected portions.  The reason for this is that various
		  parts of the source depend on updates elsewhere, and trying
		  to compile just a subset is almost guaranteed to get you
		  into trouble.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>  Before compiling current, read the Makefile in
		  /usr/src carefully.  You should at least run a `<xref
		    linkend="makeworld" remap="make world">' the first time
		  through as part of the upgrading process. Reading the
		  &a.current; will keep you up-to-date on other bootstrapping
		  procedures that sometimes become necessary as we move
		  towards	the next release.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>  Be active!  If you are  running FreeBSD-current, we
		  want to know what you have to say about it, especially if
		  you have suggestions for enhancements or bug fixes.
		  Suggestions with accompanying code are received most
		  enthusiastically! </para>
	      </listitem>
	      
	    </orderedlist>
	    
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="stable">
	<title>Staying Stable with FreeBSD</title>
	
	<para><emphasis>Contributed by &a.jkh;.</emphasis></para>
	
	
	<sect2>
	  <title>What is FreeBSD-stable?</title>
	  
	  <para>FreeBSD-stable is our development branch for a more low-key
	    and conservative set of changes intended for our next mainstream
	    release. Changes of an experimental or untested nature do not go
	    into this branch (see <xref linkend="current"
	      remap="FreeBSD-current">).</para>
	  
	</sect2>
	
	<sect2>
	  <title>Who needs FreeBSD-stable?</title>
	  
	  <para>If you are a commercial user or someone who puts maximum
	    stability of their FreeBSD system before all other concerns, you
	    should consider tracking <emphasis>stable</emphasis>.  This is
	    especially true if you have installed the most recent release
	    (<ulink
	      URL="ftp://ftp.freebsd.org/pub/FreeBSD/&rel.current;-RELEASE">&rel.current;-RELEASE</ulink> at the time of this writing) since the <emphasis>stable</emphasis> branch is effectively a bug-fix stream relative to the previous release.</para>
	  
	  <para>Please note that the <emphasis>stable</emphasis> tree
	    endeavors, above all, to be fully compilable and stable at all
	    times, but we do occasionally make mistakes (these are still
	    active sources with quickly-transmitted updates, after all).  We
	    also do our best to thoroughly test fixes in
	    <emphasis>current</emphasis> before bringing them into
	    <emphasis>stable</emphasis>, but sometimes our tests fail to catch
	    every case.  If something breaks for you in
	    <emphasis>stable</emphasis>, please let us know
	    <emphasis>immediately!</emphasis> (see next section).</para>
	  
	</sect2>
	
	<sect2>
	  <title>Using FreeBSD-stable</title>
	  
	  <para>
	    <orderedlist>
	      
	      <listitem>
		<para> Join the &a.stable; .  This will keep you informed of
		  build-dependencies that may appear in
		  <emphasis>stable</emphasis> or any other issues requiring
		  special attention. Developers will also make announcements
		  in this mailing list when they are contemplating some
		  controversial fix or update, giving the users a chance to
		  respond if they have any issues to raise concerning the
		  proposed change. To join this list, send mail to
		  &a.majordomo; and say: <literallayout>            subscribe
		    freebsd-stable</literallayout> In the body of your
		  message.  Optionally, you can also say `help' and Majordomo
		  will send you full help on how to subscribe and unsubscribe
		  to the various other mailing lists we support.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>  Grab the sources from ftp.FreeBSD.ORG.  You can do
		  this in three ways:
		  
		  <orderedlist>
		    
		    <listitem>
		      <para> Use the <xref linkend="ctm" remap="CTM">
			facility.  Unless you  have a good TCP/IP connection
			at a flat rate, this is  the way to do it.
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para> Use the <xref linkend="cvsup" remap="cvsup">
			program with <ulink
			  URL="ftp://ftp.freebsd.org/pub/FreeBSD/FreeBSD-current/src/share/examples/cvsup/stable-supfile">this supfile</ulink>. This is the second most recommended method, since it allows  you to grab the entire collection once and then only what has changed from then on.  Many people run cvsup from cron to keep their sources up-to-date automatically.
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para>  Use ftp.  The source tree for FreeBSD-stable is
			always "exported" on: <ulink
			  URL="ftp://ftp.FreeBSD.ORG/pub/FreeBSD/FreeBSD-stable">ftp://ftp.FreeBSD.ORG/pub/FreeBSD/FreeBSD-stable</ulink>
			
		      </para>
		      
		      <para>We also use `wu-ftpd' which allows
			compressed/tar'd grabbing of whole trees.  e.g. you
			see: <literallayout>
			  usr.bin/lex</literallayout> You can do:
			<literallayout>            ftp&gt; cd usr.bin ftp&gt;
			  get lex.tar.Z</literallayout> And it will get the
			whole directory for you as a compressed tar
			file.</para>
		    </listitem>
		    
		  </orderedlist>
		  
		</para>
	      </listitem>
	      
	      <listitem>
		<para>  Essentially, if you need rapid on-demand access to the
		  source and communications bandwidth is not a consideration,
		  use cvsup or ftp. Otherwise, use CTM.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>  Before compiling stable, read the Makefile in /usr/src
		  carefully.  You should at least run a `<xref
		    linkend="makeworld" remap="make world">' the first time
		  through as part of the upgrading process. Reading the
		  &a.stable; will keep you up-to-date on other bootstrapping
		  procedures that sometimes become necessary as we move
		  towards the next release.</para>
	      </listitem>
	      
	    </orderedlist>
	    
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="synching">
	<title>Synchronizing Source Trees over the Internet</title>
	
	<para><emphasis>Contributed by &a.jkh;.</emphasis></para>
	
	<para>There are various ways of using an Internet (or email)
	  connection to stay up-to-date with any given area of the FreeBSD
	  project sources, or all areas, depending on what interests you.  The
	  primary services we offer are CVSup and CTM.</para>
	
	<para><emphasis remap=bf>CVSup</emphasis> uses the
	  <emphasis>pull</emphasis> model of updating.  The user (or a cron
	  script) invokes the <emphasis remap=tt>cvsup</emphasis> program, and
	  it interacts with a <emphasis remap=tt>cvsupd</emphasis> server
	  somewhere to bring your files up to date.  The updates you receive
	  are up-to-the-minute and you get them when, and only when, you want
	  them.  You can easily restrict your updates to the specific files or
	  directories that are of interest to you.  Updates are generated on
	  the fly by the server, according to what you have and what you want
	  to have.</para>
	
	<para><acronym>CTM</acronym>, on the other hand, does not
	  interactively compare the sources you have with those on the master
	  archive.  Instead, a script which identifies changes in files since
	  its previous run is executed several times a day on the master
	  archive, any detected changes being compressed, stamped with a
	  sequence-number and encoded for transmission over email (printable
	  ASCII only).  Once received, these "CTM deltas" can then be handed
	  to the ctm_rmail(1) utility which will automatically decode, verify
	  and apply the changes to the user's copy of the sources.  This
	  process is far more efficient than CVSup, and places less strain on
	  our server resources since it is a <emphasis>push</emphasis> rather
	  than a <emphasis>pull</emphasis> model.</para>
	
	<para>There are other trade-offs, of course.  If you inadvertently
	  wipe out portions of your archive, CVSup will detect and rebuild the
	  damaged portions for you.  CTM won't do this, and if you wipe some
	  portion of your source tree out (and don't have it backed up) then
	  you will have to start from scratch (from the most recent CVS "base
	  delta") and rebuild it all.</para>
	
	<para>For more information on CTM and CVSup, please see one of the
	  following sections:</para>
	
	
	<sect2
	  id="ctm">
	  <title>CTM</title>
	  
	  <para><emphasis>Contributed by &a.phk;.  Updated
	      19-October-1997.</emphasis></para>
	  
	  <para><acronym>CTM</acronym> is a method for keeping a remote
	    directory tree in sync with a central one.  It has been developed
	    for usage with FreeBSD's source trees, though other people may
	    find it useful for other purposes as time goes by.  Little, if
	    any, documentation currently exists at this time on the process of
	    creating deltas, so talk to &a.phk; for more information should
	    you wish to use <acronym>CTM</acronym> for other things.</para>
	  
	  
	  <sect3>
	    <title>Why should I use <acronym>CTM</acronym>?</title>
	    
	    <para><acronym>CTM</acronym> will give you a local copy of the
	      FreeBSD source trees. There are a number of ``flavors'' of the
	      tree available. Whether you wish to track the entire cvs tree or
	      just one of the branches, <acronym>CTM</acronym> can provide you
	      the information. If you are an active developer on FreeBSD, but
	      have lousy or non-existent TCP/IP connectivity,  or simply wish
	      to have the changes automatically sent to you,
	      <acronym>CTM</acronym> was made for you. You will need to obtain
	      up to three deltas per day for the most  active branches.
	      However, you should consider having them sent by automatic
	      email. The sizes of the updates are always kept as small as
	      possible.  This is typically less than 5K, with an occasional
	      (one in ten) being 10-50K and every now and then a biggie of
	      100K+ or more coming around.</para>
	    
	    <para>You will also need to make yourself aware of the various
	      caveats  related to working directly from the development
	      sources rather than a pre-packaged release. This is particularly
	      true if you choose the ``current'' sources. It is recommended
	      that you read <xref linkend="current" remap="Staying current
		with
		FreeBSD">.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>What do I need to use <acronym>CTM</acronym>?</title>
	    
	    <para>You will need two things: The ``<acronym>CTM</acronym>''
	      program and the initial deltas to feed it (to get up to
	      ``current'' levels).</para>
	    
	    <para>The <acronym>CTM</acronym> program has been part of FreeBSD
	      ever since version 2.0 was released, and lives in
	      <filename>/usr/src/usr.sbin/<acronym>CTM</acronym></filename> if
	      you have a copy of the source online.</para>
	    
	    <para>If you are running a pre-2.0 version of FreeBSD, you can
	      fetch the current <acronym>CTM</acronym> sources directly
	      from:</para>
	    
	    <para><ulink
		URL="ftp://ftp.FreeBSD.ORG/pub/FreeBSD/FreeBSD-current/src/usr.sbin/ctm">ftp://ftp.FreeBSD.ORG/pub/FreeBSD/FreeBSD-current/src/usr.sbin/ctm</ulink></para>
	    
	    <para>The ``deltas'' you feed <acronym>CTM</acronym> can be had
	      two ways, FTP or e-mail. If you have general FTP access to the
	      Internet then the following FTP sites support access to
	      <acronym>CTM</acronym>:</para>
	    
	    <para><ulink
		URL="ftp://ftp.FreeBSD.ORG/pub/FreeBSD/CTM">ftp://ftp.FreeBSD.ORG/pub/FreeBSD/CTM</ulink></para>
	    
	    <para>or see section <xref linkend="mirrors-ctm"
		remap="mirrors">.</para>
	    
	    <para>FTP the relevant directory and fetch the
	      <acronym>README</acronym> file, starting from there.</para>
	    
	    <para>If you may wish to get your deltas via email:</para>
	    
	    <para>Send email to &a.majordomo; to subscribe to one of the
	      <acronym>CTM</acronym> distribution lists. ``ctm-cvs-cur''
	      supports the entire cvs tree. ``ctm-src-cur'' supports the head
	      of the development branch. ``ctm-src-2_2'' supports the 2.2
	      release branch, etc. (If you do not know how to subscribe
	      yourself using majordomo, send a message first containing the
	      word ``help'' - it will send you back usage
	      instructions.)</para>
	    
	    <para>When you begin receiving your <acronym>CTM</acronym> updates
	      in the mail, you may use the <symbol>ctm_rmail</symbol> program
	      to unpack and apply them.  You can actually use the
	      <symbol>ctm_rmail</symbol> program directly from a entry in
	      <filename>/etc/aliases</filename> if you want to have the
	      process run in a fully automated fashion.  Check the
	      <symbol>ctm_rmail</symbol> man page for more details.</para>
	    
	    <para><acronym>NOTE</acronym>: No matter what method you use to
	      get the <acronym>CTM</acronym> deltas, you should subscribe to
	      the <email>ctm-announce@FreeBSD.ORG</email> mailing list.  In
	      the future, this will be the only place where announcements
	      concerning the operations of the <acronym>CTM</acronym> system
	      will be posted.  Send an email to &a.majordomo; with a single
	      line of ``<emphasis remap=tt>subscribe ctm-announce</emphasis>''
	      to get added to the list.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Starting off with <acronym>CTM</acronym> for the first
	      time</title>
	    
	    <para>Before you can start using <acronym>CTM</acronym> deltas,
	      you will need to get a to a starting point for the deltas
	      produced subsequently to it.</para>
	    
	    <para>First you should determine what you already have. Everyone
	      can start from an ``Empty'' directory. However, since the trees
	      are many tens of megabytes, you should prefer to start from
	      something already at hand. If you have a RELEASE CD, you can
	      copy or extract an initial source from it. This will save a
	      significant transfer of data.</para>
	    
	    <para>Once you identify a suitable starting point, you must use an
	      initial ``transition'' delta to transform your starting point
	      into a <acronym>CTM</acronym> supported tree.</para>
	    
	    <para>You can recognize these transition  deltas by the
	      ``<emphasis remap=tt>X</emphasis>'' appended to the number
	      (<filename>src-cur.3210XEmpty.gz</filename> for instance). The
	      designation following the ``<emphasis remap=tt>X</emphasis>''
	      corresponds to the origin of your initial ``seed''. ``Empty'' is
	      an empty directory, ``R225'' would designate the 2.2.5 release,
	      etc. As a rule a base transition from ``Empty'' is producted
	      every 100 deltas.  By the way, they are large!  25 to 30
	      Megabytes of <emphasis remap=tt>gzip</emphasis>'ed data is
	      common for the ``XEmpty'' deltas.</para>
	    
	    <para>Once you've picked a base delta to start from, you will also
	      need all deltas with higher numbers following it.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Using <acronym>CTM</acronym> in your daily life</title>
	    
	    <para>To apply the deltas, simply say:
	      <informalexample>
		<screen>cd /where/ever/you/want/the/stuff ctm -v -v
		  /where/you/store/your/deltas/src-xxx.*
		</screen>
	      </informalexample>
	    </para>
	    
	    <para><acronym>CTM</acronym> understands deltas which have been
	      put through <emphasis remap=tt>gzip</emphasis>, so you do not
	      need to gunzip them first, this saves disk space.</para>
	    
	    <para>Unless it feels very secure about the entire process,
	      <acronym>CTM</acronym> will not touch your tree.  To verify a
	      delta you can also use the ``<option>-c</option>'' flag and
	      <acronym>CTM</acronym> will not actually touch your tree; it
	      will merely verify the integrity of the delta and see if it
	      would apply cleanly to your current tree.</para>
	    
	    <para>There are other options to <acronym>CTM</acronym> as well,
	      see the manual pages or look in the sources for more
	      information.</para>
	    
	    <para>I would also be very happy if somebody could help with the
	      ``user interface'' portions, as I have realized that I cannot
	      make up my mind on what options should do what, how and
	      when...</para>
	    
	    <para>That's really all there is to it.  Every time you get a new
	      delta, just run it through <acronym>CTM</acronym> to keep your
	      sources up to date.</para>
	    
	    <para>Do not remove the deltas if they are hard to download again.
	      You just might want to keep them around in case something bad
	      happens. Even if you only have floppy disks, consider using
	      <emphasis remap=tt>fdwrite</emphasis> to make a copy.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Keeping your local changes</title>
	    
	    <para>As a developer one would like to experiment with and change
	      files in the source tree.  CTM supports local modifications in a
	      limited way: before checking for the presence of a file
	      <emphasis remap=tt>foo</emphasis>, it first looks for
	      <filename>foo.ctm</filename>.  If this file exists, CTM will
	      operate on it instead of <emphasis
		remap=tt>foo</emphasis>.</para>
	    
	    <para>This behaviour gives us a simple way to maintain local
	      changes: simply copy the files you plan to modify to the
	      corresponding file names with a <filename>.ctm</filename>
	      suffix.  Then you can freely hack  the code, while CTM keeps the
	      <filename>.ctm</filename> file up-to-date.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Other interesting CTM options</title>
	    
	    
	    <sect4>
	      <title>Finding out exactly what would be touched by an
		update</title>
	      
	      <para>You can determine the list of changes that CTM will make
		on your source repository using the ``<option>-l</option>''
		option to CTM.</para>
	      
	      <para>This is useful if you would like to keep logs of the
		changes,  pre- or post- process the modified files in any
		manner, or just  are feeling a tad paranoid :-).</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Making backups before updating</title>
	      
	      <para>Sometimes you may want to backup all the files that would
		be changed by a CTM update.</para>
	      
	      <para>Specifying the ``<option>-B backup-file</option>'' option
		causes CTM to backup all files that would be touched by a
		given CTM delta to <emphasis
		  remap=tt>backup-file</emphasis>.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Restricting the files touched by an update</title>
	      
	      <para>Sometimes you would be interested in restricting the scope
		of a given CTM update, or may be interested in extracting just
		a few files from a sequence of deltas.</para>
	      
	      <para>You can control the list of files that CTM would operate
		on by specifying filtering regular expressions using the
		``<option>-e</option>'' and ``<option>-x</option>''
		options.</para>
	      
	      <para>For example, to extract an up-to-date copy of
		<filename>lib/libc/Makefile</filename> from your collection of
		saved CTM deltas, run the commands:
		<informalexample>
		  <screen>cd /where/ever/you/want/to/extract/it/ ctm -e
		    '^lib/libc/Makefile' ~ctm/src-xxx.*
		  </screen>
		</informalexample>
	      </para>
	      
	      <para>For every file specified in a CTM delta, the
		``<option>-e</option>'' and ``<option>-x</option>'' options
		are applied in the order given on the command line.  The file
		is processed by CTM only if it is marked as eligible after all
		the ``<option>-e</option>'' and ``<option>-x</option>''
		options are applied to it.</para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title>Future plans for <acronym>CTM</acronym></title>
	    
	    <para>Tons of them:
	      <itemizedlist>
		
		<listitem>
		  <para>Use some kind of authentication into the CTM system,
		    so as to allow detection of spoofed CTM updates.</para>
		</listitem>
		
		<listitem>
		  <para>Clean up the options to <acronym>CTM</acronym>, they
		    became confusing and counter intuitive.</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>The bad news is that I am very busy, so any help in doing
	      this will be most welcome.  And do not forget to tell me what
	      you want also...</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Miscellaneous stuff</title>
	    
	    <para>All the ``DES infected'' (e.g. export controlled) source is
	      not included.  You will get the ``international'' version only.
	      If sufficient interest appears, we will set up a ``<emphasis
		remap=tt>sec-cur</emphasis>'' sequence too. There is a
	      sequence of deltas for the <emphasis remap=tt>ports</emphasis>
	      collection too, but interest has not been all that high yet.
	      Tell me if you want an email list for that too and we will
	      consider setting it up.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Thanks!</title>
	    
	    <para>
	      <variablelist>
		<varlistentry><term>&a.bde;</term>
		  <listitem>
		    <para>for his pointed pen and invaluable comments.</para>
		    
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>&a.sos;</term>
		  
		  <listitem>
		    <para>for patience.</para>
		    
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>Stephen McKay</term>
		  
		  <listitem>
		    <para>wrote <emphasis remap=tt>ctm_[rs]mail</emphasis>,
		      much appreciated.</para>
		    
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>&a.jkh;</term>
		  
		  <listitem>
		    <para>for being so stubborn that I had to make it
		      better.</para>
		    
		  </listitem>
		</varlistentry>
		
		<varlistentry><term>All the users</term>
		  
		  <listitem>
		    <para>I hope you like it...</para>
		    
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	  </sect3>
	</sect2>
	
	<sect2
	  id="cvsup">
	  <title>CVSup</title>
	  
	  <para><emphasis>Contributed by &a.jdp;</emphasis>.</para>
	  
	  
	  <sect3
	    id="cvsup-intro">
	    <title>Introduction</title>
	    
	    <para>CVSup is a software package for distributing and updating
	      source trees from a master CVS repository on a remote server
	      host.  The FreeBSD sources are maintained in a CVS repository on
	      a central development machine in California.  With CVSup,
	      FreeBSD users can easily keep their own source trees up to
	      date.</para>
	    
	    <para>CVSup uses the so-called <emphasis>pull</emphasis> model of
	      updating.  Under the pull model, each client asks the server for
	      updates, if and when they are wanted.  The server waits
	      passively for update requests from its clients.  Thus all
	      updates are instigated by the client.  The server never sends
	      unsolicited updates.  Users must either run the CVSup client
	      manually to get an update, or they must set up a cron job to run
	      it automatically on a regular basis.</para>
	    
	    <para>The term "CVSup", capitalized just so, refers to the entire
	      software package.  Its main components are the client "cvsup"
	      which runs on each user's machine, and the server "cvsupd" which
	      runs at each of the FreeBSD mirror sites.</para>
	    
	    <para>As you read the FreeBSD documentation and mailing lists, you
	      may see references to <emphasis>sup</emphasis>.  Sup was the
	      predecessor of CVSup, and it served a similar purpose.  CVSup is
	      in used in much the same way as sup and, in fact, uses
	      configuration files which are backward-compatible with sup's.
	      Sup is no longer used in the FreeBSD project, because CVSup is
	      both faster and more flexible.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="cvsup-install">
	    <title>Installation</title>
	    
	    <para>The easiest way to install CVSup if you are running FreeBSD
	      2.2 or later is to use either <ulink
		URL="ftp://ftp.freebsd.org/pub/FreeBSD/ports-current/net/cvsup.tar">the port</ulink> from the FreeBSD <xref linkend="ports" remap="ports collection"> or the corresponding <ulink URL="ftp://ftp.freebsd.org/pub/FreeBSD/packages-current/net/cvsup-15.3.tgz">binary package</ulink>, depending on whether you prefer to roll your own or not.</para>
	    
	    <para>If you are running FreeBSD-2.1.6 or 2.1.7, you unfortunately
	      cannot use the binary package versions due to the fact that it
	      requires a version of the C library that does not yet exist in
	      FreeBSD-2.1.{6,7}.  You can easily use <ulink
		URL="ftp://ftp.freebsd.org/pub/FreeBSD/ports-current/net/cvsup.tar">the port</ulink>, however, just as with FreeBSD 2.2.  Simply unpack the tar file, cd to the cvsup subdirectory and type "make install".</para>
	    
	    <para>Because CVSup is written in <ulink
		URL="http://www.research.digital.com/SRC/modula-3/html/home.html">Modula-3</ulink>, both the package and the port require that the Modula-3 runtime libraries be installed.  These are available as the <ulink URL="ftp://ftp.freebsd.org/pub/FreeBSD/ports-current/lang/modula-3-lib.tar">lang/modula-3-lib</ulink> port and the <ulink URL="ftp://ftp.freebsd.org/pub/FreeBSD/packages-current/lang/modula-3-lib-3.6.tgz">lang/modula-3-lib-3.6</ulink> package.  If you follow the same directions as for cvsup, these libraries will be compiled and/or installed automatically when you install the CVSup port or package.</para>
	    
	    <para>The Modula-3 libraries are rather large, and fetching and
	      compiling them is not an instantaneous process.  For that
	      reason, a third option is provided.  You can get
	      <emphasis>statically linked</emphasis> FreeBSD executables for
	      CVSup from either the USA distribution site:</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para><ulink
		      URL="ftp://ftp.freebsd.org/pub/FreeBSD/CVSup/cvsup-bin-15.3.tar.gz">ftp://ftp.freebsd.org/pub/FreeBSD/CVSup/cvsup-bin-15.3.tar.gz</ulink> (client including GUI).</para>
		</listitem>
		
		<listitem>
		  <para><ulink
		      URL="ftp://ftp.freebsd.org/pub/FreeBSD/CVSup/cvsup.nogui-bin-15.3.tar.gz">ftp://ftp.freebsd.org/pub/FreeBSD/CVSup/cvsup.nogui-bin-15.3.tar.gz</ulink> (client without GUI).</para>
		</listitem>
		
		<listitem>
		  <para><ulink
		      URL="ftp://ftp.freebsd.org/pub/FreeBSD/CVSup/cvsupd-bin-15.3.tar.gz">ftp://ftp.freebsd.org/pub/FreeBSD/CVSup/cvsupd-bin-15.3.tar.gz</ulink> (server).</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>or the German mirror:</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para><ulink
		      URL="ftp://ftp.cs.tu-berlin.de/pub/FreeBSD/CVSup/cvsup-bin-15.3.tar.gz">ftp://ftp.cs.tu-berlin.de/pub/FreeBSD/CVSup/cvsup-bin-15.3.tar.gz</ulink> (client including GUI).</para>
		</listitem>
		
		<listitem>
		  <para><ulink
		      URL="ftp://ftp.cs.tu-berlin.de/pub/FreeBSD/CVSup/cvsup.nogui-bin-15.3.tar.gz">ftp://ftp.cs.tu-berlin.de/pub/FreeBSD/CVSup/cvsup.nogui-bin-15.3.tar.gz</ulink> (client without GUI).</para>
		</listitem>
		
		<listitem>
		  <para><ulink
		      URL="ftp://ftp.cs.tu-berlin.de/pub/FreeBSD/CVSup/cvsupd-bin-15.3.tar.gz">ftp://ftp.cs.tu-berlin.de/pub/FreeBSD/CVSup/cvsupd-bin-15.3.tar.gz</ulink> (server).</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>Most users will need only the client.  These executables are
	      entirely self-contained, and they will run on any version of
	      FreeBSD from FreeBSD-2.1.0 to FreeBSD-current.</para>
	    
	    <para>In summary, your options for installing CVSup are:</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para>FreeBSD-2.2 or later:		static binary, port,
		    or package</para>
		</listitem>
		
		<listitem>
		  <para>FreeBSD-2.1.6, 2.1.7:		static binary or
		    port</para>
		</listitem>
		
		<listitem>
		  <para>FreeBSD-2.1.5 or earlier:	static binary</para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	  </sect3>
	  
	  <sect3
	    id="cvsup-config">
	    <title>Configuration</title>
	    
	    <para>CVSup's operation is controlled by a configuration file
	      called the "supfile".  Beginning with FreeBSD-2.2, there are
	      some sample supfiles in the directory <ulink
		URL="file:/usr/share/examples/cvsup">/usr/share/examples/cvsup</ulink>.  These examples are also available from <ulink URL="ftp://ftp.freebsd.org/pub/FreeBSD/FreeBSD-current/src/share/examples/cvsup/">ftp://ftp.freebsd.org/pub/FreeBSD/FreeBSD-current/src/share/examples/cvsup/</ulink> if you are on a pre-2.2 system.</para>
	    
	    <para>The information in a supfile answers the following questions
	      for cvsup:</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para><xref linkend="cvsup-config-files" remap="Which files
		      do you want to receive?"></para>
		</listitem>
		
		<listitem>
		  <para><xref linkend="cvsup-config-vers" remap="Which
		      versions of them do you want?"></para>
		</listitem>
		
		<listitem>
		  <para><xref linkend="cvsup-config-where" remap="Where do you
		      want to get them from?"></para>
		</listitem>
		
		<listitem>
		  <para><xref linkend="cvsup-config-dest" remap="Where do you
		      want to put them on your own machine?"></para>
		</listitem>
		
		<listitem>
		  <para><xref linkend="cvsup-config-status" remap="Where do
		      you want to put your status files?"></para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>In the following sections, we will construct a typical
	      supfile by answering each of these questions in turn.  First, we
	      describe the overall structure of a supfile.</para>
	    
	    <para>A supfile is a text file.  Comments begin with "#" and
	      extend to the end of the line.  Lines that are blank and lines
	      that contain only comments are ignored.</para>
	    
	    <para>Each remaining line describes a set of files that the user
	      wishes to receive.  The line begins with the name of a
	      "collection", a logical grouping of files defined by the server.
	      The name of the collection tells the server which files you
	      want.  After the collection name come zero or more fields,
	      separated by white space. These fields answer the questions
	      listed above.  There are two types of fields: flag fields and
	      value fields.  A flag field consists of a keyword standing
	      alone, e.g., "delete" or "compress".  A value field also begins
	      with a keyword, but the keyword is followed without intervening
	      white space by "=" and a second word.  For example,
	      "release=cvs" is a value field.</para>
	    
	    <para>A supfile typically specifies more than one collection to
	      receive. One way to structure a supfile is to specify all of the
	      relevant fields explicitly for each collection.  However, that
	      tends to make the supfile lines quite long, and it is
	      inconvenient because most fields are the same for all of the
	      collections in a supfile.  CVSup provides a defaulting mechanism
	      to avoid these problems.  Lines beginning with the special
	      pseudo-collection name "*default" can be used to set flags and
	      values which will be used as defaults for the subsequent
	      collections in the supfile.  A default value can be overridden
	      for an individual collection, by specifying a different value
	      with the collection itself.  Defaults can also be changed or
	      augmented in mid-supfile by additional "*default" lines.</para>
	    
	    <para>With this background, we will now proceed to construct a
	      supfile for receiving and updating the main source tree of <xref
		linkend="current" remap="FreeBSD-current">.</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para>Which files do you want to receive?<anchor
		      id="cvsup-config-files">
		    
		  </para>
		  
		  <para>The files available via CVSup are organized into named
		    groups called "collections".  The collections that are
		    available are described <xref linkend="cvsup-collec"
		      remap="here">. In
		    this example, we wish to receive the entire main source
		    tree for the FreeBSD system.  There is a single large
		    collection "src-all" which will give us all of that,
		    except the export-controlled cryptography support.  Let us
		    assume for this example that we are in the USA or Canada.
		    Then we can get the cryptography code with one additional
		    collection, "cvs-crypto". As a first step toward
		    constructing our supfile, we simply list these
		    collections, one per line:</para>
		  
		  <para>
		    <literallayout>  src-all cvs-crypto</literallayout>
		  </para>
		</listitem>
		
		<listitem>
		  <para>Which version(s) of them do you want?<anchor
		      id="cvsup-config-vers">
		    
		  </para>
		  
		  <para>With CVSup, you can receive virtually any version of
		    the sources that ever existed.  That is possible because
		    the cvsupd server works directly from the CVS repository,
		    which contains all of the versions. You specify which one
		    of them you want using the "tag=" and "date=" value
		    fields.</para>

		  <para><emphasis remap=bf>WARNING:</emphasis>  Be very
		    careful to specify any "tag=" fields correctly.  Some tags
		    are valid only for certain collections of files.  If you
		    specify an incorrect or misspelled tag, CVSup will delete
		    files which you probably do not want deleted. In
		    particular, use <emphasis>only
		    </emphasis>"<literal>tag=.</literal>" for the "ports-*"
		    collections.</para>

		  <para>The "tag=" field names a symbolic tag in the
		    repository.  There are two kinds of tags, revision tags
		    and branch tags.  A revision tag refers to a specific
		    revision.  Its meaning stays the same from day to day.  A
		    branch tag, on the other hand, refers to the latest
		    revision on a given line of development, at any given
		    time.  Because a branch tag does not refer to a specific
		    revision, it may mean something different tomorrow than it
		    means today.</para>

		  <para>Here are the branch tags that users might be
		    interested in:</para>
		  
		  <para>
		    <variablelist>
		      <varlistentry><term>tag=.</term>
			<listitem>
			  <para>The main line of development, also known as
			    FreeBSD-current. Note:  the "." is not
			    punctuation; it is the name of the tag. Valid for
			    all collections.</para>
			  
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>tag=RELENG_2_2</term>
			
			<listitem>
			  <para>The line of development for FreeBSD-2.2.x,
			    also known as   FreeBSD-stable. Not valid for the
			    ports-* collections.</para>
			  
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>tag=RELENG_2_1_0</term>
			
			<listitem>
			  <para>The line of development for FreeBSD-2.1.x -
			    this branch is largely obsolete. Not valid for the
			    ports-* collections.</para>
			  
			</listitem>
		      </varlistentry>
		    </variablelist>
		  </para>

		  <para>Here are the revision tags that users might be
		    interested in:</para>
		  
		  <para>
		    <variablelist>
		      <varlistentry><term>tag=RELENG_2_2_6_RELEASE</term>
			<listitem>
			  <para>FreeBSD-2.2.6. Not valid for the ports-*
			    collections.</para>
			  
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>tag=RELENG_2_2_5_RELEASE</term>
			
			<listitem>
			  <para>FreeBSD-2.2.5. Not valid for the ports-*
			    collections.</para>
			  
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>tag=RELENG_2_2_2_RELEASE</term>
			
			<listitem>
			  <para>FreeBSD-2.2.2. Not valid for the ports-*
			    collections.</para>
			  
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>tag=RELENG_2_2_1_RELEASE</term>
			
			<listitem>
			  <para>FreeBSD-2.2.1. Not valid for the ports-*
			    collections.</para>
			  
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>tag=RELENG_2_2_0_RELEASE</term>
			
			<listitem>
			  <para>FreeBSD-2.2.0. Not valid for the ports-*
			    collections.</para>
			  
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>tag=RELENG_2_1_7_RELEASE</term>
			
			<listitem>
			  <para>FreeBSD-2.1.7. Not valid for the ports-*
			    collections.</para>
			  
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>tag=RELENG_2_1_6_1_RELEASE</term>
			
			<listitem>
			  <para>FreeBSD-2.1.6.1. Not valid for the ports-*
			    collections.</para>
			  
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>tag=RELENG_2_1_6_RELEASE</term>
			
			<listitem>
			  <para>FreeBSD-2.1.6. Not valid for the ports-*
			    collections.</para>
			  
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>tag=RELENG_2_1_5_RELEASE</term>
			
			<listitem>
			  <para>FreeBSD-2.1.5. Not valid for the ports-*
			    collections.</para>
			  
			</listitem>
		      </varlistentry>
		      
		      <varlistentry><term>tag=RELENG_2_1_0_RELEASE</term>
			
			<listitem>
			  <para>FreeBSD-2.1.0. Not valid for the ports-*
			    collections.</para>
			  
			</listitem>
		      </varlistentry>
		    </variablelist>
		  </para>

		  <para><emphasis remap=bf>WARNING:</emphasis>  Be very
		    careful to type the tag name exactly as shown.  CVSup
		    cannot distinguish between valid and invalid tags. If you
		    misspell the tag, CVSup will behave as though you had
		    specified a valid tag which happens to refer to no files
		    at all. It will delete your existing sources in that
		    case.</para>

		  <para>When you specify a branch tag, you normally receive
		    the latest versions of the files on that line of
		    development.  If you wish to receive some past version,
		    you can do so by specifying a date with the "date=" value
		    field.  The cvsup(1) manual page explains how to do
		    that.</para>

		  <para>For our example, we wish to receive FreeBSD-current.
		    We add this line at the beginning of our supfile:</para>
		  
		  <para>
		    <literallayout>  *default tag=.</literallayout>
		  </para>

		  <para>There is an important special case that comes into
		    play if you specify neither a "tag=" field nor a "date="
		    field.  In that case, you receive the actual RCS files
		    directly from the server's CVS repository, rather than
		    receiving a particular version.  Developers generally
		    prefer this mode of operation.  By maintaining a copy of
		    the repository itself on their systems, they gain the
		    ability to browse the revision histories and examine past
		    versions of files.  This gain is achieved at a large cost
		    in terms of disk space, however.</para>
		</listitem>
		
		<listitem>
		  <para>Where do you want to get them from?<anchor
		      id="cvsup-config-where">
		    
		  </para>
		  
		  <para>We use the "host=" field to tell cvsup where to obtain
		    its updates. Any of the <xref linkend="mirrors-cvsup"
		      remap="CVSup
		      mirror sites"> will do, though you should try to select
		    one that's near to you. In this example, we'll use the
		    primary FreeBSD distribution site,
		    "cvsup.FreeBSD.org":</para>
		  
		  <para>
		    <literallayout>  *default
		      host=cvsup.FreeBSD.org</literallayout>
		  </para>

		  <para>On any particular run of cvsup, you can override this
		    setting on the command line, with "-h hostname".</para>
		</listitem>
		
		<listitem>
		  <para>Where do you want to put them on your own
		    machine?<anchor id="cvsup-config-dest">
		    
		  </para>
		  
		  <para>The "prefix=" field tells cvsup where to put the files
		    it receives. In this example, we will put the source files
		    directly into our main source tree, "/usr/src".  The "src"
		    directory is already implicit in the collections we have
		    chosen to receive, so this is the correct
		    specification:</para>
		  
		  <para>
		    <literallayout>  *default prefix=/usr</literallayout>
		  </para>
		</listitem>
		
		<listitem>
		  <para>Where should cvsup maintain its status files?<anchor
		      id="cvsup-config-status">
		    
		  </para>
		  
		  <para>The cvsup client maintains certain status files in
		    what is called the "base" directory.  These files help
		    CVSup to work more efficiently, by keeping track of which
		    updates you have already received.  We will use the
		    standard base directory, "/usr/local/etc/cvsup":</para>
		  
		  <para>
		    <literallayout>  *default
		      base=/usr/local/etc/cvsup</literallayout>
		  </para>

		  <para>This setting is used by default if it is not specified
		    in the supfile, so we actually do not need the above
		    line.</para>

		  <para>If your base directory does not already exist, now
		    would be a good time to create it.  The cvsup client will
		    refuse to run if the base directory does not exist.</para>
		</listitem>
		
		<listitem>
		  <para>Miscellaneous supfile settings:
		    
		  </para>
		  
		  <para>There is one more line of boiler plate that normally
		    needs to be present in the supfile:</para>
		  
		  <para>
		    <literallayout>  *default release=cvs delete
		      use-rel-suffix compress</literallayout>
		  </para>

		  <para>"release=cvs" indicates that the server should get its
		    information out of the main FreeBSD CVS repository.  This
		    is virtually always the case, but there are other
		    possibilities which are beyond the scope of this
		    discussion.</para>

		  <para>"delete" gives CVSup permission to delete files.  You
		    should always specify this, so that CVSup can keep your
		    source tree fully up to date.  CVSup is careful to delete
		    only those files for which it is responsible.  Any extra
		    files you happen to have will be left strictly
		    alone.</para>

		  <para>"use-rel-suffix" is ... arcane.  If you really want to
		    know about it, see the cvsup(1) manual page.  Otherwise,
		    just specify it and do not worry about it.</para>

		  <para>"compress" enables the use of gzip-style compression
		    on the communication channel.  If your network link is T1
		    speed or faster, you probably should not use compression.
		    Otherwise, it helps substantially.</para>
		</listitem>
		
		<listitem>
		  <para>Putting it all together:
		    
		  </para>
		  
		  <para>Here is the entire supfile for our example:</para>
		  
		  <para>
		    <literallayout>  *default tag=. *default
		      host=cvsup.FreeBSD.org *default prefix=/usr *default
		      base=/usr/local/etc/cvsup *default release=cvs delete
		      use-rel-suffix compress src-all
		      cvs-crypto</literallayout>
		  </para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Running CVSup</title>
	    
	    <para>You are now ready to try an update.  The command line for
	      doing this is quite simple:</para>
	    
	    <para>
	      <literallayout>  cvsup supfile</literallayout>
	    </para>
	    
	    <para>where "supfile" is of course the name of the supfile you
	      have just created. Assuming you are running under X11, cvsup
	      will display a GUI window with some buttons to do the usual
	      things.  Press the "go" button, and watch it run.</para>
	    
	    <para>Since you are updating your actual "/usr/src" tree in this
	      example, you will need to run the program as root so that cvsup
	      has the permissions it needs to update your files.  Having just
	      created your configuration file, and having never used this
	      program before, that might understandably make you nervous.
	      There is an easy way to do a trial run without touching your
	      precious files.  Just create an empty directory somewhere
	      convenient, and name it as an extra argument on the command
	      line:</para>
	    
	    <para>
	      <literallayout>  mkdir /var/tmp/dest cvsup supfile
		/var/tmp/dest</literallayout>
	    </para>
	    
	    <para>The directory you specify will be used as the destination
	      directory for all file updates.  CVSup will examine your usual
	      files in "/usr/src", but it will not modify or delete any of
	      them.  Any file updates will instead land in
	      "/var/tmp/dest/usr/src".  CVSup will also leave its base
	      directory status files untouched when run this way. The new
	      versions of those files will be written into the specified
	      directory.  As long as you have read access to "/usr/src", you
	      do not even need to be root to perform this kind of trial
	      run.</para>
	    
	    <para>If you are not running X11 or if you just do not like GUIs,
	      you should add a couple of options to the command line when you
	      run cvsup:</para>
	    
	    <para>
	      <literallayout>  cvsup -g -L 2 supfile</literallayout>
	    </para>
	    
	    <para>The "-g" tells cvsup not to use its GUI.  This is automatic
	      if you are not running X11, but otherwise you have to specify
	      it.</para>
	    
	    <para>The "-L 2" tells cvsup to print out the details of all the
	      file updates it is doing.  There are three levels of verbosity,
	      from "-L 0" to "-L 2". The default is 0, which means total
	      silence except for error messages.</para>
	    
	    <para>There are plenty of other options available.  For a brief
	      list of them, type "cvsup -H".  For more detailed descriptions,
	      see the manual page.</para>
	    
	    <para>Once you are satisfied with the way updates are working, you
	      can arrange for regular runs of cvsup using cron(8).  Obviously,
	      you should not let cvsup use its GUI when running it from
	      cron.</para>
	    
	  </sect3>
	  
	  <sect3
	    id="cvsup-collec">
	    <title>CVSup File Collections</title>
	    
	    <para>The file collections available via CVSup are organized
	      hierarchically.  There are a few large collections, and they are
	      divided into smaller sub-collections.  Receiving a large
	      collection is equivalent to receiving each of its
	      sub-collections. The hierarchical relationships among
	      collections are reflected by the use of indentation in the list
	      below.</para>
	    
	    <para> The most commonly used collections are <emphasis
		remap=tt>src-all</emphasis>, <emphasis
		remap=tt>cvs-crypto</emphasis>, and <emphasis
		remap=tt>ports-all</emphasis>.  The other collections are used
	      only by small groups of people for specialized purposes, and
	      some mirror sites may not carry all of them.</para>
	    
	    <para>
	      <variablelist>
		<varlistentry><term><literal>cvs-all
		      release=cvs</literal></term>
		  <listitem>
		    <para>The main FreeBSD CVS repository, excluding the
		      export-restricted cryptography code.</para>
		    
		    <para>
		      <variablelist>
			<varlistentry><term><literal>distrib
			      release=cvs</literal></term>
			  <listitem>
			    <para>Files related to the distribution and
			      mirroring of FreeBSD.</para>
			    
			  </listitem>
			</varlistentry>
			
			<varlistentry><term><literal>doc-all
			      release=cvs</literal></term>
			  
			  <listitem>
			    <para>Sources for the FreeBSD handbook and other
			      documentation.</para>
			    
			  </listitem>
			</varlistentry>
			
			<varlistentry><term><literal>ports-all
			      release=cvs</literal></term>
			  
			  <listitem>
			    <para>The FreeBSD ports collection.</para>
			    
			    <para>
			      <variablelist>
				<varlistentry><term><literal>ports-archivers
				      release=cvs</literal></term>
				  <listitem>
				    <para>Archiving tools.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-astro
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Astronomical ports.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-audio
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Sound support.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-base
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Miscellaneous files at the top of
				      /usr/ports.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-benchmarks
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Benchmarks.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-biology
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Biology.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-cad
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Computer aided design tools.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-chinese
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Chinese language support.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-comms
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Communication software.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-converters
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>character code converters.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-databases
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Databases.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-devel
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Development utilities.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-editors
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Editors.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-emulators
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Emulators for other operating
				      systems.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-games
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Games.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-german
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>German language support.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-graphics
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Graphics utilities.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-japanese
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Japanese language support.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-korean
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Korean language support.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-lang
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Programming languages.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-mail
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Mail software.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-math
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Numerical computation
				      software.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-mbone
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>MBone applications.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-misc
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Miscellaneous utilities.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-net
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Networking software.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-news
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>USENET news software.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-plan9
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Various programs from Plan9.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-print
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Printing software.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-russian
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Russian language support.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-security
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Security utilities.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-shells
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Command line shells.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-sysutils
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>System utilities.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-textproc
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>text processing utilities (does not
				      include desktop publishing).</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-vietnamese
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Vietnamese language support.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-www
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Software related to the World Wide
				      Web.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>ports-x11
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>X11 software.</para>
				    
				  </listitem>
				</varlistentry>
			      </variablelist>
			    </para>
			    
			  </listitem>
			</varlistentry>
			
			<varlistentry><term><literal>src-all
			      release=cvs</literal></term>
			  
			  <listitem>
			    <para>The main FreeBSD sources, excluding the
			      export-restricted cryptography code.</para>
			    
			    <para>
			      <variablelist>
				<varlistentry><term><literal>src-base
				      release=cvs</literal></term>
				  <listitem>
				    <para>Miscellaneous files at the top of
				      <filename>/usr/src</filename>.</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>src-bin
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>User utilities that may be needed in
				      single-user mode
				      (<filename>/usr/src/bin</filename>).</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>src-contrib
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Utilities and libraries from outside
				      the FreeBSD project, used relatively
				      unmodified
				      (<filename>/usr/src/contrib</filename>).</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>src-etc
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>System configuration files
				      (<filename>/usr/src/etc</filename>).</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>src-games
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Games
				      (<filename>/usr/src/games</filename>).</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>src-gnu
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Utilities covered by the GNU Public
				      License
				      (<filename>/usr/src/gnu</filename>).</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>src-include
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Header files
				      (<filename>/usr/src/include</filename>).</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>src-kerberosIV
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>KerberosIV security package
				      (<filename>/usr/src/kerberosIV</filename>).</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>src-lib
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Libraries
				      (<filename>/usr/src/lib</filename>).</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>src-libexec
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>System programs normally executed by
				      other programs
				      (<filename>/usr/src/libexec</filename>).</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>src-release
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Files required to produce a FreeBSD
				      release
				      (<filename>/usr/src/release</filename>).</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>src-sbin
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>System utilities for single-user
				      mode
				      (<filename>/usr/src/sbin</filename>).</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>src-share
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Files that can be shared across
				      multiple systems
				      (<filename>/usr/src/share</filename>).</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>src-sys
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>The kernel
				      (<filename>/usr/src/sys</filename>).</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>src-tools
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>Various tools for the maintenance of
				      FreeBSD
				      (<filename>/usr/src/tools</filename>).</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>src-usrbin
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>User utilities
				      (<filename>/usr/src/usr.bin</filename>).</para>
				    
				  </listitem>
				</varlistentry>
				
				<varlistentry><term><literal>src-usrsbin
				      release=cvs</literal></term>
				  
				  <listitem>
				    <para>System utilities
				      (<filename>/usr/src/usr.sbin</filename>).</para>
				    
				  </listitem>
				</varlistentry>
			      </variablelist>
			    </para>
			    
			  </listitem>
			</varlistentry>
			
			<varlistentry><term><literal>www
			      release=cvs</literal></term>
			  
			  <listitem>
			    <para>The sources for the World Wide Web
			      data.</para>
			    
			  </listitem>
			</varlistentry>
		      </variablelist>
		    </para>
		    
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><literal>cvs-crypto
		      release=cvs</literal></term>
		  
		  <listitem>
		    <para>The export-restricted cryptography code.</para>
		    
		    <para>
		      <variablelist>
			<varlistentry><term><literal>src-crypto
			      release=cvs</literal></term>
			  <listitem>
			    <para>Export-restricted utilities and libraries
			      from outside the FreeBSD project, used
			      relatively unmodified
			      (<filename>/usr/src/crypto</filename>).</para>
			    
			  </listitem>
			</varlistentry>
			
			<varlistentry><term><literal>src-eBones
			      release=cvs</literal></term>
			  
			  <listitem>
			    <para>Kerberos and DES
			      (<filename>/usr/src/eBones</filename>).</para>
			    
			  </listitem>
			</varlistentry>
			
			<varlistentry><term><literal>src-secure
			      release=cvs</literal></term>
			  
			  <listitem>
			    <para>DES
			      (<filename>/usr/src/secure</filename>).</para>
			    
			  </listitem>
			</varlistentry>
		      </variablelist>
		    </para>
		    
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><literal>distrib
		      release=self</literal></term>
		  
		  <listitem>
		    <para>The CVSup server's own configuration files.  Used by
		      CVSup mirror sites.</para>
		    
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><literal>gnats
		      release=current</literal></term>
		  
		  <listitem>
		    <para>The GNATS bug-tracking database.</para>
		    
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><literal>mail-archive
		      release=current</literal></term>
		  
		  <listitem>
		    <para>FreeBSD mailing list archive.</para>
		    
		  </listitem>
		</varlistentry>
		
		<varlistentry><term><literal>www
		      release=current</literal></term>
		  
		  <listitem>
		    <para>The installed World Wide Web data.  Used by WWW
		      mirror sites.</para>
		    
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Announcements, Questions, and Bug Reports</title>
	    
	    <para>Most FreeBSD-related discussion of CVSup takes place on the
	      &a.hackers;.  New versions of the software are announced there,
	      as well as on the &a.announce;.</para>
	    
	    <para>Questions and bug reports should be addressed to the author
	      of the program at <ulink
		URL="mailto:cvsup-bugs@polstra.com">cvsup-bugs@polstra.com</ulink>.
	      
	    </para>
	    
	  </sect3>
	</sect2>
      </sect1>
      
      <sect1
	id="makeworld">
	<title>Using <emphasis remap=bf>make world</emphasis> to rebuild your
	  system</title>
	
	<para><emphasis>Contributed by &a.nik;.</emphasis></para>
	
	<para>Once you have synchronised your local source tree against a
	  particular version of FreeBSD (<emphasis remap=tt>stable</emphasis>,
	  <emphasis remap=tt>current</emphasis> and so on) you must then use
	  the source tree to rebuild the system.</para>
	
	<para>Currently, the best source of information on how to do that is a
	  tutorial available from <ulink
	    URL="http://www.nothing-going-on.demon.co.uk/FreeBSD/make-world/make-world.html">http://www.nothing-going-on.demon.co.uk/FreeBSD/make-world/make-world.html</ulink>.</para>
	
	<para>A successor to this tutorial will be integrated into the
	  handbook.</para>
	
      </sect1>
    </chapter>
    
    <chapter
      id="contrib">
      <title>Contributing to FreeBSD</title>
      
      <para><emphasis>Contributed by &a.jkh;.</emphasis></para>
      
      <para>So you want to contribute something to FreeBSD?  That is great! We
	can always use the help, and FreeBSD is one of those systems that
	<emphasis>relies</emphasis> on the contributions of its user base in
	order to survive.  Your contributions are not only appreciated, they
	are vital to FreeBSD's continued growth!</para>
      
      <para>Contrary to what some people might also have you believe, you do
	not need to be a hot-shot programmer or a close personal friend of the
	FreeBSD core team in order to have your contributions accepted.  The
	FreeBSD Project's development is done by a large and growing number of
	international contributors whose ages and areas of technical expertise
	vary greatly, and there is always more work to be done than there are
	people available to do it.</para>
      
      <para>Since the FreeBSD project is responsible for an entire operating
	system environment (and its installation) rather than just a kernel or
	a few scattered utilities, our "TODO" list also spans a very wide
	range of tasks, from documentation, beta testing and presentation to
	highly specialized types of kernel development.  No matter what your
	skill level, there is almost certainly something you can do to help
	the project!</para>
      
      <para>Commercial entities engaged in FreeBSD-related enterprises are
	also encouraged to contact us.  Need a special extension to make your
	product work?  You will find us receptive to your requests, given that
	they are not too outlandish.  Working on a value-added product?
	Please let us know!  We may be able to work cooperatively on some
	aspect of it.  The free software world is challenging a lot of
	existing assumptions about how software is developed, sold, and
	maintained throughout its life cycle, and we urge you to at least give
	it a second look.</para>
      
      
      <sect1>
	<title>What Is Needed</title>
	
	<para>The following list of tasks and sub-projects represents
	  something of an amalgam of the various core team TODO lists and user
	  requests we have collected over the last couple of months.  Where
	  possible, tasks have been ranked by degree of urgency.  If you are
	  interested in working on one of the tasks you see here, send mail to
	  the coordinator listed by clicking on their names.  If no
	  coordinator has been appointed, maybe you would like to
	  volunteer?</para>
	
	
	<sect2>
	  <title>High priority tasks</title>
	  
	  <para>The following tasks are considered to be urgent, usually
	    because they represent something that is badly broken or sorely
	    needed:
	    <orderedlist>
	      
	      <listitem>
		<para>3-stage boot issues.  Overall coordination:
		  &a.hackers;</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>Autodetect memory over 64MB properly.</para>
		    </listitem>
		    
		    <listitem>
		      <para>Move userconfig (-c) into 3rd stage boot.</para>
		    </listitem>
		    
		    <listitem>
		      <para>Do WinNT compatible drive tagging so that the 3rd
			stage can provide an accurate mapping of BIOS
			geometries for disks.</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Filesystem problems.  Overall coordination: &a.fs;
		  <itemizedlist>
		    
		    <listitem>
		      <para>Fix the MSDOS file system.</para>
		    </listitem>
		    
		    <listitem>
		      <para>Clean up and document the nullfs filesystem code.
			Coordinator: &a.gibbs;</para>
		    </listitem>
		    
		    <listitem>
		      <para>Fix the union file system.  Coordinator:
			&a.dyson;</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Implement kernel and user vm86 support.  Coordinator:
		  &a.hackers;</para>
	      </listitem>
	      
	      <listitem>
		<para>Implement Int13 vm86 disk driver.  Coordinator:
		  &a.hackers;</para>
	      </listitem>
	      
	      <listitem>
		<para>SCSI driver issues.  Overall coordination:
		  &a.hackers;</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>Support tagged queuing generically.  Requires a
			rewrite of how we do our command queuing, but we need
			this anyway to for prioritized I/O (CD-R
			writers/scanners).</para>
		    </listitem>
		    
		    <listitem>
		      <para>Better error handling (Busy status and
			retries).</para>
		    </listitem>
		    
		    <listitem>
		      <para>Merged Scatter-Gather list creation code.</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Kernel issues.  Overall coordination: &a.hackers;</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>Complete the eisaconf conversion of all existing
			drivers.</para>
		    </listitem>
		    
		    <listitem>
		      <para>Change all interrupt routines to take a (void *)
			instead of using unit numbers.</para>
		    </listitem>
		    
		    <listitem>
		      <para>Merge EISA/PCI/ISA interrupt registration
			code.</para>
		    </listitem>
		    
		    <listitem>
		      <para>Split PCI/EISA/ISA probes out from drivers like
			bt742a.c (WIP)</para>
		    </listitem>
		    
		    <listitem>
		      <para>Fix the syscons ALT-Fn/vt switching hangs.
			Coordinator: &a.sos;</para>
		    </listitem>
		    
		    <listitem>
		      <para>Rewrite the Intel Etherexpress 16 driver.</para>
		    </listitem>
		    
		    <listitem>
		      <para>Merge the 3c509 and 3c590 drivers (essentially
			provide a PCI probe for ep.c).</para>
		    </listitem>
		    
		    <listitem>
		      <para>Support Adaptec 3985 (first as a simple 3 channel
			SCSI card) Coordinator: &a.gibbs;</para>
		    </listitem>
		    
		    <listitem>
		      <para>Support Advansys SCSI controller products.
			Coordinator: &a.gibbs;</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	      
	    </orderedlist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Medium priority tasks</title>
	  
	  <para>The following tasks need to be done, but not with any
	    particular urgency:
	    <orderedlist>
	      
	      <listitem>
		<para>Port AFS (Andrew File System) to FreeBSD  Coordinator:
		  <emphasis remap=tt><ulink
		      URL="mailto:ajones@ctron.com">Alexander Seth
		      Jones</ulink></emphasis>
		</para>
	      </listitem>
	      
	      <listitem>
		<para>MCA support?  This should be finalized one way or the
		  other.</para>
	      </listitem>
	      
	      <listitem>
		<para>Full LKM based driver support/Configuration Manager.
		</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>Devise a way to do all LKM registration without
			ld.  This means some kind of symbol table in the
			kernel.</para>
		    </listitem>
		    
		    <listitem>
		      <para>Write a configuration manager (in the 3rd stage
			boot?) that probes your hardware in a sane manner,
			keeps only the LKMs required for your hardware,
			etc.</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	      
	      <listitem>
		<para>PCMCIA/PCCARD.  Coordinators: &a.nate; and &a.phk;
		  <itemizedlist>
		    
		    <listitem>
		      <para>Documentation!</para>
		    </listitem>
		    
		    <listitem>
		      <para>Reliable operation of the pcic driver (needs
			testing).</para>
		    </listitem>
		    
		    <listitem>
		      <para>Recognizer and handler for sio.c (mostly
			done).</para>
		    </listitem>
		    
		    <listitem>
		      <para>Recognizer and handler for ed.c (mostly
			done).</para>
		    </listitem>
		    
		    <listitem>
		      <para>Recognizer and handler for ep.c (mostly
			done).</para>
		    </listitem>
		    
		    <listitem>
		      <para>User-mode recognizer and handler (partially
			done).</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Advanced Power Management.  Coordinators: &a.nate; and
		  &a.phk;
		  <itemizedlist>
		    
		    <listitem>
		      <para>APM sub-driver (mostly done).</para>
		    </listitem>
		    
		    <listitem>
		      <para>IDE/ATA disk sub-driver (partially done).</para>
		    </listitem>
		    
		    <listitem>
		      <para>syscons/pcvt sub-driver.</para>
		    </listitem>
		    
		    <listitem>
		      <para>Integration with the PCMCIA/PCCARD drivers
			(suspend/resume).</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	      
	    </orderedlist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Low priority tasks</title>
	  
	  <para>The following tasks are purely cosmetic or represent such an
	    investment of work that it is not likely that anyone will get them
	    done anytime soon:</para>
	  
	  <para>The first 20 items are from Terry Lambert
	    &lt;terry@lambert.org&gt;
	    <orderedlist>
	      
	      <listitem>
		<para>Ability to make BIOS calls from protected mode using V86
		  mode on the processor and return the results via a mapped
		  interrupt IPC mechanism to the protected mode caller.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Drivers built into the kernel that use the BIOS call
		  mechanism to allow them to be independent of the actual
		  underlying hardware the same way that DOS is independent of
		  the underlying hardware. This includes NetWork and ASPI
		  drivers loaded in DOS prior to BSD being loaded by a
		  DOS-based loader program, which means potential polling,
		  which means DOS-not-busy interrupt generation for V86
		  machines by the protected mode kernel.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>An image format that allows tagging of such drivers data
		  and text areas in the default kernel executable so that that
		  portion of the kernel address space may be recovered at a
		  later time, after hardware specific protected mode drivers
		  have been loaded and activated.  This includes separation of
		  BIOS based drivers from each other, since it is better to
		  run with a BIOS based driver in all cases than to not run at
		  all.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Abstraction of the bus interface mechanism.  Currently,
		  PCMCIA, EISA, and PCI busses are assumed to be bridged from
		  ISA.  This is not something which should be assumed.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>A configuration manager that knows about PNP events,
		  including power management events, insertion, extraction,
		  and bus (PNP ISA and PCMCIA bridging chips) vs. card level
		  event management.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>A topological sort mechanism for assigning reassignable
		  addresses that do not collide with other reassignable and
		  non-reassignable device space resource usage by fixed
		  devices.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>A registration based mechanism for hardware services
		  registration. Specifically, a device centric registration
		  mechanism for timer and sound and other system critical
		  service providers.  Consider Timer2 and Timer0 and speaker
		  services as one example of a single monolithic service
		  provider.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>A kernel exported symbol space in the kernel data space
		  accessible by an LKM loader mechanism that does relocation
		  and symbol space manipulation.  The intent of this interface
		  is to support the ability to demand load and unload kernel
		  modules.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>NetWare Server (protected mode ODI driver) loader and
		  subservices to allow the use of ODI card drivers supplied
		  with network cards. The same thing for NDIS drivers and
		  NetWare SCSI drivers.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>An "upgrade system" option that works on Linux boxes
		  instead of just previous rev FreeBSD boxes.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Splitting of the console driver into abstraction layers,
		  both to make it easier to port and to kill the X and
		  ThinkPad and PS/2 mouse and LED and console switching and
		  bouncing NumLock problems once and for all.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Other kernel emulation environments for other foreign
		  drivers as opportunity permits.  SCO and Solaris are good
		  candidates, followed by UnixWare, etc.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Processor emulation environments for execution of
		  foreign binaries. This is easier than it sounds if the
		  system call interface does not change much.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Streams to allow the use of commercial streams drivers.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Kernel multithreading (requires kernel preemption).
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Symmetric Multiprocessing with kernel preemption
		  (requires kernel preemption).
		</para>
	      </listitem>
	      
	      <listitem>
		<para>A concerted effort at support for portable computers.
		  This is somewhat handled by changing PCMCIA bridging rules
		  and power management event handling.  But there are things
		  like detecting internal vs. external display and picking a
		  different screen resolution based on that fact, not spinning
		  down the disk if the machine is in dock, and allowing
		  dock-based cards to disappear without affecting the machines
		  ability to boot (same issue for PCMCIA).
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Reorganization of the source tree for multiple platform
		  ports.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>A "make world" that "makes the world" (rename the
		  current one to "make regress" if that is all it is good
		  for).
		</para>
	      </listitem>
	      
	      <listitem>
		<para>A 4M (preferably smaller!) memory footprint.
		</para>
	      </listitem>
	      
	    </orderedlist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Smaller tasks</title>
	  
	  <para>Most of the tasks listed in the previous sections require
	    either a considerable investment of time or an in-depth knowledge
	    of the FreeBSD kernel (or both).  However, there are also many
	    useful tasks which are suitable for &quot;weekend hackers&quot;,
	    or people without programming skills.</para>
	  
	  <para>
	    <orderedlist>
	      
	      <listitem>
		<para>If you run FreeBSD-current and have a good Internet
		  connection, there is a machine current.freebsd.org which
		  builds a full release once a day - every now and again, try
		  and install the latest release from it and report any
		  failures in the process.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Read the freebsd-bugs mailing list.  There might be a
		  problem you can comment constructively on or with patches
		  you can test.  Or you could even try to fix one of the
		  problems yourself.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Read through the FAQ and Handbook periodically.  If
		  anything is badly explained, out of date or even just
		  completely wrong, let us know.  Even better, send us a fix
		  (SGML is not difficult to learn, but there is no objection
		  to ASCII submissions).
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Help translate FreeBSD documentation into your native
		  language (if not already available) - just send an email to
		  &a.doc; asking if anyone is working on it.  Note that you
		  are not committing yourself to translating every single
		  FreeBSD document by doing this - in fact, the documentation
		  most in need of translation is the installation
		  instructions.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Read the freebsd-questions mailing list and the
		  newsgroup comp.unix.bsd.freebsd.misc occasionally (or even
		  regularly).  It can be very satisfying to share your
		  expertise and help people solve their problems; sometimes
		  you may even learn something new yourself!  These forums can
		  also be a source of ideas for things to work on.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>If you know of any bugfixes which have been successfully
		  applied to -current but have not been merged into -stable
		  after a decent interval (normally a couple of weeks), send
		  the committer a polite reminder.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Move contributed software to src/contrib in the source
		  tree.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Make sure code in src/contrib is up to date.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Look for year 2000 bugs (and fix any you find!)
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Build the source tree (or just part of it) with extra
		  warnings enabled and clean up the warnings.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Fix warnings for ports which do deprecated things like
		  using gets() or including malloc.h.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>If you have contributed any ports, send your patches
		  back to the original author (this will make your life easier
		  when they bring out the next version)
		</para>
	      </listitem>
	      
	      <listitem>
		<para>Suggest further tasks for this list!
		</para>
	      </listitem>
	      
	    </orderedlist>
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1>
	<title>How to Contribute</title>
	
	<para>Contributions to the system generally fall into one or more of
	  the following 6 categories:</para>
	
	
	<sect2
	  id="contrib-general">
	  <title>Bug reports and general commentary
	  </title>
	  
	  <para>An idea or suggestion of <emphasis>general</emphasis>
	    technical interest should be mailed to the &a.hackers;.  Likewise,
	    people with an interest in such things (and a tolerance for a
	    <emphasis>high</emphasis> volume of mail!) may subscribe to the
	    hackers mailing list by sending mail to &a.majordomo;.  See
	    <xref linkend="eresources-mail" remap="mailing lists"> for more
	    information about this and other mailing lists.</para>
	  
	  <para>If you find a bug or are submitting a specific change, please
	    report it using the <command>send-pr(1)</command> program or its
	    <ulink URL="http://www.freebsd.org/send-pr.html">WEB-based
	      equivalent</ulink>. Try to fill-in each field of the bug report.
	    Unless they exceed 65KB, include any patches directly in the
	    report.  Consider compressing them and using
	    <command>uuencode(1)</command> if they exceed 20KB.</para>
	  
	  <para>After filing a report, you should receive confirmation along
	    with a tracking number.  Keep this tracking number so that you can
	    update us with details about the problem by sending mail to <ulink
	      URL="mailto:bug-followup@FreeBSD.ORG">bug-followup@FreeBSD.ORG</ulink>.  Use the number as the message subject, e.g. <emphasis remap=tt>"Re: kern/3377"</emphasis>.  Additional information for any bug report should be submitted this way.</para>
	  
	  <para>If you do not receive confirmation in a timely fashion (3 days
	    to a week, depending on your email connection) or are, for some
	    reason, unable to use the <command>send-pr(1)</command> command,
	    then you may ask someone to file it for you by sending mail to the
	    &a.bugs;.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Changes to the documentation</title>
	  
	  <para>Changes to the documentation are overseen by the &a.doc;. Send
	    submissions and changes (even small ones are welcome!) using
	    send-pr as described in
	    <xref linkend="contrib-general" remap="Bug Reports and General
	      Commentary">.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Changes to existing source code</title>
	  
	  <para>An addition or change to the existing source code is a
	    somewhat trickier affair and depends a lot on how far out of date
	    you are with the current state of the core FreeBSD development.
	    There is a special on-going release of FreeBSD known as
	    ``FreeBSD-current'' which is made available in a variety of ways
	    for the convenience of developers working actively on the system.
	    See <xref linkend="current"
	      remap="Staying    current with FreeBSD"> for more information
	    about getting and using FreeBSD-current.</para>
	  
	  <para>Working from older sources unfortunately means that your
	    changes may sometimes be too obsolete or too divergent for easy
	    re-integration into FreeBSD.  Chances of this can be minimized
	    somewhat by subscribing to the &a.announce; and the &a.current;
	    lists, where discussions on the current state of the system take
	    place.</para>
	  
	  <para>Assuming that you can manage to secure fairly up-to-date
	    sources to base your changes on, the next step is to produce a set
	    of diffs to send to the FreeBSD maintainers.  This is done with
	    the <command>diff(1)</command> command, with the `context diff'
	    form being preferred.  For example:
	    <informalexample>
	      <screen>diff -c oldfile newfile</screen>
	    </informalexample> or
	    <informalexample>
	      <screen>diff -c -r olddir newdir</screen>
	    </informalexample> would generate such a set of context diffs for
	    the given source file or directory hierarchy.  See the man page
	    for <command>diff(1)</command> for more details.</para>
	  
	  <para>Once you have a set of diffs (which you may test with the
	    <command>patch(1)</command> command), you should submit them for
	    inclusion with FreeBSD.  Use the <command>send-pr(1)</command>
	    program as described in
	    <xref linkend="contrib-general" remap="Bug Reports and General
	      Commentary">. <emphasis>Do not</emphasis> just send the diffs to
	    the &a.hackers; or they will get lost!  We greatly appreciate your
	    submission (this is a volunteer project!); because we are busy, we
	    may not be able to address it immediately, but it will remain in
	    the pr database until we do.</para>
	  
	  <para>If you feel it appropriate (e.g. you have added, deleted, or
	    renamed files), bundle your changes into a <emphasis
	      remap=tt>tar</emphasis> file and run the
	    <command>uuencode(1)</command> program on it.  Shar archives are
	    also welcome.</para>
	  
	  <para>If your change is of a potentially sensitive nature, e.g. you
	    are unsure of copyright issues governing its further distribution
	    or you are simply not ready to release it without a tighter review
	    first, then you should send it to &a.core; directly rather than
	    submitting it with <command>send-pr(1)</command>.  The core
	    mailing list reaches a much smaller group of people who do much of
	    the day-to-day work on FreeBSD.  Note that this group is also
	    <emphasis>very busy</emphasis> and so you should only send mail to
	    them where it is truly necessary.</para>
	  
	  <para>Please refer to <emphasis remap=tt>man 9 intro</emphasis> and
	    <emphasis remap=tt>man 9 style</emphasis> for some information on
	    coding style.  We would appreciate it if you were at least aware
	    of this information before submitting code.</para>
	  
	</sect2>
	
	<sect2>
	  <title>New code or major value-added packages</title>
	  
	  <para>In the rare case of a significant contribution of a large body
	    work, or the addition of an important new feature to FreeBSD, it
	    becomes almost always necessary to either send changes as
	    uuencode'd tar files or upload them to our ftp site <ulink
	      URL="ftp://ftp.FreeBSD.ORG/pub/FreeBSD/incoming">ftp://ftp.FreeBSD.ORG/pub/FreeBSD/incoming</ulink>.</para>
	  
	  <para>When working with large amounts of code, the touchy subject of
	    copyrights also invariably comes up.  Acceptable copyrights for
	    code included in FreeBSD are:</para>
	  
	  <para>
	    <orderedlist>
	      
	      <listitem>
		<para>The BSD copyright.  This copyright is most preferred due
		  to its ``no strings attached'' nature and general
		  attractiveness to commercial enterprises.  Far from
		  discouraging such commercial use, the FreeBSD Project
		  actively encourages such participation by commercial
		  interests who might eventually be inclined to invest
		  something of their own into FreeBSD.
		</para>
	      </listitem>
	      
	      <listitem>
		<para>The GNU Public License, or ``GPL''.  This license is not
		  quite as popular with us due to the amount of extra effort
		  demanded of anyone using the code for commercial purposes,
		  but given the sheer quantity of GPL'd code we currently
		  require (compiler, assembler, text formatter, etc) it would
		  be silly to refuse additional contributions under this
		  license.  Code under the GPL also goes into a different part
		  of the tree, that being <filename>/sys/gnu</filename> or
		  <filename>/usr/src/gnu</filename>, and is therefore easily
		  identifiable to anyone for whom the GPL presents a
		  problem.</para>
	      </listitem>
	      
	    </orderedlist>
	  </para>
	  
	  <para>Contributions coming under any other type of copyright must be
	    carefully reviewed before their inclusion into FreeBSD will be
	    considered.  Contributions for which particularly restrictive
	    commercial copyrights apply are generally rejected, though the
	    authors are always encouraged to make such changes available
	    through their own channels.</para>
	  
	  <para>To place a ``BSD-style'' copyright on your work, include the
	    following text at the very beginning of every source code file you
	    wish to protect, replacing the text between the `<emphasis
	      remap=tt>%%</emphasis>' with the appropriate information.
	    <informalexample>
	      <screen>Copyright (c) %%proper_years_here%% %%your_name_here%%,
		%%your_state%%  %%your_zip%%.  All rights reserved.
		Redistribution and use in source and binary forms, with or
		without modification, are permitted provided that the
		following conditions are met: 1. Redistributions of source
		code must retain the above copyright notice, this list of
		conditions and the following disclaimer as the first lines of
		this file unmodified. 2. Redistributions in binary form must
		reproduce the above copyright notice, this list of conditions
		and the following disclaimer in the documentation and/or other
		materials provided with the distribution. THIS SOFTWARE IS
		PROVIDED BY %%your_name_here%% ``AS IS'' AND ANY EXPRESS OR
		IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
		PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL %%your_name_here%%
		BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
		EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
		LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
		OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
		CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
		STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
		ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
		ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		&#36;Id&#36;</screen>
	    </informalexample> For your convenience, a copy of this text can
	    be found in
	    <filename>/usr/share/examples/etc/bsd-style-copyright</filename>.</para>
	  
	</sect2>
	
	<sect2
	  id="porting">
	  <title>Porting an existing piece of free software</title>
	  
	  <para><emphasis>Contributed by &a.jkh;, &a.gpalmer;, &a.asami; and
	      &a.obrien;.<!-- <br> -->28 August 1996.</emphasis></para>
	  
	  <para>The porting of freely available software, while perhaps not as
	    gratifying as developing your own from scratch, is still a vital
	    part of FreeBSD's growth and of great usefulness to those who
	    would not otherwise know where to turn for it.  All ported
	    software is organized into a carefully organized hierarchy known
	    as ``the ports collection''. The collection enables a new user to
	    get a quick and complete overview of what is available for FreeBSD
	    in an easy-to-compile form.  It also saves considerable space by
	    not actually containing the majority of the sources being ported,
	    but merely those differences required for running under FreeBSD.
	  </para>
	  
	  <para>What follows are some guidelines for creating a new port for
	    FreeBSD 3.x.  The bulk of the work is done by
	    <filename>/usr/share/mk/bsd.port.mk</filename>, which all port
	    Makefiles include. Please refer to that file for more details on
	    the inner workings of the ports collection.  Even if you don't
	    hack Makefiles daily, it is well commented, and you will still
	    gain much knowledge from it.</para>
	  
	  
	  <sect3
	    id="porting-starting">
	    <title>Before Starting the Port</title>
	    
	    <para>Note: Only a fraction of the overridable variables
	      (<emphasis remap=tt>&#36;{..}</emphasis>) are mentioned in this
	      document. Most (if not all) are documented at the start of
	      <filename>bsd.port.mk</filename>.  This file uses a non-standard
	      tab setting. <emphasis remap=tt>Emacs</emphasis> and <emphasis
		remap=tt>Vim</emphasis> should recognize the setting on
	      loading the file. <emphasis remap=tt>vi</emphasis> or <emphasis
		remap=tt>ex</emphasis> can be set to using the correct value
	      by typing `<literal>:set tabstop=4</literal>' once the file has
	      been loaded.</para>
	    
	    <para>You may come across code that needs modifications or
	      conditional compilation based upon what version of UNIX it is
	      running under.  If you need to make such changes to the code for
	      conditional compilation, make sure you make the changes as
	      general as possible so that we can back-port code to FreeBSD 1.x
	      systems and cross-port to other BSD systems such as 4.4BSD from
	      CSRG, BSD/386, 386BSD, NetBSD, and OpenBSD.</para>
	    
	    <para>The preferred way to tell 4.3BSD/Reno (1990) and newer
	      versions of the BSD code apart is by using the
	      `<acronym>BSD</acronym>' macro defined in
	      <filename>&lt;sys/param.h&gt;</filename>.  Hopefully that file
	      is already included; if not, add the code:</para>
	    
	    <para>
	      <informalexample>
		<screen>#ifdef (defined(__unix__) || defined(unix)) &amp;&amp;
		  !defined(USG) #include &lt;sys/param.h&gt; #endif</screen>
	      </informalexample>
	    </para>
	    
	    <para>to the proper place in the <filename>.c</filename> file.  We
	      believe that every system that defines these to symbols has
	      sys/param.h.  If you find a system that doesn't, we would like
	      to know.  Please send mail to &a.ports;.</para>
	    
	    <para>Another way is to use the GNU Autoconf style of doing
	      this:</para>
	    
	    <para>
	      <informalexample>
		<screen>#ifdef HAVE_SYS_PARAM_H #include &lt;sys/param.h&gt;
		  #endif</screen>
	      </informalexample>
	    </para>
	    
	    <para>Don't forget to add <symbol>-DHAVE_SYS_PARAM_H</symbol> to
	      the <acronym>CFLAGS</acronym> in the Makefile for this
	      method.</para>
	    
	    <para>Once you have <filename>&lt;sys/param.h&gt;</filename>
	      included, you may use:</para>
	    
	    <para>
	      <informalexample>
		<screen>#if (defined(BSD) &amp;&amp; (BSD &gt;=
		  199103))</screen>
	      </informalexample>
	    </para>
	    
	    <para>to detect if the code is being compiled on a 4.3 Net2 code
	      base or newer (e.g. FreeBSD 1.x, 4.3/Reno, NetBSD 0.9, 386BSD,
	      BSD/386 1.1 and below).</para>
	    
	    <para>Use:</para>
	    
	    <para>
	      <informalexample>
		<screen>#if (defined(BSD) &amp;&amp; (BSD &gt;=
		  199306))</screen>
	      </informalexample>
	    </para>
	    
	    <para>to detect if the code is being compiled on a 4.4 code base
	      or newer (e.g. FreeBSD 2.x, 4.4, NetBSD 1.0, BSD/386 2.0 or
	      above).</para>
	    
	    <para>The value of the BSD macro is 199506 for the 4.4BSD-Lite2
	      code base.  This is stated for informational purposes only.  It
	      should not be used to distinguish between version of FreeBSD
	      based only on 4.4-Lite vs. versions that have merged in changes
	      from 4.4-Lite2. The __FreeBSD__ macro should be used
	      instead.</para>
	    
	    <para>Use sparingly:</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para><symbol>__FreeBSD__</symbol> is defined in all
		    versions of FreeBSD.  Use it if the change you are making
		    ONLY affects FreeBSD.  Porting gotchas like the use of
		    <emphasis remap=tt>sys_errlist[]</emphasis> vs
		    <function>strerror()</function> are Berkeleyisms, not
		    FreeBSD changes.
		  </para>
		</listitem>
		
		<listitem>
		  <para>In FreeBSD 2.x, <symbol>__FreeBSD__</symbol> is
		    defined to be <emphasis remap=tt>2</emphasis>.  In earlier
		    versions, it is <emphasis remap=tt>1</emphasis>.  Later
		    versions will bump it to match their major version number.
		  </para>
		</listitem>
		
		<listitem>
		  <para>If you need to tell the difference between a FreeBSD
		    1.x system and a FreeBSD 2.x or 3.x system, usually the
		    right answer is to use the <acronym>BSD</acronym> macros
		    described above.  If there actually is a FreeBSD specific
		    change (such as special shared library options when using
		    `<emphasis remap=tt>ld</emphasis>') then it is OK to use
		    <symbol>__FreeBSD__</symbol> and `<emphasis remap=tt>#if
		      __FreeBSD__ &gt; 1</emphasis>' to detect a FreeBSD 2.x
		    and later system. If you need more granularity in
		    detecting FreeBSD systems since 2.0-RELEASE you can use
		    the following:
		    
		    <informalexample>
		      <screen>#if __FreeBSD__ &gt;= 2 #include
			&lt;osreldate.h&gt; #    if __FreeBSD_version &gt;=
			199504 /* 2.0.5+ release specific code here */ #
			endif #endif</screen>
		    </informalexample> <symbol>__FreeBSD_version</symbol>
		    values:
		    <informalexample>
		      <screen>2.0-RELEASE:                    	199411
			2.1-current's:                  	199501, 199503
			2.0.5-RELEASE:                  	199504
			2.2-current before 2.1:         	199508
			2.1.0-RELEASE:                  	199511
			2.2-current before 2.1.5:       	199512
			2.1.5-RELEASE:                  	199607
			2.2-current before 2.1.6:       	199608
			2.1.6-RELEASE:                  	199612
			2.1.7-RELEASE:                  	199612
			2.2-RELEASE:                    	220000
			2.2.1-RELEASE:                  	220000 (yes,
			no change) 2.2-STABLE after 2.2.1-RELEASE: 	220000
			(yes, still no change) 2.2-STABLE after texinfo-3.9:
			221001 2.2-STABLE after top:           	221002
			2.2.2-RELEASE:                  	222000
			2.2-STABLE after 2.2.2-RELEASE: 	222001
			2.2.5-RELEASE:                  	225000
			2.2-STABLE after 2.2.5-RELEASE:		225001
			2.2-STABLE after ldconfig -R merge:	225002
			2.2.6-RELEASE:                          226000
			2.2-STABLE after 2.2.6-RELEASE:         226001
			3.0-current before mount(2) change:	300000
			3.0-current as of Nov 1997:
			300001</screen>
		    </informalexample> (Note that 2.2-STABLE sometimes
		    identifies itself as "2.2.5-STABLE" after the
		    2.2.5-RELEASE.) The pattern used to be year followed by
		    the month, but we decided to change it to a more
		    straightforward major/minor system starting from 2.2.
		    This is because the parallel development on several
		    branches made it infeasible to classify the releases
		    simply by their real release dates. (Note that if you are
		    making a port now, you don't have to worry about old
		    -current's; they are listed here just for your reference.)
		  </para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	    <para>In the hundreds of ports that have been done, there have
	      only been one or two cases where <symbol>__FreeBSD__</symbol>
	      should have been used.  Just because an earlier port screwed up
	      and used it in the wrong place does not mean you should do so
	      too.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Quick Porting</title>
	    
	    <para>This section tells you how to do a quick port.  In many
	      cases, it is not enough, but we will see.</para>
	    
	    <para>First, get the original tarball and put it into <emphasis
		remap=tt>&#36;{DISTDIR}</emphasis>, which defaults to
	      <filename>/usr/ports/distfiles</filename>.</para>
	    
	    <para>Note: The following assumes that the software compiled
	      out-of-the-box, i.e., there was absolutely no change required
	      for the port to work on your FreeBSD box.  If you needed to
	      change something, you will have to refer to the next section
	      too.</para>
	    
	    
	    <sect4>
	      <title>Writing the Makefile</title>
	      
	      <para>The minimal <emphasis remap=tt>Makefile</emphasis> would
		look something like this:</para>
	      
	      <para>
		<informalexample>
		  <screen> # New ports collection makefile for:	oneko #
		    Version required:	1.1b # Date created:	5 December
		    1994 # Whom:		asami # # &#36;Id&#36; #
		    DISTNAME=	oneko-1.1b CATEGORIES=	games MASTER_SITES=
		    ftp://ftp.cs.columbia.edu/archives/X11R5/contrib/
		    MAINTAINER=	asami@FreeBSD.ORG USE_IMAKE=	yes .include
		    &lt;bsd.port.mk&gt;</screen>
		</informalexample>
	      </para>
	      
	      <para>See if you can figure it out.  Do not worry about the
		contents of the <emphasis remap=tt>&#36;Id&#36;</emphasis>
		line, it will be filled in automatically by CVS when the port
		is imported to our main ports tree.  You can find a more
		detailed example in the <xref
		  linkend="porting-samplem" remap="sample Makefile">
		section.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Writing the description files</title>
	      
	      <para>There are three required description files that are
		required for any port, whether they actually package or not.
		They are <acronym>COMMENT</acronym>, <acronym>DESCR</acronym>,
		and <acronym>PLIST</acronym>, and reside in the <emphasis
		  remap=tt>pkg</emphasis> subdirectory.</para>
	      
	      
	      <sect5>
		<title>COMMENT</title>
		
		<para>This is the one-line description of the port.
		  <emphasis>PLEASE do not include the package name (or version
		    number of the software) in the comment.</emphasis> Here is
		  an example:
		  <informalexample>
		    <screen>A cat chasing a mouse all over the
		      screen.</screen>
		  </informalexample>
		</para>
		
	      </sect5>
	      
	      <sect5>
		<title>DESCR</title>
		
		<para>This is a longer description of the port.  One to a few
		  paragraphs concisely explaining what the port does is
		  sufficient.  Note: This is <emphasis>not</emphasis> a manual
		  nor an in-depth description on how to use or compile the
		  port. In particular, <emphasis>please do not just copy the
		    <acronym>README</acronym> file here</emphasis>, unless, of
		  course, it is a concise description of the port.</para>
		
		<para>It is recommended that you sign the name at the end of
		  this file, as in:</para>
		
		<para>
		  <informalexample>
		    <screen>This is a port of oneko, in which a cat chases a
		      poor mouse all over the screen. : (etc.) - Satoshi
		      asami@cs.berkeley.edu</screen>
		  </informalexample>
		</para>
		
	      </sect5>
	      
	      <sect5>
		<title>PLIST</title>
		
		<para>This file lists all the files installed by the port.  It
		  is also called the `packing list' because the package is
		  generated by packing the files listed here.  The pathnames
		  are relative to the installation prefix (usually
		  <filename>/usr/local</filename> or
		  <filename>/usr/X11R6</filename>). Also it is assumed the
		  manpages will be compressed.</para>
		
		<para>Here is a small example:</para>
		
		<para>
		  <informalexample>
		    <screen>bin/oneko man/man1/oneko.1.gz
		      lib/X11/app-defaults/Oneko lib/X11/oneko/cat1.xpm
		      lib/X11/oneko/cat2.xpm lib/X11/oneko/mouse.xpm</screen>
		  </informalexample>
		</para>
		
		<para>Refer to the <command>pkg_create(1)</command> man page
		  for details on the packing list.</para>
		
	      </sect5>
	    </sect4>
	    
	    <sect4>
	      <title>Creating the checksum file</title>
	      
	      <para>Just type `<emphasis remap=tt>make makesum</emphasis>'.
		The ports make rules will automatically generate the file
		<filename>files/md5</filename>.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Testing the port</title>
	      
	      <para>You should make sure that the port rules do exactly what
		you want it to do, including packaging up the port.  Try doing
		`<emphasis remap=tt>make install</emphasis>', `<emphasis
		  remap=tt>make package</emphasis>' and then `<emphasis
		  remap=tt>make deinstall</emphasis>' and see if all the files
		and directories are correctly deleted.  Then do a `<emphasis
		  remap=tt>pkg_add `make package-name`.tgz</emphasis>' and see
		if everything re-appears and works correctly.  Then do another
		`<emphasis remap=tt>make deinstall</emphasis>' and then
		`<emphasis remap=tt>make reinstall; make package</emphasis>'
		to make sure you haven't included in the packing list any
		files that are not installed by your port.</para>
	      
	    </sect4>
	    
	    <sect4
	      id="porting-submitting">
	      <title>Submitting the port</title>
	      
	      <para>Now that you are happy with your port, the only thing
		remaining is to put it in the main FreeBSD ports tree and make
		everybody else happy about it too.  To accomplish this, pack
		the necessary files (everything described in this section --
		in particular do <emphasis>not</emphasis> include the original
		source tarball, the `<emphasis remap=tt>work</emphasis>'
		subdirectory or the package) into a
		<filename>.tar.gz</filename> file, stick it in the directory
		<informalexample>
		  <screen>ftp://ftp.FreeBSD.ORG/pub/FreeBSD/incoming/</screen>
		</informalexample> and send mail to us using
		<command>send-pr(1)</command> (please classify it as category
		`ports' and class `change-request'). There is no need to
		upload the package, we will build it by ourselves. We will
		take a look, get back to you if necessary, and put it in the
		tree.  Your name will also appear in the list of `Additional
		FreeBSD contributors' on the FreeBSD Handbook and other files.
		Isn't that great?!? <emphasis remap=tt>:)</emphasis></para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title>Slow Porting</title>
	    
	    <para>Ok, so it was not that simple, and the port required some
	      modifications to get it to work.  In this section, we will
	      explain, step by step, how to modify it to get it to work with
	      the ports paradigm.</para>
	    
	    
	    <sect4>
	      <title>How things work</title>
	      
	      <para>First, this is the sequence of events which occurs when
		the user first types `<emphasis remap=tt>make</emphasis>' in
		your port's directory, and you may find that having
		<filename>bsd.port.mk</filename> in another window while you
		read this really helps to understand it.</para>
	      
	      <para>But do not worry if you do not really understand what
		<filename>bsd.port.mk</filename> is doing, not many people
		do... <emphasis remap=tt>:&gt;</emphasis></para>
	      
	      <para>
		<orderedlist>
		  
		  <listitem>
		    <para>The fetch target is run.  The fetch target is
		      responsible for making sure that the tarball exists
		      locally in <emphasis remap=tt>&#36;{DISTDIR}</emphasis>.
		      If fetch cannot find the required files in <emphasis
			remap=tt>&#36;{DISTDIR}</emphasis> it will look up the
		      URL <emphasis remap=tt>&#36;{MASTER_SITES}</emphasis>,
		      which is set in the Makefile, as well as our main ftp
		      site at <ulink
			URL="ftp://ftp.freebsd.org/pub/FreeBSD/distfiles/">ftp://ftp.freebsd.org/pub/FreeBSD/distfiles/,</ulink> where we put sanctioned distfiles as backup.  It will then attempt to fetch the named distribution file with <emphasis remap=tt>&#36;{FETCH}</emphasis>, assuming that the requesting site has direct access to the Internet.  If that succeeds, it will save the file in <emphasis remap=tt>&#36;{DISTDIR}</emphasis> for future use and proceed.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>The extract target is run.  It looks for your ports'
		      distribution file in <emphasis
			remap=tt>&#36;{DISTDIR}</emphasis> (typically a gzip'd
		      tarball) and unpacks it into a temporary subdirectory
		      specified by <emphasis remap=tt>&#36;{WRKDIR}</emphasis>
		      (defaults to <emphasis remap=tt>work</emphasis>).
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>The patch target is run.  First, any patches defined
		      in <emphasis remap=tt>&#36;{PATCHFILES}</emphasis> are
		      applied.  Second, if any patches are found in <emphasis
			remap=tt>&#36;{PATCHDIR}</emphasis> (defaults to the
		      <emphasis remap=tt>patches</emphasis> subdirectory),
		      they are applied at this time in alphabetical order.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>The configure target is run.  This can do any one of
		      many different things.
		      
		      <orderedlist>
			
			<listitem>
			  <para>If it exists,
			    <filename>scripts/configure</filename> is run.
			  </para>
			</listitem>
			
			<listitem>
			  <para>If <emphasis
			      remap=tt>&#36;{HAS_CONFIGURE}</emphasis> or
			    <emphasis remap=tt>&#36;{GNU_CONFIGURE}</emphasis>
			    is set,
			    <filename>&#36;{WRKSRC}/configure</filename> is
			    run.
			  </para>
			</listitem>
			
			<listitem>
			  <para>If <emphasis
			      remap=tt>&#36;{USE_IMAKE}</emphasis> is set,
			    <emphasis remap=tt>&#36;{XMKMF}</emphasis>
			    (default: `<emphasis remap=tt>xmkmf
			      -a</emphasis>') is run.
			  </para>
			</listitem>
			
		      </orderedlist>
		      
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>The build target is run.  This is responsible for
		      descending into the ports' private working directory
		      (<emphasis remap=tt>&#36;{WRKSRC}</emphasis>) and
		      building it.  If <emphasis
			remap=tt>&#36;{USE_GMAKE}</emphasis> is set, GNU
		      <emphasis remap=tt>make</emphasis> will be used,
		      otherwise the system <emphasis remap=tt>make</emphasis>
		      will be used.
		    </para>
		  </listitem>
		  
		</orderedlist>
	      </para>
	      
	      <para>The above are the default actions.  In addition, you can
		define targets `<emphasis
		  remap=tt>pre-&lt;something&gt;</emphasis>' or `<emphasis
		  remap=tt>post-&lt;something&gt;</emphasis>', or put scripts
		with those names, in the <emphasis remap=tt>scripts</emphasis>
		subdirectory, and they will be run before or after the default
		actions are done.</para>
	      
	      <para>For example, if you have a <emphasis
		  remap=tt>post-extract</emphasis> target defined in your
		Makefile, and a file <emphasis remap=tt>pre-build</emphasis>
		in the <emphasis remap=tt>scripts</emphasis> subdirectory, the
		<emphasis remap=tt>post-extract</emphasis> target will be
		called after the regular extraction actions, and the <emphasis
		  remap=tt>pre-build</emphasis> script will be executed before
		the default build rules are done.  It is recommended that you
		use Makefile targets if the actions are simple enough, because
		it will be easier for someone to figure out what kind of
		non-default action the port requires.</para>
	      
	      <para>The default actions are done by the
		<filename>bsd.port.mk</filename> targets `<emphasis
		  remap=tt>do-&lt;something&gt;</emphasis>'.  For example, the
		commands to extract a port are in the target `<emphasis
		  remap=tt>do-extract</emphasis>'.  If you are not happy with
		the default target, you can fix it by redefining the
		`<emphasis remap=tt>do-&lt;something&gt;</emphasis>' target in
		your Makefile.</para>
	      
	      <para>Note that the `main' targets (e.g., <emphasis
		  remap=tt>extract</emphasis>, <emphasis
		  remap=tt>configure</emphasis>, etc.) do nothing more than
		make sure all  the stages up to that one is completed and call
		the real targets or scripts, and they are not intended to be
		changed.  If you want to fix the extraction, fix <emphasis
		  remap=tt>do-extract</emphasis>, but never ever touch
		<emphasis remap=tt>extract</emphasis>!</para>
	      
	      <para>Now that you understand what goes on when the user types
		`<emphasis remap=tt>make</emphasis>', let us go through the
		recommended steps to create the perfect port.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Getting the original sources</title>
	      
	      <para>Get the original sources (normally) as a compressed
		tarball (<filename>&lt;foo&gt;.tar.gz</filename> or
		<filename>&lt;foo&gt;.tar.Z</filename>) and copy it into
		<emphasis remap=tt>&#36;{DISTDIR}</emphasis>.  Always use
		<emphasis>mainstream</emphasis> sources when and where you
		can.</para>
	      
	      <para>If you cannot find a ftp/http site that is well-connected
		to the net, or can only find sites that have irritatingly
		non-standard formats, we can `house' it ourselves by putting
		it on
		<informalexample>
		  <screen>ftp://ftp.freebsd.org/pub/FreeBSD/distfiles/LOCAL_PORTS/</screen>
		</informalexample> as the last resort.  Please refer to this
		location as <emphasis
		  remap=tt>&#36;{MASTER_SITE_LOCAL}</emphasis>.  Send mail to
		the &a.ports;if you are not sure what to do.</para>
	      
	      <para>If your port requires some additional `patches' that are
		available on the Internet, fetch them too and put them in
		<emphasis remap=tt>&#36;{DISTDIR}</emphasis>.  Do not worry if
		they come from site other than where you got the main source
		tarball, we have a way to handle these situations (see the
		description of <xref linkend="porting-patchfiles"
		  remap="&#36;{PATCHFILES}"> below).</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Modifying the port</title>
	      
	      <para>Unpack a copy of the tarball in a private directory and
		make whatever changes are necessary to get the port to compile
		properly under the current version of FreeBSD.  Keep
		<emphasis>careful track</emphasis> of everything you do, as
		you will be automating the process shortly.  Everything,
		including the deletion, addition or modification of files
		should be doable using an automated script or patch file when
		your port is finished.</para>
	      
	      <para>If your port requires significant user
		interaction/customization to compile or install, you should
		take a look at one of Larry Wall's classic Configure scripts
		and perhaps do something similar yourself.  The goal of the
		new ports collection is to make each port as `plug-and-play'
		as possible for the end-user while using a minimum of disk
		space.</para>
	      
	      <para>Note: Unless explicitly stated, patch files, scripts, and
		other files you have created and contributed to the FreeBSD
		ports collection are assumed to be covered by the standard BSD
		copyright conditions.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Patching</title>
	      
	      <para>In the preparation of the port, files that have been added
		or changed can be picked up with a recursive diff for later
		feeding to patch.  Each set of patches you wish to apply
		should be collected into a file named `<emphasis
		  remap=tt>patch-&lt;xx&gt;</emphasis>' where <emphasis
		  remap=tt>&lt;xx&gt;</emphasis> denotes the sequence in which
		the patches will be applied -- these are done in
		<emphasis>alphabetical order</emphasis>, thus `<emphasis
		  remap=tt>aa</emphasis>' first, `<emphasis
		  remap=tt>ab</emphasis>' second and so on.  These files
		should be stored in <emphasis
		  remap=tt>&#36;{PATCHDIR}</emphasis>, from where they will be
		automatically applied.  All patches should be relative to
		<emphasis remap=tt>&#36;{WRKSRC}</emphasis> (generally the
		directory your port's tarball unpacks itself into, that being
		where the build is done).  To make fixes and upgrades easier
		you should avoid having more than one patch fix the same file
		(e.g., patch-aa and patch-ab both changing <emphasis
		  remap=tt>&#36;{WRKSRC}</emphasis>/foobar.c).</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Configuring</title>
	      
	      <para>Include any additional customization commands to your
		<emphasis remap=tt>configure</emphasis> script and save it in
		the `<emphasis remap=tt>scripts</emphasis>' subdirectory.  As
		mentioned above, you can also do this as Makefile targets
		and/or scripts with the name <emphasis
		  remap=tt>pre-configure</emphasis> or <emphasis
		  remap=tt>post-configure</emphasis>.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Handling user input</title>
	      
	      <para>If your port requires user input to build, configure or
		install, then set <symbol>IS_INTERACTIVE</symbol> in your
		Makefile. This will allow `overnight builds' to skip your port
		if the user sets the variable <acronym>BATCH</acronym> in his
		environment (and if the user sets the variable
		<acronym>INTERACTIVE</acronym>, then <emphasis>only</emphasis>
		those ports requiring interaction are built).</para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title>Configuring the Makefile</title>
	    
	    <para>Configuring the Makefile is pretty simple, and again we
	      suggest that you look at existing examples before starting.
	      Also, there is a <xref linkend="porting-samplem" remap="sample
		Makefile"> in this handbook, so take a look and please follow
	      the ordering of variables and sections in that template to make
	      your port easier for others to read.</para>
	    
	    <para>Now, consider the following problems in sequence as you
	      design your new Makefile:</para>
	    
	    
	    <sect4>
	      <title>The original source</title>
	      
	      <para>Does it live in <emphasis
		  remap=tt>&#36;{DISTDIR}</emphasis> as a standard gzip'd
		tarball?  If so, you can go on to the next step.  If not, you
		should look at overriding any of the <emphasis
		  remap=tt>&#36;{EXTRACT_CMD}</emphasis>, <emphasis
		  remap=tt>&#36;{EXTRACT_BEFORE_ARGS}</emphasis>, <emphasis
		  remap=tt>&#36;{EXTRACT_AFTER_ARGS}</emphasis>, <emphasis
		  remap=tt>&#36;{EXTRACT_SUFX}</emphasis>, or <emphasis
		  remap=tt>&#36;{DISTFILES}</emphasis> variables, depending on
		how alien a format your port's distribution file is.  (The
		most common case is `<literal>EXTRACT_SUFX=.tar.Z</literal>',
		when the tarball is condensed by regular compress, not
		gzip.)</para>
	      
	      <para>In the worst case, you can simply create your own
		`<emphasis remap=tt>do-extract</emphasis>' target to override
		the default, though this should be rarely, if ever,
		necessary.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>DISTNAME</title>
	      
	      <para>You should set <emphasis
		  remap=tt>&#36;{DISTNAME}</emphasis> to be the base name of
		your port.  The default rules expect the distribution file
		list (<emphasis remap=tt>&#36;{DISTFILES}</emphasis>) to be
		named <emphasis
		  remap=tt>&#36;{DISTNAME}&#36;{EXTRACT_SUFX}</emphasis> by
		default which, if it is a normal tarball, is going to be
		something like:
		<informalexample>
		  <screen>	 foozolix-1.0.tar.gz</screen>
		</informalexample> for a setting of
		`<literal>DISTNAME=foozolix-1.0</literal>'.</para>
	      
	      <para>The default rules also expect the tarball(s) to extract
		into a subdirectory called
		<filename>work/&#36;{DISTNAME}</filename>, e.g.
		<informalexample>
		  <screen>	 work/foozolix-1.0/</screen>
		</informalexample>
	      </para>
	      
	      <para>All this behavior can be overridden, of course, it simply
		represents the most common time-saving defaults.  For a port
		requiring multiple distribution files, simply set <emphasis
		  remap=tt>&#36;{DISTFILES}</emphasis> explicitly.  If only a
		subset of <emphasis remap=tt>&#36;{DISTFILES}</emphasis> are
		actual extractable archives, then set them up in <emphasis
		  remap=tt>&#36;{EXTRACT_ONLY}</emphasis>, which will override
		the <emphasis remap=tt>&#36;{DISTFILES}</emphasis> list when
		it comes to extraction, and the rest will be just left in
		<emphasis remap=tt>&#36;{DISTDIR}</emphasis> for later
		use.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>CATEGORIES</title>
	      
	      <para>When a package is created, it is put under
		<filename>/usr/ports/packages/All</filename> and links are
		made from one or more subdirectories of
		<filename>/usr/ports/packages</filename>.  The names of these
		subdirectories are specified by the variable <emphasis
		  remap=tt>&#36;{CATEGORIES}</emphasis>.  It is intended to
		make life easier for the user when he is wading through the
		pile of packages on the ftp site or the CD-ROM.  Please take a
		look at the existing categories (you can find them in <ulink
		  URL="http://www.freebsd.org/ports/">the ports
		  page</ulink>) and pick the ones that are suitable for your
		port. If your port truly belongs to something that is
		different from all the existing ones, you can even create a
		new category name.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>MASTER_SITES</title>
	      
	      <para>Record the directory part of the ftp/http-URL pointing at
		the original tarball in <emphasis
		  remap=tt>&#36;{MASTER_SITES}</emphasis>. Do not forget the
		trailing slash (<filename>/</filename>)!</para>
	      
	      <para>The make macros will try to use this specification for
		grabbing the distribution file with <emphasis
		  remap=tt>&#36;{FETCH}</emphasis> if they cannot find it
		already on the system.</para>
	      
	      <para>It is recommended that you put multiple sites on this
		list, preferably from different continents.  This will
		safeguard against wide-area network problems, and we are even
		planning to add support for automatically determining the
		closest master site and fetching from there!</para>
	      
	      <para>If the original tarball is part of one of the following
		popular archives:  X-contrib, GNU, Perl CPAN, TeX CTAN, or
		Linux Sunsite, you refer to those sites in an easy compact
		form using MASTER_SITE_XCONTRIB, MASTER_SITE_GNU,
		MASTER_SITE_PERL_CPAN, MASTER_SITE_TEX_CTAN, and
		MASTER_SITE_SUNSITE.  Simply set MASTER_SITE_SUBDIR to the
		path with in the archive.  Here is an example:
		<informalexample>
		  <screen>MASTER_SITES=         ${MASTER_SITE_XCONTRIB}
		    MASTER_SITE_SUBDIR=   applications</screen>
		</informalexample>
	      </para>
	      
	      <para>The user can also set the MASTER_SITE_* variables in
		<filename>/etc/make.conf</filename> to override our choices,
		and use their favorite mirrors of these popular archives
		instead.</para>
	      
	    </sect4>
	    
	    <sect4
	      id="porting-patchfiles">
	      <title>PATCHFILES</title>
	      
	      <para>If your port requires some additional patches that are
		available by ftp or http, set <emphasis
		  remap=tt>&#36;{PATCHFILES}</emphasis> to the names of the
		files and <emphasis remap=tt>&#36;{PATCH_SITES}</emphasis> to
		the URL of the directory that contains them (the format is the
		same as <emphasis
		  remap=tt>&#36;{MASTER_SITES}</emphasis>).</para>
	      
	      <para>If the patch is not relative to the top of the source tree
		(i.e., <emphasis remap=tt>&#36;{WKRSRC}</emphasis>) because it
		contains some extra pathnames, set <emphasis
		  remap=tt>&#36;{PATCH_DIST_STRIP}</emphasis> accordingly.
		For instance, if all the pathnames in the patch has an extra
		`<filename>foozolix-1.0/</filename>' in front of the
		filenames, then set
		`<literal>PATCH_DIST_STRIP=-p1</literal>'.</para>
	      
	      <para>Do not worry if the patches are compressed, they will be
		decompressed automatically if the filenames end with
		`<filename>.gz</filename>' or
		`<filename>.Z</filename>'.</para>
	      
	      <para>If the patch is distributed with some other files, such as
		documentation, in a gzip'd tarball, you can't just use
		<emphasis remap=tt>&#36;{PATCHFILES}</emphasis>.  If that is
		the case, add the name and the location of the patch tarball
		to <emphasis remap=tt>&#36;{DISTFILES}</emphasis> and
		<emphasis remap=tt>&#36;{MASTER_SITES}</emphasis>.  Then, from
		the <emphasis remap=tt>pre-patch</emphasis> target, apply the
		patch either by running the patch command from there, or
		copying the patch file into the <emphasis
		  remap=tt>&#36;{PATCHDIR}</emphasis> directory and calling it
		<emphasis remap=tt>patch-&lt;xx&gt;</emphasis>.  (Note the
		tarball will have been extracted alongside the regular source
		by then, so there is no need to explicitly extract it if it is
		a regular gzip'd or compress'd tarball.)  If you do the
		latter, take extra care not to overwrite something that
		already exists in that directory.  Also do not forget to add a
		command to remove the copied patch in the <emphasis
		  remap=tt>pre-clean</emphasis> target.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>MAINTAINER</title>
	      
	      <para>Set your mail-address here.  Please. <emphasis
		  remap=tt>:)</emphasis></para>
	      
	      <para>For detailed description of the responsibility of
		maintainers, refer to <xref linkend="policies-maintainer"
		  remap="MAINTAINER
		  on Makefiles"> section.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Dependencies</title>
	      
	      <para>Many ports depend on other ports.  There are five
		variables that you can use to ensure that all the required
		bits will be on the user's machine.</para>
	      
	      
	      <sect5>
		<title>LIB_DEPENDS</title>
		
		<para>This variable specifies the shared libraries this port
		  depends on.  It is a list of `<emphasis
		    remap=tt>lib:dir</emphasis>' pairs where <emphasis
		    remap=tt>lib</emphasis> is the name of the shared library,
		  and <emphasis remap=tt>dir</emphasis> is the directory in
		  which to find it in case it is not available.  For example,
		  <informalexample>
		    <screen>LIB_DEPENDS=
		      jpeg\\.6\\.:${PORTSDIR}/graphics/jpeg</screen>
		  </informalexample> will check for a shared jpeg library with
		  major version 6, and descend into the
		  <filename>graphics/jpeg</filename> subdirectory of your
		  ports tree to build and install it if it is not
		  found.</para>
		
		<para>Note that the <emphasis remap=tt>lib</emphasis> part is
		  just an argument given to `<command>ldconfig -r |
		    grep</command>', so periods should be escaped by two
		  backslashes like in the example above.</para>
		
		<para>The dependency is checked from within the <emphasis
		    remap=tt>extract</emphasis> target.  Also, the name of the
		  dependency is put in to the package so that
		  <symbol>pkg_add</symbol> will automatically install it if it
		  is not on the user's system.</para>
		
	      </sect5>
	      
	      <sect5>
		<title>RUN_DEPENDS</title>
		
		<para>This variable specifies executables or files this port
		  depends on during run-time.  It is a list of `<emphasis
		    remap=tt>path:dir</emphasis>' pairs where <emphasis
		    remap=tt>path</emphasis> is the name of the executable or
		  file, and <emphasis remap=tt>dir</emphasis> is the directory
		  in which to find it in case it is not available.  If
		  <emphasis remap=tt>path</emphasis> starts with a slash
		  (<filename>/</filename>), it is treated as a file and its
		  existence is  tested with `<command>test -e</command>';
		  otherwise, it is assumed to be an executable, and
		  `<command>which -s</command>' is used to determine if the
		  program exists in the user's search path.</para>
		
		<para>For example,
		  <informalexample>
		    <screen>RUN_DEPENDS=
		      ${PREFIX}/etc/innd:${PORTSDIR}/news/inn \
		      wish:${PORTSDIR}/x11/tk</screen>
		  </informalexample> will check if the file
		  `<filename>/usr/local/etc/innd</filename>' exists, and build
		  and install it from the <filename>news/inn</filename>
		  subdirectory of the ports tree if it is not found.  It will
		  also see if an executable called `<emphasis
		    remap=tt>wish</emphasis>' is in your search path, and
		  descend into the <filename>x11/tk</filename> subdirectory of
		  your ports tree to build and install it if it is not found.
		  (Note that in this case, `<emphasis
		    remap=tt>innd</emphasis>' is actually an executable; if an
		  executable is in a place that is not expected to be in a
		  normal user's search path, you should use the full
		  pathname.)</para>
		
		<para>The dependency is checked from within the <emphasis
		    remap=tt>install</emphasis> target.  Also, the name of the
		  dependency is put in to the  package so that
		  <symbol>pkg_add</symbol> will automatically install it if it
		  is not on the user's system.</para>
		
	      </sect5>
	      
	      <sect5>
		<title>BUILD_DEPENDS</title>
		
		<para>This variable specifies executables or files this port
		  requires to build.  Like <symbol>RUN_DEPENDS</symbol>, it is
		  a list of `<emphasis remap=tt>path:dir</emphasis>' pairs.
		  For example,
		  <informalexample>
		    <screen>BUILD_DEPENDS=
		      unzip:${PORTSDIR}/archivers/unzip</screen>
		  </informalexample> will check for an executable called
		  `<emphasis remap=tt>unzip</emphasis>', and descend into the
		  <filename>archivers/unzip</filename> subdirectory of your
		  ports tree to build and install it if it is not
		  found.</para>
		
		<para>Note that `build' here means everything from extracting
		  to  compilation.  The dependency is checked from within the
		  <emphasis remap=tt>extract</emphasis> target.</para>
		
	      </sect5>
	      
	      <sect5>
		<title>FETCH_DEPENDS</title>
		
		<para>This variable specifies executables or files this port
		  requires to fetch.  Like the previous two, it is a list of
		  `<emphasis remap=tt>path:dir</emphasis>' pairs.  For
		  example,
		  <informalexample>
		    <screen>FETCH_DEPENDS=
		      ncftp2:${PORTSDIR}/net/ncftp2</screen>
		  </informalexample> will check for an executable called
		  `<emphasis remap=tt>ncftp2</emphasis>', and descend into the
		  <filename>net/ncftp2</filename> subdirectory of your ports
		  tree to build and install it if it is not found.</para>
		
		<para>The dependency is checked from within the <emphasis
		    remap=tt>fetch</emphasis> target.</para>
		
	      </sect5>
	      
	      <sect5>
		<title>DEPENDS</title>
		
		<para>If there is a dependency that does not fall into either
		  of the above four categories, or your port requires to have
		  the source of the other port extracted (i.e., having them
		  installed is not enough), then use this variable.  This is
		  just a list of directories, as there is nothing to check,
		  unlike the previous four.</para>
		
	      </sect5>
	    </sect4>
	    
	    <sect4>
	      <title>Building mechanisms</title>
	      
	      <para>If your package uses GNU <emphasis
		  remap=tt>make</emphasis>, set
		`<literal>USE_GMAKE=yes</literal>'.  If your package uses GNU
		<emphasis remap=tt>configure</emphasis>, set
		`<literal>GNU_CONFIGURE=yes</literal>'.  If you want to give
		some extra arguments to GNU <emphasis
		  remap=tt>configure</emphasis> (other than the default
		`<literal>--prefix=&#36;{PREFIX}</literal>'), set those extra
		arguments in <emphasis
		  remap=tt>&#36;{CONFIGURE_ARGS}</emphasis>.</para>
	      
	      <para>If your package is an X application that creates Makefiles
		from Imakefiles using <emphasis remap=tt>imake</emphasis>,
		then set `<literal>USE_IMAKE=yes</literal>'.  This will cause
		the configure stage to automatically do an <command>xmkmf
		  -a</command>.  If the `<option>-a</option>' flag is a
		problem for your port, set
		`<literal>XMKMF=xmkmf</literal>'.</para>
	      
	      <para>If your port's source Makefile has something else than
		`<emphasis remap=tt>all</emphasis>' as the main build target,
		set <emphasis remap=tt>&#36;{ALL_TARGET}</emphasis>
		accordingly.  Same goes for `<emphasis
		  remap=tt>install</emphasis>' and <emphasis
		  remap=tt>&#36;{INSTALL_TARGET}</emphasis>.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>NO_INSTALL_MANPAGES</title>
	      
	      <para>If the port uses imake but does not understand the
		`<filename>install.man</filename>' target,
		`<literal>NO_INSTALL_MANPAGES=yes</literal>' should be set.
		In addition, the author of the original port should be shot.
		<emphasis remap=tt>:&gt;</emphasis></para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title>Ports that require Motif</title>
	    
	    <para>There are many programs that require a Motif library
	      (available from several commercial vendors, while there is (at
	      least) one effort to create a free clone) to compile.  Since it
	      is a popular toolkit and their licenses usually permit
	      redistribution of statically linked binaries, we have made
	      special provisions for handling ports that require Motif in a
	      way that we can easily compile binaries linked either
	      dynamically or statically.</para>
	    
	    
	    <sect4>
	      <title>REQUIRES_MOTIF</title>
	      
	      <para>If your port requires Motif, define this variable in the
		Makefile.  This will prevent people who don't own a copy of
		Motif from even attempting to build it.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>&#36;{MOTIFLIB}</title>
	      
	      <para>This variable will be set by
		<filename>bsd.port.mk</filename> to be the appropriate
		reference to the Motif library.  Please patch the source to
		use this wherever the Motif library is referenced in the
		Makefile or Imakefile.</para>
	      
	      <para>There are two common cases:
		<orderedlist>
		  
		  <listitem>
		    <para>If the port refers to the Motif library as
		      `<option>-lXm</option>' in its Makefile or Imakefile,
		      simply substitute `<emphasis
			remap=tt>&#36;{MOTIFLIB}</emphasis>' for it.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>If the port uses `<emphasis
			remap=tt>XmClientLibs</emphasis>' in its Imakefile,
		      change it to `<emphasis remap=tt>&#36;{MOTIFLIB}
			&#36;{XTOOLLIB} &#36;{XLIB}</emphasis>'.</para>
		  </listitem>
		  
		</orderedlist>
	      </para>
	      
	      <para>Note that <emphasis remap=tt>&#36;{MOTIFLIB}</emphasis>
		(usually) expands to `<option>-L/usr/X11R6/lib -lXm</option>'
		or `<filename>/usr/X11R6/lib/libXm.a</filename>', so there is
		no need to add `<option>-L</option>' or `<option>-l</option>'
		in front.</para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3>
	    <title>Info files</title>
	    
	    <para>The new version of texinfo (included in 2.2.2-RELEASE and
	      onwards) contains a utility called `<emphasis
		remap=tt>install-info</emphasis>' to add and delete entries to
	      the `<emphasis remap=tt>dir</emphasis>' file.  If your port
	      installs any info documents, please follow these instructions so
	      your port/package will correctly update the user's
	      <filename>&#36;{PREFIX}/info/dir</filename> file.  (Sorry for
	      the length of this section, but it is imperative to weave all
	      the info files together.  If done correctly, it will produce a
	      <emphasis>beautiful</emphasis> listing, so please bear with me!
	      <emphasis remap=tt>:)</emphasis></para>
	    
	    <para>First, this is what you (as a porter) need to know:</para>
	    
	    <para>
	      <informalexample>
		<screen>% install-info --help install-info [OPTION]...
		  [INFO-FILE [DIR-FILE]] Install INFO-FILE in the Info
		  directory file DIR-FILE. Options: --delete          Delete
		  existing entries in INFO-FILE; don't insert any new entries.
		  : --entry=TEXT      Insert TEXT as an Info directory entry.
		  : --section=SEC     Put this file's entries in section SEC
		  of the directory. :</screen>
	      </informalexample>
	    </para>
	    
	    <para>Note that this program will not actually
	      <emphasis>install</emphasis> info files; it merely inserts or
	      deletes entries in the <emphasis remap=tt>dir</emphasis>
	      file.</para>
	    
	    <para>Here's a seven-step procedure to convert ports to use
	      <emphasis remap=tt>install-info</emphasis>.  I will use
	      <filename>editors/emacs</filename> as an example.</para>
	    
	    <para>
	      <orderedlist>
		
		<listitem>
		  <para>Look at the texinfo sources and make a patch to insert
		    <email>@dircategory</email> and <email>@direntry</email>
		    statements to files that don't have them.  This is part of
		    my patch:
		    
		    <informalexample>
		      <screen>--- ./man/vip.texi.org	Fri Jun 16 15:31:11
			1995 +++ ./man/vip.texi	Tue May 20 01:28:33 1997 @@
			-2,6 +2,10 @@ @setfilename ../info/vip @settitle VIP
			+@dircategory The Emacs editor and associated tools
			+@direntry +* VIP: (vip).		A VI-emulation
			for Emacs. +@end direntry @iftex @finalout :</screen>
		    </informalexample>
		    
		    
		  </para>
		  
		  <para>The format should be self-explanatory.  Many authors
		    leave a <emphasis remap=tt>dir</emphasis> file in the
		    source tree that contains all the entries you need, so
		    look around before you try to write your own.  Also, make
		    sure you look into related ports and make the section
		    names and entry indentations consistent (we recommend that
		    all entry text start at the 4th tab stop).</para>

		  <para>Note that you can put only one info entry per file
		    because of a bug in `<emphasis remap=tt>install-info
		      --delete</emphasis>' that deletes only the first entry
		    if you specify multiple entries in the
		    <email>@direntry</email> section.</para>

		  <para>You can give the <emphasis remap=tt>dir</emphasis>
		    entries to <emphasis remap=tt>install-info</emphasis> as
		    arguments (<option>--section</option> and
		    <option>--entry</option>) instead of patching the texinfo
		    sources.  I do not think this is a good idea for ports
		    because you need to duplicate the same information in
		    <emphasis>three</emphasis> places (<emphasis
		      remap=tt>Makefile</emphasis> and
		    <email>@exec</email>/<email>@unexec</email> of
		    <acronym>PLIST</acronym>; see below).  However, if you
		    have a Japanese (or other multibyte encoding) info files,
		    you will have to use the extra arguments to <emphasis
		      remap=tt>install-info</emphasis> because <emphasis
		      remap=tt>makeinfo</emphasis> can't handle those texinfo
		    sources.  (See <emphasis remap=tt>Makefile</emphasis> and
		    <acronym>PLIST</acronym> of
		    <filename>japanese/skk</filename> for examples on how to
		    do this).</para>
		</listitem>
		
		<listitem>
		  <para>Go back to the port directory and do a `<emphasis
		      remap=tt>make clean; make</emphasis>' and verify that
		    the info files are regenerated from the texinfo sources.
		    Since the texinfo sources are newer than the info files,
		    they should be rebuilt when you type <emphasis
		      remap=tt>make</emphasis>; but many <emphasis
		      remap=tt>Makefile</emphasis>s don't include correct
		    dependencies for info files. In emacs' case, I had to
		    patch the main <filename>Makefile.in</filename> so it will
		    descend into the <emphasis remap=tt>man</emphasis>
		    subdirectory to rebuild the info pages.
		    
		    <informalexample>
		      <screen>--- ./Makefile.in.org	Mon Aug 19 21:12:19
			1996 +++ ./Makefile.in	Tue Apr 15 00:15:28 1997 @@
			-184,7 +184,7 @@ # Subdirectories to make recursively.
			`lisp' is not included # because the compiled lisp
			files are part of the distribution # and you cannot
			remake them without installing Emacs first. -SUBDIR =
			lib-src src +SUBDIR = lib-src src man # The makefiles
			of the directories in $SUBDIR. SUBDIR_MAKEFILES =
			lib-src/Makefile man/Makefile src/Makefile
			oldXMenu/Makefile lwlib/Makefile ---
			./man/Makefile.in.org	Thu Jun 27 15:27:19 1996 +++
			./man/Makefile.in	Tue Apr 15 00:29:52 1997 @@
			-66,6 +66,7 @@ ${srcdir}/gnu1.texi \
			${srcdir}/glossary.texi +all: info info:
			$(INFO_TARGETS) dvi: $(DVI_TARGETS)</screen>
		    </informalexample>
		    
		    
		  </para>
		  
		  <para>The second hunk was necessary because the default
		    target in the <emphasis remap=tt>man</emphasis> subdir is
		    called <emphasis remap=tt>info</emphasis>, while the main
		    Makefile wants to call <emphasis remap=tt>all</emphasis>.
		    I also deleted the installation of the <emphasis
		      remap=tt>info</emphasis> info file because we already
		    have one with the same name in
		    <filename>/usr/share/info</filename> (that patch is not
		    shown here).</para>
		</listitem>
		
		<listitem>
		  <para>If there is a place in the <emphasis
		      remap=tt>Makefile</emphasis> that is installing the
		    <emphasis remap=tt>dir</emphasis> file, delete it.  Your
		    port may not be doing it.  Also, remove any commands that
		    are otherwise mucking around with the <emphasis
		      remap=tt>dir</emphasis> file.
		    
		    <informalexample>
		      <screen>--- ./Makefile.in.org	Mon Aug 19 21:12:19
			1996 +++ ./Makefile.in	Mon Apr 14 23:38:07 1997 @@
			-368,14 +368,8 @@ if [ `(cd ${srcdir}/info &amp;&amp;
			/bin/pwd)` != `(cd ${infodir} &amp;&amp; /bin/pwd)` ];
			\ then \ (cd ${infodir};  \ -	   if [ -f dir ]; then
			\ -	     if [ ! -f dir.old ]; then mv -f dir
			dir.old; \ -	     else mv -f dir dir.bak; fi; \ -
			fi; \ cd ${srcdir}/info ; \ -	   (cd $${thisdir};
			${INSTALL_DATA} ${srcdir}/info/dir ${infodir}/dir); \
			-	   (cd $${thisdir}; chmod a+r ${infodir}/dir);
			\ for f in ccmode* cl* dired-x* ediff* emacs* forms*
			gnus* info* message* mh-e* sc* vip*; do \ (cd
			$${thisdir}; \ ${INSTALL_DATA} ${srcdir}/info/$$f
			${infodir}/$$f; \ chmod a+r ${infodir}/$$f);
			\</screen>
		    </informalexample>
		    
		  </para>
		</listitem>
		
		<listitem>
		  <para>(This step is only necessary if you are modifying an
		    existing port.)  Take a look at
		    <filename>pkg/PLIST</filename> and delete anything that is
		    trying to patch up <filename>info/dir</filename>.  They
		    may be in <filename>pkg/INSTALL</filename> or some other
		    file, so search extensively.
		    
		    <informalexample>
		      <screen>Index: pkg/PLIST
			=================================================================== RCS file: /usr/cvs/ports/editors/emacs/pkg/PLIST,v retrieving revision 1.15 diff -u -r1.15 PLIST --- PLIST	1997/03/04 08:04:00	1.15 +++ PLIST	1997/04/15 06:32:12 @@ -15,9 +15,6 @@ man/man1/emacs.1.gz man/man1/etags.1.gz man/man1/ctags.1.gz -@unexec cp %D/info/dir %D/info/dir.bak -info/dir -@unexec cp %D/info/dir.bak %D/info/dir info/cl info/cl-1 info/cl-2</screen>
		    </informalexample>
		    
		  </para>
		</listitem>
		
		<listitem>
		  <para>Add a <emphasis remap=tt>post-install</emphasis>
		    target to the Makefile to create a <emphasis
		      remap=tt>dir</emphasis> file if it is not there.  Also,
		    call <emphasis remap=tt>install-info</emphasis> with the
		    installed info files.
		    
		    <informalexample>
		      <screen>Index: Makefile
			=================================================================== RCS file: /usr/cvs/ports/editors/emacs/Makefile,v retrieving revision 1.26 diff -u -r1.26 Makefile --- Makefile	1996/11/19 13:14:40	1.26 +++ Makefile	1997/05/20 10:25:09	1.28 @@ -20,5 +20,11 @@ post-install: .for file in emacs-19.34 emacsclient etags ctags b2m strip ${PREFIX}/bin/${file} .endfor +	if [ ! -f ${PREFIX}/info/dir ]; then \ +	  ${SED} -ne '1,/Menu:/p' /usr/share/info/dir &gt; ${PREFIX}/info/dir; \ +	fi +.for info in emacs vip viper forms gnus mh-e cl sc dired-x ediff ccmode +	install-info ${PREFIX}/info/${info} ${PREFIX}/info/dir +.endfor .include &lt;bsd.port.mk&gt;</screen>
		    </informalexample>
		    
		    
		  </para>
		  
		  <para>Do not use anything other than
		    <filename>/usr/share/info/dir</filename> and the above
		    command to create a new info file.  In fact, I'd add the
		    first three lines of the above patch to
		    <filename>bsd.port.mk</filename> if you (the porter)
		    wouldn't have to do it in <acronym>PLIST</acronym> by
		    yourself anyway.</para>
		</listitem>
		
		<listitem>
		  <para>Edit <acronym>PLIST</acronym> and add equivalent
		    <email>@exec</email> statements and also
		    <email>@unexec</email> for <symbol>pkg_delete</symbol>.
		    You do not need to delete <filename>info/dir</filename>
		    with <email>@unexec</email>.
		    
		    <informalexample>
		      <screen>Index: pkg/PLIST
			=================================================================== RCS file: /usr/cvs/ports/editors/emacs/pkg/PLIST,v retrieving revision 1.15 diff -u -r1.15 PLIST --- PLIST	1997/03/04 08:04:00	1.15 +++ PLIST	1997/05/20 10:25:12	1.17 @@ -16,7 +14,15 @@ man/man1/etags.1.gz man/man1/ctags.1.gz +@unexec install-info --delete %D/info/emacs %D/info/dir : +@unexec install-info --delete %D/info/ccmode %D/info/dir info/cl info/cl-1 @@ -87,6 +94,18 @@ info/viper-3 info/viper-4 +@exec [ -f %D/info/dir ] || sed -ne '1,/Menu:/p' /usr/share/info/dir &gt; %D/info/dir +@exec install-info %D/info/emacs %D/info/dir : +@exec install-info %D/info/ccmode %D/info/dir libexec/emacs/19.34/i386--freebsd/cvtmail libexec/emacs/19.34/i386--freebsd/digest-doc</screen>
		    </informalexample>
		    
		    
		  </para>
		  
		  <para>Note that the `<emphasis remap=tt>@unexec install-info
		      --delete</emphasis>' commands have to be listed before
		    the info files themselves so they can read the files.
		    Also, the `<email>@exec install-info</email>' commands
		    have to be after the info files and the
		    <email>@exec</email> command that creates the the
		    <emphasis remap=tt>dir</emphasis> file.</para>
		</listitem>
		
		<listitem>
		  <para>Test and admire your work. <emphasis
		      remap=tt>:)</emphasis> The sequence I recommend is:
		    `<emphasis remap=tt>make package</emphasis>',
		    `<symbol>pkg_delete</symbol>', then
		    `<symbol>pkg_add</symbol>'.  Check the <emphasis
		      remap=tt>dir</emphasis> file before and after each
		    step.</para>
		</listitem>
		
	      </orderedlist>
	    </para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Licensing Problems</title>
	    
	    <para>Some software packages have restrictive licenses or can be
	      in violation to the law (PKP's patent on public key crypto, ITAR
	      (export of crypto software) to name just two of them). What we
	      can do with them vary a lot, depending on the exact wordings of
	      the respective licenses.</para>
	    
	    <para>Note that it is your responsibility as a porter to read the
	      licensing terms of the software and make sure that the FreeBSD
	      project will not be held accountable of violating them by
	      redistributing the source or compiled binaries either via ftp or
	      CD-ROM.  If in doubt, please contact the &a.ports;.</para>
	    
	    <para>There are two variables you can set in the Makefile to
	      handle  the situations that arise frequently:</para>
	    
	    <para>
	      <orderedlist>
		
		<listitem>
		  <para>If the port has a `do not sell for profit' type of
		    license, set the variable <symbol>NO_CDROM</symbol>.  We
		    will make sure such ports won't go into the CD-ROM come
		    release time. The distfile and package will still be
		    available via ftp.
		  </para>
		</listitem>
		
		<listitem>
		  <para>If the resulting package needs to be built uniquely
		    for each site, or the resulting binary package can't be
		    distributed due to licensing; set the variable
		    <symbol>NO_PACKAGE</symbol>. We will make sure such
		    packages won't go on the ftp site, nor  into the CD-ROM
		    come release time.  The distfile will still be included on
		    both however.
		  </para>
		</listitem>
		
		<listitem>
		  <para>If the port has legal restrictions on who can use it
		    (e.g., crypto stuff) or has a `no commercial use' license,
		    set the variable <acronym>RESTRICTED</acronym> to be the
		    string describing the reason why.  For such ports, the
		    distfiles/packages will not be available even from our ftp
		    sites.</para>
		</listitem>
		
	      </orderedlist>
	    </para>
	    
	    <para>Note: The GNU General Public License (GPL), both version 1
	      and 2, should not be a problem for ports.</para>
	    
	    <para>Note: If you are a committer, make sure you update the
	      <filename>ports/LEGAL</filename> file too.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Upgrading</title>
	    
	    <para>When you notice that a port is out of date compared to the
	      latest version from the original authors, first make sure you
	      have the latest port.  You can find them in the <emphasis
		remap=tt>ports-current</emphasis> directory of the ftp mirror
	      sites.</para>
	    
	    <para>The next step is to send a mail to the maintainer, if one is
	      listed in the port's Makefile.  That person may already be
	      working on an upgrade, or have a reason to not upgrade the port
	      right now (because of, for example, stability problems of the
	      new version).</para>
	    
	    <para>If the maintainer asks you to do the upgrade or there isn't
	      any such person to begin with, please make the upgrade and send
	      the recursive diff (either unified or context diff is fine, but
	      port committers appear to prefer unified diff more) of the new
	      and old ports directories to us (i.e., if your modified ports
	      directory is called `<emphasis remap=tt>superedit</emphasis>'
	      and the original as in our tree is
	      `<filename>superedit.bak</filename>', then send us the result of
	      `<emphasis remap=tt>diff -ruN superedit.bak
		superedit</emphasis>').  Please examine the output to make
	      sure all the changes make sense.  The best way to send us the
	      diff is by including it to <command>send-pr(1)</command>
	      (category `ports').  Please mention any added or deleted files
	      in the message, as they have to be explicitly specified to CVS
	      when doing a commit. If the diff is more than about 20KB, please
	      compress and uuencode it; otherwise, just include it in as is in
	      the PR.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Do's and Dont's</title>
	    
	    <para>Here is a list of common do's and dont's that you encounter
	      during the porting process.</para>
	    
	    
	    <sect4>
	      <title>WRKDIR</title>
	      
	      <para>Do not leave anything valuable lying around in the
		<emphasis remap=tt>work</emphasis> subdirectory, `<emphasis
		  remap=tt>make clean</emphasis>' will
		<emphasis>nuke</emphasis> it completely!  If you need
		auxiliary files that are not scripts or patches, put them in
		the <emphasis remap=tt>&#36;{FILESDIR}</emphasis> subdirectory
		(<emphasis remap=tt>files</emphasis> by default) and use the
		<emphasis remap=tt>post-extract</emphasis> target to copy them
		to the <emphasis remap=tt>work</emphasis> subdirectory.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Package information</title>
	      
	      <para>Do include package information, i.e.
		<acronym>COMMENT</acronym>, <acronym>DESCR</acronym>, and
		<acronym>PLIST</acronym>, in <emphasis
		  remap=tt>pkg</emphasis>.  Note that these files are not used
		only for packaging anymore, and are
		<emphasis>mandatory</emphasis> now, even if <emphasis
		  remap=tt>&#36;{NO_PACKAGE}</emphasis> is set.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Compress manpages, strip binaries</title>
	      
	      <para>Do compress manpages and strip binaries.  If the original
		source already strips the binary, fine; otherwise, you can add
		a <emphasis remap=tt>post-install</emphasis> rule to do it
		yourself.  Here is an example:
		<informalexample>
		  <screen> post-install: strip ${PREFIX}/bin/xdl</screen>
		</informalexample>
	      </para>
	      
	      <para>Use the <emphasis remap=tt>file</emphasis> command on the
		installed executable to check whether the binary is stripped
		or not.  If it does not say `not stripped', it is
		stripped.</para>
	      
	      <para>To automagically compress the manpages, use the MAN[1-9LN]
		variables.  They will check the variable
		<acronym>NOMANCOMPRESS</acronym> that the user can set in
		<filename>/etc/make.conf</filename> to disable man page
		compression. Place them last in the section below the
		<acronym>MAINTAINER</acronym> variable.  Here is an example:
		<informalexample>
		  <screen>MAN1=      foo.1 bar.1 MAN5=      foo.conf.5 MAN8=
		    baz.8</screen>
		</informalexample>
	      </para>
	      
	      <para>Note that this is not usually necessary with ports that
		are X applications and use Imake to build.</para>
	      
	      <para>If your port anchors its man tree somewhere other than
		<acronym>PREFIX</acronym>, you can use the
		<acronym>MANPREFIX</acronym> to set it. Also, if only manpages
		in certain section go in a non-standard place, such as many
		Perl modules ports, you can set individual man paths using
		<acronym>MAN<replaceable>sect</replaceable>PREFIX</acronym>
		(where <emphasis>sect</emphasis> is one of 1-9, L or
		N).</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>INSTALL_* macros</title>
	      
	      <para>Do use the macros provided in
		<filename>bsd.port.mk</filename> to ensure correct modes and
		ownership of files in your own *-install targets.  They
		are:</para>
	      
	      <para>
		<itemizedlist>
		  
		  <listitem>
		    <para><emphasis remap=tt>${INSTALL_PROGRAM}</emphasis> is
		      a command to install binary executables.</para>
		  </listitem>
		  
		  <listitem>
		    <para><emphasis remap=tt>${INSTALL_SCRIPT}</emphasis> is a
		      command to install executable scripts.</para>
		  </listitem>
		  
		  <listitem>
		    <para><emphasis remap=tt>${INSTALL_DATA}</emphasis> is a
		      command to install sharable data.</para>
		  </listitem>
		  
		  <listitem>
		    <para><emphasis remap=tt>${INSTALL_MAN}</emphasis> is a
		      command to install manpages and other documentation (it
		      doesn't compress anything).</para>
		  </listitem>
		  
		</itemizedlist>
	      </para>
	      
	      <para>These are basically the <emphasis
		  remap=tt>install</emphasis> command with all the appropriate
		flags.  See below for an example on how to use them.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>INSTALL package script</title>
	      
	      <para>If your port needs execute commands when the binary
		package is installed with pkg_add you can do with via the
		pkg/INSTALL script.  This script will automatically be added
		to the  package, and will be run twice by pkg_add.  The first
		time will as `<emphasis remap=tt>INSTALL ${PKGNAME}
		  PRE-INSTALL</emphasis>' and the second time as `<emphasis
		  remap=tt>INSTALL ${PKGNAME} POST-INSTALL</emphasis>'.
		`<emphasis remap=tt>&#36;2</emphasis>' can be tested to
		determine which mode the script is being run in. The
		`<symbol>PKG_PREFIX</symbol>' environmental variable will be
		set to the package installation directory.  See man
		<command>pkg_add(1)</command> for additional information.
		Note, that this script is not run automatically if you install
		the port with `<emphasis remap=tt>make install</emphasis>'.
		If you are depending on it being run, you will have to
		explicitly call it on your port's Makefile.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>REQ package script</title>
	      
	      <para>If your port needs to determine if it should install or
		not, you can create a pkg/REQ ``requirements'' script.  It
		will be invoked automatically at installation/deinstallation
		time to determine whether or not installation/deinstallation
		should proceed. See man <command>pkg_create(1)</command> and
		man <command>pkg_add(1)</command> for more information.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Install additional documentation</title>
	      
	      <para>If your software has some documentation other than the
		standard man and info pages that you think is useful for the
		user, install it under
		<filename>&#36;{PREFIX}/share/doc</filename>. This can be
		done, like the previous item, in the <emphasis
		  remap=tt>post-install</emphasis> target.</para>
	      
	      <para>Create a new directory for your port.  The directory name
		should reflect what the port is.  This usually means <emphasis
		  remap=tt>&#36;{PKGNAME}</emphasis> minus the version part.
		However, if you think the user might want different versions
		of the port to be installed at the same time, you can use the
		whole <emphasis remap=tt>&#36;{PKGNAME}</emphasis>.</para>
	      
	      <para>Make the installation dependent to the variable
		<acronym>NOPORTDOCS</acronym> so that users can disable it in
		<filename>/etc/make.conf</filename>, like this:
		<informalexample>
		  <screen> post-install: .if !defined(NOPORTDOCS) ${MKDIR}
		    ${PREFIX}/share/doc/xv ${INSTALL_MAN}
		    ${WRKSRC}/docs/xvdocs.ps ${PREFIX}/share/doc/xv
		    .endif</screen>
		</informalexample>
	      </para>
	      
	      <para>Do not forget to add them to
		<filename>pkg/PLIST</filename> too!  (Do not worry about
		<acronym>NOPORTDOCS</acronym> here; there is currently no way
		for the packages to read variables from
		<filename>/etc/make.conf</filename>.)</para>
	      
	      <para>If you need to display a message to the installer, you may
		place the message in <filename>pkg/MESSAGE</filename>.  This
		capibility is often useful to display additional installation
		steps to be taken after a pkg_add, or to display licensing
		information. (note: the MESSAGE file does not need to be added
		to pkg/PLIST).</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>DIST_SUBDIR</title>
	      
	      <para>Do not let your port clutter
		<filename>/usr/ports/distfiles</filename>.  If your port
		requires a lot of files to be fetched, or contains a file that
		has a name that might conflict with other ports (e.g.,
		`Makefile'), set <emphasis
		  remap=tt>&#36;{DIST_SUBDIR}</emphasis> to the name of the
		port (<emphasis remap=tt>&#36;{PKGNAME}</emphasis> without the
		version part should work fine).  This will change <emphasis
		  remap=tt>&#36;{DISTDIR}</emphasis> from the default
		<filename>/usr/ports/distfiles</filename> to
		<filename>/usr/ports/distfiles/&#36;{DIST_SUBDIR}</filename>,
		and in effect puts everything that is required for your port
		into that subdirectory.</para>
	      
	      <para>It will also look at the subdirectory with the same name
		on the backup master site at
		<filename>ftp.freebsd.org</filename>.  (Setting <emphasis
		  remap=tt>&#36;{DISTDIR}</emphasis> explicitly in your
		Makefile will not accomplish this, so please use <emphasis
		  remap=tt>&#36;{DIST_SUBDIR}</emphasis>.)</para>
	      
	      <para>Note this does not affect the <emphasis
		  remap=tt>&#36;{MASTER_SITES}</emphasis> you define in your
		Makefile.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Feedback</title>
	      
	      <para>Do send applicable changes/patches to the original
		author/maintainer for inclusion in next release of the code.
		This will only make your job that much easier for the next
		release.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>RCS strings</title>
	      
	      <para>Do not put RCS strings in patches.  CVS will mangle them
		when we put the files into the ports tree, and when we check
		them out again, they will come out different and the patch
		will fail.  RCS strings are surrounded by dollar (`<emphasis
		  remap=tt>&#36;</emphasis>') signs, and typically start with
		`<emphasis remap=tt>&#36;Id</emphasis>' or `<emphasis
		  remap=tt>&#36;RCS</emphasis>'.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Recursive diff</title>
	      
	      <para>Using the recurse (`<option>-r</option>') option to
		<emphasis remap=tt>diff</emphasis> to generate patches is
		fine, but please take a look at the resulting patches to make
		sure you don't have any unnecessary junk in there.  In
		particular, diffs between two backup files, Makefiles when the
		port uses Imake or GNU configure, etc., are unnecessary and
		should be deleted. Also, if you had to delete a file, then you
		can do it in the <emphasis remap=tt>post-extract</emphasis>
		target rather than as part of the patch.  Once you are happy
		with the resuling diff, please split it up into one source
		file per patch file.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>PREFIX</title>
	      
	      <para>Do try to make your port install relative to <emphasis
		  remap=tt>&#36;{PREFIX}</emphasis>.  (The value of this
		variable will be set to <emphasis
		  remap=tt>&#36;{LOCALBASE}</emphasis> (default
		<filename>/usr/local</filename>), unless <emphasis
		  remap=tt>&#36;{USE_IMAKE}</emphasis> or <emphasis
		  remap=tt>&#36;{USE_X11}</emphasis> is set, in which case it
		will be <emphasis remap=tt>&#36;{X11BASE}</emphasis> (default
		<filename>/usr/X11R6</filename>).)</para>
	      
	      <para>Not hard-coding `<filename>/usr/local</filename>' or
		`<filename>/usr/X11R6</filename>' anywhere in the source will
		make the port much more flexible and able to cater to the
		needs of other sites.  For X ports that use imake, this is
		automatic; otherwise, this can often be done by simply
		replacing the occurrences of `<filename>/usr/local</filename>'
		(or `<filename>/usr/X11R6</filename>' for X ports that do not
		use imake) in the various scripts/Makefiles in the port to
		read `<emphasis remap=tt>&#36;{PREFIX}</emphasis>', as this
		variable is automatically passed down to every stage of the
		build and install processes.</para>
	      
	      <para>The variable <emphasis remap=tt>&#36;{PREFIX}</emphasis>
		can be reassigned in your Makefile or in the user's
		environment.  However, it is strongly discouraged for
		individual ports to set this variable explicitly in the
		Makefiles.  (If your port is an X port but does not use imake,
		set <literal>USE_X11=yes</literal>; this is quite different
		from setting <literal>PREFIX=/usr/X11R6</literal>.)</para>
	      
	      <para>Also, refer to programs/files from other ports with the
		variables mentioned above, not explicit pathnames.  For
		instance, if your port requires a macro
		<acronym>PAGER</acronym> to be the full pathname of <emphasis
		  remap=tt>less</emphasis>, use the compiler flag:
		<literallayout>-DPAGER=\"&#36;{PREFIX}/bin/less\"</literallayout> or <literallayout>-DPAGER=\"&#36;{LOCALBASE}/bin/less\"</literallayout> if this is an X port, instead of  <literallayout>-DPAGER=\"/usr/local/bin/less\".</literallayout> This way it will have a better chance of working if the system administrator has moved the whole `/usr/local' tree somewhere else.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>Subdirectories</title>
	      
	      <para>Try to let the port put things in the right subdirectories
		of <emphasis remap=tt>&#36;{PREFIX}</emphasis>.  Some ports
		lump everything and put it in the subdirectory with the port's
		name, which is incorrect.  Also, many ports put everything
		except binaries, header files and manual pages in the a
		subdirectory of `<emphasis remap=tt>lib</emphasis>', which
		does not bode well with the BSD paradigm.  Many of the files
		should be moved to one of the following: `<emphasis
		  remap=tt>etc</emphasis>' (setup/configuration files),
		`<emphasis remap=tt>libexec</emphasis>' (executables started
		internally), `<emphasis remap=tt>sbin</emphasis>' (executables
		for superusers/managers), `<emphasis remap=tt>info</emphasis>'
		(documentation for info browser) or  `<emphasis
		  remap=tt>share</emphasis>' (architecture independent files).
		See man <emphasis remap=tt>hier(7)</emphasis> for details, the
		rule governing <filename>/usr</filename> pretty much applies
		to <filename>/usr/local</filename> too.  The exception are
		ports dealing with USENET `news'. They may use
		<filename>&#36;{PREFIX}/news</filename> as a destination for
		their files.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>ldconfig</title>
	      
	      <para>If your port installs a shared library, add a <emphasis
		  remap=tt>post-install</emphasis> target to your Makefile
		that runs `<emphasis remap=tt>/sbin/ldconfig -m</emphasis>' on
		the directory where the new library is installed (usually
		<filename>&#36;{PREFIX}/lib</filename>) to register it into
		the shared library cache.</para>
	      
	      <para>Also, add an <email>@exec</email> line to your
		<filename>pkg/PLIST</filename> file so that a user who
		installed the package can start using the shared library
		immediately.  This line should  immediately follow the line
		for the shared library itself, as in:
		<informalexample>
		  <screen>lib/libtcl80.so.1.0 @exec /sbin/ldconfig -m
		    %D/lib</screen>
		</informalexample>
	      </para>
	      
	      <para>Never, ever, <emphasis>ever</emphasis> add a line that
		says `<emphasis remap=tt>ldconfig</emphasis>' without any
		arguments to your Makefile or pkg/PLIST.  This will reset the
		shared library cache to the contents of
		<filename>/usr/lib</filename> only, and will royally screw up
		the user's machine ("Help, xinit does not run anymore after I
		install this port!").  Anybody who does this will be shot and
		cut into 65,536 pieces by a rusty knife and have his liver
		chopped out by a bunch of crows and will eternally rot to
		death in the deepest bowels of hell (not necessarily in that
		order)....</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>UIDs</title>
	      
	      <para>If your port requires a certain user ID to be on the
		installed system, let the <filename>pkg/INSTALL</filename>
		script call <emphasis remap=tt>pw</emphasis> to create it
		automatically.  Look at <filename>japanese/Wnn</filename> or
		<filename>net/cvsup-mirror</filename> for examples.  It is
		customary to use UIDs in the upper 2-digit range (i.e., from
		around 50 to 99) for this purpose.</para>
	      
	      <para>Make sure you don't use a UID already used by the system
		or other ports.  This is the current list of UIDs between 50
		and 99.</para>
	      
	      <para>
		<informalexample>
		  <screen>majordom:*:54:1024:Majordomo Pseudo
		    User:/usr/local/majordomo:/nonexistent cyrus:*:60:248:the
		    cyrus mail server:/nonexistent:/nonexistent
		    gnats:*:61:1:GNATS database
		    owner:/usr/local/share/gnats/gnats-db:/bin/sh
		    uucp:*:66:66:UUCP
		    pseudo-user:/var/spool/uucppublic:/usr/libexec/uucp/uucico
		    xten:*:67:67:X-10 daemon:/usr/local/xten:/nonexistent
		    pop:*:68:6:Post Office Owner:/nonexistent:/nonexistent
		    wnn:*:69:7:Wnn:/nonexistent:/nonexistent
		    ifmail:*:70:66:Ifmail user:/nonexistent:/nonexistent
		    pgsql:*:71:246:PostgreSQL
		    pseudo-user:/usr/local/pgsql:/bin/sh msql:*:80:249:mSQL-2
		    pseudo-user:/var/db/msqldb:/bin/sh</screen>
		</informalexample>
	      </para>
	      
	      <para>Please send a notice to &a.ports; if you submit or commit
		a port that allocates a new UID in this range so we can keep
		this list up to date.</para>
	      
	    </sect4>
	    
	    <sect4>
	      <title>If you are stuck....</title>
	      
	      <para>Do look at existing examples and the
		<filename>bsd.port.mk</filename> file before asking us
		questions!  <emphasis remap=tt>;)</emphasis></para>
	      
	      <para>Do ask us questions if you have any trouble!  Do not just
		beat your head against a wall! <emphasis
		  remap=tt>:)</emphasis></para>
	      
	    </sect4>
	  </sect3>
	  
	  <sect3
	    id="porting-samplem">
	    <title>A Sample Makefile</title>
	    
	    <para>Here is a sample Makefile that you can use to create a new
	      port.  Make sure you remove all the extra comments (ones between
	      brackets)!</para>
	    
	    <para>It is recommended that you follow this format (ordering of
	      variables, empty lines between sections, etc.).  Not all of the
	      existing Makefiles are in this format (mostly old ones), but we
	      are trying to uniformize how they look.  This format is designed
	      so that the most important information is easy to locate.</para>
	    
	    <para>
	      <informalexample>
		<screen> [the header...just to make it easier for us to
		  identify the ports.] # New ports collection makefile for:
		  xdvi [the version required header should updated when
		  upgrading a port.] # Version required:	pl18 [things
		  like "1.5alpha" are fine here too] [this is the date when
		  the first version of this Makefile was created.  Never
		  change this when doing an update of the port.] # Date
		  created:		26 May 1995 [this is the person who
		  did the original port to FreeBSD, in particular, the person
		  who wrote the first version of this Makefile.  Remember,
		  this should not be changed when upgrading the port later.] #
		  Whom:			Satoshi Asami
		  &lt;asami@FreeBSD.ORG&gt; # # &#36;Id&#36; [ ^^^^ This will
		  be automatically replaced with RCS ID string by CVS  when it
		  is committed to our repository.] # [section to describe the
		  port itself and the master site - DISTNAME is always first,
		  followed by PKGNAME (if necessary), CATEGORIES, and then
		  MASTER_SITES, which can be followed by MASTER_SITE_SUBDIR.
		  After those, one of EXTRACT_SUFX or DISTFILES can be
		  specified too.] DISTNAME=	xdvi PKGNAME=	xdvi-pl18
		  CATEGORIES=	print [do not forget the trailing slash ("/")!
		  if you aren't using MASTER_SITE_* macros] MASTER_SITES=
		  ${MASTER_SITE_XCONTRIB} MASTER_SITE_SUBDIR= applications
		  [set this if the source is not in the standard ".tar.gz"
		  form] EXTRACT_SUFX=	.tar.Z [section for distributed
		  patches -- can be empty] PATCH_SITES=
		  ftp://ftp.sra.co.jp/pub/X11/japanese/ PATCHFILES=
		  xdvi-18.patch1.gz xdvi-18.patch2.gz [maintainer;
		  *mandatory*!  This is the person (preferably with commit
		  privileges) who a user can contact for questions and bug
		  reports - this person should be the porter or someone who
		  can forward questions to the original porter reasonably
		  promptly.  If you really do not want to have your address
		  here, set it to "ports@FreeBSD.ORG".] MAINTAINER=
		  asami@FreeBSD.ORG [dependencies -- can be empty]
		  RUN_DEPENDS=	gs:${PORTSDIR}/print/ghostscript LIB_DEPENDS=
		  Xpm\\.4\\.:${PORTSDIR}/graphics/xpm [this section is for
		  other standard bsd.port.mk variables that do not belong to
		  any of the above] [If it asks questions during configure,
		  build, install...] IS_INTERACTIVE=	yes [If it extracts to
		  a directory other than ${DISTNAME}...] WRKSRC=
		  ${WRKDIR}/xdvi-new [If the distributed patches were not made
		  relative to ${WRKSRC}, you may need to tweak this]
		  PATCH_DIST_STRIP=	-p1 [If it requires a "configure"
		  script generated by GNU autoconf to be run] GNU_CONFIGURE=
		  yes [If it requires GNU make, not /usr/bin/make, to
		  build...] USE_GMAKE=	yes [If it is an X application and
		  requires "xmkmf -a" to be run...] USE_IMAKE=	yes [et
		  cetera.] [non-standard variables to be used in the rules
		  below] MY_FAVORITE_RESPONSE=	"yeah, right" [then the
		  special rules, in the order they are called] pre-fetch: i go
		  fetch something, yeah post-patch: i need to do something
		  after patch, great pre-install: and then some more stuff
		  before installing, wow [and then the epilogue] .include
		  &lt;bsd.port.mk&gt;</screen>
	      </informalexample>
	    </para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Package Names</title>
	    
	    <para>The following are the conventions you should follow in
	      naming your packages.  This is to have our package directory
	      easy to scan, as there are already lots and lots of packages and
	      users are going to turn away if they hurt their eyes!</para>
	    
	    <para>The package name should look like</para>
	    
	    <para>
	      <informalexample>
		<screen>[&lt;language&gt;-]&lt;name&gt;[[-]&lt;compiled.specifics&gt;]-&lt;version.string.numbers&gt;;</screen>
	      </informalexample>
	    </para>
	    
	    <para>If your <emphasis remap=tt>&#36;{DISTNAME}</emphasis>
	      doesn't look like that, set <emphasis
		remap=tt>&#36;{PKGNAME}</emphasis> to something in that
	      format.</para>
	    
	    <para>
	      <orderedlist>
		
		<listitem>
		  <para>FreeBSD strives to support the native language of its
		    users.  The `&lt;language&gt;' part should be a two letter
		    abbreviation of the natural language defined by ISO-639 if
		    the port is specific to a certain language.  Examples are
		    `ja' for Japanese, `ru' for Russian, `vi' for Vietnamese,
		    `zh' for Chinese, `ko' for Korean and `de' for German.
		  </para>
		</listitem>
		
		<listitem>
		  <para>The `<emphasis remap=tt>&lt;name&gt;</emphasis>' part
		    should be all lowercases, except for a really large
		    package (with lots of programs in it).  Things like
		    XFree86 (yes there really is a package of it, check it
		    out) and ImageMagick fall into this category.  Otherwise,
		    convert the name (or at least the first letter) to
		    lowercase.  If the software in question really is called
		    that way, you can have numbers, hyphens and underscores in
		    the name too (like `kinput2').
		  </para>
		</listitem>
		
		<listitem>
		  <para>If the port can be built with different hardcoded
		    defaults (usually specified as environment variables or on
		    the <emphasis remap=tt>make</emphasis> command line), the
		    `&lt;compiled.specifics&gt;' part should state the
		    compiled-in defaults (the hyphen is optional).  Examples
		    are papersize and font units.
		  </para>
		</listitem>
		
		<listitem>
		  <para>The version string should be a period-separated list
		    of integers and single lowercase alphabetics.  The only
		    exception is the string `pl' (meaning `patchlevel'), which
		    can be used <emphasis>only</emphasis> when there are no
		    major and minor version numbers in the software.</para>
		</listitem>
		
	      </orderedlist>
	    </para>
	    
	    <para>Here are some (real) examples on how to convert a <emphasis
		remap=tt>&#36;{DISTNAME}</emphasis> into a suitable <emphasis
		remap=tt>&#36;{PKGNAME}</emphasis>:</para>
	    
	    <para>
	      <informalexample>
		<screen>DISTNAME	PKGNAME			Reason
		  mule-2.2.2	mule-2.2.2		no prob at all
		  XFree86-3.1.2	XFree86-3.1.2		ditto EmiClock-1.0.2
		  emiclock-1.0.2		no uppercase names for single
		  programs gmod1.4		gmod-1.4		need
		  hyphen after `&lt;name&gt;' xmris.4.02	xmris-4.02
		  ditto rdist-1.3alpha	rdist-1.3a		no strings
		  like `alpha' allowed es-0.9-beta1	es-0.9b1
		  ditto v3.3beta021.src	tiff-3.3		what the heck
		  was that anyway? ;) tvtwm		tvtwm-pl11
		  version string always required piewm		piewm-1.0
		  ditto xvgr-2.10pl1	xvgr-2.10.1		`pl' allowed
		  only when no maj/minor numbers gawk-2.15.6	ja-gawk-2.15.6
		  Japanese language version psutils-1.13
		  psutils-letter-1.13	papersize hardcoded at package build
		  time pkfonts		pkfonts300-1.0		package for
		  300dpi fonts</screen>
	      </informalexample>
	    </para>
	    
	    <para>If there is absolutely no trace of version information in
	      the original source and it is unlikely that the original author
	      will ever release another version, just set the version string
	      to `1.0' (like the piewm example above).  Otherwise, ask the
	      original author or use the date string (`yy.mm.dd') as the
	      version.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>That is It, Folks!</title>
	    
	    <para>Boy, this sure was a long tutorial, wasn't it?  Thanks for
	      following us to here, really.</para>
	    
	    <para>Well, now that you know how to do a port, let us go at it
	      and convert everything in the world into ports!  That is the
	      easiest way to start contributing to the FreeBSD Project!
	      <emphasis remap=tt>:)</emphasis>
	    </para>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title>Money, Hardware or Internet access</title>
	  
	  <para>We are always very happy to accept donations to further the
	    cause of the FreeBSD Project and, in a volunteer effort like ours,
	    a little can go a long way!  Donations of hardware are also very
	    important to expanding our list of supported peripherals since we
	    generally lack the funds to buy such items ourselves. </para>
	  
	  
	  <sect3>
	    <title>Donating funds</title>
	    
	    <para>While the FreeBSD Project is not a 501(C3) (non-profit)
	      corporation and hence cannot offer special tax incentives for
	      any donations made, any such donations will be gratefully
	      accepted on behalf of the project by FreeBSD, Inc.</para>
	    
	    <para>FreeBSD, Inc. was founded in early 1995 by &a.jkh; and
	      &a.davidg; with the goal of furthering the aims of the FreeBSD
	      Project and giving it a minimal corporate presence.  Any and all
	      funds donated (as well as any profits that may eventually be
	      realized by FreeBSD, Inc.) will be used exclusively to further
	      the project's goals.  </para>
	    
	    <para>Please make any checks payable to FreeBSD, Inc., sent in
	      care of the following address:</para>
	    
	    <para>
	      <informalexample>
		<screen>FreeBSD, Inc. c/o Jordan Hubbard 4041 Pike Lane, suite
		  #D. Concord CA, 94520 [temporarily using the Walnut Creek
		  CDROM address until a PO box can be opened]</screen>
	      </informalexample>
	    </para>
	    
	    <para>Wire transfers may also be sent directly to:</para>
	    
	    <para>
	      <informalexample>
		<screen>Bank Of America Concord Main Office  P.O. Box 37176
		  San Francisco CA, 94137-5176 Routing #: 121-000-358 Account
		  #: 01411-07441 (FreeBSD, Inc.)</screen>
	      </informalexample>
	    </para>
	    
	    <para>Any correspondence related to donations should be sent to
	      <ulink URL="mailto:jkh@FreeBSD.org">Jordan Hubbard</ulink>,
	      either via email or to the FreeBSD, Inc. postal address given
	      above.</para>
	    
	    <para>If you do not wish to be listed in our <xref
		linkend="donors" remap="donors"> section, please specify this
	      when making your donation.  Thanks!</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Donating hardware</title>
	    
	    <para>Donations of hardware in any of the 3 following categories
	      are also gladly accepted by the FreeBSD Project:</para>
	    
	    <para>
	      <itemizedlist>
		
		<listitem>
		  <para>General purpose hardware such as disk drives, memory
		    or complete systems should be sent to the FreeBSD, Inc.
		    address listed in the <emphasis>donating funds</emphasis>
		    section.
		  </para>
		</listitem>
		
		<listitem>
		  <para>Hardware for which ongoing compliance testing is
		    desired. We are currently trying to put together a testing
		    lab of all components that FreeBSD supports so that proper
		    regression testing can be done with each new release. We
		    are still lacking many important pieces (network cards,
		    motherboards, etc) and if you would like to make such a
		    donation, please contact &a.davidg; for information on
		    which items are still required.
		  </para>
		</listitem>
		
		<listitem>
		  <para>Hardware currently unsupported by FreeBSD for which
		    you would like to see such support added.  Please contact
		    the &a.core; before sending such items as we will need to
		    find a developer willing to take on the task before we can
		    accept delivery of new hardware.  </para>
		</listitem>
		
	      </itemizedlist>
	    </para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Donating Internet access</title>
	    
	    <para>We can always use new mirror sites for FTP, WWW or cvsup. If
	      you would like to be such a mirror, please contact <ulink
		URL="mailto:admin@FreeBSD.ORG">the FreeBSD project
		administrators</ulink> for more information.</para>
	    
	  </sect3>
	</sect2>
      </sect1>
      
      <sect1
	id="donors">
	<title>Donors Gallery</title>
	
	<para>The FreeBSD Project is indebted to the following donors and
	  would like to publically thank them here!</para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para><emphasis remap=bf>Contributors to the central server
		  project:</emphasis>
	      </para>
	      
	      <para>The following individuals and businesses made it possible
		for the FreeBSD Project to build a new central server machine
		to eventually replace
		<filename>freefall.freebsd.org</filename> by donating the
		following items:</para>
	      
	      <para>
		<itemizedlist>
		  
		  <listitem>
		    <para><ulink URL="mailto:mbarkah@freebsd.org">Ade
			Barkah</ulink> and his employer, <ulink
			URL="http://www.hemi.com">Hemisphere Online</ulink>,
		      donated a <emphasis remap=bf>Pentium Pro (P6) 200Mhz
			CPU</emphasis>
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="http://www.asacomputers.com">ASA
			Computers</ulink> donated a <emphasis remap=bf>Tyan
			1662 motherboard</emphasis>.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="mailto:joe@via.net">Joe McGuckin</ulink>
		      of <ulink URL="http://www.via.net">ViaNet
			Communications</ulink> donated a <emphasis
			remap=bf>Kingston ethernet controller.</emphasis>
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="mailto:jack@diamond.xtalwind.net">Jack
			O'Neill</ulink> donated an <emphasis remap=bf>NCR
			53C875 SCSI controller card</emphasis>.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="mailto:ulf@Alameda.net">Ulf
			Zimmermann</ulink> of <ulink
			URL="http://www.Alameda.net">Alameda Networks</ulink>
		      donated <emphasis remap=bf>128MB of memory</emphasis>, a
		      <emphasis remap=bf>4 Gb disk drive and the
			case.</emphasis></para>
		  </listitem>
		  
		</itemizedlist>
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis remap=bf>Direct funding:</emphasis>
	      </para>
	      
	      <para>The following individuals and businesses have generously
		contributed direct funding to the project:</para>
	      
	      <para>
		<itemizedlist>
		  
		  <listitem>
		    <para><ulink
			URL="mailto:ANDRSN@HOOVER.STANFORD.EDU">Annelise
			Anderson</ulink>
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="mailto:dillon@best.net">Matt
			Dillon</ulink>
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="http://www.epilogue.com/">Epilogue
			Technology Corporation</ulink>
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>Sean Eric Fagan
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="mailto:gmarco@masternet.it">Gianmarco
			Giovannelli</ulink>
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="mailto:joeg@truenorth.org">Josef C.
			Grosch</ulink>
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="mailto:chuckr@freebsd.org">Chuck
			Robey</ulink>
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="mailto:ken@stox.sa.enteract.com">Kenneth
			P. Stox</ulink> of <ulink
			URL="http://www.imagescape.com">Imaginary Landscape,
			LLC.</ulink>
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="mailto:dk@dog.farm.org">Dmitry S.
			Kohmanyuk</ulink>
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="http://www.cdrom.co.jp/">Laser5</ulink>
		      of Japan (a portion of the profits from sales of their
		      various FreeBSD CD-ROMs.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="http://www.mmjp.or.jp/fuki/">Fuki
			Shuppan Publishing Co.</ulink> donated a portion of
		      their profits from <emphasis>Hajimete no
			FreeBSD</emphasis> (FreeBSD, Getting started) to the
		      FreeBSD and XFree86 projects.</para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="http://www.ascii.co.jp/">ASCII
			Corp.</ulink> donated a portion of their profits from
		      several FreeBSD-related books to the FreeBSD
		      project.</para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="http://www.yokogawa.co.jp/">Yokogawa
			Electric Corp</ulink> has generously donated
		      significant funding to the FreeBSD project.</para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink
			URL="http://www.buffnet.net/">BuffNET</ulink></para>
		  </listitem>
		  
		</itemizedlist>
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis remap=bf>Hardware contributors:</emphasis>
	      </para>
	      
	      <para>The following individuals and businesses have generously
		contributed hardware for testing and device driver
		development/support:</para>
	      
	      <para>
		<itemizedlist>
		  
		  <listitem>
		    <para>Walnut Creek CDROM for providing the Pentium P5-90
		      and 486/DX2-66 EISA/VL systems that are being used for
		      our development work, to say nothing of the network
		      access and other donations of hardware resources.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>TRW Financial Systems, Inc. provided 130 PCs, three
		      68 GB fileservers, twelve Ethernets, two routers and an
		      ATM switch for debugging the diskless code.  They also
		      keep a couple of FreeBSD hackers alive and busy.
		      Thanks!
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>Dermot McDonnell donated the Toshiba XM3401B CDROM
		      drive currently used in freefall.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>&a.chuck; contributed his floppy tape streamer for
		      experimental work.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>Larry Altneu <emphasis remap=tt><ulink
			  URL="mailto:larry@ALR.COM">&lt;larry@ALR.COM&gt;</ulink></emphasis>, and &a.wilko;, provided Wangtek and Archive QIC-02 tape drives in order to improve the <emphasis remap=tt>wt</emphasis> driver.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para>Ernst Winter <emphasis remap=tt><ulink
			  URL="mailto:ewinter@lobo.muc.de">&lt;ewinter@lobo.muc.de&gt;</ulink></emphasis> contributed a 2.88 MB floppy drive to the project.  This will hopefully increase the pressure for rewriting the floppy disk driver. ;-)
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="http://www.tekram.com">Tekram
			Technologies</ulink> sent one each of their DC-390,
		      DC-390U and DC-390F FAST and ULTRA SCSI host adapter
		      cards for regression testing of the NCR and AMD drivers
		      with their cards. They are also to be applauded for
		      making driver sources for free operating systems
		      available from their  FTP server <ulink
			URL="ftp://ftp.tekram.com/scsi/FreeBSD">ftp://ftp.tekram.com/scsi/FreeBSD</ulink>.
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="mailto:lma@varesearch.com">Larry M.
			Augustin</ulink> contributed not only a Symbios
		      Sym8751S SCSI card, but also a set of data books,
		      including one about the forthcoming Sym53c895 chip with
		      Ultra-2 and LVD support, and the latest programming
		      manual with information on how to safely use the
		      advanced features of the latest  Symbios SCSI chips.
		      Thanks a lot!
		    </para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="mailto:kuku@freebsd.org">Christoph
			Kukulies</ulink> donated an FX120 12 speed Mitsumi
		      CDROM drive for IDE CDROM driver development.
		    </para>
		  </listitem>
		  
		</itemizedlist>
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis remap=bf>Special contributors:</emphasis>
	      </para>
	      
	      <para>
		<itemizedlist>
		  
		  <listitem>
		    <para><ulink URL="http://www.cdrom.com">Walnut Creek
			CDROM</ulink> has donated almost more than we can say
		      (see the
		      <xref linkend="history" remap="history"> document for
		      more details). In particular, we would like to thank
		      them for the original hardware used for
		      <filename>freefall.FreeBSD.ORG</filename>, our primary
		      development machine, and for
		      <filename>thud.FreeBSD.ORG</filename>, a testing and
		      build box. We are also indebted to them for funding
		      various contributors over the years and providing us
		      with unrestricted use of their T1 connection to the
		      Internet.</para>
		  </listitem>
		  
		  <listitem>
		    <para>The <ulink
			URL="http://www.interface-business.de">interface
			business GmbH, Dresden</ulink> has been patiently
		      supporting &a.joerg; who has often preferred FreeBSD
		      work over paywork, and used to fall back to their (quite
		      expensive) EUnet Internet connection whenever his
		      private connection became too slow or flakey to work
		      with it...</para>
		  </listitem>
		  
		  <listitem>
		    <para><ulink URL="http://www.bsdi.com">Berkeley Software
			Design, Inc.</ulink> has contributed their DOS
		      emulator code to the remaining BSD world, which is used
		      in the <emphasis>dosemu</emphasis> command.</para>
		  </listitem>
		  
		</itemizedlist>
	      </para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
      
      <sect1>
	<title>Derived Software Contributors</title>
	
	<para>This software was originally derived from William F. Jolitz's
	  386BSD release 0.1, though almost none of the original 386BSD
	  specific code remains.  This software has been essentially
	  re-implemented from the 4.4BSD-Lite release provided by the Computer
	  Science Research Group (CSRG) at the University of California,
	  Berkeley and associated academic contributors.</para>
	
	<para>There are also portions of NetBSD that have been integrated into
	  FreeBSD as well, and we would therefore like to thank all the
	  contributors to NetBSD for their work.</para>
	
      </sect1>
      
      <sect1
	id="contrib-additional">
	<title>Additional FreeBSD Contributors</title>
	
	<para>(in alphabetical order by first name):</para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>A JOSEPH KOSHY <emphasis remap=tt><ulink
		    URL="mailto:koshy@india.hp.com">&lt;koshy@india.hp.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>ABURAYA Ryushirou <emphasis remap=tt><ulink
		    URL="mailto:rewsirow@ff.iij4u.or.jp">&lt;rewsirow@ff.iij4u.or.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Ada T Lim <emphasis remap=tt><ulink
		    URL="mailto:ada@bsd.org">&lt;ada@bsd.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Adam Glass <emphasis remap=tt><ulink
		    URL="mailto:glass@postgres.berkeley.edu">&lt;glass@postgres.berkeley.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Adrian T. Filipi-Martin <emphasis remap=tt><ulink
		    URL="mailto:atf3r@agate.cs.virginia.edu">&lt;atf3r@agate.cs.virginia.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Akito Fujita <emphasis remap=tt><ulink
		    URL="mailto:fujita@zoo.ncl.omron.co.jp">&lt;fujita@zoo.ncl.omron.co.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Alain Kalker <emphasis remap=tt><ulink
		    URL="mailto:A.C.P.M.Kalker@student.utwente.nl">&lt;A.C.P.M.Kalker@student.utwente.nl&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Alan Cox <emphasis remap=tt><ulink
		    URL="mailto:alc@cs.rice.edu">&lt;alc@cs.rice.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Andreas Kohout <emphasis remap=tt><ulink
		    URL="mailto:shanee@rabbit.augusta.de">&lt;shanee@rabbit.augusta.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Andreas Lohr <emphasis remap=tt><ulink
		    URL="mailto:andreas@marvin.RoBIN.de">&lt;andreas@marvin.RoBIN.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Andrew Gordon <emphasis remap=tt><ulink
		    URL="mailto:andrew.gordon@net-tel.co.uk">&lt;andrew.gordon@net-tel.co.uk&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Andrew Herbert <emphasis remap=tt><ulink
		    URL="mailto:andrew@werple.apana.org.au">&lt;andrew@werple.apana.org.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Andrew McRae <emphasis remap=tt><ulink
		    URL="mailto:amcrae@cisco.com">&lt;amcrae@cisco.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Andrew Moore <emphasis remap=tt><ulink
		    URL="mailto:alm@FreeBSD.org">&lt;alm@FreeBSD.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Andrew Stevenson <emphasis remap=tt><ulink
		    URL="mailto:andrew@ugh.net.au">&lt;andrew@ugh.net.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Andrew V. Stesin <emphasis remap=tt><ulink
		    URL="mailto:stesin@elvisti.kiev.ua">&lt;stesin@elvisti.kiev.ua&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Andrey Zakhvatov <emphasis remap=tt><ulink
		    URL="mailto:andy@icc.surw.chel.su">&lt;andy@icc.surw.chel.su&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Andy Whitcroft <emphasis remap=tt><ulink
		    URL="mailto:andy@sarc.city.ac.uk">&lt;andy@sarc.city.ac.uk&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Angelo Turetta <emphasis remap=tt><ulink
		    URL="mailto:ATuretta@stylo.it">&lt;ATuretta@stylo.it&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Anthony Yee-Hang Chan <emphasis remap=tt><ulink
		    URL="mailto:yeehang@netcom.com">&lt;yeehang@netcom.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Ari Suutari <emphasis remap=tt><ulink
		    URL="mailto:ari@suutari.iki.fi">&lt;ari@suutari.iki.fi&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Brent J. Nordquist <emphasis remap=tt><ulink
		    URL="mailto:bjn@visi.com">&lt;bjn@visi.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Bernd Rosauer <emphasis remap=tt><ulink
		    URL="mailto:br@schiele-ct.de">&lt;br@schiele-ct.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Bill Kish <emphasis remap=tt><ulink
		    URL="mailto:kish@osf.org">&lt;kish@osf.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.wlloyd;</para>
	    </listitem>
	    
	    <listitem>
	      <para>Bob Wilcox <emphasis remap=tt><ulink
		    URL="mailto:bob@obiwan.uucp">&lt;bob@obiwan.uucp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Boyd Faulkner <emphasis remap=tt><ulink
		    URL="mailto:faulkner@mpd.tandem.com">&lt;faulkner@mpd.tandem.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Brent J. Nordquist <emphasis remap=tt><ulink
		    URL="mailto:bjn@visi.com">&lt;bjn@visi.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Brett Taylor <emphasis remap=tt><ulink
		    URL="mailto:brett@peloton.physics.montana.edu">&lt;brett@peloton.physics.montana.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Brian Clapper <emphasis remap=tt><ulink
		    URL="mailto:bmc@willscreek.com">&lt;bmc@willscreek.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Brian Handy <emphasis remap=tt><ulink
		    URL="mailto:handy@lambic.space.lockheed.com">&lt;handy@lambic.space.lockheed.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Brian Tao <emphasis remap=tt><ulink
		    URL="mailto:taob@risc.org">&lt;taob@risc.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Brion Moss <emphasis remap=tt><ulink
		    URL="mailto:brion@queeg.com">&lt;brion@queeg.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Bruce Gingery <emphasis remap=tt><ulink
		    URL="mailto:bgingery@gtcs.com">&lt;bgingery@gtcs.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Carey Jones <emphasis remap=tt><ulink
		    URL="mailto:mcj@acquiesce.org">&lt;mcj@acquiesce.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Carl Fongheiser <emphasis remap=tt><ulink
		    URL="mailto:cmf@netins.net">&lt;cmf@netins.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Charles Hannum <emphasis remap=tt><ulink
		    URL="mailto:mycroft@ai.mit.edu">&lt;mycroft@ai.mit.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Charles Mott <emphasis remap=tt><ulink
		    URL="mailto:cmott@srv.net">&lt;cmott@srv.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Chet Ramey <emphasis remap=tt><ulink
		    URL="mailto:chet@odin.INS.CWRU.Edu">&lt;chet@odin.INS.CWRU.Edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Chris Dabrowski <emphasis remap=tt><ulink URL="mailto:
		    chris@vader.org">&lt;
		    chris@vader.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Chris G. Demetriou <emphasis remap=tt><ulink
		    URL="mailto:cgd@postgres.berkeley.edu">&lt;cgd@postgres.berkeley.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Chris Shenton <emphasis remap=tt><ulink
		    URL="mailto:cshenton@angst.it.hq.nasa.gov">&lt;cshenton@angst.it.hq.nasa.gov&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Chris Stenton <emphasis remap=tt><ulink
		    URL="mailto:jacs@gnome.co.uk">&lt;jacs@gnome.co.uk&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Chris Timmons <emphasis remap=tt><ulink
		    URL="mailto:skynyrd@opus.cts.cwu.edu">&lt;skynyrd@opus.cts.cwu.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Chris Torek <emphasis remap=tt><ulink
		    URL="mailto:torek@ee.lbl.gov">&lt;torek@ee.lbl.gov&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Christian Gusenbauer <emphasis remap=tt><ulink
		    URL="mailto:cg@fimp01.fim.uni-linz.ac.at">&lt;cg@fimp01.fim.uni-linz.ac.at&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Christian Haury <emphasis remap=tt><ulink
		    URL="mailto:Christian.Haury@sagem.fr">&lt;Christian.Haury@sagem.fr&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Christoph Robitschko <emphasis remap=tt><ulink
		    URL="mailto:chmr@edvz.tu-graz.ac.at">&lt;chmr@edvz.tu-graz.ac.at&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Choi Jun Ho <emphasis remap=tt><ulink
		    URL="mailto:junker@jazz.snu.ac.kr">&lt;junker@jazz.snu.ac.kr&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Chuck Hein <emphasis remap=tt><ulink
		    URL="mailto:chein@cisco.com">&lt;chein@cisco.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Conrad Sabatier <emphasis remap=tt><ulink
		    URL="mailto:conrads@neosoft.com">&lt;conrads@neosoft.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Cornelis van der Laan <emphasis remap=tt><ulink
		    URL="mailto:nils@guru.ims.uni-stuttgart.de">&lt;nils@guru.ims.uni-stuttgart.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Craig Struble <emphasis remap=tt><ulink
		    URL="mailto:cstruble@vt.edu">&lt;cstruble@vt.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Cristian Ferretti <emphasis remap=tt><ulink
		    URL="mailto:cfs@riemann.mat.puc.cl">&lt;cfs@riemann.mat.puc.cl&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Curt Mayer <emphasis remap=tt><ulink
		    URL="mailto:curt@toad.com">&lt;curt@toad.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Dai Ishijima <emphasis remap=tt><ulink
		    URL="mailto:ishijima@tri.pref.osaka.jp">&lt;ishijima@tri.pref.osaka.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Dan Cross <emphasis remap=tt><ulink
		    URL="mailto:tenser@spitfire.ecsel.psu.edu">&lt;tenser@spitfire.ecsel.psu.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Daniel Baker <emphasis remap=tt><ulink
		    URL="mailto:dbaker@crash.ops.neosoft.com">&lt;dbaker@crash.ops.neosoft.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Daniel M. Eischen <emphasis remap=tt><ulink
		    URL="mailto:deischen@iworks.InterWorks.org">&lt;deischen@iworks.InterWorks.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Daniel O'Connor <emphasis remap=tt><ulink
		    URL="mailto:doconnor@gsoft.com.au">&lt;doconnor@gsoft.com.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Danny J. Zerkel <emphasis remap=tt><ulink
		    URL="mailto:dzerkel@feephi.phofarm.com">&lt;dzerkel@feephi.phofarm.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Dave Bodenstab <emphasis remap=tt><ulink
		    URL="mailto:imdave@synet.net">&lt;imdave@synet.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Dave Burgess <emphasis remap=tt><ulink
		    URL="mailto:burgess@hrd769.brooks.af.mil">&lt;burgess@hrd769.brooks.af.mil&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Dave Chapeskie <emphasis remap=tt><ulink
		    URL="mailto:dchapes@zeus.leitch.com">&lt;dchapes@zeus.leitch.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Dave Edmondson <emphasis remap=tt><ulink
		    URL="mailto:davided@sco.com">&lt;davided@sco.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Dave Rivers <emphasis remap=tt><ulink
		    URL="mailto:rivers@ponds.uucp">&lt;rivers@ponds.uucp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>David A. Bader <emphasis remap=tt><ulink
		    URL="mailto:dbader@umiacs.umd.edu">&lt;dbader@umiacs.umd.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>David Dawes <emphasis remap=tt><ulink
		    URL="mailto:dawes@physics.su.OZ.AU">&lt;dawes@physics.su.OZ.AU&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>David Holloway <emphasis remap=tt><ulink
		    URL="mailto:daveh@gwythaint.tamis.com">&lt;daveh@gwythaint.tamis.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>David Leonard <emphasis remap=tt><ulink
		    URL="mailto:d@scry.dstc.edu.au">&lt;d@scry.dstc.edu.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Dean Huxley <emphasis remap=tt><ulink
		    URL="mailto:dean@fsa.ca">&lt;dean@fsa.ca&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Dirk Froemberg <emphasis remap=tt><ulink
		    URL="mailto:dirk@hal.in-berlin.de">&lt;dirk@hal.in-berlin.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Dmitrij Tejblum <emphasis remap=tt><ulink
		    URL="mailto:dima@tejblum.dnttm.rssi.ru">&lt;dima@tejblum.dnttm.rssi.ru&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Dmitry Kohmanyuk <emphasis remap=tt><ulink
		    URL="mailto:dk@farm.org">&lt;dk@farm.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.whiteside;</para>
	    </listitem>
	    
	    <listitem>
	      <para>Don Yuniskis <emphasis remap=tt><ulink
		    URL="mailto:dgy@rtd.com">&lt;dgy@rtd.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Donald Burr <emphasis remap=tt><ulink
		    URL="mailto:d_burr@ix.netcom.com">&lt;d_burr@ix.netcom.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Doug Ambrisko <emphasis remap=tt><ulink
		    URL="mailto:ambrisko@ambrisko.roble.com">&lt;ambrisko@ambrisko.roble.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Douglas Carmichael <emphasis remap=tt><ulink
		    URL="mailto:dcarmich@mcs.com">&lt;dcarmich@mcs.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Eiji-usagi-MATSUmoto <emphasis remap=tt><ulink
		    URL="mailto:usagi@ruby.club.or.jp">&lt;usagi@ruby.club.or.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>ELISA Font Project</para>
	    </listitem>
	    
	    <listitem>
	      <para>Eric A. Griff <emphasis remap=tt><ulink
		    URL="mailto:eagriff@global2000.net">&lt;eagriff@global2000.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Eric Blood <emphasis remap=tt><ulink
		    URL="mailto:eblood@cs.unr.edu">&lt;eblood@cs.unr.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Eric J. Chet <emphasis remap=tt><ulink
		    URL="mailto:ejc@bazzle.com">&lt;ejc@bazzle.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Eric J. Schwertfeger <emphasis remap=tt><ulink
		    URL="mailto:eric@cybernut.com">&lt;eric@cybernut.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Francis M J Hsieh <emphasis remap=tt><ulink
		    URL="mailto:mjshieh@life.nthu.edu.tw">&lt;mjhsieh@life.nthu.edu.tw&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Frank Bartels <emphasis remap=tt><ulink
		    URL="mailto:knarf@camelot.de">&lt;knarf@camelot.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Frank Chen Hsiung Chan <emphasis remap=tt><ulink
		    URL="mailto:frankch@waru.life.nthu.edu.tw">&lt;frankch@waru.life.nthu.edu.tw&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Frank Maclachlan <emphasis remap=tt><ulink
		    URL="mailto:fpm@crash.cts.com">&lt;fpm@crash.cts.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Frank Nobis <emphasis remap=tt><ulink
		    URL="mailto:fn@trinity.radio-do.de">&lt;fn@trinity.radio-do.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>FUJIMOTO Kensaku <emphasis remap=tt><ulink
		    URL="mailto:fujimoto@oscar.elec.waseda.ac.jp">&lt;fujimoto@oscar.elec.waseda.ac.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>FURUSAWA Kazuhisa <emphasis remap=tt><ulink
		    URL="mailto:furusawa@com.cs.osakafu-u.ac.jp">&lt;furusawa@com.cs.osakafu-u.ac.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Gary A. Browning <emphasis remap=tt><ulink
		    URL="mailto:gab10@griffcd.amdahl.com">&lt;gab10@griffcd.amdahl.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Gary Kline <emphasis remap=tt><ulink
		    URL="mailto:kline@thought.org">&lt;kline@thought.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Gerard Roudier <emphasis remap=tt><ulink
		    URL="mailto:groudier@club-internet.fr">&lt;groudier@club-internet.fr&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Greg Ungerer <emphasis remap=tt><ulink
		    URL="mailto:gerg@stallion.oz.au">&lt;gerg@stallion.oz.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Harlan Stenn <emphasis remap=tt><ulink
		    URL="mailto:Harlan.Stenn@pfcs.com">&lt;Harlan.Stenn@pfcs.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Havard Eidnes <emphasis remap=tt><ulink
		    URL="mailto:Havard.Eidnes@runit.sintef.no">&lt;Havard.Eidnes@runit.sintef.no&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Hideaki Ohmon <emphasis remap=tt><ulink
		    URL="mailto:ohmon@tom.sfc.keio.ac.jp">&lt;ohmon@tom.sfc.keio.ac.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Hidekazu Kuroki <emphasis remap=tt><ulink
		    URL="mailto:hidekazu@cs.titech.ac.jp">&lt;hidekazu@cs.titech.ac.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Hidetoshi Shimokawa <emphasis remap=tt><ulink
		    URL="mailto:simokawa@sat.t.u-tokyo.ac.jp">&lt;simokawa@sat.t.u-tokyo.ac.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Hideyuki Suzuki <emphasis remap=tt><ulink
		    URL="mailto:hideyuki@sat.t.u-tokyo.ac.jp">&lt;hideyuki@sat.t.u-tokyo.ac.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Hironori Ikura <emphasis remap=tt><ulink
		    URL="mailto:hikura@kaisei.org">&lt;hikura@kaisei.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Holger Veit <emphasis remap=tt><ulink
		    URL="mailto:Holger.Veit@gmd.de">&lt;Holger.Veit@gmd.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Hung-Chi Chu <emphasis remap=tt><ulink
		    URL="mailto:hcchu@r350.ee.ntu.edu.tw">&lt;hcchu@r350.ee.ntu.edu.tw&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Ian Vaudrey <emphasis remap=tt><ulink
		    URL="mailto:i.vaudrey@bigfoot.com">&lt;i.vaudrey@bigfoot.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Igor Vinokurov <emphasis remap=tt><ulink
		    URL="mailto:igor@zynaps.ru">&lt;igor@zynaps.ru&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Ikuo Nakagawa <emphasis remap=tt><ulink
		    URL="mailto:ikuo@isl.intec.co.jp">&lt;ikuo@isl.intec.co.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>IMAMURA Tomoaki <emphasis remap=tt><ulink
		    URL="mailto:tomoak-i@is.aist-nara.ac.jp">&lt;tomoak-i@is.aist-nara.ac.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Ishii Masahiro</para>
	    </listitem>
	    
	    <listitem>
	      <para> Issei Suzuki<emphasis remap=tt><ulink
		    URL="mailto:issei@t-cnet.or.jp">&lt;issei@t-cnet.or.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Itsuro Saito <emphasis remap=tt><ulink
		    URL="mailto:saito@miv.t.u-tokyo.ac.jp">&lt;saito@miv.t.u-tokyo.ac.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>J. David Lowe <emphasis remap=tt><ulink
		    URL="mailto:lowe@saturn5.com">&lt;lowe@saturn5.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>J.T. Conklin <emphasis remap=tt><ulink
		    URL="mailto:jtc@cygnus.com">&lt;jtc@cygnus.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>James Clark <emphasis remap=tt><ulink
		    URL="mailto:jjc@jclark.com">&lt;jjc@jclark.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>James da Silva <emphasis remap=tt><ulink
		    URL="mailto:jds@cs.umd.edu">&lt;jds@cs.umd.edu&gt;</ulink></emphasis> et al</para>
	    </listitem>
	    
	    <listitem>
	      <para>Janusz Kokot <emphasis remap=tt><ulink
		    URL="mailto:janek@gaja.ipan.lublin.pl">&lt;janek@gaja.ipan.lublin.pl&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Jason Thorpe <emphasis remap=tt><ulink
		    URL="mailto:thorpej@nas.nasa.gov">&lt;thorpej@nas.nasa.gov&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Javier Martin Rueda <emphasis remap=tt><ulink
		    URL="mailto:jmrueda@diatel.upm.es">&lt;jmrueda@diatel.upm.es&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Jeff Bartig <emphasis remap=tt><ulink
		    URL="mailto:jeffb@doit.wisc.edu">&lt;jeffb@doit.wisc.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Jeffrey Wheat <emphasis remap=tt><ulink
		    URL="mailto:jeff@cetlink.net">&lt;jeff@cetlink.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Jian-Da Li <emphasis remap=tt><ulink
		    URL="mailto:jdli@csie.NCTU.edu.tw">&lt;jdli@csie.NCTU.edu.tw&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Jim Binkley <emphasis remap=tt><ulink
		    URL="mailto:jrb@cs.pdx.edu">&lt;jrb@cs.pdx.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Jim Lowe <emphasis remap=tt><ulink
		    URL="mailto:james@cs.uwm.edu">&lt;james@cs.uwm.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Jim Wilson <emphasis remap=tt><ulink
		    URL="mailto:wilson@moria.cygnus.com">&lt;wilson@moria.cygnus.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Joao Carlos Mendes Luis <emphasis remap=tt><ulink
		    URL="mailto:jonny@coppe.ufrj.br">&lt;jonny@coppe.ufrj.br&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Joel Sutton <emphasis remap=tt><ulink
		    URL="mailto:sutton@aardvark.apana.org.au">&lt;sutton@aardvark.apana.org.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Johann Tonsing <emphasis remap=tt><ulink
		    URL="mailto:jtonsing@mikom.csir.co.za">&lt;jtonsing@mikom.csir.co.za&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>John Capo <emphasis remap=tt><ulink
		    URL="mailto:jc@irbs.com">&lt;jc@irbs.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>John Heidemann <emphasis remap=tt><ulink
		    URL="mailto:johnh@isi.edu">&lt;johnh@isi.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>John Perry <emphasis remap=tt><ulink
		    URL="mailto:perry@vishnu.alias.net">&lt;perry@vishnu.alias.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>John Polstra <emphasis remap=tt><ulink
		    URL="mailto:jdp@polstra.com">&lt;jdp@polstra.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>John Rochester <emphasis remap=tt><ulink
		    URL="mailto:jr@cs.mun.ca">&lt;jr@cs.mun.ca&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Josef Karthauser <emphasis remap=tt><ulink
		    URL="mailto:joe@uk.freebsd.org">&lt;joe@uk.freebsd.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Joseph Stein <emphasis remap=tt><ulink
		    URL="mailto:joes@seaport.net">&lt;joes@seaport.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Josh Gilliam <emphasis remap=tt><ulink
		    URL="mailto:josh@quick.net">&lt;josh@quick.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Josh Tiefenbach <emphasis remap=tt><ulink
		    URL="mailto:josh@ican.net">&lt;josh@ican.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Juergen Lock <emphasis remap=tt><ulink
		    URL="mailto:nox@jelal.hb.north.de">&lt;nox@jelal.hb.north.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Juha Inkari <emphasis remap=tt><ulink
		    URL="mailto:inkari@cc.hut.fi">&lt;inkari@cc.hut.fi&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Julian Assange <emphasis remap=tt><ulink
		    URL="mailto:proff@suburbia.net">&lt;proff@suburbia.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Julian Jenkins <emphasis remap=tt><ulink
		    URL="mailto:kaveman@magna.com.au">&lt;kaveman@magna.com.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Julian Stacey <emphasis remap=tt><ulink
		    URL="mailto:jhs@freebsd.org">&lt;jhs@freebsd.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Junichi Satoh <emphasis remap=tt><ulink
		    URL="mailto:junichi@jp.freebsd.org">&lt;junichi@jp.freebsd.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Kapil Chowksey <emphasis remap=tt><ulink
		    URL="mailto:kchowksey@hss.hns.com">&lt;kchowksey@hss.hns.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Kazuhiko Kiriyama <emphasis remap=tt><ulink
		    URL="mailto:kiri@kiri.toba-cmt.ac.jp">&lt;kiri@kiri.toba-cmt.ac.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Keith Bostic <emphasis remap=tt><ulink
		    URL="mailto:bostic@bostic.com">&lt;bostic@bostic.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Keith Moore</para>
	    </listitem>
	    
	    <listitem>
	      <para>Kenneth Monville <emphasis remap=tt><ulink
		    URL="mailto:desmo@bandwidth.org">&lt;desmo@bandwidth.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Kent Vander Velden <emphasis remap=tt><ulink
		    URL="mailto:graphix@iastate.edu">&lt;graphix@iastate.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Kirk McKusick <emphasis remap=tt><ulink
		    URL="mailto:mckusick@mckusick.com">&lt;mckusick@mckusick.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Kiroh HARADA <emphasis remap=tt><ulink
		    URL="mailto:kiroh@kh.rim.or.jp">&lt;kiroh@kh.rim.or.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Koichi Sato <emphasis remap=tt><ulink
		    URL="mailto:copan@ppp.fastnet.or.jp">&lt;copan@ppp.fastnet.or.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Kostya Lukin <emphasis remap=tt><ulink
		    URL="mailto:lukin@okbmei.msk.su">&lt;lukin@okbmei.msk.su&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Kurt Olsen <emphasis remap=tt><ulink
		    URL="mailto:kurto@tiny.mcs.usu.edu">&lt;kurto@tiny.mcs.usu.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Lars Koeller <emphasis remap=tt><ulink
		    URL="mailto:Lars.Koeller@Uni-Bielefeld.DE">&lt;Lars.Koeller@Uni-Bielefeld.DE&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Lucas James <emphasis remap=tt><ulink
		    URL="mailto:Lucas.James@ldjpc.apana.org.au">&lt;Lucas.James@ldjpc.apana.org.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Luigi Rizzo <emphasis remap=tt><ulink
		    URL="mailto:luigi@iet.unipi.it">&lt;luigi@iet.unipi.it&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Makoto MATSUSHITA <emphasis remap=tt><ulink
		    URL="mailto:matusita@jp.freebsd.org">&lt;matusita@jp.freebsd.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Manu Iyengar <emphasis remap=tt><ulink
		    URL="mailto:iyengar@grunthos.pscwa.psca.com">&lt;iyengar@grunthos.pscwa.psca.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Marc Frajola <emphasis remap=tt><ulink
		    URL="mailto:marc@dev.com">&lt;marc@dev.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Marc Ramirez <emphasis remap=tt><ulink
		    URL="mailto:mrami@mramirez.sy.yale.edu">&lt;mrami@mramirez.sy.yale.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Marc Slemko <emphasis remap=tt><ulink
		    URL="mailto:marcs@znep.com">&lt;marcs@znep.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Marc van Kempen <emphasis remap=tt><ulink
		    URL="mailto:wmbfmk@urc.tue.nl">&lt;wmbfmk@urc.tue.nl&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Mario Sergio Fujikawa Ferreira <emphasis remap=tt><ulink
		    URL="mailto:lioux@gns.com.br">&lt;lioux@gns.com.br&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Mark Huizer <emphasis remap=tt><ulink
		    URL="mailto:xaa@stack.nl">&lt;xaa@stack.nl&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Mark J. Taylor <emphasis remap=tt><ulink
		    URL="mailto:mtaylor@cybernet.com">&lt;mtaylor@cybernet.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Mark Krentel <emphasis remap=tt><ulink
		    URL="mailto:krentel@rice.edu">&lt;krentel@rice.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Mark Tinguely <emphasis remap=tt><ulink
		    URL="mailto:tinguely@plains.nodak.edu">&lt;tinguely@plains.nodak.edu&gt;</ulink></emphasis> <emphasis remap=tt><ulink URL="mailto:tinguely@hookie.cs.ndsu.NoDak.edu">&lt;tinguely@hookie.cs.ndsu.NoDak.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Martin Birgmeier</para>
	    </listitem>
	    
	    <listitem>
	      <para>Martti Kuparinen <emphasis remap=tt><ulink
		    URL="mailto:erakupa@kk.etx.ericsson.se">&lt;erakupa@kk.etx.ericsson.se&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Masachika ISHIZUKA <emphasis remap=tt><ulink
		    URL="mailto:ishizuka@isis.min.ntt.jp">&lt;ishizuka@isis.min.ntt.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Mats Lofkvist <emphasis remap=tt><ulink
		    URL="mailto:mal@algonet.se">&lt;mal@algonet.se&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Matt Bartley <emphasis remap=tt><ulink
		    URL="mailto:mbartley@lear35.cytex.com">&lt;mbartley@lear35.cytex.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Matt Thomas <emphasis remap=tt><ulink
		    URL="mailto:thomas@lkg.dec.com">&lt;thomas@lkg.dec.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Matt White <emphasis remap=tt><ulink
		    URL="mailto:mwhite+@CMU.EDU">&lt;mwhite+@CMU.EDU&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Matthew Hunt <emphasis remap=tt><ulink
		    URL="mailto:mph@pobox.com">&lt;mph@pobox.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Matthew N. Dodd <emphasis remap=tt><ulink
		    URL="mailto:winter@jurai.net">&lt;winter@jurai.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Matthew Stein <emphasis remap=tt><ulink
		    URL="mailto:matt@bdd.net">&lt;matt@bdd.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Maurice Castro <emphasis remap=tt><ulink
		    URL="mailto:maurice@planet.serc.rmit.edu.au">&lt;maurice@planet.serc.rmit.edu.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Michael Butschky <emphasis remap=tt><ulink
		    URL="mailto:butsch@computi.erols.com">&lt;butsch@computi.erols.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Michael Elbel <emphasis remap=tt><ulink
		    URL="mailto:me@FreeBSD.ORG">&lt;me@FreeBSD.ORG&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Michael Searle <emphasis remap=tt><ulink
		    URL="mailto:searle@longacre.demon.co.uk">&lt;searle@longacre.demon.co.uk&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Miguel Angel Sagreras <emphasis remap=tt><ulink
		    URL="mailto:msagre@cactus.fi.uba.ar">&lt;msagre@cactus.fi.uba.ar&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Mikael Hybsch <emphasis remap=tt><ulink
		    URL="mailto:micke@dynas.se">&lt;micke@dynas.se&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Mikhail Teterin <emphasis remap=tt><ulink
		    URL="mailto:mi@aldan.ziplink.net">&lt;mi@aldan.ziplink.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Mike McGaughey <emphasis remap=tt><ulink
		    URL="mailto:mmcg@cs.monash.edu.au">&lt;mmcg@cs.monash.edu.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Mike Peck <emphasis remap=tt><ulink
		    URL="mailto:mike@binghamton.edu">&lt;mike@binghamton.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Ming-I Hseh <emphasis remap=tt><ulink
		    URL="mailto:PA@FreeBSD.ee.Ntu.edu.TW">&lt;PA@FreeBSD.ee.Ntu.edu.TW&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>MITA Yoshio <emphasis remap=tt><ulink
		    URL="mailto:mita@jp.FreeBSD.ORG">&lt;mita@jp.FreeBSD.ORG&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>MOROHOSHI Akihiko <emphasis remap=tt><ulink
		    URL="mailto:moro@race.u-tokyo.ac.jp">&lt;moro@race.u-tokyo.ac.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Murray Stokely <emphasis remap=tt><ulink
		    URL="mailto:murray@cdrom.com">&lt;murray@cdrom.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>NAKAMURA Kazushi <emphasis remap=tt><ulink
		    URL="mailto:nkazushi@highway.or.jp">&lt;nkazushi@highway.or.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Naoki Hamada <emphasis remap=tt><ulink
		    URL="mailto:nao@tom-yam.or.jp">&lt;nao@tom-yam.or.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Narvi <emphasis remap=tt><ulink
		    URL="mailto:narvi@haldjas.folklore.ee">&lt;narvi@haldjas.folklore.ee&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>NIIMI Satoshi <emphasis remap=tt><ulink
		    URL="mailto:sa2c@and.or.jp">&lt;sa2c@and.or.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Nick Sayer <emphasis remap=tt><ulink
		    URL="mailto:nsayer@quack.kfu.com">&lt;nsayer@quack.kfu.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Nicolas Souchu <emphasis remap=tt><ulink
		    URL="mailto:Nicolas.Souchu@prism.uvsq.fr">&lt;Nicolas.Souchu@prism.uvsq.fr&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Nisha Talagala <emphasis remap=tt><ulink
		    URL="mailto:nisha@cs.berkeley.edu">&lt;nisha@cs.berkeley.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Nobuhiro Yasutomi <emphasis remap=tt><ulink
		    URL="mailto:nobu@psrc.isac.co.jp">&lt;nobu@psrc.isac.co.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Nobuyuki Koganemaru <emphasis remap=tt><ulink
		    URL="mailto:kogane@kces.koganemaru.co.jp">&lt;kogane@kces.koganemaru.co.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Noritaka Ishizumi <emphasis remap=tt><ulink
		    URL="mailto:graphite@jp.FreeBSD.ORG">&lt;graphite@jp.FreeBSD.ORG&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Oliver Fromme <emphasis remap=tt><ulink
		    URL="mailto:oliver.fromme@heim3.tu-clausthal.de">&lt;oliver.fromme@heim3.tu-clausthal.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Oliver Laumann <emphasis remap=tt><ulink
		    URL="mailto:net@informatik.uni-bremen.de">&lt;net@informatik.uni-bremen.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Oliver Oberdorf <emphasis remap=tt><ulink
		    URL="mailto:oly@world.std.com">&lt;oly@world.std.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Paul Fox <emphasis remap=tt><ulink
		    URL="mailto:pgf@foxharp.boston.ma.us">&lt;pgf@foxharp.boston.ma.us&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Paul Kranenburg <emphasis remap=tt><ulink
		    URL="mailto:pk@cs.few.eur.nl">&lt;pk@cs.few.eur.nl&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Paul Mackerras <emphasis remap=tt><ulink
		    URL="mailto:paulus@cs.anu.edu.au">&lt;paulus@cs.anu.edu.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Paulo Menezes <emphasis remap=tt><ulink
		    URL="mailto:paulo@isr.uc.pt">&lt;paulo@isr.uc.pt&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Paul T. Root <emphasis remap=tt><ulink
		    URL="mailto:proot@horton.iaces.com">&lt;proot@horton.iaces.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Pedro Giffuni <emphasis remap=tt><ulink
		    URL="mailto:giffunip@asme.org">&lt;giffunip@asme.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Pedro A M Vazquez <emphasis remap=tt><ulink
		    URL="mailto:vazquez@IQM.Unicamp.BR">&lt;vazquez@IQM.Unicamp.BR&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Peter Cornelius <emphasis remap=tt><ulink
		    URL="mailto:pc@inr.fzk.de">&lt;pc@inr.fzk.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Peter Haight <emphasis remap=tt><ulink
		    URL="mailto:peterh@prognet.com">&lt;peterh@prognet.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Peter Hawkins <emphasis remap=tt><ulink
		    URL="mailto:peter@rhiannon.clari.net.au">&lt;peter@rhiannon.clari.net.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Peter Stubbs <emphasis remap=tt><ulink
		    URL="mailto:PETERS@staidan.qld.edu.au">&lt;PETERS@staidan.qld.edu.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Pierre Beyssac <emphasis remap=tt><ulink
		    URL="mailto:pb@fasterix.freenix.org">&lt;bp@fasterix.freenix.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Phil Maker <emphasis remap=tt><ulink
		    URL="mailto:pjm@cs.ntu.edu.au">&lt;pjm@cs.ntu.edu.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>R. Kym Horsell</para>
	    </listitem>
	    
	    <listitem>
	      <para>Randall Hopper <emphasis remap=tt><ulink
		    URL="mailto:rhh@stealth.ct.picker.com">&lt;rhh@stealth.ct.picker.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Richard Hwang <emphasis remap=tt><ulink
		    URL="mailto:rhwang@bigpanda.com">&lt;rhwang@bigpanda.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Richard Seaman, Jr. <emphasis remap=tt><ulink
		    URL="mailto:dick@tar.com">&lt;dick@tar.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Richard Stallman <emphasis remap=tt><ulink
		    URL="mailto:rms@gnu.ai.mit.edu">&lt;rms@gnu.ai.mit.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Richard Wiwatowski <emphasis remap=tt><ulink
		    URL="mailto:rjwiwat@adelaide.on.net">&lt;rjwiwat@adelaide.on.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Rob Mallory <emphasis remap=tt><ulink
		    URL="mailto:rmallory@csusb.edu">&lt;rmallory@csusb.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Rob Shady <emphasis remap=tt><ulink
		    URL="mailto:rls@id.net">&lt;rls@id.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Rob Snow <emphasis remap=tt><ulink
		    URL="mailto:rsnow@txdirect.net">&lt;rsnow@txdirect.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Robert Sanders <emphasis remap=tt><ulink
		    URL="mailto:rsanders@mindspring.com">&lt;rsanders@mindspring.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Robert Withrow <emphasis remap=tt><ulink
		    URL="mailto:witr@rwwa.com">&lt;witr@rwwa.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Ronald Kuehn <emphasis remap=tt><ulink
		    URL="mailto:kuehn@rz.tu-clausthal.de">&lt;kuehn@rz.tu-clausthal.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Roland Jesse <emphasis remap=tt><ulink
		    URL="mailto:jesse@cs.uni-magdeburg.de">&lt;jesse@cs.uni-magdeburg.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Ruslan Shevchenko <emphasis remap=tt><ulink
		    URL="mailto:rssh@cki.ipri.kiev.ua">&lt;rssh@cki.ipri.kiev.ua&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Samuel Lam <emphasis remap=tt><ulink
		    URL="mailto:skl@ScalableNetwork.com">&lt;skl@ScalableNetwork.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Sander Vesik <emphasis remap=tt><ulink
		    URL="mailto:sander@haldjas.folklore.ee">&lt;sander@haldjas.folklore.ee&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Sandro Sigala <emphasis remap=tt><ulink
		    URL="mailto:ssigala@globalnet.it">&lt;ssigala@globalnet.it&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Sascha Blank <emphasis remap=tt><ulink
		    URL="mailto:blank@fox.uni-trier.de">&lt;blank@fox.uni-trier.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Sascha Wildner <emphasis remap=tt><ulink
		    URL="mailto:swildner@channelz.GUN.de">&lt;swildner@channelz.GUN.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Satoshi Taoka <emphasis remap=tt><ulink
		    URL="mailto:taoka@infonets.hiroshima-u.ac.jp">&lt;taoka@infonets.hiroshima-u.ac.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Scott Blachowicz <emphasis remap=tt><ulink
		    URL="mailto:scott.blachowicz@seaslug.org">&lt;scott.blachowicz@seaslug.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Scott A. Kenney <emphasis remap=tt><ulink
		    URL="mailto:saken@rmta.ml.org">&lt;saken@rmta.ml.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Serge V. Vakulenko <emphasis remap=tt><ulink
		    URL="mailto:vak@zebub.msk.su">&lt;vak@zebub.msk.su&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Sheldon Hearn <emphasis remap=tt><ulink
		    URL="mailto:axl@iafrica.com">&lt;axl@iafrica.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Simon Marlow <emphasis remap=tt><ulink
		    URL="mailto:simonm@dcs.gla.ac.uk">&lt;simonm@dcs.gla.ac.uk&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Slaven Rezic (Tomic) <emphasis remap=tt><ulink
		    URL="mailto:eserte@cs.tu-berlin.de">&lt;eserte@cs.tu-berlin.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Soren Dayton <emphasis remap=tt><ulink
		    URL="mailto:csdayton@midway.uchicago.edu">&lt;csdayton@midway.uchicago.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Soren Dossing <emphasis remap=tt><ulink
		    URL="mailto:sauber@netcom.com">&lt;sauber@netcom.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Stefan Moeding <emphasis remap=tt><ulink
		    URL="mailto:moeding@bn.DeTeMobil.de">&lt;moeding@bn.DeTeMobil.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Stephane Legrand <emphasis remap=tt><ulink
		    URL="mailto:stephane@lituus.fr">&lt;stephane@lituus.fr&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Stephen J. Roznowski <emphasis remap=tt><ulink
		    URL="mailto:sjr@home.net">&lt;sjr@home.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Steve Gerakines <emphasis remap=tt><ulink
		    URL="mailto:steve2@genesis.tiac.net">&lt;steve2@genesis.tiac.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Suzuki Yoshiaki <emphasis remap=tt><ulink
		    URL="mailto:zensyo@ann.tama.kawasaki.jp">&lt;zensyo@ann.tama.kawasaki.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Tadashi Kumano <emphasis remap=tt><ulink
		    URL="mailto:kumano@strl.nhk.or.jp">&lt;kumano@strl.nhk.or.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Taguchi Takeshi <emphasis remap=tt><ulink
		    URL="mailto:taguchi@tohoku.iij.ad.jp">&lt;taguchi@tohoku.iij.ad.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Takayuki Ariga <emphasis remap=tt><ulink
		    URL="mailto:a00821@cc.hc.keio.ac.jp">&lt;a00821@cc.hc.keio.ac.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Terry Lambert <emphasis remap=tt><ulink
		    URL="mailto:terry@lambert.org">&lt;terry@lambert.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Terry Lee <emphasis remap=tt><ulink
		    URL="mailto:terry@uivlsi.csl.uiuc.edu">&lt;terry@uivlsi.csl.uiuc.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Tetsuya Furukawa <emphasis remap=tt><ulink
		    URL="mailto:tetsuya@secom-sis.co.jp">&lt;tetsuya@secom-sis.co.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Theo Deraadt <emphasis remap=tt><ulink
		    URL="mailto:deraadt@fsa.ca">&lt;deraadt@fsa.ca&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Thomas K&ouml;nig <emphasis remap=tt><ulink
		    URL="mailto:Thomas.Koenig@ciw.uni-karlsruhe.de">&lt;Thomas.Koenig@ciw.uni-karlsruhe.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>&THORN;&oacute;r&eth;ur &Iacute;varsson <emphasis
		  remap=tt><ulink
		    URL="mailto:totii@est.is">&lt;totii@est.is&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Tim Kientzle <emphasis remap=tt><ulink
		    URL="mailto:kientzle@netcom.com">&lt;kientzle@netcom.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Tim Wilkinson <emphasis remap=tt><ulink
		    URL="mailto:tim@sarc.city.ac.uk">&lt;tim@sarc.city.ac.uk&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Tom Samplonius <emphasis remap=tt><ulink
		    URL="mailto:tom@misery.sdf.com">&lt;tom@misery.sdf.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Torbjorn Granlund <emphasis remap=tt><ulink
		    URL="mailto:tege@matematik.su.se">&lt;tege@matematik.su.se&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Toshihiro Kanda <emphasis remap=tt><ulink
		    URL="mailto:candy@fct.kgc.co.jp">&lt;candy@fct.kgc.co.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Trefor S. <emphasis remap=tt><ulink
		    URL="mailto:trefor@flevel.co.uk">&lt;trefor@flevel.co.uk&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Ville Eerola <emphasis remap=tt><ulink
		    URL="mailto:ve@sci.fi">&lt;ve@sci.fi&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Werner Griessl <emphasis remap=tt><ulink
		    URL="mailto:werner@btp1da.phy.uni-bayreuth.de">&lt;werner@btp1da.phy.uni-bayreuth.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Wes Santee <emphasis remap=tt><ulink
		    URL="mailto:wsantee@wsantee.oz.net">&lt;wsantee@wsantee.oz.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Wilko Bulte <emphasis remap=tt><ulink
		    URL="mailto:wilko@yedi.iaf.nl">&lt;wilko@yedi.iaf.nl&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Wolfgang Stanglmeier <emphasis remap=tt><ulink
		    URL="mailto:wolf@kintaro.cologne.de">&lt;wolf@kintaro.cologne.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Wu Ching-hong <emphasis remap=tt><ulink
		    URL="mailto:woju@FreeBSD.ee.Ntu.edu.TW">&lt;woju@FreeBSD.ee.Ntu.edu.TW&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Yen-Shuo Su <emphasis remap=tt><ulink
		    URL="mailto:yssu@CCCA.NCTU.edu.tw">&lt;yssu@CCCA.NCTU.edu.tw&gt;</ulink></emphasis> </para>
	    </listitem>
	    
	    <listitem>
	      <para>Yoshiaki Uchikawa <emphasis remap=tt><ulink
		    URL="mailto:yoshiaki@kt.rim.or.jp">&lt;yoshiaki@kt.rim.or.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Yoshiro Mihira <emphasis remap=tt><ulink
		    URL="mailto:sanpei@yy.cs.keio.ac.jp">&lt;sanpei@yy.cs.keio.ac.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Yukihiro Nakai <emphasis remap=tt><ulink
		    URL="mailto:nakai@mlab.t.u-tokyo.ac.jp">&lt;nakai@mlab.t.u-tokyo.ac.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Yuval Yarom <emphasis remap=tt><ulink
		    URL="mailto:yval@cs.huji.ac.il">&lt;yval@cs.huji.ac.il&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Yves Fonk <emphasis remap=tt><ulink
		    URL="mailto:yves@cpcoup5.tn.tudelft.nl">&lt;yves@cpcoup5.tn.tudelft.nl&gt;</ulink></emphasis></para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
      
      <sect1>
	<title>386BSD Patch Kit Patch Contributors</title>
	
	<para>(in alphabetical order by first name):</para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>Adam Glass <emphasis remap=tt><ulink
		    URL="mailto:glass@postgres.berkeley.edu">&lt;glass@postgres.berkeley.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Adrian Hall <emphasis remap=tt><ulink
		    URL="mailto:adrian@ibmpcug.co.uk">&lt;adrian@ibmpcug.co.uk&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Andrey A. Chernov <emphasis remap=tt><ulink
		    URL="mailto:ache@astral.msk.su">&lt;ache@astral.msk.su&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Andrew Herbert <emphasis remap=tt><ulink
		    URL="mailto:andrew@werple.apana.org.au">&lt;andrew@werple.apana.org.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Andrew Moore <emphasis remap=tt><ulink
		    URL="mailto:alm@netcom.com">&lt;alm@netcom.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Andy Valencia <emphasis remap=tt><ulink
		    URL="mailto:ajv@csd.mot.com">&lt;ajv@csd.mot.com&gt;</ulink></emphasis> <emphasis remap=tt><ulink URL="mailto:jtk@netcom.com">&lt;jtk@netcom.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Arne Henrik Juul <emphasis remap=tt><ulink
		    URL="mailto:arnej@Lise.Unit.NO">&lt;arnej@Lise.Unit.NO&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Bakul Shah <emphasis remap=tt><ulink
		    URL="mailto:bvs@bitblocks.com">&lt;bvs@bitblocks.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Barry Lustig <emphasis remap=tt><ulink
		    URL="mailto:barry@ictv.com">&lt;barry@ictv.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Bob Wilcox <emphasis remap=tt><ulink
		    URL="mailto:bob@obiwan.uucp">&lt;bob@obiwan.uucp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Branko Lankester</para>
	    </listitem>
	    
	    <listitem>
	      <para>Brett Lymn <emphasis remap=tt><ulink
		    URL="mailto:blymn@mulga.awadi.com.AU">&lt;blymn@mulga.awadi.com.AU&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Charles Hannum <emphasis remap=tt><ulink
		    URL="mailto:mycroft@ai.mit.edu">&lt;mycroft@ai.mit.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Chris G. Demetriou <emphasis remap=tt><ulink
		    URL="mailto:cgd@postgres.berkeley.edu">&lt;cgd@postgres.berkeley.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Chris Torek <emphasis remap=tt><ulink
		    URL="mailto:torek@ee.lbl.gov">&lt;torek@ee.lbl.gov&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Christoph Robitschko <emphasis remap=tt><ulink
		    URL="mailto:chmr@edvz.tu-graz.ac.at">&lt;chmr@edvz.tu-graz.ac.at&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Daniel Poirot <emphasis remap=tt><ulink
		    URL="mailto:poirot@aio.jsc.nasa.gov">&lt;poirot@aio.jsc.nasa.gov&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Dave Burgess <emphasis remap=tt><ulink
		    URL="mailto:burgess@hrd769.brooks.af.mil">&lt;burgess@hrd769.brooks.af.mil&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Dave Rivers <emphasis remap=tt><ulink
		    URL="mailto:rivers@ponds.uucp">&lt;rivers@ponds.uucp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>David Dawes <emphasis remap=tt><ulink
		    URL="mailto:dawes@physics.su.OZ.AU">&lt;dawes@physics.su.OZ.AU&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>David Greenman <emphasis remap=tt><ulink
		    URL="mailto:davidg@Root.COM">&lt;davidg@Root.COM&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Eric J. Haug <emphasis remap=tt><ulink
		    URL="mailto:ejh@slustl.slu.edu">&lt;ejh@slustl.slu.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Felix Gaehtgens <emphasis remap=tt><ulink
		    URL="mailto:felix@escape.vsse.in-berlin.de">&lt;felix@escape.vsse.in-berlin.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Frank Maclachlan <emphasis remap=tt><ulink
		    URL="mailto:fpm@crash.cts.com">&lt;fpm@crash.cts.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Gary A. Browning <emphasis remap=tt><ulink
		    URL="mailto:gab10@griffcd.amdahl.com">&lt;gab10@griffcd.amdahl.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Gary Howland <emphasis remap=tt><ulink
		    URL="mailto:gary@hotlava.com">&lt;gary@hotlava.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Geoff Rehmet <emphasis remap=tt><ulink
		    URL="mailto:csgr@alpha.ru.ac.za">&lt;csgr@alpha.ru.ac.za&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Goran Hammarback <emphasis remap=tt><ulink
		    URL="mailto:goran@astro.uu.se">&lt;goran@astro.uu.se&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Guido van Rooij <emphasis remap=tt><ulink
		    URL="mailto:guido@gvr.win.tue.nl">&lt;guido@gvr.win.tue.nl&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Guy Harris <emphasis remap=tt><ulink
		    URL="mailto:guy@auspex.com">&lt;guy@auspex.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Havard Eidnes <emphasis remap=tt><ulink
		    URL="mailto:Havard.Eidnes@runit.sintef.no">&lt;Havard.Eidnes@runit.sintef.no&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Herb Peyerl <emphasis remap=tt><ulink
		    URL="mailto:hpeyerl@novatel.cuc.ab.ca">&lt;hpeyerl@novatel.cuc.ab.ca&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Holger Veit <emphasis remap=tt><ulink
		    URL="mailto:Holger.Veit@gmd.de">&lt;Holger.Veit@gmd.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Ishii Masahiro, R. Kym Horsell</para>
	    </listitem>
	    
	    <listitem>
	      <para>J.T. Conklin <emphasis remap=tt><ulink
		    URL="mailto:jtc@cygnus.com">&lt;jtc@cygnus.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Jagane D Sundar <emphasis remap=tt><ulink URL="mailto:
		    jagane@netcom.com ">&lt; jagane@netcom.com
		    &gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>James Clark <emphasis remap=tt><ulink
		    URL="mailto:jjc@jclark.com">&lt;jjc@jclark.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>James Jegers <emphasis remap=tt><ulink
		    URL="mailto:jimj@miller.cs.uwm.edu">&lt;jimj@miller.cs.uwm.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>James W. Dolter</para>
	    </listitem>
	    
	    <listitem>
	      <para>James da Silva <emphasis remap=tt><ulink
		    URL="mailto:jds@cs.umd.edu">&lt;jds@cs.umd.edu&gt;</ulink></emphasis> et al</para>
	    </listitem>
	    
	    <listitem>
	      <para>Jay Fenlason <emphasis remap=tt><ulink
		    URL="mailto:hack@datacube.com">&lt;hack@datacube.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Jim Wilson <emphasis remap=tt><ulink
		    URL="mailto:wilson@moria.cygnus.com">&lt;wilson@moria.cygnus.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>J&ouml;rg Lohse <emphasis remap=tt><ulink
		    URL="mailto:lohse@tech7.informatik.uni-hamburg.de">&lt;lohse@tech7.informatik.uni-hamburg.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>J&ouml;rg Wunsch <emphasis remap=tt><ulink
		    URL="mailto:joerg_wunsch@uriah.heep.sax.de">&lt;joerg_wunsch@uriah.heep.sax.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>John Dyson - <emphasis remap=tt><ulink
		    URL="mailto:formerly dyson@ref.tfs.com">&lt;formerly
		    dyson@ref.tfs.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>John Woods <emphasis remap=tt><ulink
		    URL="mailto:jfw@eddie.mit.edu">&lt;jfw@eddie.mit.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Jordan K. Hubbard <emphasis remap=tt><ulink
		    URL="mailto:jkh@whisker.hubbard.ie">&lt;jkh@whisker.hubbard.ie&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Julian Elischer <emphasis remap=tt><ulink
		    URL="mailto:julian@dialix.oz.au">&lt;julian@dialix.oz.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Julian Stacey <emphasis remap=tt><ulink
		    URL="mailto:jhs@freebsd.org">&lt;jhs@freebsd.org&gt;</ulink></emphasis> </para>
	    </listitem>
	    
	    <listitem>
	      <para>Karl Lehenbauer <emphasis remap=tt><ulink
		    URL="mailto:karl@NeoSoft.com">&lt;karl@NeoSoft.com&gt;</ulink></emphasis> <emphasis remap=tt><ulink URL="mailto:karl@one.neosoft.com">&lt;karl@one.neosoft.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Keith Bostic <emphasis remap=tt><ulink
		    URL="mailto:bostic@toe.CS.Berkeley.EDU">&lt;bostic@toe.CS.Berkeley.EDU&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Ken Hughes</para>
	    </listitem>
	    
	    <listitem>
	      <para>Kent Talarico <emphasis remap=tt><ulink
		    URL="mailto:kent@shipwreck.tsoft.net">&lt;kent@shipwreck.tsoft.net&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Kevin Lahey <emphasis remap=tt><ulink
		    URL="mailto:kml%rokkaku.UUCP@mathcs.emory.edu">&lt;kml%rokkaku.UUCP@mathcs.emory.edu&gt;</ulink></emphasis> <emphasis remap=tt><ulink URL="mailto:kml@mosquito.cis.ufl.edu">&lt;kml@mosquito.cis.ufl.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Marc Frajola <emphasis remap=tt><ulink
		    URL="mailto:marc@dev.com">&lt;marc@dev.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Mark Tinguely <emphasis remap=tt><ulink
		    URL="mailto:tinguely@plains.nodak.edu">&lt;tinguely@plains.nodak.edu&gt;</ulink></emphasis> <emphasis remap=tt><ulink URL="mailto:tinguely@hookie.cs.ndsu.NoDak.edu">&lt;tinguely@hookie.cs.ndsu.NoDak.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Martin Renters <emphasis remap=tt><ulink
		    URL="mailto:martin@tdc.on.ca">&lt;martin@tdc.on.ca&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Michael Clay <emphasis remap=tt><ulink
		    URL="mailto:mclay@weareb.org">&lt;mclay@weareb.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Michael Galassi <emphasis remap=tt><ulink
		    URL="mailto:nerd@percival.rain.com">&lt;nerd@percival.rain.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Mike Durkin <emphasis remap=tt><ulink
		    URL="mailto:mdurkin@tsoft.sf-bay.org">&lt;mdurkin@tsoft.sf-bay.org&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Naoki Hamada <emphasis remap=tt><ulink
		    URL="mailto:nao@tom-yam.or.jp">&lt;nao@tom-yam.or.jp&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Nate Williams <emphasis remap=tt><ulink
		    URL="mailto:nate@bsd.coe.montana.edu">&lt;nate@bsd.coe.montana.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Nick Handel <emphasis remap=tt><ulink
		    URL="mailto:nhandel@NeoSoft.com">&lt;nhandel@NeoSoft.com&gt;</ulink></emphasis>  <emphasis remap=tt><ulink URL="mailto:nick@madhouse.neosoft.com">&lt;nick@madhouse.neosoft.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Pace Willisson <emphasis remap=tt><ulink
		    URL="mailto:pace@blitz.com">&lt;pace@blitz.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Paul Kranenburg <emphasis remap=tt><ulink
		    URL="mailto:pk@cs.few.eur.nl">&lt;pk@cs.few.eur.nl&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Paul Mackerras <emphasis remap=tt><ulink
		    URL="mailto:paulus@cs.anu.edu.au">&lt;paulus@cs.anu.edu.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Paul Popelka <emphasis remap=tt><ulink
		    URL="mailto:paulp@uts.amdahl.com">&lt;paulp@uts.amdahl.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Peter da Silva <emphasis remap=tt><ulink
		    URL="mailto:peter@NeoSoft.com">&lt;peter@NeoSoft.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Phil Sutherland <emphasis remap=tt><ulink
		    URL="mailto:philsuth@mycroft.dialix.oz.au">&lt;philsuth@mycroft.dialix.oz.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Poul-Henning Kamp<emphasis remap=tt><ulink
		    URL="mailto:phk@FreeBSD.ORG">&lt;phk@FreeBSD.ORG&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Ralf Friedl <emphasis remap=tt><ulink
		    URL="mailto:friedl@informatik.uni-kl.de">&lt;friedl@informatik.uni-kl.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Rick Macklem <emphasis remap=tt><ulink
		    URL="mailto:root@snowhite.cis.uoguelph.ca">&lt;root@snowhite.cis.uoguelph.ca&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Robert D. Thrush <emphasis remap=tt><ulink
		    URL="mailto:rd@phoenix.aii.com">&lt;rd@phoenix.aii.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Rodney W. Grimes <emphasis remap=tt><ulink
		    URL="mailto:rgrimes@cdrom.com">&lt;rgrimes@cdrom.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Sascha Wildner <emphasis remap=tt><ulink
		    URL="mailto:swildner@channelz.GUN.de">&lt;swildner@channelz.GUN.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Scott Burris <emphasis remap=tt><ulink
		    URL="mailto:scott@pita.cns.ucla.edu">&lt;scott@pita.cns.ucla.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Scott Reynolds <emphasis remap=tt><ulink
		    URL="mailto:scott@clmqt.marquette.mi.us">&lt;scott@clmqt.marquette.mi.us&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Sean Eric Fagan <emphasis remap=tt><ulink
		    URL="mailto:sef@kithrup.com">&lt;sef@kithrup.com&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Simon J Gerraty <emphasis remap=tt><ulink
		    URL="mailto:sjg@melb.bull.oz.au">&lt;sjg@melb.bull.oz.au&gt;</ulink></emphasis> <emphasis remap=tt><ulink URL="mailto:sjg@zen.void.oz.au">&lt;sjg@zen.void.oz.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Stephen McKay <emphasis remap=tt><ulink
		    URL="mailto:syssgm@devetir.qld.gov.au">&lt;syssgm@devetir.qld.gov.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Terry Lambert <emphasis remap=tt><ulink
		    URL="mailto:terry@icarus.weber.edu">&lt;terry@icarus.weber.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Terry Lee <emphasis remap=tt><ulink
		    URL="mailto:terry@uivlsi.csl.uiuc.edu">&lt;terry@uivlsi.csl.uiuc.edu&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Tor Egge <emphasis remap=tt><ulink
		    URL="mailto:Tor.Egge@idi.ntnu.no">&lt;Tor.Egge@idi.ntnu.no&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Warren Toomey <emphasis remap=tt><ulink
		    URL="mailto:wkt@csadfa.cs.adfa.oz.au">&lt;wkt@csadfa.cs.adfa.oz.au&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Wiljo Heinen <emphasis remap=tt><ulink
		    URL="mailto:wiljo@freeside.ki.open.de">&lt;wiljo@freeside.ki.open.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>William Jolitz <emphasis remap=tt><ulink
		    URL="mailto:withheld">&lt;withheld&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Wolfgang Solfrank <emphasis remap=tt><ulink
		    URL="mailto:ws@tools.de">&lt;ws@tools.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Wolfgang Stanglmeier <emphasis remap=tt><ulink
		    URL="mailto:wolf@dentaro.GUN.de">&lt;wolf@dentaro.GUN.de&gt;</ulink></emphasis></para>
	    </listitem>
	    
	    <listitem>
	      <para>Yuval Yarom <emphasis remap=tt><ulink
		    URL="mailto:yval@cs.huji.ac.il">&lt;yval@cs.huji.ac.il&gt;</ulink></emphasis></para>
	    </listitem>
	    
	  </itemizedlist>
	  
	</para>
	
      </sect1>
    </chapter>
    
    <chapter
      id="policies">
      <title>Source Tree Guidelines and Policies
      </title>
      
      <para><emphasis>Contributed by &a.phk;.</emphasis></para>
      
      <para>This chapter documents various guidelines and policies in force
	for the FreeBSD source tree.</para>
      
      
      <sect1
	id="policies-maintainer">
	<title>MAINTAINER on Makefiles
	</title>
	
	<para>June 1996.</para>
	
	<para>If a particular portion of the FreeBSD distribution is being
	  maintained by a person or group of persons, they can communicate
	  this fact to the world by adding a</para>
	
	<para>
	  <literallayout>	MAINTAINER= email-addresses</literallayout>
	</para>
	
	<para>line to the makefiles covering this portion of the source
	  tree.</para>
	
	<para>The semantics of this are as follows:</para>
	
	<para>The maintainer owns and is responsible for that code.  This
	  means that he is responsible for fixing bugs and answer problem
	  reports pertaining to that piece of the code, and in the case of
	  contributed  software, for tracking new versions, as
	  appropriate.</para>
	
	<para>Changes to directories which have a maintainer defined shall be
	  sent to the maintainer for review before being committed.  Only if
	  the maintainer does not respond for an unacceptable period of time,
	  to several emails, will it be acceptable to commit changes without
	  review by the maintainer. However, it is suggested that you try and
	  have the changes reviewed  by someone else if at all
	  possible.</para>
	
	<para>It is of course not acceptable to add a person or group as
	  maintainer unless they agree to assume this duty.  On the other hand
	  it doesn't have to be a committer and it can easily be a group of
	  people.</para>
	
      </sect1>
      
      <sect1>
	<title>Contributed Software</title>
	
	<para>June 1996.</para>
	
	<para>Some parts of the FreeBSD distribution consist of software that
	  is actively being maintained outside the FreeBSD project.  For
	  historical reasons, we call this <emphasis>contributed</emphasis>
	  software.  Some examples are perl, gcc and patch.</para>
	
	<para>Over the last couple of years, various methods have been used in
	  dealing with this type of software and all have some number of
	  advantages and drawbacks.  No clear winner has emerged.</para>
	
	<para>Since this is the case, after some debate one of these methods
	  has been selected as the "official" method and will be required for
	  future imports of software of this kind.  Furthermore, it is
	  strongly suggested that existing contributed software converge on
	  this model over time, as it has significant advantages over the old
	  method, including the ability to easily obtain diffs relative to the
	  "official" versions of the source by everyone (even without cvs
	  access).  This will make it significantly easier to return changes
	  to the primary developers of the contributed software.</para>
	
	<para>Ultimately, however, it comes down to the people actually doing
	  the work.  If using this model is particularly unsuited to the
	  package being dealt with, exceptions to these rules may be granted
	  only with the approval of the core team and with the general
	  consensus of the other developers.  The ability to maintain the
	  package in the future will be a key issue in the decisions.</para>
	
	<para>The <emphasis remap=tt>Tcl</emphasis> embedded programming
	  language will be used as example of how this model works:</para>
	
	<para>
	  <literallayout>src/contrib/tcl</literallayout> contains the source
	  as distributed by the maintainers of this package.  Parts that are
	  entirely not applicable for FreeBSD can be removed.  In the case of
	  Tcl, the "mac", "win" and "compat" subdirectories were eliminated
	  before the import</para>
	
	<para>
	  <literallayout>src/lib/libtcl</literallayout> contains only a "bmake
	  style" Makefile that uses the standard bsd.lib.mk makefile rules to
	  produce the library and install the documentation.</para>
	
	<para>
	  <literallayout>src/usr.bin/tclsh</literallayout> contains only a
	  bmake style Makefile which will produce and install the "tclsh"
	  program and its associated man-pages using the standard bsd.prog.mk
	  rules.</para>
	
	<para>
	  <literallayout>src/tools/tools/tcl_bmake</literallayout> contains a
	  couple of shell-scripts that can be of help when the tcl software
	  needs updating.  These are not part of the built or installed
	  software.</para>
	
	<para>The important thing here is that the "src/contrib/tcl" directory
	  is created according to the rules: It is supposed to contain the
	  sources as distributed (on a proper CVS vendor-branch) with as few
	  FreeBSD-specific changes as possible.  The 'easy-import' tool on
	  freefall will assist in doing the import, but if there are any
	  doubts on how to go about it, it is imperative that you ask first
	  and not blunder ahead and hope it "works out".  CVS is not forgiving
	  of import accidents and a fair amount of effort is required to back
	  out major mistakes.</para>
	
	<para>Because of some unfortunate design limitations with CVS's vendor
	  branches, it is required that "official" patches from the vendor be
	  applied to the original distributed sources and the result
	  re-imported onto the vendor branch again.  Official patches should
	  never be patched into the FreeBSD checked out version and
	  "committed", as this destroys the vendor branch coherency and makes
	  importing future versions rather difficult as there will be
	  conflicts.</para>
	
	<para>Since many packages contain files that are meant for
	  compatibility with other architectures and environments that
	  FreeBSD, it is permissible to remove parts of the distribution tree
	  that are of no interest to FreeBSD in order to save space.  Files
	  containing copyright notices and release-note kind of information
	  applicable to the remaining files shall <emphasis>not</emphasis> be
	  removed.</para>
	
	<para>If it seems easier, the "bmake" makefiles can be produced from
	  the dist tree automatically by some utility, something which would
	  hopefully make it even easier to upgrade to a new version.  If this
	  is done, be sure to check in such utilities (as necessary) in the
	  src/tools directory along with the port itself so that it is
	  available to future maintainers.</para>
	
	<para>In the src/contrib/tcl level directory, a file called
	  FREEBSD-upgrade should be added and it should states things
	  like:</para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para> Which files have been left out</para>
	    </listitem>
	    
	    <listitem>
	      <para> Where the original distribution was obtained from and/or
		the official master site.</para>
	    </listitem>
	    
	    <listitem>
	      <para> Where to send patches back to the original authors</para>
	    </listitem>
	    
	    <listitem>
	      <para> Perhaps an overview of the FreeBSD-specific changes that
		have been made.</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
	<para>However, please do not import FREEBSD-upgrade with the
	  contributed source.   Rather you should ``cvs add FREEBSD-upgrade ;
	  cvs ci'' after the initial import.  Example wording from
	  ``src/contrib/cpio'' is below:</para>
	
	<para>
	  <literallayout>This directory contains virgin sources of the
	    original distribution files on a "vendor" branch.  Do not, under
	    any circumstances, attempt to upgrade the files in this directory
	    via patches and a cvs commit.  New versions or official-patch
	    versions must be imported. For the import of GNU cpio 2.4.2, the
	    following files were removed: INSTALL         cpio.info
	    mkdir.c              Makefile.in     cpio.texi       mkinstalldirs
	    To upgrade to a newer version of cpio, when it is available: 1.
	    Unpack the new version into an empty directory. [Do not make ANY
	    changes to the files.] 2. Remove the files listed above and any
	    others that don't apply to FreeBSD. 3. Use the command: cvs import
	    -m 'Virgin import of GNU cpio v&lt;version&gt;' \ src/contrib/cpio
	    GNU v&lt;version&gt; For example, to do the import of version
	    2.4.2, I typed: cvs import -m 'Virgin import of GNU v2.4.2' \
	    src/contrib/cpio GNU v2.4.2 4. Follow the instructions printed out
	    in step 3 to resolve any conflicts between local FreeBSD changes
	    and the newer version. Do not, under any circumstances, deviate
	    from this procedure. To make local changes to cpio, simply patch
	    and commit to the main branch (aka HEAD).  Never make local
	    changes on the GNU branch. All local changes should be submitted
	    to "cpio@gnu.ai.mit.edu" for inclusion in the next vendor release.
	    obrien@freebsd.org - 30 March 1997</literallayout>
	</para>
	
      </sect1>
      
      <sect1
	id="policies-shlib">
	<title>Shared Libraries
	</title>
	
	<para><emphasis>Contributed by &a.asami;, &a.peter;, and
	    &a.obrien;.<!-- <br> --> 9 December 1996.</emphasis></para>
	
	<para>If you are adding shared library support to a port or other
	  piece of software that doesn't have one, the version numbers should
	  follow these rules.  Generally, the resulting numbers will have
	  nothing to do with the release version of the software.</para>
	
	<para>The three principles of shared library building are:</para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>Start from 1.0</para>
	    </listitem>
	    
	    <listitem>
	      <para>If there is a change that is backwards compatible, bump
		minor number</para>
	    </listitem>
	    
	    <listitem>
	      <para>If there is an incompatible change, bump major
		number</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
	<para>For instance, added functions and bugfixes result in the minor
	  version number being bumped, while deleted functions, changed
	  function call syntax etc. will force the major version number to
	  change.</para>
	
	<para>Stick to version numbers of the form major.minor (x.y).  Our
	  dynamic linker does not handle version numbers of the form x.y.z
	  well.  Any version number after the ``y'' (ie. the third digit) is
	  totally ignored when comparing shared lib version numbers to decide
	  which library to link with.  Given two shared libraries that differ
	  only in the `micro' revision, ld.so will link with the higher one.
	  Ie: if you link with libfoo.so.3.3.3, the linker only records 3.3 in
	  the headers, and will link with anything starting with
	  libfoo.so.3.(anything &gt;= 3).(highest available).</para>
	
	<para>Note that ld.so will always use the highest "minor" revision.
	  Ie: it will use libc.so.2.2 in preference to libc.so.2.0, even if
	  the program was initially linked with libc.so.2.0.</para>
	
	<para>For non-port libraries, it is also our policy to change the
	  shared library version number only once between releases.  When you
	  make a change to a system library that requires the version number
	  to be bumped, check the Makefile's commit logs.  It is the
	  responsibility of the committer to ensure that the first such change
	  since the release will result in the shared library version number
	  in the Makefile to be updated, and any subsequent changes will not.
	</para>
	
      </sect1>
    </chapter>
    
    <chapter
      id="kernelopts">
      <title>Adding New Kernel Configuration Options</title>
      
      <para><emphasis>Contributed by &a.joerg;</emphasis></para>
      
      <para><emphasis>Note:</emphasis> You should be familiar with the section
	about <xref linkend="kernelconfig" remap="kernel configuration">
	before reading here.</para>
      
      
      <sect1>
	<title>What's a <emphasis>Kernel Option</emphasis>, Anyway?</title>
	
	<para>The use of kernel options is basically described in the <xref
	    linkend="kernelconfig-options" remap="kernel configuration">
	  section. There's also an explanation of ``historic'' and
	  ``new-style'' options.  The ultimate goal is to eventually turn all
	  the supported options in the kernel into new-style ones, so for
	  people who correctly did a <emphasis remap=tt>make depend</emphasis>
	  in their kernel compile directory after running
	  <command>config(8)</command>, the build process will automatically
	  pick up modified options, and only recompile those files where it is
	  necessary.  Wiping out the old compile directory on each run of
	  <command>config(8)</command> as it is still done now can then be
	  eliminated again.</para>
	
	<para>Basically, a kernel option is nothing else than the definition
	  of a C preprocessor macro for the kernel compilation process.  To
	  make the build truly optional, the corresponding part of the kernel
	  source (or kernel <filename>.h</filename> file) must be written with
	  the option concept in mind, i. e. the default must have been made
	  overridable by the config option.  This is usually done with
	  something like:</para>
	
	<para>
	  <literallayout>#ifndef THIS_OPTION #define THIS_OPTION
	    (some_default_value) #endif /* THIS_OPTION */</literallayout>
	</para>
	
	<para>This way, an administrator mentioning another value for the
	  option in his config file will take the default out of effect, and
	  replace it with his new value.  Clearly, the new value will be
	  substituted into the source code during the preprocessor run, so it
	  must be a valid C expression in whatever context the default value
	  would have been used.</para>
	
	<para>It is also possible to create value-less options that simply
	  enable or disable a particular piece of code by embracing it
	  in</para>
	
	<para>
	  <literallayout>#ifdef THAT_OPTION [your code here]
	    #endif</literallayout>
	</para>
	
	<para>Simply mentioning <symbol>THAT_OPTION</symbol> in the config
	  file (with or without any value) will then turn on the corresponding
	  piece of code.</para>
	
	<para>People familiar with the C language will immediately recognize
	  that everything could be counted as a ``config option'' where there
	  is at least a single <emphasis remap=tt>#ifdef</emphasis>
	  referencing it...  However, it's unlikely that many people would
	  put</para>
	
	<para>
	  <literallayout>	options		notyet,notdef</literallayout>
	</para>
	
	<para>in their config file, and then wonder why the kernel compilation
	  falls over. :-)</para>
	
	<para>Clearly, using arbitrary names for the options makes it very
	  hard to track their usage throughout the kernel source tree.  That
	  is the rationale behind the <emphasis>new-style</emphasis> option
	  scheme, where each option goes into a separate
	  <filename>.h</filename> file in the kernel compile directory, which
	  is by convention named
	  <filename>opt_<replaceable>foo</replaceable>.h</filename>. This way,
	  the usual Makefile dependencies could be applied, and <emphasis
	    remap=tt>make</emphasis> can determine what needs to be recompiled
	  once an option has been changed.</para>
	
	<para>The old-style option mechanism still has one advantage for local
	  options or maybe experimental options that have a short anticipated
	  lifetime: since it is easy to add a new <emphasis
	    remap=tt>#ifdef</emphasis> to the kernel source, this has already
	  made it a kernel config option. In this case, the administrator
	  using such an option is responsible himself for knowing about its
	  implications (and maybe manually forcing the recompilation of parts
	  of his kernel).  Once the transition of all supported options has
	  been done, <command>config(8)</command> will warn whenever an
	  unsupported option appears in the config file, but it will
	  nevertheless include it into the kernel Makefile.</para>
	
      </sect1>
      
      <sect1>
	<title>Now What Do I Have to Do for it?</title>
	
	<para>First, edit <filename>sys/conf/options</filename> (or
	  <filename>sys/i386/conf/options.<replaceable>&lt;arch&gt;</replaceable></filename>, e. g. <filename>sys/i386/conf/options.i386</filename>), and select an <filename>opt_<replaceable>foo</replaceable>.h</filename> file where your new option would best go into.</para>
	
	<para>If there is already something that comes close to the purpose of
	  the new option, pick this.  For example, options modifying the
	  overall behaviour of the SCSI subsystem can go into
	  <filename>opt_scsi.h</filename>. By default, simply mentioning an
	  option in the appropriate option file, say <acronym>FOO</acronym>,
	  implies its value will go into the corresponding file
	  <filename>opt_foo.h</filename>.  This can be overridden on the
	  right-hand side of a rule by specifying another filename.</para>
	
	<para>If there is no
	  <filename>opt_<replaceable>foo</replaceable>.h</filename> already
	  available for the intended new option, invent a new name.  Make it
	  meaningful, and comment the new section in the <emphasis
	    remap=tt>options[<replaceable>.&lt;arch&gt;</replaceable>]</emphasis> file.  <command>config(8)</command> will automagically pick up the change, and create that file next time it is run.  Most options should go in a header file by themselves..</para>
	
	<para>Packing too many options into a single
	  <filename>opt_<replaceable>foo</replaceable>.h</filename> will cause
	  too many kernel files to be rebuilt when one of the options has been
	  changed in the config file.</para>
	
	<para>Finally, find out which kernel files depend on the new option.
	  Unless you have just invented your option, and it does not exist
	  anywhere yet,</para>
	
	<para>
	  <literallayout>        find /usr/src/sys -name type f | xargs fgrep
	    NEW_OPTION</literallayout>
	</para>
	
	<para>is your friend in finding them.  Go and edit all those files,
	  and add</para>
	
	<para>
	  <literallayout>#include "opt_foo.h"</literallayout>
	</para>
	
	<para><emphasis>on top</emphasis>, before all the <emphasis
	    remap=tt>#include &lt;xxx.h&gt;</emphasis> stuff.  This sequence
	  is most important as the options could override defaults from the
	  regular include files, if the defaults are of the form</para>
	
	<para>
	  <literallayout>#ifndef NEW_OPTION #define NEW_OPTION (something)
	    #endif</literallayout>
	</para>
	
	<para>in the regular header.</para>
	
	<para>Adding an option that overrides something in a system header
	  file (i. e., a file sitting in
	  <filename>/usr/include/sys/</filename>) is almost always a mistake.
	  <filename>opt_<replaceable>foo</replaceable>.h</filename> cannot be
	  included into those files since it would break the headers more
	  seriously, but if it is not included, then places that include it
	  may get an inconsistent value for the option.  Yes, there are
	  precedents for this right now, but that does not make them more
	  correct.
	</para>
	
      </sect1>
    </chapter>
    
    <chapter
      id="kerneldebug">
      <title>Kernel Debugging</title>
      
      <para><emphasis>Contributed by &a.paul; and &a.joerg;</emphasis></para>
      
      
      <sect1>
	<title>Debugging a Kernel Crash Dump with KGDB</title>
	
	<para>Here are some instructions for getting kernel debugging working
	  on a crash dump.  They assume that you have enough swap space for a
	  crash dump.  If you have multiple swap partitions and the first one
	  is too small to hold the dump, you can configure your kernel to use
	  an alternate dump device (in the <emphasis remap=tt>config
	    kernel</emphasis> line), or you can specify an alternate using the
	  dumpon(8) command.   Dumps to non-swap devices, tapes for example,
	  are currently not supported.  Config your kernel using
	  <command>config -g</command>. See <xref linkend="kernelconfig"
	    remap="Kernel Configuration"> for
	  details on configuring the FreeBSD kernel.</para>
	
	<para>Use the <command>dumpon(8)</command> command to tell the kernel
	  where to dump to (note that this will have to be done after
	  configuring the partition in question as swap space via
	  <command>swapon(8)</command>).  This is normally arranged via
	  <filename>/etc/rc.conf</filename> and <filename>/etc/rc</filename>.
	  Alternatively, you can hard-code the dump device via the `dump'
	  clause in the `config' line of your kernel config file.  This is
	  deprecated and should be used only if you want a crash dump from a
	  kernel that crashes during booting.</para>
	
	<para><emphasis><emphasis remap=bf>Note:</emphasis> In the following,
	    the term `<emphasis remap=tt>kgdb</emphasis>' refers to <emphasis
	      remap=tt>gdb</emphasis> run in `kernel debug mode'.  This can be
	    accomplished by either starting the <emphasis
	      remap=tt>gdb</emphasis> with the option <option>-k</option>, or
	    by linking and starting it under the name <emphasis
	      remap=tt>kgdb</emphasis>.  This is not being done by default,
	    however, and the idea is basically deprecated since the GNU folks
	    do not like their tools to behave differently when called by
	    another name.  This feature may well be discontinued in further
	    releases.</emphasis></para>
	
	<para>When the kernel has been built make a copy of it, say
	  <filename>kernel.debug</filename>, and then run <command>strip
	    -d</command> on the original. Install the original as normal.  You
	  may also install the unstripped kernel, but symbol table lookup time
	  for some programs will drastically increase, and since the whole
	  kernel is loaded entirely at boot time and cannot be swapped out
	  later, several megabytes of physical memory will be wasted.</para>
	
	<para>If you are testing a new kernel, for example by typing the new
	  kernel's name at the boot prompt, but need to boot a different one
	  in order to get your system up and running again, boot it only into
	  single user state using the <option>-s</option> flag at the boot
	  prompt, and then perform the following steps:
	  <informalexample>
	    <screen>  fsck -p mount -a -t ufs       # so your file system for
	      /var/crash is writable savecore -N /kernel.panicked /var/crash
	      exit                  # ...to multi-user</screen>
	  </informalexample> This instructs <command>savecore(8)</command> to
	  use another kernel for symbol name extraction.  It would otherwise
	  default to the currently running kernel and most likely not do
	  anything at all since the crash dump and the kernel symbols
	  differ.</para>
	
	<para>Now, after a crash dump, go to
	  <filename>/sys/compile/WHATEVER</filename> and run <emphasis
	    remap=tt>kgdb</emphasis>.  From <emphasis remap=tt>kgdb</emphasis>
	  do:
	  <informalexample>
	    <screen>  symbol-file kernel.debug exec-file /var/crash/kernel.0
	      core-file /var/crash/vmcore.0</screen>
	  </informalexample> and voila, you can debug the crash dump using the
	  kernel sources just like you can for any other program.</para>
	
	<para>Here is a script log of a <emphasis remap=tt>kgdb</emphasis>
	  session illustrating the procedure.  Long lines have been folded to
	  improve readability, and the lines are numbered for reference.
	  Despite this, it is a real-world error trace taken during the
	  development of the pcvt console driver.
	  <informalexample>
	    <screen>   1:Script started on Fri Dec 30 23:15:22 1994 2:uriah #
	      cd /sys/compile/URIAH 3:uriah # kgdb kernel /var/crash/vmcore.1
	      4:Reading symbol data from
	      /usr/src/sys/compile/URIAH/kernel...done. 5:IdlePTD 1f3000
	      6:panic: because you said to! 7:current pcb at 1e3f70 8:Reading
	      in symbols for ../../i386/i386/machdep.c...done. 9:(kgdb) where
	      10:#0  boot (arghowto=256) (../../i386/i386/machdep.c line 767)
	      11:#1  0xf0115159 in panic () 12:#2  0xf01955bd in diediedie ()
	      (../../i386/i386/machdep.c line 698) 13:#3  0xf010185e in
	      db_fncall () 14:#4  0xf0101586 in db_command (-266509132,
	      -266509516, -267381073) 15:#5  0xf0101711 in db_command_loop ()
	      16:#6  0xf01040a0 in db_trap () 17:#7  0xf0192976 in kdb_trap
	      (12, 0, -272630436, -266743723) 18:#8  0xf019d2eb in trap_fatal
	      (...) 19:#9  0xf019ce60 in trap_pfault (...) 20:#10 0xf019cb2f
	      in trap (...) 21:#11 0xf01932a1 in exception:calltrap () 22:#12
	      0xf0191503 in cnopen (...) 23:#13 0xf0132c34 in spec_open ()
	      24:#14 0xf012d014 in vn_open () 25:#15 0xf012a183 in open ()
	      26:#16 0xf019d4eb in syscall (...) 27:(kgdb) up 10 28:Reading in
	      symbols for ../../i386/i386/trap.c...done. 29:#10 0xf019cb2f in
	      trap (frame={tf_es = -260440048, tf_ds = 16, tf_\ 30:edi = 3072,
	      tf_esi = -266445372, tf_ebp = -272630356, tf_isp = -27\
	      31:2630396, tf_ebx = -266427884, tf_edx = 12, tf_ecx =
	      -266427884, tf\ 32:_eax = 64772224, tf_trapno = 12, tf_err =
	      -272695296, tf_eip = -26\ 33:6672343, tf_cs = -266469368,
	      tf_eflags = 66066, tf_esp = 3072, tf_\ 34:ss = -266427884})
	      (../../i386/i386/trap.c line 283) 35:283
	      (void) trap_pfault(&amp;frame, FALSE); 36:(kgdb) frame
	      frame-&gt;tf_ebp frame-&gt;tf_eip 37:Reading in symbols for
	      ../../i386/isa/pcvt/pcvt_drv.c...done. 38:#0  0xf01ae729 in
	      pcopen (dev=3072, flag=3, mode=8192, p=(struct p\ 39:roc *)
	      0xf07c0c00) (../../i386/isa/pcvt/pcvt_drv.c line 403) 40:403
	      return ((*linesw[tp-&gt;t_line].l_open)(dev, tp)); 41:(kgdb)
	      list 42:398         43:399             tp-&gt;t_state |=
	      TS_CARR_ON; 44:400             tp-&gt;t_cflag |= CLOCAL;  /*
	      cannot be a modem (:-) */ 45:401      46:402     #if PCVT_NETBSD
	      || (PCVT_FREEBSD &gt;= 200) 47:403             return
	      ((*linesw[tp-&gt;t_line].l_open)(dev, tp)); 48:404     #else
	      49:405             return ((*linesw[tp-&gt;t_line].l_open)(dev,
	      tp, flag)); 50:406     #endif /* PCVT_NETBSD || (PCVT_FREEBSD
	      &gt;= 200) */ 51:407     } 52:(kgdb) print tp 53:Reading in
	      symbols for ../../i386/i386/cons.c...done. 54:$1 = (struct tty
	      *) 0x1bae 55:(kgdb) print tp-&gt;t_line 56:$2 = 1767990816
	      57:(kgdb) up 58:#1  0xf0191503 in cnopen (dev=0x00000000,
	      flag=3, mode=8192, p=(st\ 59:ruct proc *) 0xf07c0c00)
	      (../../i386/i386/cons.c line 126) 60:       return
	      ((*cdevsw[major(dev)].d_open)(dev, flag, mode, p)); 61:(kgdb) up
	      62:#2  0xf0132c34 in spec_open () 63:(kgdb) up 64:#3  0xf012d014
	      in vn_open () 65:(kgdb) up 66:#4  0xf012a183 in open ()
	      67:(kgdb) up 68:#5  0xf019d4eb in syscall (frame={tf_es = 39,
	      tf_ds = 39, tf_edi =\ 69: 2158592, tf_esi = 0, tf_ebp =
	      -272638436, tf_isp = -272629788, tf\ 70:_ebx = 7086, tf_edx = 1,
	      tf_ecx = 0, tf_eax = 5, tf_trapno = 582, \ 71:tf_err = 582,
	      tf_eip = 75749, tf_cs = 31, tf_eflags = 582, tf_esp \ 72:=
	      -272638456, tf_ss = 39}) (../../i386/i386/trap.c line 673)
	      73:673             error = (*callp-&gt;sy_call)(p, args, rval);
	      74:(kgdb) up 75:Initial frame selected; you cannot go up.
	      76:(kgdb) quit 77:uriah # exit 78:exit 79: 80:Script done on Fri
	      Dec 30 23:18:04 1994</screen>
	  </informalexample> Comments to the above script:</para>
	
	<para>
	  <variablelist>
	    <varlistentry><term>line 6:</term>
	      <listitem>
		<para>This is a dump taken from within DDB (see below), hence
		  the panic comment ``because you said to!'', and a rather
		  long stack trace; the initial reason for going into DDB has
		  been a page fault trap though.</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>line 20:</term>
	      
	      <listitem>
		<para>This is the location of function
		  <function>trap()</function> in the stack trace. </para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>line 36:</term>
	      
	      <listitem>
		<para>Force usage of a new stack frame; this is no longer
		  necessary now.  The stack frames are supposed to point to
		  the right locations now, even in case of a trap. (I do not
		  have a new core dump handy &lt;g&gt;, my kernel has not
		  panicked for a rather long time.) From looking at the code
		  in source line 403, there is a high probability that either
		  the pointer access for ``tp'' was messed up, or the array
		  access was out of bounds.</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>line 52:</term>
	      
	      <listitem>
		<para>The pointer looks suspicious, but happens to be a valid
		  address.</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>line 56:</term>
	      
	      <listitem>
		<para>However, it obviously points to garbage, so we have
		  found our error!  (For those unfamiliar with that particular
		  piece of code: <emphasis remap=tt>tp-&gt;t_line</emphasis>
		  refers to the line discipline  of the console device here,
		  which must be a rather small integer number.)</para>
		
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
	
      </sect1>
      
      <sect1>
	<title>Post-mortem Analysis of a Dump</title>
	
	<para>What do you do if a kernel dumped core but you did not expect
	  it, and it is therefore not compiled using <command>config
	    -g</command>? Not everything is lost here.  Do not panic!</para>
	
	<para>Of course, you still need to enable crash dumps.  See above on
	  the options you have to specify in order to do this.</para>
	
	<para>Go to your kernel compile directory, and edit the line
	  containing <literal>COPTFLAGS?=-O</literal>.  Add the
	  <option>-g</option> option there (but <emphasis>do not</emphasis>
	  change anything on the level of optimization).  If you do already
	  know roughly the probable location of the failing piece of code
	  (e.g., the <emphasis remap=tt>pcvt</emphasis> driver in the example
	  above), remove all the object files for this code.  Rebuild the
	  kernel. Due to the time stamp change on the Makefile, there will be
	  some other object files rebuild, for example
	  <filename>trap.o</filename>.  With a bit of luck, the added
	  <option>-g</option> option will not change anything for the
	  generated code, so you will finally get a new kernel with similar
	  code to the faulting one but some debugging symbols.  You should at
	  least verify the old and new sizes with the
	  <command>size(1)</command> command. If there is a mismatch, you
	  probably need to give up here.</para>
	
	<para>Go and examine the dump as described above.  The debugging
	  symbols might be incomplete for some places, as can be seen in the
	  stack trace in the example above where some functions are displayed
	  without line numbers and argument lists.  If you need more debugging
	  symbols, remove the appropriate object files and repeat the
	  <emphasis remap=tt>kgdb</emphasis> session until you know
	  enough.</para>
	
	<para>All this is not guaranteed to work, but it will do it fine in
	  most cases.</para>
	
      </sect1>
      
      <sect1>
	<title>On-line Kernel Debugging Using DDB</title>
	
	<para>While <emphasis remap=tt>kgdb</emphasis> as an offline debugger
	  provides a very high level of user interface, there are some things
	  it cannot do. The most important ones being breakpointing and
	  single-stepping kernel code.</para>
	
	<para>If you need to do low-level debugging on your kernel, there is
	  an on-line debugger available called DDB.  It allows to setting
	  breakpoints, single-steping kernel functions, examining and changing
	  kernel variables, etc.  However, it cannot access kernel source
	  files, and only has access to the global and static symbols, not to
	  the full debug information like <emphasis
	    remap=tt>kgdb</emphasis>.</para>
	
	<para>To configure your kernel to include DDB, add the option line
	  <informalexample>
	    <screen>        options DDB</screen>
	  </informalexample> to your config file, and rebuild.  (See <xref
	    linkend="kernelconfig"
	    remap="Kernel Configuration"> for details on configuring the
	  FreeBSD kernel. Note that if you have an older version of the boot
	  blocks, your debugger symbols might not be loaded at all. Update the
	  boot blocks; the recent ones load the DDB symbols
	  automagically.)</para>
	
	<para>Once your DDB kernel is running, there are several ways to enter
	  DDB.  The first, and earliest way is to type the boot flag
	  <option>-d</option> right at the boot prompt.  The kernel will start
	  up in debug mode and enter DDB prior to any device probing.  Hence
	  you can even debug the device probe/attach functions.</para>
	
	<para>The second scenario is a hot-key on the keyboard, usually
	  Ctrl-Alt-ESC.  For syscons, this can be remapped; some of the
	  distributed maps do this, so watch out. There is an option available
	  for serial consoles that allows the use of a serial line BREAK on
	  the console line to enter DDB (``<emphasis remap=tt>options
	    BREAK_TO_DEBUGGER</emphasis>'' in the kernel config file).  It is
	  not the default since there are a lot of crappy serial adapters
	  around that gratuitously generate a BREAK condition, for example
	  when pulling the cable.</para>
	
	<para>The third way is that any panic condition will branch to DDB if
	  the kernel is configured to use it.   For this reason, it is not
	  wise to configure a kernel with DDB for a machine running
	  unattended.</para>
	
	<para>The DDB commands roughly resemble some <emphasis
	    remap=tt>gdb</emphasis> commands.  The first thing you probably
	  need to do is to set a breakpoint:
	  <informalexample>
	    <screen>  b function-name b address</screen>
	  </informalexample>
	</para>
	
	<para>Numbers are taken hexadecimal by default, but to make them
	  distinct from symbol names; hexadecimal numbers starting with the
	  letters <emphasis remap=tt>a</emphasis>-<emphasis
	    remap=tt>f</emphasis> need to be preceded with
	  <literal>0x</literal> (this is optional for other numbers).  Simple
	  expressions are allowed, for example: <literal>function-name +
	    0x103</literal>.</para>
	
	<para>To continue the operation of an interrupted kernel, simply type
	  <informalexample>
	    <screen>  c</screen>
	  </informalexample> To get a stack trace, use
	  <informalexample>
	    <screen>  trace</screen>
	  </informalexample> Note that when entering DDB via a hot-key, the
	  kernel is currently servicing an interrupt, so the stack trace might
	  be not of much use for you.</para>
	
	<para>If you want to remove a breakpoint, use
	  <informalexample>
	    <screen>  del del address-expression</screen>
	  </informalexample> The first form will be accepted immediately after
	  a breakpoint hit, and deletes the current breakpoint.  The second
	  form can remove any breakpoint, but you need to specify the exact
	  address; this can be obtained from
	  <informalexample>
	    <screen>  show b</screen>
	  </informalexample> To single-step the kernel, try
	  <informalexample>
	    <screen>  s</screen>
	  </informalexample> This will step into functions, but you can make
	  DDB trace them until the matching return statement is reached by
	  <informalexample>
	    <screen>  n</screen>
	  </informalexample> <emphasis remap=bf>Note:</emphasis> this is
	  different from <emphasis remap=tt>gdb</emphasis>'s `next' statement;
	  it is like <emphasis remap=tt>gdb</emphasis>'s `finish'.</para>
	
	<para>To examine data from memory, use (for example):
	  <informalexample>
	    <screen>  x/wx 0xf0133fe0,40 x/hd db_symtab_space x/bc termbuf,10
	      x/s stringbuf</screen>
	  </informalexample> for word/halfword/byte access, and
	  hexadecimal/decimal/character/ string display.  The number after the
	  comma is the object count. To display the next 0x10 items, simply
	  use
	  <informalexample>
	    <screen>  x ,10</screen>
	  </informalexample> Similarly, use
	  <informalexample>
	    <screen>  x/ia foofunc,10</screen>
	  </informalexample> to disassemble the first 0x10 instructions of
	  <emphasis remap=tt>foofunc</emphasis>, and display them along with
	  their offset from the beginning of <emphasis
	    remap=tt>foofunc</emphasis>.</para>
	
	<para>To modify memory, use the write command:
	  <informalexample>
	    <screen>  w/b termbuf 0xa 0xb 0 w/w 0xf0010030 0 0</screen>
	  </informalexample> The command modifier (<emphasis
	    remap=tt>b</emphasis>/<emphasis remap=tt>h</emphasis>/<emphasis
	    remap=tt>w</emphasis>) specifies the size of the data to be
	  written, the first following expression is the address to write to
	  and the remainder is interpreted as data to write to successive
	  memory locations.</para>
	
	<para>If you need to know the current registers, use
	  <informalexample>
	    <screen>  show reg</screen>
	  </informalexample> Alternatively, you can display a single register
	  value by e.g.
	  <informalexample>
	    <screen>  p $eax</screen>
	  </informalexample> and modify it by
	  <informalexample>
	    <screen>  set $eax new-value</screen>
	  </informalexample>
	</para>
	
	<para>Should you need to call some kernel functions from DDB, simply
	  say
	  <informalexample>
	    <screen>  call func(arg1, arg2, ...)</screen>
	  </informalexample> The return value will be printed.</para>
	
	<para>For a <command>ps(1)</command> style summary of all running
	  processes, use
	  <informalexample>
	    <screen>  ps</screen>
	  </informalexample>
	</para>
	
	<para>Now you have now examined why your kernel failed, and you wish
	  to reboot.  Remember that, depending on the severity of previous
	  malfunctioning, not all parts of the kernel might still be working
	  as expected.  Perform one of the following actions to shut down and
	  reboot your system:
	  <informalexample>
	    <screen>  call diediedie()</screen>
	  </informalexample>
	</para>
	
	<para>This will cause your kernel to dump core and reboot, so you can
	  later analyze the core on a higher level with kgdb.  This command
	  usually must be followed by another `<emphasis
	    remap=tt>continue</emphasis>' statement. There is now an alias for
	  this: `<emphasis remap=tt>panic</emphasis>'.</para>
	
	<para>
	  <informalexample>
	    <screen>  call boot(0)</screen>
	  </informalexample> might be a good way to cleanly shut down the
	  running system, <function>sync()</function> all disks, and finally
	  reboot.  As long as the disk and file system interfaces of the
	  kernel are not damaged, this might be a good way for an almost clean
	  shutdown.</para>
	
	<para>
	  <informalexample>
	    <screen>  call cpu_reset()</screen>
	  </informalexample> is the final way out of disaster and almost the
	  same as hitting the Big Red Button.</para>
	
	<para>If you need a short command summary, simply type
	  <informalexample>
	    <screen>  help</screen>
	  </informalexample> However, it is highly recommended to have a
	  printed copy of the <emphasis remap=tt>ddb(4)</emphasis> manual page
	  ready for a debugging session. Remember that it is hard to read the
	  on-line manual while single-stepping the kernel.</para>
	
      </sect1>
      
      <sect1>
	<title>On-line Kernel Debugging Using Remote GDB</title>
	
	<para>This feature has been supported since FreeBSD 2.2, and it's
	  actually a very neat one.</para>
	
	<para>GDB has already supported <emphasis>remote debugging</emphasis>
	  for a long time. This is done using a very simple protocol along a
	  serial line.  Unlike the other methods described above, you will
	  need two machines for doing this.  One is the host providing the
	  debugging environment, including all the sources, and a copy of the
	  kernel binary with all the symbols in it, and the other one is the
	  target machine that simply runs a similar copy of the very same
	  kernel (but stripped of the debugging information).</para>
	
	<para>You should configure the kernel in question with <command>config
	    -g</command>, include <acronym>DDB</acronym> into the
	  configuration, and compile it as usual. This gives a large blurb of
	  a binary, due to the debugging information.  Copy this kernel to the
	  target machine, strip the debugging symbols off with <command>strip
	    -x</command>, and boot it using the <option>-d</option> boot
	  option.  Connect the first serial line of the target machine to any
	  serial line of the debugging host.  Now, on the debugging machine,
	  go to the compile directory of the target kernel, and start gdb:
	  <informalexample>
	    <screen>% gdb -k kernel GDB is free software and you are welcome
	      to distribute copies of it under certain conditions; type "show
	      copying" to see the conditions. There is absolutely no warranty
	      for GDB; type "show warranty" for details. GDB 4.16
	      (i386-unknown-freebsd),  Copyright 1996 Free Software
	      Foundation, Inc... (kgdb) </screen>
	  </informalexample>
	</para>
	
	<para>Initialize the remote debugging session (assuming the first
	  serial port is being used) by:
	  <informalexample>
	    <screen>(kgdb) target remote /dev/cuaa0</screen>
	  </informalexample>
	</para>
	
	<para>Now, on the target host (the one that entered DDB right before
	  even starting the device probe), type:
	  <informalexample>
	    <screen>Debugger("Boot flags requested debugger") Stopped at
	      Debugger+0x35: movb	$0, edata+0x51bc db&gt; gdb</screen>
	  </informalexample>
	</para>
	
	<para>DDB will respond with:
	  <informalexample>
	    <screen>Next trap will enter GDB remote protocol mode</screen>
	  </informalexample>
	</para>
	
	<para>Every time you type ``gdb'', the mode will be toggled between
	  remote GDB and local DDB.  In order to force a next trap
	  immediately, simply type ``s'' (step).  Your hosting GDB will now
	  gain control over the target kernel:
	  <informalexample>
	    <screen>Remote debugging using /dev/cuaa0 Debugger (msg=0xf01b0383
	      "Boot flags requested debugger") at
	      ../../i386/i386/db_interface.c:257 (kgdb) </screen>
	  </informalexample>
	</para>
	
	<para>You can use this session almost as any other GDB session,
	  including full access to the source, running it in gud-mode inside
	  an Emacs window (which gives you an automatic source code display in
	  another Emacs window) etc.</para>
	
	<para>Remote GDB can also be used to debug LKMs.  First build the LKM
	  with debugging symbols:
	  <informalexample>
	    <screen># cd /usr/src/lkm/linux # make clean; make
	      COPTS=-g</screen>
	  </informalexample>
	</para>
	
	<para>Then install this version of the module on the target machine,
	  load it and use <emphasis remap=tt>modstat</emphasis> to find out
	  where it was loaded:
	  <informalexample>
	    <screen># linux # modstat Type     Id Off Loadaddr Size Info
	      Rev Module Name EXEC      0   4 f5109000 001c f510f010   1
	      linux_mod</screen>
	  </informalexample>
	</para>
	
	<para>Take the load address of the module and add 0x20 (probably to
	  account for the a.out header).  This is the address that the module
	  code was relocated to.  Use the <emphasis
	    remap=tt>add-symbol-file</emphasis> command in GDB to tell the
	  debugger about the module:
	  <informalexample>
	    <screen>(kgdb) add-symbol-file /usr/src/lkm/linux/linux_mod.o
	      0xf5109020 add symbol table from file
	      "/usr/src/lkm/linux/linux_mod.o" at text_addr = 0xf5109020? (y
	      or n) y (kgdb)</screen>
	  </informalexample>
	</para>
	
	<para>You now have access to all the symbols in the LKM.</para>
	
      </sect1>
      
      <sect1>
	<title>Debugging a Console Driver</title>
	
	<para>Since you need a console driver to run DDB on, things are more
	  complicated if the console driver itself is failing.  You might
	  remember the use of a serial console (either with modified boot
	  blocks, or by specifying <emphasis
	    remap=tt><option>-h</option></emphasis> at the <emphasis
	    remap=tt>Boot:</emphasis> prompt), and hook up a standard terminal
	  onto your first serial port.  DDB works on any configured console
	  driver, of course also on a serial console.</para>
	
      </sect1>
    </chapter>
    
    <chapter
      id="linuxemu">
      <title>Linux Emulation</title>
      
      <para><emphasis>Contributed by &a.handy; and &a.rich;</emphasis></para>
      
      
      <sect1>
	<title>How to Install the Linux Emulator</title>
	
	<para>Linux emulation in FreeBSD has reached a point where it is
	  possible to run a large fraction of Linux binaries in both a.out and
	  ELF format.  The linux emulation in the 2.1-STABLE branch is capable
	  of running Linux DOOM and Mathematica; the version present in
	  FreeBSD-2.2-RELEASE is vastly more capable and runs all these as
	  well as Quake, Abuse, IDL, netrek for Linux and a whole host of
	  other programs.</para>
	
	<para>There are some Linux-specific operating system features that are
	  not supported on FreeBSD.  Linux binaries will not work on FreeBSD
	  if they use the Linux /proc filesystem (which is different from the
	  optional FreeBSD /proc filesystem) or i386-specific calls, such as
	  enabling virtual 8086 mode.</para>
	
	<para>To tell whether your kernel is configured for Linux
	  compatibility simply run any Linux binary.  If it prints the error
	  message
	  <informalexample>
	    <screen>linux-executable: Exec format error. Wrong
	      Architecture.</screen>
	  </informalexample> then you do not have linux compatibility support
	  and you need to configure and install a new kernel.</para>
	
	<para>Depending on which version of FreeBSD you are running, how you
	  get  Linux-emulation up will vary slightly:</para>
	
	
	<sect2>
	  <title>Installing Linux Emulation in 2.1-STABLE</title>
	  
	  <para>The GENERIC kernel in 2.1-STABLE is not configured for linux
	    compatibility so you must reconfigure your kernel for it.  There
	    are two ways to do this: 1. linking the emulator statically in the
	    kernel itself and 2. configuring your kernel to dynamically load
	    the linux loadable kernel module (LKM).</para>
	  
	  <para>To enable the emulator, add the following to your
	    configuration file (c.f. /sys/i386/conf/LINT):
	    <informalexample>
	      <screen>options COMPAT_LINUX</screen>
	    </informalexample> If you want to run doom or other applications
	    that need shared memory, also add the following.
	    <informalexample>
	      <screen>options SYSVSHM</screen>
	    </informalexample> The linux system calls require 4.3BSD system
	    call compatibility.  So make sure you have the following.
	    <informalexample>
	      <screen>options "COMPAT_43"</screen>
	    </informalexample>
	  </para>
	  
	  <para>If you prefer to statically link the emulator in the kernel
	    rather than use the loadable kernel module (LKM), then add
	    <informalexample>
	      <screen>options  LINUX</screen>
	    </informalexample> Then run config and install the new kernel as
	    described in the
	    <xref linkend="kernelconfig" remap="kernel configuration">
	    section.</para>
	  
	  <para>If you decide to use the LKM you must also install the
	    loadable module.   A mismatch of versions between the kernel and
	    loadable module can cause the kernel to crash, so the safest thing
	    to do is to reinstall the LKM when you install the kernel.
	    <informalexample>
	      <screen>% cd /usr/src/lkm/linux % make all install</screen>
	    </informalexample> Once you have installed the kernel and the LKM,
	    you can invoke `linux' as root to load the LKM.
	    <informalexample>
	      <screen>% linux Linux emulator installed Module loaded as ID 0
		%</screen>
	    </informalexample> To see whether the LKM is loaded, run
	    `modstat'.
	    <informalexample>
	      <screen>% modstat Type     Id Off Loadaddr Size Info     Rev
		Module Name EXEC      0   3 f0baf000 0018 f0bb4000   1
		linux_emulator %</screen>
	    </informalexample> You can cause the LKM to be loaded when the
	    system boots in either of two ways.  In FreeBSD 2.2.1-RELEASE and
	    2.1-STABLE enable it in /etc/sysconfig
	    <informalexample>
	      <screen>linux=YES</screen>
	    </informalexample> by changing it from NO to YES.  FreeBSD 2.1
	    RELEASE and earlier do not have such a line and on those you will
	    need to edit /etc/rc.local to add the following line.
	    <informalexample>
	      <screen>linux</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Installing Linux Emulation in 2.2.2-RELEASE and later</title>
	  
	  <para>It is no longer necessary to specify ``options LINUX'' or
	    ``options COMPAT_LINUX''.  Linux emulation is done with an LKM
	    (``Loadable Kernel Module'') so it can be installed on the fly
	    without having to reboot.  You will need the following things in
	    your startup files,  however:
	    <orderedlist>
	      
	      <listitem>
		<para> In /etc/rc.conf, you need the following line:
		  <informalexample>
		    <screen>linux_enable=YES</screen>
		  </informalexample>
		</para>
	      </listitem>
	      
	      <listitem>
		<para> This, in turn, triggers the following action in
		  /etc/rc.i386:
		  <informalexample>
		    <screen># Start the Linux binary emulation if requested.
		      if [ "X${linux_enable}" = X"YES" ]; then echo -n '
		      linux';               linux &gt; /dev/null 2&gt;&amp;1
		      fi</screen>
		  </informalexample>
		</para>
	      </listitem>
	      
	    </orderedlist>
	  </para>
	  
	  <para>If you want to verify it is running, modstat will do that:
	    <informalexample>
	      <screen>% modstat Type     Id Off Loadaddr Size Info     Rev
		Module Name EXEC      0   4 f09e6000 001c f09ec010   1
		linux_mod %</screen>
	    </informalexample> However, there have been reports that this
	    fails on some 2.2-RELEASE and later systems.  If for some reason
	    you cannot load the linux LKM, then statically link the emulator
	    in the kernel by adding
	    <informalexample>
	      <screen>options  LINUX</screen>
	    </informalexample> to your kernel config file.  Then run config
	    and install the new kernel as described in the <xref
	      linkend="kernelconfig"
	      remap="kernel configuration"> section.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Installing Linux Runtime Libraries</title>
	  
	  
	  <sect3>
	    <title>Installing using the linux_lib port</title>
	    
	    <para>Most linux applications use shared libraries, so you are
	      still not done until you install the shared libraries.  It is
	      possible to do this by hand, however, it is vastly simpler to
	      just grab the linux_lib port:
	      <informalexample>
		<screen>% cd /usr/ports-current/emulators/linux_lib % make all
		  install</screen>
	      </informalexample>
	    </para>
	    
	    <para>and you should have a working linux emulator.  Legend (and
	      the mail archives :-) seems to hold that Linux emulation works
	      best with linux binaries linked against the ZMAGIC libraries;
	      QMAGIC libraries (such as those used in Slackware V2.0) may tend
	      to give the Linuxulator heartburn.  As of this writing (March
	      1996) ELF emulation is still in the formulative stages but seems
	      to work pretty well.  Also,  expect some programs to complain
	      about incorrect minor versions.  In  general this does not seem
	      to be a problem.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Installing libraries manually</title>
	    
	    <para>If you do not have the ``ports'' distribution, you can
	      install the libraries by hand instead.  You will need the Linux
	      shared libraries that the program depends on and the runtime
	      linker.  Also, you will need to create a "shadow root"
	      directory, /compat/linux, for Linux libraries on your FreeBSD
	      system.  Any shared libraries opened by Linux programs run under
	      FreeBSD will look in this tree first.  So, if a Linux program
	      loads, for example, /lib/libc.so, FreeBSD will first try to open
	      /compat/linux/lib/libc.so, and if that does not exist then it
	      will try /lib/libc.so.  Shared libraries should be installed in
	      the shadow tree /compat/linux/lib rather than the paths that the
	      Linux ld.so reports.</para>
	    
	    <para>FreeBSD-2.2-RELEASE and later works slightly differently
	      with respect to /compat/linux.  On -CURRENT, all files, not just
	      libraries, are searched for from the ``shadow root''
	      /compat/linux.</para>
	    
	    <para>Generally, you will need to look for the shared libraries
	      that Linux  binaries depend on only the first few times that you
	      install a Linux  program on your FreeBSD system. After a while,
	      you will have a sufficient set of Linux shared libraries on your
	      system to be able to run newly  imported Linux binaries without
	      any extra work.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>How to install additional shared libraries</title>
	    
	    <para>What if you install the linux_lib port and your application
	      still complains about missing shared libraries?  How do you know
	      which shared libraries Linux binaries need, and where to get
	      them? Basically, there are 2 possibilities (when following these
	      instructions: you will need to be root on your FreeBSD system to
	      do the necessary installation steps).</para>
	    
	    <para>If you have access to a Linux system, see what shared
	      libraries it needs, and copy them to your FreeBSD system.
	      Example: you have just ftp'ed the Linux binary of Doom. Put it
	      on the Linux system you have access to, and check which shared
	      libraries it needs by running `ldd linuxxdoom':</para>
	    
	    <para>
	      <informalexample>
		<screen>% ldd linuxxdoom libXt.so.3 (DLL Jump 3.1) =&gt;
		  /usr/X11/lib/libXt.so.3.1.0 libX11.so.3 (DLL Jump 3.1) =&gt;
		  /usr/X11/lib/libX11.so.3.1.0 libc.so.4 (DLL Jump 4.5pl26)
		  =&gt; /lib/libc.so.4.6.29</screen>
	      </informalexample>
	    </para>
	    
	    <para>You would need to get all the files from the last column,
	      and put them under /compat/linux, with the names in the first
	      column as symbolic links pointing to them. This means you
	      eventually have these files on your FreeBSD system:
	      <informalexample>
		<screen>/compat/linux/usr/X11/lib/libXt.so.3.1.0
		  /compat/linux/usr/X11/lib/libXt.so.3 -&gt; libXt.so.3.1.0
		  /compat/linux/usr/X11/lib/libX11.so.3.1.0
		  /compat/linux/usr/X11/lib/libX11.so.3 -&gt; libX11.so.3.1.0
		  /compat/linux/lib/libc.so.4.6.29 /compat/linux/lib/libc.so.4
		  -&gt; libc.so.4.6.29</screen>
	      </informalexample>
	    </para>
	    
	    <para>Note that if you already have a Linux shared library with a
	      matching major revision number to the first column of the 'ldd'
	      output, you will not need to copy the file named in the last
	      column to your system, the one you already have should work. It
	      is advisable to copy the shared library anyway if it is a newer
	      version, though. You can remove the old one, as long as you make
	      the symbolic link point to the new one. So, if you have these
	      libraries on your system:
	      <informalexample>
		<screen>/compat/linux/lib/libc.so.4.6.27
		  /compat/linux/lib/libc.so.4 -&gt; libc.so.4.6.27</screen>
	      </informalexample>
	    </para>
	    
	    <para>and you find a new binary that claims to require a later
	      version according to the output of ldd:
	      <informalexample>
		<screen>libc.so.4 (DLL Jump 4.5pl26) -&gt;
		  libc.so.4.6.29</screen>
	      </informalexample>
	    </para>
	    
	    <para>If it is only one or two versions out of date in the in the
	      trailing digit then do not worry about copying
	      /lib/libc.so.4.6.29 too, because the program should work fine
	      with the slightly older version. However, if you like you can
	      decide to replace the libc.so anyway, and that should leave you
	      with:
	      <informalexample>
		<screen>/compat/linux/lib/libc.so.4.6.29
		  /compat/linux/lib/libc.so.4 -&gt; libc.so.4.6.29</screen>
	      </informalexample>
	    </para>
	    
	    <para>Please note that the symbolic link mechanism is
	      <emphasis>only</emphasis> needed for Linux binaries.  The
	      FreeBSD runtime linker takes care of looking for matching major
	      revision numbers itself and you do not need to worry about
	      it.</para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>Configuring the ld.so -- for FreeBSD 2.2-RELEASE
	      only</title>
	    
	    <para>This section applies only to FreeBSD 2.2-RELEASE and later.
	      Those running 2.1-STABLE should skip this section.</para>
	    
	    <para>Finally, if you run FreeBSD 2.2-RELEASE you must make sure
	      that you have the Linux runtime linker and its config files on
	      your system. You should copy these files from the Linux system
	      to their appropriate place on your FreeBSD system (to the
	      /compat/linux tree):
	      <informalexample>
		<screen>/compat/linux/lib/ld.so
		  /compat/linux/etc/ld.so.config</screen>
	      </informalexample>
	    </para>
	    
	    <para>If you do not have access to a Linux system, you should get
	      the extra files you need from various ftp sites.  Information on
	      where to look for the various files is appended below. For now,
	      let us assume you know where to get the files.</para>
	    
	    <para>Retrieve the following files (all from the same ftp site to
	      avoid any version mismatches), and install them under
	      /compat/linux (i.e. /foo/bar is installed as
	      /compat/linux/foo/bar):
	      <informalexample>
		<screen>/sbin/ldconfig /usr/bin/ldd /lib/libc.so.x.y.z
		  /lib/ld.so</screen>
	      </informalexample>
	    </para>
	    
	    <para>ldconfig and ldd do not necessarily need to be under
	      /compat/linux; you can install them elsewhere in the system too.
	      Just make sure they do not conflict with their FreeBSD
	      counterparts. A good idea would be to install them in
	      /usr/local/bin as ldconfig-linux and ldd-linux.</para>
	    
	    <para>Create the file /compat/linux/etc/ld.so.conf, containing the
	      directories in which the Linux runtime linker should look for
	      shared libs. It is a plain text file, containing a directory
	      name on each line. /lib and /usr/lib are standard, you could add
	      the following:
	      <informalexample>
		<screen>/usr/X11/lib /usr/local/lib</screen>
	      </informalexample>
	    </para>
	    
	    <para>When a linux binary opens a library such as /lib/libc.so the
	      emulator maps the name to /compat/linux/lib/libc.so internally.
	      All linux libraries should be installed under /compat/linux
	      (e.g. /compat/linux/lib/libc.so,
	      /compat/linux/usr/X11/lib/libX11.so, etc.) in order for the
	      emulator to find them.</para>
	    
	    <para>Those running FreeBSD 2.2-RELEASE should run the Linux
	      ldconfig program.
	      <informalexample>
		<screen>% cd /compat/linux/lib % /compat/linux/sbin/ldconfig
		</screen>
	      </informalexample>
	    </para>
	    
	    <para>Ldconfig is statically linked, so it does not need any
	      shared libraries to run.  It creates the file
	      /compat/linux/etc/ld.so.cache which contains the names of all
	      the shared libraries and should be rerun to recreate this file
	      whenever you install additional shared libraries.</para>
	    
	    <para>On 2.1-STABLE do not install /compat/linux/etc/ld.so.cache
	      or run ldconfig; in 2.1-STABLE the syscalls are implemented
	      differently and ldconfig is not needed or used.</para>
	    
	    <para>You should now be set up for Linux binaries which only need
	      a shared libc. You can test this by running the Linux ldd on
	      itself. Supposing that you have it installed as ldd-linux, it
	      should produce something like:
	      <informalexample>
		<screen>% ldd-linux `which ldd-linux` libc.so.4 (DLL Jump
		  4.5pl26) =&gt; /lib/libc.so.4.6.29</screen>
	      </informalexample>
	    </para>
	    
	    <para>This being done, you are ready to install new Linux
	      binaries. Whenever you install a new Linux program, you should
	      check if it needs shared libraries, and if so, whether you have
	      them installed in the /compat/linux tree. To do this, you run
	      the Linux version ldd on the new program, and watch its output.
	      ldd (see also the manual page for ldd(1)) will print a list of
	      shared libraries that the program depends on, in the form
	      majorname (jumpversion) =&gt; fullname.</para>
	    
	    <para>If it prints "not found" instead of fullname it means that
	      you need an extra library. The library needed is shown in
	      majorname and will be of the form libXXXX.so.N. You will need to
	      find a libXXXX.so.N.mm on a Linux ftp site, and install it on
	      your system. The XXXX (name) and N (major revision number)
	      should match; the minor number(s) mm are less important, though
	      it is advised to take the most recent version.</para>
	    
	  </sect3>
	</sect2>
	
	<sect2>
	  <title>Configuring the host name resolver</title>
	  
	  <para>If DNS does not work or you get the messages
	    <informalexample>
	      <screen>resolv+: "bind" is an invalid keyword resolv+: "hosts"
		is an invalid keyword</screen>
	    </informalexample>
	  </para>
	  
	  <para>then you need to configure a /compat/linux/etc/host.conf file
	    containing:
	    <informalexample>
	      <screen>order hosts, bind multi on</screen>
	    </informalexample>
	  </para>
	  
	  <para>where the order here specifies that /etc/hosts is searched
	    first and DNS is searched second.  When
	    /compat/linux/etc/host.conf is not installed linux applications
	    find FreeBSD's /etc/host.conf and complain about the incompatible
	    FreeBSD syntax.  You should remove `bind,' if you have not
	    configured a name-server using the /etc/resolv.conf file.</para>
	  
	  <para>Lastly, those who run 2.1-STABLE need to set an the
	    RESOLV_HOST_CONF environment variable so that applications will
	    know how to search the host tables.  If you run FreeBSD
	    2.2-RELEASE, you can skip this.  For the /bin/csh shell use:
	    <informalexample>
	      <screen>setenv RESOLV_HOST_CONF
		/compat/linux/etc/host.conf</screen>
	    </informalexample>
	  </para>
	  
	  <para>For /bin/sh use:
	    <informalexample>
	      <screen>RESOLV_HOST_CONF=/compat/linux/etc/host.conf; export
		RESOLV_HOST_CONF</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Finding the necessary files</title>
	  
	  <para>Note: the information below is valid as of the time this
	    document was written, but certain details such as names of ftp
	    sites, directories and distribution names may have changed by the
	    time you read this.</para>
	  
	  <para>Linux is distributed by several groups that make their own set
	    of binaries that they distribute. Each distribution has its own
	    name, like ``Slackware'' or ``Yggdrasil''. The distributions are
	    available on a lot of ftp sites. Sometimes the files are unpacked,
	    and you can get the individual files you need, but mostly they are
	    stored in distribution sets, usually consisting of subdirectories
	    with gzipped tar files in them. The primary ftp sites for the
	    distributions are:
	    <literallayout>sunsite.unc.edu:/pub/Linux/distributions
	      tsx-11.mit.edu:/pub/linux/distributions</literallayout>
	  </para>
	  
	  <para>Some European mirrors:
	    <literallayout>ftp.luth.se:/pub/linux/distributions
	      ftp.demon.co.uk:/pub/linux/distributions
	      src.doc.ic.ac.uk:/packages/linux/distributions</literallayout>
	  </para>
	  
	  <para>For simplicity, let us concentrate on Slackware here. This
	    distribution consists of a number of subdirectories, containing
	    separate packages.  Normally, they are controlled by an install
	    program, but you can retrieve files "by hand" too. First of all,
	    you will need to look in the "contents" subdir of the
	    distribution. You will find a lot of small text files here
	    describing the contents of the separate packages. The fastest way
	    to look something up is to retrieve all the files in the contents
	    subdirectory, and grep through them for the file you need. Here is
	    an example of a list of files that you might need, and in which
	    contents-file you will find it by grepping through them:
	    <table>
	      <title></title>
	      <tgroup>
		<tbody>
		  <row><entry>Library </entry><entry>Package </entry></row>
		  <row><entry>ld.so </entry><entry>ldso </entry></row>
		  <row><entry>ldconfig	</entry><entry>ldso </entry></row>
		  <row><entry>ldd </entry><entry>ldso </entry></row>
		  <row><entry>libc.so.4	</entry><entry>shlibs </entry></row>
		  <row><entry>libX11.so.6.0	</entry><entry>xf_lib
		    </entry></row>
		  <row><entry>libXt.so.6.0	</entry><entry>xf_lib
		    </entry></row>
		  <row><entry>libX11.so.3	</entry><entry>oldlibs
		    </entry></row>
		  <row><entry>libXt.so.3	</entry><entry>oldlibs
		    </entry></row>
		  <row><entry></row>
		</tbody>
	      </tgroup>
	    </table>
	  </para>
	  
	  <para>So, in this case, you will need the packages ldso, shlibs,
	    xf_lib and oldlibs.  In each of the contents-files for these
	    packages, look for a line saying ``PACKAGE LOCATION'', it will
	    tell you on which `disk' the package is, in our case it will tell
	    us in which subdirectory we need to look.  For our example, we
	    would find the following locations:
	    <table>
	      <title></title>
	      <tgroup>
		<tbody>
		  <row><entry>Package </entry><entry>Location	</entry></row>
		  <row><entry>ldso </entry><entry>diska2 </entry></row>
		  <row><entry>shlibs </entry><entry>diska2 </entry></row>
		  <row><entry>oldlibs </entry><entry>diskx6 </entry></row>
		  <row><entry>xf_lib </entry><entry>diskx9 </entry></row>
		  <row><entry></row>
		</tbody>
	      </tgroup>
	    </table>
	  </para>
	  
	  <para>The locations called ``diskXX'' refer to the ``slakware/XX''
	    subdirectories of the distribution, others may be found in the
	    ``contrib'' subdirectory.  In this case, we could now retrieve the
	    packages we need by retrieving the following files (relative to
	    the root of the Slackware distribution tree):
	    <informalexample>
	      <screen>slakware/a2/ldso.tgz slakware/a2/shlibs.tgz
		slakware/x6/oldlibs/tgz slakware/x9/xf_lib.tgz</screen>
	    </informalexample>
	  </para>
	  
	  <para>Extract the files from these gzipped tarfiles in your
	    /compat/linux directory (possibly omitting or afterwards removing
	    files you do not need), and you are done.</para>
	  
	  <para><emphasis remap=bf>See also:</emphasis>
	    <literallayout>ftp.freebsd.org:pub/FreeBSD/2.0.5-RELEASE/xperimnt/linux-emu/README /usr/src/sys/i386/ibcs2/README.iBCS2</literallayout>
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="mathematica">
	<title>How to Install Mathematica on FreeBSD</title>
	
	<para><emphasis>Contributed by &a.rich; and
	    &a.chuck;</emphasis></para>
	
	<para>This document shows how to install the Linux binary distribution
	  of Mathematica 2.2 on FreeBSD 2.1.</para>
	
	<para>Mathematica supports Linux but not FreeBSD as it stands.  So
	  once you have configured your system for Linux compatibility you
	  have most of what you need to run Mathematica.</para>
	
	<para>For those who already have the student edition of Mathematica
	  for DOS the cost of upgrading to the Linux version at the time this
	  was written, March 1996, was &#36;45.00.  It can be ordered directly
	  from Wolfram at (217) 398-6500 and paid for by credit card.</para>
	
	
	<sect2>
	  <title>Unpacking the Mathematica distribution</title>
	  
	  <para>The binaries are currently distributed by Wolfram on CDROM.
	    The CDROM has about a dozen tar files, each of which is a binary
	    distribution for one of the supported architectures.  The one for
	    Linux is named LINUX.TAR.  You can, for example, unpack this into
	    /usr/local/Mathematica:
	    <informalexample>
	      <screen>% cd /usr/local % mkdir Mathematica % cd Mathematica %
		tar -xvf /cdrom/LINUX.TAR</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Obtaining your Mathematica Password</title>
	  
	  <para>Before you can run Mathematica you will have to obtain a
	    password from Wolfram that corresponds to your `machine
	    ID.'</para>
	  
	  <para>Once you have installed the linux compatibility runtime
	    libraries and unpacked the mathematica you can obtain the `machine
	    ID' by running the program `mathinfo' in the Install directory.
	    <informalexample>
	      <screen>% cd /usr/local/Mathematica/Install % mathinfo LINUX:
		'ioctl' fd=5, typ=0x89(), num=0x27 not implemented
		richc.isdn.bcm.tmc.edu   9845-03452-90255 %</screen>
	    </informalexample> So, for example, the `machine ID' of `richc' is
	    `9845-03452-90255'. You can ignore the message about the ioctl
	    that is not implemented.  It will not prevent Mathematica from
	    running in any way and you can safely ignore it, though you will
	    see the message every time you run Mathematica.</para>
	  
	  <para>When you register with Wolfram, either by email, phone or fax,
	    you will give them the 'machine ID' and they will respond with a
	    corresponding password consisting of groups of numbers.  You need
	    to add them both along with the machine name and license number in
	    your mathpass file.</para>
	  
	  <para>You can do this by invoking:
	    <informalexample>
	      <screen>% cd /usr/local/Mathematica/Install %
		math.install</screen>
	    </informalexample> It will ask you to enter your license number
	    and the Wolfram supplied password.  If you get them mixed up or
	    for some reason the math.install fails, that is OK; you can simply
	    edit the file 'mathpass' in this same directory to correct the
	    info manually.</para>
	  
	  <para>After getting past the password, math.install will ask you if
	    you accept the install defaults provided, or if you want to use
	    your own.  If you are like us and distrust all install programs,
	    you probably want to specify the actual directories.  Beware.
	    Although the math.install program asks you to specify directories,
	    it will not create them for you, so you should perhaps have a
	    second window open with another shell so that you can create them
	    before you give them to the install program.  Or, if it fails, you
	    can create the directories and then restart the math.install
	    program.  The directories we chose to create beforehand and
	    specify to  math.install were:
	    <informalexample>
	      <screen>/usr/local/Mathematica/bin       for binaries
		/usr/local/Mathematica/man/man1  for man pages
		/usr/local/Mathematica/lib/X11   for the XKeysymb
		file</screen>
	    </informalexample> You can also tell it to use /tmp/math.record
	    for the system record file, where it puts logs of sessions. After
	    this math.install will continue on to unpacking things and placing
	    everything where it should go.</para>
	  
	  <para>The Mathematica Notebook feature is included separately, as
	    the X Front End, and you have to install it separately. To get the
	    X Front End stuff correctly installed, cd into the
	    /usr/local/Mathematica/FrontEnd directory and execute the
	    ./xfe.install shell script.  You will have to tell it where to put
	    things, but you do not have to create any directories because it
	    will use the same directories that had been created for
	    math.install. When it finishes, there should be a new shell script
	    in /usr/local/Mathematica/bin called "mathematica".</para>
	  
	  <para>Lastly, you need to modify each of the shell scripts that
	    Mathematica has installed.  At the beginning of every shell script
	    in /usr/local/Mathematica/bin add the following line:
	    <informalexample>
	      <screen>XKEYSYMDB=/usr/local/Mathematica/lib/X11/XKeysymDB;
		export XKEYSYMDB</screen>
	    </informalexample> This tells Mathematica were to find its own
	    version of the key mapping file XKeysymDB.  Without this you will
	    get pages of error messages about missing key mappings.</para>
	  
	  <para>On 2.1-STABLE you need to add the following as well:
	    <informalexample>
	      <screen>RESOLV_HOST_CONF=/compat/linux/etc/host.conf; export
		RESOLV_HOST_CONF</screen>
	    </informalexample> This tells Mathematica to use the linux version
	    of host.conf.  This file has a different syntax from FreeBSD's
	    host.conf, so you will get an error message about /etc/host.conf
	    if you leave this out.</para>
	  
	  <para>You might also want to modify your /etc/manpath.config file to
	    read the new man directory, and you may need to edit your ~/.cshrc
	    file to add /usr/local/Mathematica/bin to your path.</para>
	  
	  <para>That is about all it takes. With this you should be able to
	    type "mathematica" and get a really slick looking Mathematica
	    Notebook screen up.  Mathematica has included the Motif user
	    interfaces, but it is compiled in statically, so you do not need
	    the Motif libraries.  Good luck doing this yourself!</para>
	  
	</sect2>
	
	<sect2>
	  <title>Bugs</title>
	  
	  <para>The Notebook front end is known to hang sometimes when reading
	    notebook files with an error messages similar to:
	    <informalexample>
	      <screen>File .../Untitled-1.mb appears to be broken for
		OMPR.257.0</screen>
	    </informalexample>
	  </para>
	  
	  <para>We have not found the cause for this, but it only affects the
	    Notebook's X Window front end, not the mathematica engine itself.
	    So the command line interface invoked by 'math' is unaffected by
	    this bug.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Acknowledgments</title>
	  
	  <para>A well-deserved thanks should go to &a.sos; and &a.peter; who
	    made linux emulation what it is today, and Michael Smith who drove
	    these two guys like dogs to get it to the point where it runs
	    Linux binaries better than linux!   :-) 
	  </para>
	  
	</sect2>
      </sect1>
    </chapter>
    
    <chapter>
      <title>FreeBSD Internals</title>
      
      
      <sect1
	id="booting">
	<title>The FreeBSD Booting Process</title>
	
	<para><emphasis>Contributed by &a.phk;. v1.1, April
	    26th.</emphasis></para>
	
	<para>Booting FreeBSD is essentially a three step process: load the
	  kernel, determine the root filesystem and initialize user-land
	  things. This leads to some interesting possibilities shown
	  below.</para>
	
	
	<sect2>
	  <title>Loading a kernel</title>
	  
	  <para>We presently have three basic mechanisms for loading the
	    kernel as described below: they all pass some information to the
	    kernel to help the kernel decide what to do next.</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>Biosboot</term>
		<listitem>
		  <para>Biosboot is our ``bootblocks''. It consists of two
		    files which will be installed in the first 8Kbytes of the
		    floppy or hard-disk slice to be booted from.</para>
		  
		  <para>Biosboot can load a kernel from a FreeBSD
		    filesystem.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>Dosboot</term>
		
		<listitem>
		  <para>Dosboot was written by DI. Christian Gusenbauer, and
		    is unfortunately at this time one of the few pieces of
		    code that will not compile under FreeBSD itself because it
		    is written for Microsoft compilers.</para>
		  
		  <para>Dosboot will boot the kernel from a MS-DOS file or
		    from a FreeBSD filesystem partition on the disk.  It
		    attempts to negotiate with the various and strange kinds
		    of memory manglers that lurk in high memory on MS/DOS
		    systems and usually wins them for its case.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>Netboot</term>
		
		<listitem>
		  <para>Netboot will try to find a supported Ethernet card,
		    and use BOOTP, TFTP and NFS to find a kernel file to
		    boot.</para>
		  
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Determine the root filesystem</title>
	  
	  <para>Once the kernel is loaded and the boot-code jumps to it, the
	    kernel will initialize itself, trying to determine what hardware
	    is present and so on; it then needs to find a root
	    filesystem.</para>
	  
	  <para>Presently we support the following types of root
	    filesystems:</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>UFS</term>
		<listitem>
		  <para>This is the most normal type of root filesystem. It
		    can reside on a floppy or on hard disk.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>MSDOS</term>
		
		<listitem>
		  <para>While this is technically possible, it is not
		    particular useful because of the ``FAT'' filesystem's
		    inability to deal with links, device nodes and other such
		    ``UNIXisms''.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>MFS</term>
		
		<listitem>
		  <para>This is actually a UFS filesystem which has been
		    compiled into the kernel.  That means that the kernel does
		    not really need any hard disks, floppies or other hardware
		    to function.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>CD9660</term>
		
		<listitem>
		  <para>This is for using a CD-ROM as root filesystem.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>NFS</term>
		
		<listitem>
		  <para>This is for using a fileserver as root filesystem,
		    basically making it a diskless machine.</para>
		  
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Initialize user-land things</title>
	  
	  <para>To get the user-land going, the kernel, when it has finished
	    initialization, will create a process with ``<literal>pid ==
	      1</literal>'' and execute a program on the root filesystem; this
	    program is normally ``<filename>/sbin/init</filename>''.</para>
	  
	  <para>You can substitute any program for /sbin/init, as long as you
	    keep in mind that:</para>
	  
	  <para>there is no stdin/out/err unless you open it yourself. If you
	    exit, the machine panics. Signal handling is special for
	    ``<literal>pid == 1</literal>''.</para>
	  
	  <para>An example of this is the
	    ``<filename>/stand/sysinstall</filename>'' program on the
	    installation floppy.</para>
	  
	</sect2>
	
	<sect2>
	  <title>Interesting combinations</title>
	  
	  <para>Boot a kernel with a MFS in it with a special
	    <filename>/sbin/init</filename> which...
	    <variablelist>
	      <varlistentry><term>A -- Using DOS</term>
		<listitem>
		  <para>
		    <itemizedlist>
		      
		      <listitem>
			<para>mounts your <emphasis remap=tt>C:</emphasis> as
			  <filename>/C:</filename></para>
		      </listitem>
		      
		      <listitem>
			<para>Attaches <filename>C:/freebsd.fs</filename> on
			  <filename>/dev/vn0</filename></para>
		      </listitem>
		      
		      <listitem>
			<para>mounts <filename>/dev/vn0</filename> as
			  <filename>/rootfs</filename></para>
		      </listitem>
		      
		      <listitem>
			<para>makes symlinks<!-- <br> --> <emphasis
			    remap=tt>/rootfs/bin -&gt; /bin</emphasis><!--
			<br> --> <emphasis remap=tt>/rootfs/etc -&gt;
			    /etc</emphasis><!-- <br> --> <emphasis
			    remap=tt>/rootfs/sbin -&gt; /sbin</emphasis><!--
			<br> --> (etc...)<!-- <br> --></para>
		      </listitem>
		      
		    </itemizedlist>
		  </para>
		  
		  <para>Now you are running FreeBSD without repartitioning
		    your hard disk...</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>B -- Using NFS</term>
		
		<listitem>
		  <para>NFS mounts your
		    <filename>server:~you/FreeBSD</filename> as
		    <filename>/nfs</filename>, chroots to
		    <filename>/nfs</filename> and executes
		    <filename>/sbin/init</filename> there</para>
		  
		  <para>Now you are running FreeBSD diskless, even though you
		    do not control the NFS server...</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>C -- Start an X-server</term>
		
		<listitem>
		  <para>Now you have an X-terminal, which is better than that
		    dingy X-under-windows-so-slow-you-can-see-what-it-does
		    thing that your boss insist is better than forking out
		    money on hardware.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>D -- Using a tape</term>
		
		<listitem>
		  <para>Takes a copy of <filename>/dev/rwd0</filename> and
		    writes it to a remote tape station or fileserver.</para>
		  
		  <para>Now you finally get that backup you should have made a
		    year ago...</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>E -- Acts as a firewall/web-server/what do I
		  know...</term>
		
		<listitem>
		  <para>This is particularly interesting since you can boot
		    from a write- protected floppy, but still write to your
		    root filesystem...</para>
		  
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="memoryuse">
	<title>PC Memory Utilization</title>
	
	<para><emphasis>Contributed by &a.joerg;.<!-- <br> --> 16 Apr
	    1995.</emphasis></para>
	
	<para><emphasis>A short description of how FreeBSD uses memory on the
	    i386  platform</emphasis></para>
	
	<para>The boot sector will be loaded at <literal>0:0x7c00</literal>,
	  and relocates itself immediately to <literal>0x7c0:0</literal>.
	  (This is nothing magic, just an adjustment for the <emphasis
	    remap=tt>%cs</emphasis> selector, done by an <emphasis
	    remap=tt>ljmp</emphasis>.)</para>
	
	<para>It then loads the first 15 sectors at <literal>0x10000</literal>
	  (segment BOOTSEG in the biosboot Makefile), and sets up the stack to
	  work below <literal>0x1fff0</literal>. After this, it jumps to the
	  entry of boot2 within that code.  I.e., it jumps over itself and the
	  (dummy) partition table, and it is going to adjust the %cs
	  selector---we are still in 16-bit mode there.</para>
	
	<para>boot2 asks for the boot file, and examines the
	  <filename>a.out</filename> header.  It masks the file entry point
	  (usually <literal>0xf0100000</literal>) by
	  <literal>0x00ffffff</literal>, and loads the file there.  Hence the
	  usual load point is 1 MB (<literal>0x00100000</literal>).  During
	  load, the boot code toggles back and forth between real and
	  protected mode, to use the BIOS in real mode.</para>
	
	<para>The boot code itself uses segment selectors
	  <literal>0x18</literal> and <literal>0x20</literal> for <emphasis
	    remap=tt>%cs</emphasis> and <filename>%ds/%es</filename> in
	  protected mode, and <literal>0x28</literal> to jump back into real
	  mode.  The kernel is finally started with <emphasis
	    remap=tt>%cs</emphasis> <literal>0x08</literal> and
	  <filename>%ds/%es/%ss</filename> <literal>0x10</literal>, which
	  refer to dummy descriptors covering the entire address space.</para>
	
	<para>The kernel will be started at its load point.  Since it has been
	  linked for another (high) address, it will have to execute PIC until
	  the page table and page directory stuff is setup properly, at which
	  point paging will be enabled and the kernel will finally run at the
	  address for which it was linked.</para>
	
	<para><emphasis>Contributed by &a.davidg;.<!-- <br> --> 16 Apr
	    1995.</emphasis></para>
	
	<para>The physical pages immediately following the kernel BSS contain
	  proc0's page directory, page tables, and upages. Some time later
	  when the VM system is initialized, the physical memory between
	  <literal>0x1000-0x9ffff</literal> and the physical memory after the
	  kernel (text+data+bss+proc0 stuff+other misc) is made available in
	  the form of general VM pages and added to the global free page
	  list.</para>
	
      </sect1>
      
      <sect1
	id="dma">
	<title>DMA: What it Is and How it Works</title>
	
	<para><emphasis>Copyright &copy; 1995,1997 &a.uhclem;, All Rights
	    Reserved.<!-- <br> --> 10 December 1996.  Last Update 8 October
	    1997.</emphasis></para>
	
	<para>Direct Memory Access (DMA) is a method of allowing data to be
	  moved from one location to another in a computer without
	  intervention from the central processor (CPU).</para>
	
	<para>The way that the DMA function is implemented varies between
	  computer architectures, so this discussion will limit itself to the
	  implementation and workings of the DMA subsystem on the IBM Personal
	  Computer (PC), the IBM PC/AT and all of its successors and
	  clones.</para>
	
	<para>The PC DMA subsystem is based on the Intel 8237 DMA controller.
	  The 8237 contains four DMA channels that can be programmed
	  independently and any one of the channels may be active at any
	  moment.  These channels are numbered 0, 1, 2 and 3.  Starting with
	  the PC/AT, IBM added a second 8237 chip, and numbered those channels
	  4, 5, 6 and 7.</para>
	
	<para>The original DMA controller (0, 1, 2 and 3) moves one byte in
	  each transfer.  The second DMA controller (4, 5, 6, and 7) moves
	  16-bits from two adjacent memory locations in each transfer, with
	  the first byte always coming from an even-numbered address.  The two
	  controllers are identical components and the difference in transfer
	  size is caused by the way the second controller is wired into the
	  system.</para>
	
	<para>The 8237 has two electrical signals for each channel, named DRQ
	  and -DACK.  There are additional signals with the names HRQ (Hold
	  Request), HLDA (Hold Acknowledge), -EOP (End of Process), and the
	  bus control signals -MEMR (Memory Read), -MEMW (Memory Write), -IOR
	  (I/O Read), and -IOW (I/O Write).</para>
	
	<para>The 8237 DMA is known as a ``fly-by'' DMA controller.  This
	  means that the data being moved from one location to another does
	  not pass through the DMA chip and is not stored in the DMA chip.
	  Subsequently, the DMA can only transfer data between an I/O port and
	  a memory address, but not between two I/O ports or two memory
	  locations.</para>
	
	<para>
	  <blockquote>
	    <para><emphasis>Note:</emphasis> The 8237 does allow two channels
	      to be connected together to allow memory-to-memory DMA
	      operations in a non-``fly-by'' mode, but nobody in the PC
	      industry uses this scarce resource this way since it is faster
	      to move data between memory locations using the CPU.</para>
	  </blockquote>
	</para>
	
	<para>In the PC architecture, each DMA channel is normally activated
	  only when the hardware that uses a given DMA channel requests a
	  transfer by asserting the DRQ line for that channel.</para>
	
	
	<sect2>
	  <title>A Sample DMA transfer</title>
	  
	  <para>Here is an example of the steps that occur to cause and
	    perform a DMA transfer.  In this example, the floppy disk
	    controller (FDC) has just read a byte from a diskette and wants
	    the DMA to place it in memory at location 0x00123456.  The process
	    begins by the FDC asserting the DRQ2 signal (the DRQ line for DMA
	    channel 2) to alert the DMA controller.</para>
	  
	  <para>The DMA controller will note that the DRQ2 signal is asserted.
	    The DMA controller will then make sure that DMA channel 2 has been
	    programmed and is unmasked (enabled).  The DMA controller also
	    makes sure that none of the other DMA channels are active or want
	    to be active and have a higher priority.  Once these checks are
	    complete, the DMA asks the CPU to release the bus so that the DMA
	    may use the bus.  The DMA requests the bus by asserting the HRQ
	    signal which goes to the CPU.</para>
	  
	  <para>The CPU detects the HRQ signal, and will complete executing
	    the current instruction.  Once the processor has reached a state
	    where it can release the bus, it will.  Now all of the signals
	    normally generated by the CPU (-MEMR, -MEMW, -IOR, -IOW and a few
	    others) are placed in a tri-stated condition (neither high or low)
	    and then the CPU asserts the HLDA signal which tells the DMA
	    controller that it is now in charge of the bus.  </para>
	  
	  <para>Depending on the processor, the CPU may be able to execute a
	    few additional instructions now that it no longer has the bus, but
	    the CPU will eventually have to wait when it reaches an
	    instruction that must read something from memory that is not in
	    the internal processor cache or pipeline.</para>
	  
	  <para>Now that the DMA ``is in charge'', the DMA activates its
	    -MEMR, -MEMW, -IOR, -IOW output signals, and the address outputs
	    from the DMA are set to 0x3456, which will be used to direct the
	    byte that is about to transferred to a specific memory
	    location.</para>
	  
	  <para>The DMA will then let the device that requested the DMA
	    transfer know that the transfer is commencing.  This is done by
	    asserting the -DACK signal, or in the case of the floppy disk
	    controller, -DACK2 is asserted.</para>
	  
	  <para>The floppy disk controller is now responsible for placing the
	    byte to be transferred on the bus Data lines.  Unless the floppy
	    controller needs more time to get the data byte on the bus (and if
	    the peripheral does need more time it alerts the DMA via the READY
	    signal), the DMA will wait one DMA clock, and then de-assert the
	    -MEMW and -IOR signals so that the memory will latch and store the
	    byte that was on the bus, and the FDC will know that the byte has
	    been transferred.</para>
	  
	  <para>Since the DMA cycle only transfers a single byte at a time,
	    the FDC now drops the DRQ2 signal, so the DMA knows that it is no
	    longer needed.  The DMA will de-assert the -DACK2 signal, so that
	    the FDC knows it must stop placing data on the bus.</para>
	  
	  <para>The DMA will now check to see if any of the other DMA channels
	    have any work to do.  If none of the channels have their DRQ lines
	    asserted, the DMA controller has completed its work and will now
	    tri-state the -MEMR, -MEMW, -IOR, -IOW and address signals.</para>
	  
	  <para>Finally, the DMA will de-assert the HRQ signal.  The CPU sees
	    this, and de-asserts the HOLDA signal.  Now the CPU activates its
	    -MEMR, -MEMW, -IOR, -IOW and address lines, and it resumes
	    executing instructions and accessing main memory and the
	    peripherals.</para>
	  
	  <para>For a typical floppy disk sector, the above process is
	    repeated 512 times, once for each byte.  Each time a byte is
	    transferred, the address register in the DMA is incremented and
	    the counter in the DMA that shows how many bytes are to be
	    transferred is decremented.</para>
	  
	  <para>When the counter reaches zero, the DMA asserts the EOP signal,
	    which indicates that the counter has reached zero and no more data
	    will be transferred until the DMA controller is reprogrammed by
	    the CPU.  This event is also called the Terminal Count (TC).
	    There is only one EOP signal, and since only DMA channel can be
	    active at any instant, the DMA channel that is currently active
	    must be the DMA channel that just completed its task.</para>
	  
	  <para>If a peripheral wants to generate an interrupt when the
	    transfer of a buffer is complete, it can test for its -DACKn
	    signal and the EOP signal both being asserted at the same time.
	    When that happens, it means the DMA will not transfer any more
	    information for that peripheral without intervention by the CPU.
	    The peripheral can then assert one of the interrupt signals to get
	    the processors' attention.  In the PC architecture, the DMA chip
	    itself is not capable of generating an interrupt.  The peripheral
	    and its associated hardware is responsible for generating any
	    interrupt that occurs.  Subsequently, it is possible to have a
	    peripheral that uses DMA but does not use interrupts.</para>
	  
	  <para>It is important to understand that although the CPU always
	    releases the bus to the DMA when the DMA makes the request, this
	    action is invisible to both applications and the operating
	    systems, except for slight changes in the amount of time the
	    processor takes to execute instructions when the DMA is active.
	    Subsequently, the processor must poll the peripheral, poll the
	    registers in the DMA chip, or receive an interrupt from the
	    peripheral to know for certain when a DMA transfer has
	    completed.</para>
	  
	</sect2>
	
	<sect2>
	  <title>DMA Page Registers and 16Meg address space
	    limitations</title>
	  
	  <para>You may have noticed earlier that instead of the DMA setting
	    the address lines to 0x00123456 as we said earlier, the DMA only
	    set 0x3456.  The reason for this takes a bit of explaining.</para>
	  
	  <para>When the original IBM PC was designed, IBM elected to use both
	    DMA and interrupt controller chips that were designed for use with
	    the 8085, an 8-bit processor with an address space of 16 bits
	    (64K).  Since the IBM PC supported more than 64K of memory,
	    something had to be done to allow the DMA to read or write memory
	    locations above the 64K mark.  What IBM did to solve this problem
	    was to add an external data latch for each DMA channel that holds
	    the upper bits of the address to be read to or written from.
	    Whenever a DMA channel is active, the contents of that latch are
	    written to the address bus and kept there until the DMA operation
	    for the channel ends.  IBM called these latches ``Page
	    Registers''.</para>
	  
	  <para>So for our example above, the DMA would put the 0x3456 part of
	    the address on the bus, and the Page Register for DMA channel 2
	    would put 0x0012xxxx on the bus.  Together, these two values form
	    the complete address in memory that is to be accessed.</para>
	  
	  <para>Because the Page Register latch is independent of the DMA
	    chip, the area of memory to be read or written must not span a 64K
	    physical boundary.  For example, if the DMA accesses memory
	    location 0xffff, after that transfer the DMA will then increment
	    the address register and the DMA will access the next byte at
	    location 0x0000, not 0x10000.  The results of letting this happen
	    are probably not intended.</para>
	  
	  <para>
	    <blockquote>
	      <para><emphasis>Note:</emphasis> ``Physical'' 64K boundaries
		should not be confused with 8086-mode 64K ``Segments'', which
		are created by mathematically adding a segment register with
		an offset register.  Page Registers have no address overlap
		and are mathematically OR-ed together.</para>
	    </blockquote>
	  </para>
	  
	  <para>To further complicate matters, the external DMA address
	    latches on the PC/AT hold only eight bits, so that gives us
	    8+16=24 bits, which means that the DMA can only point at memory
	    locations between 0 and 16Meg.  For newer computers that allow
	    more than 16Meg of memory, the standard PC-compatible DMA cannot
	    access memory locations above 16Meg.</para>
	  
	  <para>To get around this restriction, operating systems will reserve
	    a RAM buffer in an area below 16Meg that also does not span a
	    physical 64K boundary.  Then the DMA will be programmed to
	    transfer data from the peripheral and into that buffer.  Once the
	    DMA has moved the data into this buffer, the operating system will
	    then copy the data from the buffer to the address where the data
	    is really supposed to be stored.</para>
	  
	  <para>When writing data from an address above 16Meg to a DMA-based
	    peripheral, the data must be first copied from where it resides
	    into a buffer located below 16Meg, and then the DMA can copy the
	    data from the buffer to the hardware.  In FreeBSD, these reserved
	    buffers are called ``Bounce Buffers''.  In the MS-DOS world, they
	    are sometimes called ``Smart Buffers''.</para>
	  
	  <para>
	    <blockquote>
	      <para><emphasis>Note:</emphasis> A new implementation of the
		8237, called the 82374, allows 16 bits of page register to be
		specified, allows access to the entire 32 bit address space,
		without the use of bounce buffers.</para>
	    </blockquote>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>DMA Operational Modes and Settings</title>
	  
	  <para>The 8237 DMA can be operated in several modes.  The main ones
	    are:</para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>Single</term>
		<listitem>
		  <para>A single byte (or word) is transferred. The DMA must
		    release and re-acquire the bus for each additional byte.
		    This is commonly-used by devices that cannot transfer the
		    entire block of data immediately.  The peripheral will
		    request the DMA each time it is ready for another
		    transfer.</para>
		  
		  <para>The standard PC-compatible floppy disk controller (NEC
		    765) only has a one-byte buffer, so it uses this
		    mode.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>Block/Demand</term>
		
		<listitem>
		  <para>Once the DMA acquires the system bus, an entire block
		    of data is transferred, up to a maximum of 64K.  If the
		    peripheral needs additional time, it can assert the READY
		    signal to suspend the transfer briefly.  READY should not
		    be used excessively, and for slow peripheral transfers,
		    the Single Transfer Mode should be used instead.</para>
		  
		  <para>The difference between Block and Demand is that once a
		    Block transfer is started, it runs until the transfer
		    count reaches zero.  DRQ only needs to be asserted until
		    -DACK is asserted.  Demand Mode will transfer one more
		    bytes until DRQ is de-asserted, at which point the DMA
		    suspends the transfer and releases the bus back to the
		    CPU. When DRQ is asserted later, the transfer resumes
		    where it was suspended.</para>
		  
		  <para>Older hard disk controllers used Demand Mode until CPU
		    speeds increased to the point that it was more efficient
		    to transfer the data using the CPU, particularly if the
		    memory locations used in the transfer were above the 16Meg
		    mark.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>Cascade</term>
		
		<listitem>
		  <para>This mechanism allows a DMA channel to request the
		    bus, but then the attached peripheral device is
		    responsible for placing the addressing information on the
		    bus instead of the DMA.  This is also used to implement a
		    technique known as ``Bus Mastering''.</para>
		  
		  <para>When a DMA channel in Cascade Mode receives control of
		    the bus, the DMA does not place addresses and I/O control
		    signals on the bus like the DMA normally does when it is
		    active.  Instead, the DMA only asserts the -DACK signal
		    for the active DMA channel.</para>
		  
		  <para>At this point it is up to the peripheral connected to
		    that DMA channel to provide address and bus control
		    signals. The peripheral has complete control over the
		    system bus, and can do reads and/or writes to any address
		    below 16Meg.  When the peripheral is finished with the
		    bus, it de-asserts the DRQ line, and the DMA controller
		    can then return control to the CPU or to some other DMA
		    channel.</para>
		  
		  <para>Cascade Mode can be used to chain multiple DMA
		    controllers together, and this is exactly what DMA Channel
		    4 is used for in the PC architecture.  When a peripheral
		    requests the bus on DMA channels 0, 1, 2 or 3, the slave
		    DMA controller asserts HLDREQ, but this wire is actually
		    connected to DRQ4 on the primary DMA controller instead of
		    to the CPU. The primary DMA controller, thinking it has
		    work to do on Channel 4, requests the bus from the CPU
		    using HLDREQ signal. Once the CPU grants the bus to the
		    primary DMA controller,  -DACK4 is asserted, and that wire
		    is actually connected to the HLDA signal on the slave DMA
		    controller.  The slave DMA controller then transfers data
		    for the DMA channel that requested it (0, 1, 2 or 3), or
		    the slave DMA may grant the bus to a peripheral that wants
		    to perform its own bus-mastering, such as a SCSI
		    controller.</para>
		  
		  <para>Because of this wiring arrangement, only DMA channels
		    0, 1, 2, 3, 5, 6 and 7 are usable with peripherals on
		    PC/AT systems.</para>
		  
		  <para>
		    <blockquote>
		      <para><emphasis>Note:</emphasis> DMA channel 0 was
			reserved for refresh operations in early IBM PC
			computers, but is generally available for use by
			peripherals in modern systems.</para>
		    </blockquote>
		  </para>
		  
		  <para>When a peripheral is performing Bus Mastering, it is
		    important that the peripheral transmit data to or from
		    memory constantly while it holds the system bus. If the
		    peripheral cannot do this, it must release the bus
		    frequently so that the system can perform refresh
		    operations on main memory.</para>
		  
		  <para>The Dynamic RAM used in all PCs for main memory must
		    be accessed frequently to keep the bits stored in the
		    components "charged".  Dynamic RAM essentially consists of
		    millions of capacitors with each one holding one bit of
		    data.  These capacitors are charged with power to
		    represent a "1" or drained to represent a "0".  Because
		    all capacitors leak, power must be added at regular
		    intervals to keep the "1" values intact.  The RAM chips
		    actually handle the task of pumping power back into all of
		    the appropriate locations in RAM, but they must be told
		    when to do it by the rest of the computer so that the
		    refresh activity won't interfere with the computer wanting
		    to access RAM normally. If the computer is unable to
		    refresh memory, the contents of memory will become
		    corrupted in just a few milliseconds.  </para>
		  
		  <para>Since memory read and write cycles ``count'' as
		    refresh cycles (a dynamic RAM refresh cycle is actually an
		    incomplete memory read cycle), as long as the peripheral
		    controller continues reading or writing data to sequential
		    memory locations, that action will refresh all of
		    memory.</para>
		  
		  <para>Bus-mastering is found in some SCSI host interfaces
		    and other high-performance peripheral controllers.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>Autoinitialize</term>
		
		<listitem>
		  <para>This mode causes the DMA to perform Byte, Block or
		    Demand transfers, but when the DMA transfer counter
		    reaches zero, the counter and address are set back to
		    where they were when the DMA channel was originally
		    programmed.  This means that as long as the peripheral
		    requests transfers, they will be granted.  It is up to the
		    CPU to move new data into the fixed buffer ahead of where
		    the DMA is about to transfer it when doing output
		    operations, and read new data out of the buffer behind
		    where the DMA is writing when doing input
		    operations.</para>
		  
		  <para>This technique is frequently used on audio devices
		    that have small or no hardware ``sample'' buffers.  There
		    is additional CPU overhead to manage this ``circular''
		    buffer, but in some cases this may be the only way to
		    eliminate the latency that occurs when the DMA counter
		    reaches zero and the DMA stops transfers until it is
		    reprogrammed.</para>
		  
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Programming the DMA</title>
	  
	  <para>The DMA channel that is to be programmed should always be
	    ``masked'' before loading any settings.  This is because the
	    hardware might unexpectedly assert the DRQ for that channel, and
	    the DMA might respond, even though not all of the parameters have
	    been loaded or updated.</para>
	  
	  <para>Once masked, the host must specify the direction of the
	    transfer (memory-to-I/O or I/O-to-memory), what mode of DMA
	    operation is to be used for the transfer (Single, Block, Demand,
	    Cascade, etc), and finally the address and length of the transfer
	    are loaded.  The length that is loaded is one less than the amount
	    you expect the DMA to transfer.  The LSB and MSB of the address
	    and length are written to the same 8-bit I/O port, so another port
	    must be written to first to guarantee that the DMA accepts the
	    first byte as the LSB and the second byte as the MSB of the length
	    and address.</para>
	  
	  <para>Then, be sure to update the Page Register, which is external
	    to the DMA and is accessed through a different set of I/O
	    ports.</para>
	  
	  <para>Once all the settings are ready, the DMA channel can be
	    un-masked.  That DMA channel is now considered to be ``armed'',
	    and will respond when the DRQ line for that channel is
	    asserted.</para>
	  
	  <para>Refer to a hardware data book for precise programming details
	    for the 8237.  You will also need to refer to the I/O port map for
	    the PC system, which describes where the DMA and Page Register
	    ports are located.  A complete port map table is located
	    below.</para>
	  
	</sect2>
	
	<sect2>
	  <title>DMA Port Map</title>
	  
	  <para>All systems based on the IBM-PC and PC/AT have the DMA
	    hardware located at the same I/O ports.  The complete list is
	    provided below.  Ports assigned to DMA Controller #2 are undefined
	    on non-AT designs.</para>
	  
	  
	  <sect3>
	    <title>0x00 - 0x1f DMA Controller #1 (Channels 0, 1, 2 and
	      3)</title>
	    
	    <para>DMA Address and Count Registers</para>
	    
	    <para>
	      <literallayout>0x00	write	Channel 0 starting address
		0x00	read	Channel 0 current address 0x01	write
		Channel 0 starting word count 0x01	read	Channel 0
		remaining word count 0x02	write	Channel 1 starting
		address 0x02	read	Channel 1 current address 0x03	write
		Channel 1 starting word count 0x03	read	Channel 1
		remaining word count 0x04	write	Channel 2 starting
		address 0x04	read	Channel 2 current address 0x05	write
		Channel 2 starting word count 0x05	read	Channel 2
		remaining word count 0x06	write	Channel 3 starting
		address 0x06	read	Channel 3 current address 0x07	write
		Channel 3 starting word count 0x07	read	Channel 3
		remaining word count</literallayout>
	    </para>
	    
	    <para>DMA Command Registers</para>
	    
	    <para>
	      <literallayout>0x08	write	Command Register 0x08	read
		Status Register 0x09	write	Request Register 0x09	read
		- 0x0a	write	Single Mask Register Bit 0x0a	read	- 0x0b
		write	Mode Register 0x0b	read	- 0x0c	write	Clear
		LSB/MSB Flip-Flop 0x0c	read	- 0x0d	write	Master
		Clear/Reset 0x0d	read	Temporary Register (not
		available on newer versions) 0x0e	write	Clear Mask
		Register 0x0e	read	- 0x0f	write	Write All Mask
		Register Bits 0x0f	read	Read All Mask Register Bits
		(only in Intel 82374)</literallayout>
	    </para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>0xc0 - 0xdf DMA Controller #2 (Channels 4, 5, 6 and
	      7)</title>
	    
	    <para>DMA Address and Count Registers</para>
	    
	    <para>
	      <literallayout>0xc0	write	Channel 4 starting address
		0xc0	read	Channel 4 current address 0xc2	write
		Channel 4 starting word count 0xc2	read	Channel 4
		remaining word count 0xc4	write	Channel 5 starting
		address 0xc4	read	Channel 5 current address 0xc6	write
		Channel 5 starting word count 0xc6	read	Channel 5
		remaining word count 0xc8	write	Channel 6 starting
		address 0xc8	read	Channel 6 current address 0xca	write
		Channel 6 starting word count 0xca	read	Channel 6
		remaining word count 0xcc	write	Channel 7 starting
		address 0xcc	read	Channel 7 current address 0xce	write
		Channel 7 starting word count 0xce	read	Channel 7
		remaining word count</literallayout>
	    </para>
	    
	    <para>DMA Command Registers</para>
	    
	    <para>
	      <literallayout>0xd0	write	Command Register 0xd0	read
		Status Register 0xd2	write	Request Register 0xd2	read
		- 0xd4	write	Single Mask Register Bit 0xd4	read	- 0xd6
		write	Mode Register 0xd6	read	- 0xd8	write	Clear
		LSB/MSB Flip-Flop 0xd8	read	- 0xda	write	Master
		Clear/Reset 0xda	read	Temporary Register (not
		present in Intel 82374) 0xdc	write	Clear Mask Register
		0xdc	read	- 0xde	write	Write All Mask Register Bits
		0xdf	read	Read All Mask Register Bits (only in Intel
		82374)</literallayout>
	    </para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>0x80 - 0x9f DMA Page Registers</title>
	    
	    <para>
	      <literallayout>0x87	r/w	Channel 0 Low byte (23-16)
		page Register 0x83	r/w	Channel 1 Low byte (23-16)
		page Register 0x81	r/w	Channel 2 Low byte (23-16)
		page Register 0x82	r/w	Channel 3 Low byte (23-16)
		page Register 0x8b	r/w	Channel 5 Low byte (23-16)
		page Register 0x89	r/w	Channel 6 Low byte (23-16)
		page Register 0x8a	r/w	Channel 7 Low byte (23-16)
		page Register 0x8f	r/w	Low byte page
		Refresh</literallayout>
	    </para>
	    
	  </sect3>
	  
	  <sect3>
	    <title>0x400 - 0x4ff 82374 Enhanced DMA Registers</title>
	    
	    <para>The Intel 82374 EISA System Component (ESC) was introduced
	      in early 1996 and includes a DMA controller that provides a
	      superset of 8237 functionality as well as other PC-compatible
	      core peripheral components in a single package.  This chip is
	      targeted at both EISA and PCI platforms, and provides modern DMA
	      features like scatter-gather, ring buffers as well as direct
	      access by the system DMA to all 32 bits of address space.
	    </para>
	    
	    <para>If these features are used, code should also be included to
	      provide similar functionality in the previous 16 years worth of
	      PC-compatible computers. For compatibility reasons, some of the
	      82374 registers must be programmed <emphasis>after</emphasis>
	      programming the traditional 8237 registers for each  transfer.
	      Writing to a traditional 8237 register forces the contents of
	      some of the 82374 enhanced registers to zero to provide backward
	      software compatibility.</para>
	    
	    <para>
	      <literallayout>0x401	r/w	Channel 0 High byte (bits
		23-16) word count 0x403	r/w	Channel 1 High byte (bits
		23-16) word count 0x405	r/w	Channel 2 High byte (bits
		23-16) word count 0x407	r/w	Channel 3 High byte (bits
		23-16) word count 0x4c6	r/w	Channel 5 High byte (bits
		23-16) word count 0x4ca	r/w	Channel 6 High byte (bits
		23-16) word count 0x4ce	r/w	Channel 7 High byte (bits
		23-16) word count 0x487	r/w	Channel 0 High byte (bits
		31-24) page Register 0x483	r/w	Channel 1 High byte
		(bits 31-24) page Register 0x481	r/w	Channel 2 High
		byte (bits 31-24) page Register 0x482	r/w	Channel 3 High
		byte (bits 31-24) page Register 0x48b	r/w	Channel 5 High
		byte (bits 31-24) page Register 0x489	r/w	Channel 6 High
		byte (bits 31-24) page Register 0x48a	r/w	Channel 6 High
		byte (bits 31-24) page Register 0x48f	r/w	High byte page
		Refresh 0x4e0	r/w	Channel 0 Stop Register (bits 7-2)
		0x4e1	r/w	Channel 0 Stop Register (bits 15-8) 0x4e2
		r/w	Channel 0 Stop Register (bits 23-16) 0x4e4	r/w
		Channel 1 Stop Register (bits 7-2) 0x4e5	r/w
		Channel 1 Stop Register (bits 15-8) 0x4e6	r/w
		Channel 1 Stop Register (bits 23-16) 0x4e8	r/w
		Channel 2 Stop Register (bits 7-2) 0x4e9	r/w
		Channel 2 Stop Register (bits 15-8) 0x4ea	r/w
		Channel 2 Stop Register (bits 23-16) 0x4ec	r/w
		Channel 3 Stop Register (bits 7-2) 0x4ed	r/w
		Channel 3 Stop Register (bits 15-8) 0x4ee	r/w
		Channel 3 Stop Register (bits 23-16) 0x4f4	r/w
		Channel 5 Stop Register (bits 7-2) 0x4f5	r/w
		Channel 5 Stop Register (bits 15-8) 0x4f6	r/w
		Channel 5 Stop Register (bits 23-16) 0x4f8	r/w
		Channel 6 Stop Register (bits 7-2) 0x4f9	r/w
		Channel 6 Stop Register (bits 15-8) 0x4fa	r/w
		Channel 6 Stop Register (bits 23-16) 0x4fc	r/w
		Channel 7 Stop Register (bits 7-2) 0x4fd	r/w
		Channel 7 Stop Register (bits 15-8) 0x4fe	r/w
		Channel 7 Stop Register (bits 23-16) 0x40a	write
		Channels 0-3 Chaining Mode Register 0x40a	read
		Channel Interrupt Status Register 0x4d4	write	Channels 4-7
		Chaining Mode Register 0x4d4	read	Chaining Mode Status
		0x40c	read	Chain Buffer Expiration Control Register 0x410
		write	Channel 0 Scatter-Gather Command Register 0x411	write
		Channel 1 Scatter-Gather Command Register 0x412	write
		Channel 2 Scatter-Gather Command Register 0x413	write
		Channel 3 Scatter-Gather Command Register 0x415	write
		Channel 5 Scatter-Gather Command Register 0x416	write
		Channel 6 Scatter-Gather Command Register 0x417	write
		Channel 7 Scatter-Gather Command Register 0x418	read
		Channel 0 Scatter-Gather Status Register 0x419	read
		Channel 1 Scatter-Gather Status Register 0x41a	read
		Channel 2 Scatter-Gather Status Register 0x41b	read
		Channel 3 Scatter-Gather Status Register 0x41d	read
		Channel 5 Scatter-Gather Status Register 0x41e	read
		Channel 5 Scatter-Gather Status Register 0x41f	read
		Channel 7 Scatter-Gather Status Register 0x420-0x423 r/w
		Channel 0 Scatter-Gather Descriptor Table Pointer Register
		0x424-0x427 r/w	Channel 1 Scatter-Gather Descriptor Table
		Pointer Register 0x428-0x42b r/w	Channel 2
		Scatter-Gather Descriptor Table Pointer Register 0x42c-0x42f
		r/w	Channel 3 Scatter-Gather Descriptor Table Pointer
		Register 0x434-0x437 r/w	Channel 5 Scatter-Gather
		Descriptor Table Pointer Register 0x438-0x43b r/w
		Channel 6 Scatter-Gather Descriptor Table Pointer Register
		0x43c-0x43f r/w	Channel 7 Scatter-Gather Descriptor Table
		Pointer Register</literallayout>
	    </para>
	    
	    <para>	      </para>
	    
	  </sect3>
	</sect2>
      </sect1>
    </chapter>
  </part>
  
  <part>
    <title>Appendices</title>
    
    
    <chapter
      id="mirrors">
      <title>Obtaining FreeBSD</title>
      
      
      <sect1>
	<title>CD-ROM Publishers</title>
	
	<para>FreeBSD is available on CD-ROM from Walnut Creek CDROM:
	  <blockquote>
	    <para>Walnut Creek CDROM<!-- <br> --> 4041 Pike Lane, Suite F<!--
	    <br> --> Concord CA 94520 USA<!-- <br> --> Phone: +1 925
	      674-0783<!-- <br> --> Fax: +1 925 674-0821<!-- <br> --> Email:
	      <ulink URL="mailto:info@cdrom.com">info@cdrom.com</ulink><!--
	    <br> --> WWW: <ulink
		URL="http://www.cdrom.com/">http://www.cdrom.com/</ulink></para>
	  </blockquote>
	</para>
	
      </sect1>
      
      <sect1
	id="mirrors-ftp">
	<title>FTP Sites</title>
	
	<para>The official sources for FreeBSD are available via anonymous FTP
	  from:
	  <blockquote>
	    <para><ulink
		URL="ftp://ftp.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.FreeBSD.ORG/pub/FreeBSD</ulink>.</para>
	  </blockquote>
	</para>
	
	<para>Additionally, FreeBSD is available via anonymous FTP from the
	  following mirror sites. If you choose to obtain FreeBSD via
	  anonymous FTP, please try to use a site near you.</para>
	
	<para><xref linkend="mirrors-ar" remap="Argentina">, 
	  <xref linkend="mirrors-au" remap="Australia">, 
	  <xref linkend="mirrors-br" remap="Brazil">, 
	  <xref linkend="mirrors-ca" remap="Canada">,
	  <xref linkend="mirrors-cz" remap="Czech Republic">,
	  <xref linkend="mirrors-dk" remap="Denmark">,
	  <xref linkend="mirrors-ee" remap="Estonia">,
	  <xref linkend="mirrors-fi" remap="Finland">,
	  <xref linkend="mirrors-fr" remap="France">,
	  <xref linkend="mirrors-de" remap="Germany">,
	  <xref linkend="mirrors-hk" remap="Hong Kong">,
	  <xref linkend="mirrors-ie" remap="Ireland">,
	  <xref linkend="mirrors-il" remap="Israel">,
	  <xref linkend="mirrors-jp" remap="Japan">,
	  <xref linkend="mirrors-kr" remap="Korea">,
	  <xref linkend="mirrors-nl" remap="Netherlands">,
	  <xref linkend="mirrors-pl" remap="Poland">,
	  <xref linkend="mirrors-pt" remap="Portugal">,
	  <xref linkend="mirrors-ru" remap="Russia">,
	  <xref linkend="mirrors-za" remap="South Africa">,
	  <xref linkend="mirrors-si" remap="Slovenia">,
	  <xref linkend="mirrors-se" remap="Sweden">,
	  <xref linkend="mirrors-tw" remap="Taiwan">,
	  <xref linkend="mirrors-th" remap="Thailand">,
	  <xref linkend="mirrors-ua" remap="Ukraine">,
	  <xref linkend="mirrors-uk" remap="UK">,
	  <xref linkend="mirrors-us" remap="USA">.</para>
	
	<para>
	  <variablelist>
	    <varlistentry><term><anchor id="mirrors-ar">Argentina</term>
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@ar.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.ar.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.ar.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-au">Australia</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@au.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.au.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.au.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp2.au.FreeBSD.ORG/pub/FreeBSD">ftp://ftp2.au.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp3.au.FreeBSD.ORG/pub/FreeBSD">ftp://ftp3.au.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp4.au.FreeBSD.ORG/pub/FreeBSD">ftp://ftp4.au.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-br">Brazil</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@br.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.br.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.br.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp2.br.FreeBSD.ORG/pub/FreeBSD">ftp://ftp2.br.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp3.br.FreeBSD.ORG/pub/FreeBSD">ftp://ftp3.br.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp4.br.FreeBSD.ORG/pub/FreeBSD">ftp://ftp4.br.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp5.br.FreeBSD.ORG/pub/FreeBSD">ftp://ftp5.br.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp6.br.FreeBSD.ORG/pub/FreeBSD">ftp://ftp6.br.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp7.br.FreeBSD.ORG/pub/FreeBSD">ftp://ftp7.br.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-ca">Canada</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@ca.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.ca.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.ca.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-cz">Czech Republic</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://sunsite.mff.cuni.cz/OS/FreeBSD">ftp://sunsite.mff.cuni.cz/OS/FreeBSD</ulink><!-- <br> --> Contact: <ulink URL="mailto:jj@sunsite.mff.cuni.cz">jj@sunsite.mff.cuni.cz</ulink>.
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-dk">Denmark</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@dk.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.dk.freeBSD.ORG/pub/FreeBSD">ftp://ftp.dk.freeBSD.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-ee">Estonia</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@ee.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.ee.freebsd.ORG/pub/FreeBSD">ftp://ftp.ee.freebsd.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-fi">Finland</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@fi.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.fi.freebsd.ORG/pub/FreeBSD">ftp://ftp.fi.freebsd.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-fr">France</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.ibp.fr/pub/FreeBSD">ftp://ftp.ibp.fr/pub/FreeBSD</ulink><!-- <br> --> Contact: <ulink URL="mailto:Remy.Card@ibp.fr">Remy.Card@ibp.fr</ulink>.
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-de">Germany</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@de.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.de.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.de.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp2.de.FreeBSD.ORG/pub/FreeBSD">ftp://ftp2.de.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp3.de.FreeBSD.ORG/pub/FreeBSD">ftp://ftp3.de.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp4.de.FreeBSD.ORG/pub/FreeBSD">ftp://ftp4.de.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp5.de.FreeBSD.ORG/pub/FreeBSD">ftp://ftp5.de.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp6.de.FreeBSD.ORG/pub/FreeBSD">ftp://ftp6.de.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp7.de.FreeBSD.ORG/pub/FreeBSD">ftp://ftp7.de.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-hk">Hong Kong</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.hk.super.net/pub/FreeBSD">ftp://ftp.hk.super.net/pub/FreeBSD</ulink><!-- <br> --> Contact: <ulink URL="mailto:ftp-admin@HK.Super.NET">ftp-admin@HK.Super.NET</ulink>.
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-ie">Ireland</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@ie.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.ie.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.ie.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-il">Israel</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@il.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.il.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.il.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp2.il.FreeBSD.ORG/pub/FreeBSD">ftp://ftp2.il.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-jp">Japan</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@jp.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.jp.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.jp.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp2.jp.FreeBSD.ORG/pub/FreeBSD">ftp://ftp2.jp.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp3.jp.FreeBSD.ORG/pub/FreeBSD">ftp://ftp3.jp.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp4.jp.FreeBSD.ORG/pub/FreeBSD">ftp://ftp4.jp.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp5.jp.FreeBSD.ORG/pub/FreeBSD">ftp://ftp5.jp.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp6.jp.FreeBSD.ORG/pub/FreeBSD">ftp://ftp6.jp.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-kr">Korea</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@kr.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.kr.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.kr.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp2.kr.FreeBSD.ORG/pub/FreeBSD">ftp://ftp2.kr.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-nl">Netherlands</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@nl.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.nl.freebsd.ORG/pub/FreeBSD">ftp://ftp.nl.freebsd.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-pl">Poland</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@pl.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.pl.freebsd.ORG/pub/FreeBSD">ftp://ftp.pl.freebsd.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-pt">Portugal</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@pt.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.pt.freebsd.org/pub/FreeBSD">ftp://ftp.pt.freebsd.org/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp2.pt.freebsd.org/pub/FreeBSD">ftp://ftp2.pt.freebsd.org/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-ru">Russia</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@ru.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.ru.freebsd.org/pub/FreeBSD">ftp://ftp.ru.freebsd.org/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp2.ru.freebsd.org/pub/FreeBSD">ftp://ftp2.ru.freebsd.org/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp3.ru.freebsd.org/pub/FreeBSD">ftp://ftp3.ru.freebsd.org/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-za">South Africa</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@za.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.za.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.za.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp2.za.FreeBSD.ORG/pub/FreeBSD">ftp://ftp2.za.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp3.za.FreeBSD.ORG/FreeBSD">ftp://ftp3.za.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-si">Slovenia</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@si.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.si.freebsd.ORG/pub/FreeBSD">ftp://ftp.si.freebsd.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-se">Sweden</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@se.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.se.freebsd.ORG/pub/FreeBSD">ftp://ftp.se.freebsd.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-tw">Taiwan</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@tw.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.tw.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.tw.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp2.tw.FreeBSD.ORG/pub/FreeBSD">ftp://ftp2.tw.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp3.tw.FreeBSD.ORG/pub/FreeBSD">ftp://ftp3.tw.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-th">Thailand</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.nectec.or.th/pub/FreeBSD">ftp://ftp.nectec.or.th/pub/FreeBSD</ulink><!-- <br> --> Contact: <ulink URL="mailto:ftpadmin@ftp.nectec.or.th">ftpadmin@ftp.nectec.or.th</ulink>.
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-ua">Ukraine</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.ua.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.ua.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --> Contact: <ulink URL="mailto:archer@lucky.net">archer@lucky.net</ulink>.
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-uk">UK</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@uk.FreeBSD.ORG">hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.uk.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.uk.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp2.uk.FreeBSD.ORG/pub/FreeBSD">ftp://ftp2.uk.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp3.uk.FreeBSD.ORG/pub/FreeBSD">ftp://ftp3.uk.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp4.uk.FreeBSD.ORG/pub/FreeBSD">ftp://ftp4.uk.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term><anchor id="mirrors-us">USA</term>
	      
	      <listitem>
		<para>In case of problems, please contact the <ulink
		    URL="mailto:hostmaster@FreeBSD.ORG">hostmaster</ulink> for
		  this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp2.FreeBSD.ORG/pub/FreeBSD">ftp://ftp2.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp3.FreeBSD.ORG/pub/FreeBSD">ftp://ftp3.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp4.FreeBSD.ORG/pub/FreeBSD">ftp://ftp4.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp5.FreeBSD.ORG/pub/FreeBSD">ftp://ftp5.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp6.FreeBSD.ORG/pub/FreeBSD">ftp://ftp6.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
	
	<para>The latest versions of export-restricted code for FreeBSD (2.0C
	  or later) (eBones and secure) are being made available at the
	  following locations. If you are outside the U.S. or Canada, please
	  get secure (DES) and eBones (Kerberos) from one of the following
	  foreign distribution sites:</para>
	
	<para>
	  <variablelist>
	    <varlistentry><term>South Africa</term>
	      <listitem>
		<para><ulink
		    URL="mailto:hostmaster@internat.FreeBSD.ORG">Hostmaster</ulink> for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.internat.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.internat.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp2.internat.FreeBSD.ORG/pub/FreeBSD">ftp://ftp2.internat.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Brazil</term>
	      
	      <listitem>
		<para><ulink
		    URL="mailto:hostmaster@br.FreeBSD.ORG">Hostmaster</ulink>
		  for this domain.</para>
		
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.br.FreeBSD.ORG/pub/FreeBSD">ftp://ftp.br.FreeBSD.ORG/pub/FreeBSD</ulink><!-- <br> -->
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Finland</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://nic.funet.fi/pub/unix/FreeBSD/eurocrypt">ftp://nic.funet.fi/pub/unix/FreeBSD/eurocrypt</ulink><!-- <br> --> Contact: <ulink URL="mailto:count@nic.funet.fi">count@nic.funet.fi</ulink>.
		      </para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
	
      </sect1>
      
      <sect1
	id="mirrors-ctm">
	<title>CTM Sites</title>
	
	<para><xref linkend="ctm" remap="CTM">/FreeBSD is available via
	  anonymous FTP from the following mirror sites. If you choose to
	  obtain CTM via anonymous FTP, please try to use a site near
	  you.</para>
	
	<para>In case of problems, please contact &a.phk;.</para>
	
	<para>
	  <variablelist>
	    <varlistentry><term>California, Bay Area, official source</term>
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.freebsd.org/pub/FreeBSD/CTM">ftp://ftp.freebsd.org/pub/FreeBSD/CTM</ulink><!-- <br> --></para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Germany, Trier</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.uni-trier.de/pub/unix/systems/BSD/FreeBSD/CTM">ftp://ftp.uni-trier.de/pub/unix/systems/BSD/FreeBSD/CTM</ulink><!-- <br> --></para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>South Africa, backup server for old
		deltas</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ftp.internat.freebsd.org/pub/FreeBSD/CTM">ftp://ftp.internat.freebsd.org/pub/FreeBSD/CTM</ulink><!-- <br> --></para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Taiwan/R.O.C, Chiayi</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ctm.tw.freebsd.org/pub/FreeBSD/CTM">ftp://ctm.tw.freebsd.org/pub/FreeBSD/CTM</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ctm2.tw.freebsd.org/pub/FreeBSD/CTM">ftp://ctm2.tw.freebsd.org/pub/FreeBSD/CTM</ulink><!-- <br> --></para>
		    </listitem>
		    
		    <listitem>
		      <para><ulink
			  URL="ftp://ctm3.tw.freebsd.org/pub/freebsd/CTM">ftp://ctm3.tw.freebsd.org/pub/freebsd/CTM</ulink><!-- <br> --></para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
	
	<para>If you did not find a mirror near to you or the mirror is
	  incomplete, try  <ulink URL="http://ftpsearch.ntnu.no/">FTP
	    search</ulink> at <ulink
	    URL="http://ftpsearch.ntnu.no/ftpsearch/">http://ftpsearch.ntnu.no/ftpsearch</ulink>.  FTP search is a great free archie server in Trondheim, Norway.</para>
	
      </sect1>
      
      <sect1
	id="mirrors-cvsup">
	<title>CVSup Sites</title>
	
	<para><xref linkend="cvsup" remap="CVSup"> servers for FreeBSD are
	  running at the following sites:</para>
	
	<para>
	  <variablelist>
	    <varlistentry><term>Argentina</term>
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup.ar.FreeBSD.ORG (<ulink
			  URL="mailto:msagre@cactus.fi.uba.ar">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Australia</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup.au.FreeBSD.ORG (<ulink
			  URL="mailto:dawes@physics.usyd.edu.au">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Brazil</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup.br.FreeBSD.ORG (<ulink
			  URL="mailto:cvsup@cvsup.br.freebsd.org">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Canada</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup.ca.FreeBSD.ORG (<ulink
			  URL="mailto:james@ican.net">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Estonia</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup.ee.FreeBSD.ORG (<ulink
			  URL="mailto:taavi@uninet.ee">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Finland</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup.fi.FreeBSD.ORG (<ulink
			  URL="mailto:count@key.sms.fi">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Germany</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup.de.FreeBSD.ORG (<ulink
			  URL="mailto:wosch@freebsd.org">maintainer</ulink>)</para>
		    </listitem>
		    
		    <listitem>
		      <para>cvsup2.de.FreeBSD.ORG (<ulink
			  URL="mailto:petzi@freebsd.org">maintainer</ulink>)</para>
		    </listitem>
		    
		    <listitem>
		      <para>cvsup3.de.FreeBSD.ORG (<ulink
			  URL="mailto:ag@leo.org">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Japan</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup.jp.FreeBSD.ORG (<ulink
			  URL="mailto:simokawa@sat.t.u-tokyo.ac.jp">maintainer</ulink>)</para>
		    </listitem>
		    
		    <listitem>
		      <para>cvsup2.jp.FreeBSD.ORG (<ulink
			  URL="mailto:max@FreeBSD.ORG">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Netherlands</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup.nl.FreeBSD.ORG (<ulink
			  URL="mailto:xaa@stack.nl">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Norway</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup.no.FreeBSD.ORG (<ulink
			  URL="mailto:Tor.Egge@idt.ntnu.no">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Russia</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup.ru.FreeBSD.ORG (<ulink
			  URL="mailto:mishania@demos.su">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>South Africa</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup.za.FreeBSD.ORG (<ulink
			  URL="mailto:markm@FreeBSD.ORG">maintainer</ulink>)</para>
		    </listitem>
		    
		    <listitem>
		      <para>cvsup2.za.FreeBSD.ORG (<ulink
			  URL="mailto:markm@FreeBSD.ORG">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Taiwan</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup.tw.FreeBSD.ORG (<ulink
			  URL="mailto:jdli@freebsd.csie.nctu.edu.tw">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Ukraine</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup2.ua.FreeBSD.ORG (<ulink
			  URL="mailto:archer@lucky.net">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>United Kingdom</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup.uk.FreeBSD.ORG (<ulink
			  URL="mailto:joe@pavilion.net">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>USA</term>
	      
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup.FreeBSD.ORG (<ulink
			  URL="mailto:skynyrd@opus.cts.cwu.edu">maintainer</ulink>)</para>
		    </listitem>
		    
		    <listitem>
		      <para>cvsup2.FreeBSD.ORG (<ulink
			  URL="mailto:jdp@FreeBSD.ORG">maintainer</ulink>)</para>
		    </listitem>
		    
		    <listitem>
		      <para>cvsup3.FreeBSD.ORG (<ulink
			  URL="mailto:wollman@FreeBSD.ORG">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
	
	<para>The export-restricted code for FreeBSD (eBones and secure) is
	  available via CVSup at the following international repository.
	  Please use this site to get the export-restricted code, if you are
	  outside the USA or Canada.</para>
	
	<para>
	  <variablelist>
	    <varlistentry><term>South Africa</term>
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>cvsup.internat.FreeBSD.ORG (<ulink
			  URL="mailto:markm@FreeBSD.ORG">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
	
	<para>The following CVSup site is especially designed for <xref
	    linkend="ctm" remap="CTM"> users.  Unlike the other CVSup mirrors,
	  it is kept up-to-date by CTM.  That means if you CVSup <emphasis
	    remap=tt>cvs-all</emphasis> with <literal>release=cvs</literal>
	  from this site, you get a version of the repository (including the
	  inevitable <emphasis remap=tt>.ctm_status</emphasis> file) which is
	  suitable for being updated using the CTM <emphasis
	    remap=tt>cvs-cur</emphasis> deltas.  This allows users who track
	  the entire <emphasis remap=tt>cvs-all</emphasis> tree to go from
	  CVSup to CTM without having to rebuild their repository from scratch
	  using a fresh CTM base delta.</para>
	
	<para>Please note that this special feature only works for the
	  <emphasis remap=tt>cvs-all</emphasis> distribution with <emphasis
	    remap=tt>cvs</emphasis> as the release tag. CVSupping any other
	  distribution and/or release will get you the specified distribution,
	  but it will not be suitable for CTM updating.</para>
	
	<para>Also please note that, because the current version of CTM does
	  not preserve the timestamps of files, the timestamps at this mirror
	  site are not the same as those at other mirror sites.  Switching
	  between this site and other sites is not recommended.  It will work
	  correctly, but will be somewhat inefficient.</para>
	
	<para>
	  <variablelist>
	    <varlistentry><term>Germany</term>
	      <listitem>
		<para>
		  <itemizedlist>
		    
		    <listitem>
		      <para>ctm.FreeBSD.ORG (<ulink
			  URL="mailto:blank@fox.uni-trier.de">maintainer</ulink>)</para>
		    </listitem>
		    
		  </itemizedlist>
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	  
	</para>
	
      </sect1>
    </chapter>
    
    <chapter
      id="bibliography">
      <title>Bibliography</title>
      
      <para>While the manual pages provide the definitive reference for
	individual pieces of the FreeBSD operating system, they are notorious
	for not illustrating how to put the pieces together to make the whole
	operating system run smoothly.  For this, there is no substitute for a
	good book on UNIX system administration and a good users'
	manual.</para>
      
      
      <sect1>
	<title>Books &amp; Magazines Specific to FreeBSD</title>
	
	<para><emphasis remap=bf>International books &amp;
	    Magazines:</emphasis></para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para><ulink
		  URL="http://freebsd.csie.nctu.edu.tw/~jdli/book.html">Using
		  FreeBSD</ulink> (in Chinese).</para>
	    </listitem>
	    
	    <listitem>
	      <para>FreeBSD for PC 98'ers (in Japanese), published by SHUWA
		System Co, LTD. ISBN 4-87966-468-5 C3055 P2900E.</para>
	    </listitem>
	    
	    <listitem>
	      <para>FreeBSD (in Japanese), published by CUTT. ISBN
		4-906391-22-2 C3055 P2400E.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.shoeisha.co.jp/pc/index/shinkan/97_05_06.htm">Complete Introduction to FreeBSD</ulink> (in Japanese), published by <ulink URL="http://www.shoeisha.co.jp/">Shoeisha Co., Ltd</ulink>.  ISBN 4-88135-473-6 P3600E.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.ascii.co.jp/pb/book1/shinkan/detail/1322785.html">Personal UNIX Starter Kit FreeBSD</ulink> (in Japanese), published by <ulink URL="http://www.ascii.co.jp/">ASCII</ulink>.  ISBN 4-7561-1733-3 P3000E.</para>
	    </listitem>
	    
	    <listitem>
	      <para>FreeBSD Handbook (Japanese translation), published by
		<ulink URL="http://www.ascii.co.jp/">ASCII</ulink>.  ISBN
		4-7561-1580-2 P3800E.</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
	<para><emphasis remap=bf>English language books &amp;
	    Magazines:</emphasis></para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.cdrom.com/titles/os/bsdbook2.htm">The
		  Complete FreeBSD</ulink>, published by <ulink
		  URL="http://www.cdrom.com">Walnut Creek
		  CDROM</ulink>.</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
      
      <sect1>
	<title>Users' Guides</title>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>Computer Systems Research Group, UC Berkeley. <emphasis
		  remap=sl>4.4BSD User's Reference Manual</emphasis>. O'Reilly
		&amp; Associates, Inc., 1994.<!-- <br> --> ISBN
		1-56592-075-9</para>
	    </listitem>
	    
	    <listitem>
	      <para>Computer Systems Research Group, UC Berkeley. <emphasis
		  remap=sl>4.4BSD User's Supplementary Documents</emphasis>.
		O'Reilly &amp; Associates, Inc., 1994.<!-- <br> --> ISBN
		1-56592-076-7</para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis remap=sl>UNIX in a Nutshell</emphasis>. O'Reilly
		&amp; Associates, Inc., 1990.<!-- <br> --> ISBN
		093717520X</para>
	    </listitem>
	    
	    <listitem>
	      <para>Mui, Linda. <emphasis>What You Need To Know When You Can't
		  Find Your UNIX System Administrator</emphasis>. O'Reilly
		&amp; Associates, Inc., 1995. <!-- <br> --> ISBN 1-56592-104-6
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink URL="http://www-wks.acs.ohio-state.edu/">Ohio State
		  University</ulink> has written a <ulink
		  URL="http://www-wks.acs.ohio-state.edu/unix_course/unix.html">UNIX Introductory Course</ulink> which is available online in HTML and postscript format.</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
      
      <sect1>
	<title>Administrators' Guides</title>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>Albitz, Paul and Liu, Cricket. <emphasis>DNS and
		  BIND</emphasis>, 2nd Ed. O'Reilly &amp; Associates, Inc.,
		1997. <!-- <br> --> ISBN 1-56592-236-0 </para>
	    </listitem>
	    
	    <listitem>
	      <para>Computer Systems Research Group, UC Berkeley. <emphasis
		  remap=sl>4.4BSD System Manager's Manual</emphasis>. O'Reilly
		&amp; Associates, Inc., 1994.  <!-- <br> --> ISBN
		1-56592-080-5</para>
	    </listitem>
	    
	    <listitem>
	      <para>Costales, Brian, et al. <emphasis>Sendmail</emphasis>, 2nd
		Ed. O'Reilly &amp; Associates, Inc., 1997.<!-- <br> --> ISBN
		1-56592-222-0 </para>
	    </listitem>
	    
	    <listitem>
	      <para>Frisch, &AElig;leen. <emphasis>Essential System
		  Administration</emphasis>, 2nd Ed.  O'Reilly &amp;
		Associates, Inc., 1995. <!-- <br> -->ISBN 1-56592-127-5
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>Hunt, Craig. <emphasis>TCP/IP Network
		  Administration</emphasis>. O'Reilly &amp; Associates, Inc.,
		1992.  <!-- <br> --> ISBN 0-937175-82-X</para>
	    </listitem>
	    
	    <listitem>
	      <para>Nemeth, Evi. <emphasis>UNIX System Administration
		  Handbook</emphasis>. 2nd ed. Prentice Hall, 1995. <!-- <br>
		--> ISBN 0131510517</para>
	    </listitem>
	    
	    <listitem>
	      <para>Stern, Hal <emphasis>Managing NFS and NIS</emphasis>
		O'Reilly &amp; Associates, Inc., 1991. <!-- <br> --> ISBN
		0-937175-75-7</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
      
      <sect1>
	<title>Programmers' Guides</title>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>Asente, Paul. <emphasis>X Window System
		  Toolkit</emphasis>. Digital Press.  <!-- <br> --> ISBN
		1-55558-051-3</para>
	    </listitem>
	    
	    <listitem>
	      <para>Computer Systems Research Group, UC Berkeley. <emphasis
		  remap=sl>4.4BSD Programmer's Reference Manual</emphasis>.
		O'Reilly &amp; Associates, Inc., 1994.  <!-- <br> --> ISBN
		1-56592-078-3</para>
	    </listitem>
	    
	    <listitem>
	      <para>Computer Systems Research Group, UC Berkeley. <emphasis
		  remap=sl>4.4BSD Programmer's Supplementary
		  Documents</emphasis>. O'Reilly &amp; Associates, Inc., 1994.
		<!-- <br> --> ISBN 1-56592-079-1</para>
	    </listitem>
	    
	    <listitem>
	      <para>Ellis, Margaret A. and Stroustrup, Bjarne. <emphasis>The
		  Annotated C++ Reference Manual</emphasis>. Addison-Wesley,
		1990.  <!-- <br> --> ISBN 0-201-51459-1</para>
	    </listitem>
	    
	    <listitem>
	      <para>Harbison, Samuel P. and Steele, Guy L. Jr. <emphasis>C: A
		  Reference Manual</emphasis>.  4rd ed. Prentice Hall, 1995.
		<!-- <br> -->ISBN 0-13-326224-3</para>
	    </listitem>
	    
	    <listitem>
	      <para>Kernighan, Brian and Dennis M. Ritchie. <emphasis>The C
		  Programming Language.</emphasis>. PTR Prentice Hall, 1988.
		<!-- <br> --> ISBN 0-13-110362-9</para>
	    </listitem>
	    
	    <listitem>
	      <para>Lehey, Greg. <emphasis>Port UNIX Software</emphasis>.
		O'Reilly &amp; Associates, Inc., 1995.<!-- <br> --> ISBN
		1-56592-126-7</para>
	    </listitem>
	    
	    <listitem>
	      <para>Plauger, P. J. <emphasis>The Standard C
		  Library</emphasis>. Prentice Hall, 1992.  <!-- <br> --> ISBN
		0-13-131509-9</para>
	    </listitem>
	    
	    <listitem>
	      <para>Stevens, W. Richard. <emphasis>Advanced Programming in the
		  UNIX Environment</emphasis>. Reading, Mass. :
		Addison-Wesley, 1992<!-- <br> --> ISBN 0-201-56317-7</para>
	    </listitem>
	    
	    <listitem>
	      <para>Stevens, W. Richard. <emphasis>UNIX Network
		  Programming</emphasis>. PTR Prentice Hall, 1990.  <!-- <br>
		--> ISBN 0-13-949876-1</para>
	    </listitem>
	    
	    <listitem>
	      <para>Wells, Bill.  "Writing Serial Drivers for UNIX".
		<emphasis>Dr. Dobb's Journal</emphasis>.  19(15), December
		1994. pp68-71, 97-99.</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
      
      <sect1>
	<title>Operating System Internals</title>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>Andleigh, Prabhat K. <emphasis>UNIX System
		  Architecture</emphasis>. Prentice-Hall, Inc., 1990.<!-- <br>
		--> ISBN 0-13-949843-5</para>
	    </listitem>
	    
	    <listitem>
	      <para>Jolitz, William.  "Porting UNIX to the 386". <emphasis>Dr.
		  Dobb's Journal</emphasis>.  January 1991-July 1992.</para>
	    </listitem>
	    
	    <listitem>
	      <para>Leffler, Samuel J., Marshall Kirk McKusick,  Michael J
		Karels and John Quarterman <emphasis>The Design and
		  Implementation of the 4.3BSD UNIX Operating
		  System</emphasis>.  Reading, Mass. : Addison-Wesley,
		1989.<!-- <br> --> ISBN 0-201-06196-1</para>
	    </listitem>
	    
	    <listitem>
	      <para>Leffler, Samuel J., Marshall Kirk McKusick,  <emphasis>The
		  Design and Implementation of the 4.3BSD UNIX Operating
		  System: Answer Book</emphasis>. Reading, Mass. :
		Addison-Wesley, 1991.<!-- <br> --> ISBN 0-201-54629-9</para>
	    </listitem>
	    
	    <listitem>
	      <para>McKusick, Marshall Kirk, Keith Bostic, Michael J Karels,
		and John Quarterman. <emphasis>The Design and Implementation
		  of the 4.4BSD Operating System</emphasis>.  Reading, Mass. :
		Addison-Wesley, 1996.<!-- <br> --> ISBN 0-201-54979-4</para>
	    </listitem>
	    
	    <listitem>
	      <para>Stevens, W. Richard. <emphasis>TCP/IP Illustrated, Volume
		  1: The Protocols</emphasis>. Reading, Mass. :
		Addison-Wesley, 1996.<!-- <br> --> ISBN 0-201-63346-9</para>
	    </listitem>
	    
	    <listitem>
	      <para>Stevens, W. Richard. <emphasis>TCP/IP Illustrated, Volume
		  3: TCP for Transactions, HTTP, NNTP and the UNIX Domain
		  Protocols</emphasis>. Reading, Mass. : Addison-Wesley,
		1996.<!-- <br> --> ISBN 0-201-63495-3</para>
	    </listitem>
	    
	    <listitem>
	      <para>Vahalia, Uresh. <emphasis>UNIX Internals -- The New
		  Frontiers</emphasis>. Prentice Hall, 1996.<!-- <br> --> ISBN
		0-13-101908-2</para>
	    </listitem>
	    
	    <listitem>
	      <para>Wright, Gary R. and W. Richard Stevens. <emphasis>TCP/IP
		  Illustrated, Volume 2: The Implementation</emphasis>.
		Reading, Mass. : Addison-Wesley, 1995.<!-- <br> --> ISBN
		0-201-63354-X</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
      
      <sect1>
	<title>Security Reference</title>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>Cheswick, William R. and Steven M. Bellovin.
		<emphasis>Firewalls and Internal Security: Repelling the Wily
		  Hacker</emphasis>. Reading, Mass. : Addison-Wesley,
		1995.<!-- <br> --> ISBN 0-201-63357-4 </para>
	    </listitem>
	    
	    <listitem>
	      <para>Garfinkel, Simson and Gene Spafford. <emphasis>Practical
		  UNIX Security</emphasis>. 2nd Ed. O'Reilly &amp; Associates,
		Inc., 1996. <!-- <br> --> ISBN 1-56592-148-8 </para>
	    </listitem>
	    
	    <listitem>
	      <para>Garfinkel, Simson. <emphasis>PGP Pretty Good
		  Privacy</emphasis> O'Reilly &amp; Associates, Inc., 1995.
		<!-- <br> --> ISBN 1-56592-098-8 </para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
      
      <sect1>
	<title>Hardware Reference</title>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>Anderson, Don and Tom Shanley. <emphasis>Pentium Processor
		  System Architecture</emphasis>. 2nd ed. Reading, Mass. :
		Addison-Wesley, 1995.<!-- <br> --> ISBN 0-201-40992-5</para>
	    </listitem>
	    
	    <listitem>
	      <para>Ferraro, Richard F. <emphasis>Programmer's Guide to the
		  EGA, VGA, and Super VGA Cards</emphasis>. 3rd ed. Reading,
		Mass. : Addison-Wesley, 1995.<!-- <br> --> ISBN
		0-201-62490-7</para>
	    </listitem>
	    
	    <listitem>
	      <para>Shanley, Tom. <emphasis>80486 System
		  Architecture</emphasis>.  3rd ed. Reading, Mass. :
		Addison-Wesley, 1995. <!-- <br> -->ISBN 0-201-40994-1</para>
	    </listitem>
	    
	    <listitem>
	      <para>Shanley, Tom. <emphasis>ISA System
		  Architecture</emphasis>.  3rd ed. Reading, Mass. :
		Addison-Wesley, 1995.<!-- <br> --> ISBN 0-201-40996-8</para>
	    </listitem>
	    
	    <listitem>
	      <para>Shanley, Tom. <emphasis>PCI System
		  Architecture</emphasis>.  3rd ed. Reading, Mass. :
		Addison-Wesley, 1995. <!-- <br> -->ISBN 0-201-40993-3</para>
	    </listitem>
	    
	    <listitem>
	      <para>Van Gilluwe, Frank. <emphasis>The Undocumented
		  PC</emphasis>. Reading, Mass: Addison-Wesley Pub. Co.,
		1994.<!-- <br> --> ISBN 0-201-62277-7</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
      
      <sect1>
	<title>UNIX History</title>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>Lion, John <emphasis>Lion's Commentary on UNIX, 6th Ed.
		  With Source Code</emphasis>. ITP Media Group, 1996.<!-- <br>
		--> ISBN 1573980137</para>
	    </listitem>
	    
	    <listitem>
	      <para>Raymond, Eric s. <emphasis>The New Hacker's Dictonary, 3rd
		  edition</emphasis>.  MIT Press, 1996.<!-- <br> --> ISBN
		0-262-68092-0<!-- <br> --> Also known as the <ulink
		  URL="http://www.ccil.org/jargon/jargon.html">Jargon
		  File</ulink></para>
	    </listitem>
	    
	    <listitem>
	      <para>Salus, Peter H. <emphasis>A quarter century of
		  UNIX</emphasis>. Addison-Wesley Publishing Company, Inc.,
		1994.<!-- <br> --> ISBN 0-201-54777-5</para>
	    </listitem>
	    
	    <listitem>
	      <para>Simon Garfinkel, Daniel Weise, Steven Strassmann.
		<emphasis>The UNIX-HATERS Handbook</emphasis>. IDG Books
		Worldwide, Inc., 1994.<!-- <br> --> ISBN 1-56884-203-1</para>
	    </listitem>
	    
	    <listitem>
	      <para>Don Libes, Sandy Ressler <emphasis>Life with
		  UNIX</emphasis> - special edition.  Prentice-Hall, Inc.,
		1989.<!-- <br> --> ISBN 0-13-536657-7</para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis>The BSD family tree</emphasis>. 1997.<!-- <br>
		--> <ulink
		  URL="http://www.de.freebsd.org/de/ftp/unix-stammbaum">http://www.de.freebsd.org/de/ftp/unix-stammbaum</ulink> or <ulink URL="file:/usr/share/misc/bsd-family-tree">local</ulink> on a FreeBSD-current machine.</para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis>The BSD Release Announcements
		  collection</emphasis>. 1997.<!-- <br> --> <ulink
		  URL="http://www.de.FreeBSD.ORG/de/ftp/releases/">http://www.de.FreeBSD.ORG/de/ftp/releases/</ulink></para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis>Networked Computer Science Technical Reports
		  Library</emphasis>.<!-- <br> --> <ulink
		  URL="http://www.ncstrl.org/">http://www.ncstrl.org/</ulink></para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
      
      <sect1>
	<title>Magazines and Journals</title>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para><emphasis>The C/C++ Users Journal</emphasis>.  R&amp;D
		Publications Inc. ISSN 1075-2838</para>
	    </listitem>
	    
	    <listitem>
	      <para><emphasis>Sys Admin - The Journal for UNIX System
		  Administrators</emphasis> Miller Freeman, Inc., ISSN
		1061-2688</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
    </chapter>
    
    <chapter
      id="eresources">
      <title>Resources on the Internet</title>
      
      <para><emphasis>Contributed by &a.jkh;.</emphasis></para>
      
      <para>The rapid pace of FreeBSD progress makes print media impractical
	as a means of following the latest developments.  Electronic resources
	are the best, if not often the only, way stay informed of the latest
	advances. Since FreeBSD is a volunteer effort, the user community
	itself also generally serves as a `technical support department' of
	sorts, with electronic mail and  USENET news being the most effective
	way of reaching that community.</para>
      
      <para>The most important points of contact with the FreeBSD user
	community are outlined below.  If you are aware of other resources not
	mentioned here, please send them to the &a.doc;so that they may also
	be included.</para>
      
      
      <sect1
	id="eresources-mail">
	<title>Mailing lists</title>
	
	<para>Though many of the FreeBSD development members read USENET, we
	  cannot always guarantee that we will get to your questions in a
	  timely fashion (or at all) if you post them only to one of the
	  comp.unix.bsd.freebsd.* groups.  By addressing your questions to the
	  appropriate mailing list you will reach both us and a concentrated
	  FreeBSD audience, invariably assuring a better (or at least faster)
	  response.</para>
	
	<para>The charters for the various lists are given at the bottom of
	  this document.  <emphasis remap=bf>Please read the charter before
	    joining or sending mail to any list</emphasis>.  Most of our list
	  subscribers now receive many hundreds of FreeBSD related messages
	  every day, and by setting down charters and rules for proper use we
	  are striving to keep the signal-to-noise ratio of the lists high.
	  To do less would see the mailing lists ultimately fail as an
	  effective communications medium for the project.</para>
	
	<para>Archives are kept for all of the mailing lists and can be
	  searched using the <ulink
	    URL="http://www.FreeBSD.ORG/search.html">FreeBSD World Wide Web
	    server</ulink>.  The keyword searchable archive offers an
	  excellent way of finding answers to frequently asked questions and
	  should be consulted before posting a question.</para>
	
	
	<sect2
	  id="eresources-summary">
	  <title>List summary</title>
	  
	  <para><emphasis remap=bf>General lists:</emphasis> The following are
	    general lists which anyone is free to join: <literallayout>List
	      Purpose
	      ---------------------------------------------------------------------- freebsd-announce         Important events and project milestones freebsd-bugs             Bug reports freebsd-chat             Non-technical items related to the FreeBSD community freebsd-current          Discussion concerning the use of FreeBSD-current freebsd-stable           Discussion concerning the use of FreeBSD-stable freebsd-isp              Issues for Internet Service Providers using FreeBSD freebsd-jobs             FreeBSD employment and consulting opportunities freebsd-questions        User questions</literallayout>
	  </para>
	  
	  <para><emphasis remap=bf>Technical lists:</emphasis> The following
	    lists are for technical discussion. You should read the charter
	    for each list carefully before joining or sending mail to one as
	    there are firm guidelines for their use and content.
	    <literallayout>List                     Purpose
	      ---------------------------------------------------------------------- freebsd-afs              Porting AFS to FreeBSD freebsd-alpha            Porting FreeBSD to the Alpha freebsd-doc              The FreeBSD Documentation project freebsd-emulation        Emulation of other systems such as Linux/DOS/Windows freebsd-fs               Filesystems freebsd-hackers          General technical discussion freebsd-hardware         General discussion of hardware for running FreeBSD freebsd-isdn             ISDN developers freebsd-java             Java developers and people porting JDKs to FreeBSD freebsd-mobile           Discussions about mobile computing freebsd-multimedia       Multimedia discussion freebsd-platforms        Concerning ports to non-Intel architecture platforms freebsd-ports            Discussion of the ports collection freebsd-scsi             The SCSI subsystem freebsd-security         Security issues freebsd-smp              Design discussions for [A]Symmetric MultiProcessing freebsd-sparc            Porting FreeBSD to Sparc systems.</literallayout>
	  </para>
	  
	  <para><emphasis remap=bf>Limited lists:</emphasis> The following
	    lists require approval from <ulink
	      URL="mailto:core@freebsd.org">core@FreeBSD.ORG</ulink> to join,
	    though anyone is free to send messages to them which fall within
	    the scope of their charters.  It is also a good idea establish a
	    presence in the technical lists before asking to join one of these
	    limited lists. <literallayout>List                     Purpose
	      ---------------------------------------------------------------------- freebsd-admin            Administrative issues freebsd-arch             Architecture and design discussions freebsd-core             FreeBSD core team freebsd-hubs             People running mirror sites (infrastructural support) freebsd-install          Installation development freebsd-security-notifications  Security notifications freebsd-user-groups      User group coordination</literallayout>
	  </para>
	  
	  <para><emphasis remap=bf>CVS lists:</emphasis> The following lists
	    are for people interested in seeing the log messages for changes
	    to various areas of the source tree. They are <emphasis
	      remap=bf>Read-Only</emphasis> lists and should not have mail
	    sent to them.</para>
	  
	  <para>
	    <literallayout>List name       Source area          Area
	      Description (source for)
	      ---------------------------------------------------------------------- cvs-CVSROOT     /usr/src/[A-Z]*      Top level /usr/src file changes cvs-all         /usr/src             All changes to the tree (superset) cvs-bin         /usr/src/bin         System binaries cvs-etc         /usr/src/etc         System files cvs-games       /usr/src/games       Games cvs-gnu         /usr/src/gnu         GPL'd utilities cvs-include     /usr/src/include     Include files cvs-kerberosIV  /usr/src/kerberosIV  Kerberos encryption code cvs-lib         /usr/src/lib         System libraries cvs-libexec     /usr/src/libexec     System binaries cvs-ports       /usr/ports           Ported software cvs-sbin        /usr/src/sbin        System binaries cvs-share       /usr/src/share       System shared files cvs-sys         /usr/src/sys         Kernel cvs-usrbin      /usr/src/usr.bin     Use binaries cvs-usrsbin     /usr/src/usr.sbin    System binaries</literallayout>
	  </para>
	  
	</sect2>
	
	<sect2
	  id="eresources-subscribe">
	  <title>How to subscribe</title>
	  
	  <para>All mailing lists live on <filename>FreeBSD.ORG</filename>, so
	    to post to a given list you simply mail to
	    <emphasis>listname</emphasis><email>@FreeBSD.ORG</email>.  It will
	    then be redistributed to mailing list members world-wide.</para>
	  
	  <para>To subscribe to a list, send mail to &a.majordomo; and include
	    <informalexample>
	      <screen>subscribe &lt;listname&gt; [&lt;optional
		address&gt;]</screen>
	    </informalexample> In the body of your message.  For example, to
	    subscribe yourself to freebsd-announce, you'd do:
	    <informalexample>
	      <screen>% mail majordomo@FreeBSD.ORG subscribe freebsd-announce
		^D</screen>
	    </informalexample> If you want to subscribe yourself under a
	    different name, or submit a subscription request for a local
	    mailing list (note: this is more efficient if you have several
	    interested parties at one site, and highly appreciated by us!),
	    you would do something like:
	    <informalexample>
	      <screen>% mail majordomo@FreeBSD.ORG subscribe freebsd-announce
		local-announce@somesite.com ^D</screen>
	    </informalexample> Finally, it is also possible to unsubscribe
	    yourself from a list, get a list of other list members or see the
	    list of mailing lists again by sending other types of control
	    messages to majordomo.  For a complete list of available commands,
	    do this:
	    <informalexample>
	      <screen>% mail majordomo@FreeBSD.ORG help ^D</screen>
	    </informalexample> Again, we would like to request that you keep
	    discussion in the technical mailing lists on a technical track.
	    If you are only interested in the "high points" then it is
	    suggested that you join freebsd-announce, which is intended only
	    for infrequent traffic.</para>
	  
	</sect2>
	
	<sect2
	  id="eresources-charters">
	  <title>List charters</title>
	  
	  <para><emphasis remap=bf>All</emphasis>FreeBSD mailing lists have
	    certain basic rules which must be adhered to by anyone using them.
	    Failure to comply with these guidelines will result in two (2)
	    written warnings from the FreeBSD <ulink
	      URL="mailto:postmaster@freebsd.org">Postmaster</ulink>, after
	    which, on a third offense, the poster will removed from all
	    FreeBSD mailing lists and filtered from further posting to them.
	    We regret that such rules and measures are necessary at all, but
	    today's Internet is a pretty harsh environment, it would seem, and
	    many fail to appreciate just how fragile some of its mechanisms
	    are.</para>
	  
	  <para>Rules of the road:
	    <itemizedlist>
	      
	      <listitem>
		<para>The topic of any posting should adhere to the basic
		  charter of the list it is posted to, e.g. if the list is
		  about technical issues then your posting should contain
		  technical discussion.  Ongoing irrelevant chatter or flaming
		  only detracts from the value of the mailing list for
		  everyone on it and will not be tolerated.  For free-form
		  discussion on no particular topic, the <ulink
		    URL="mailto:freebsd-chat@freebsd.org">freebsd-chat</ulink>
		  mailing list is freely available and should be used
		  instead.</para>
	      </listitem>
	      
	      <listitem>
		<para>No posting should be made to more than 2 mailing lists,
		  and only to 2 when a clear and obvious need to post to both
		  lists exists. For most lists, there is already a great deal
		  of subscriber overlap and except for the most esoteric mixes
		  (say "-stable &amp; -scsi"), there really is no reason to
		  post to more than one list at a time. If a message is sent
		  to you in such a way that multiple mailing lists appear on
		  the Cc line then the cc line should also be trimmed before
		  sending it out again. <emphasis>You are <emphasis
		      remap=bf>still</emphasis> responsible for your own
		    cross-postings, no matter who the originator might have
		    been.</emphasis></para>
	      </listitem>
	      
	      <listitem>
		<para>Personal attacks and profanity (in the context of an
		  argument) are not allowed, and that includes users and
		  developers alike.  Gross breaches of netiquette, like
		  excerpting or reposting private mail when permission to do
		  so was not and would not be forthcoming,  are frowned upon
		  but not specifically enforced.  <emphasis
		    remap=bf>However</emphasis>, there are also very few cases
		  where such content would fit within the charter of a list
		  and it would therefore probably rate a warning (or ban) on
		  that basis alone.</para>
	      </listitem>
	      
	      <listitem>
		<para>Advertising of non-FreeBSD related products or services
		  is strictly prohibited and will result in an immediate ban
		  if it is clear that the offender is advertising by
		  spam.</para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	  <para><emphasis remap=bf>Individual list charters:</emphasis></para>
	  
	  <para>
	    <variablelist>
	      <varlistentry><term>FREEBSD-AFS</term>
		<listitem>
		  <para><emphasis>Andrew File System</emphasis><!-- <br> -->
		    This list is for discussion on porting and using AFS from
		    CMU/Transarc</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-ADMIN</term>
		
		<listitem>
		  <para><emphasis>Administrative issues</emphasis><!-- <br>
		    --> This list is purely for discussion of freebsd.org
		    related issues and to report problems or abuse of project
		    resources.  It is a closed list, though anyone may report
		    a problem (with our systems!) to it.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-ANNOUNCE</term>
		
		<listitem>
		  <para><emphasis>Important events / milestones</emphasis><!--
		  <br> --> This is the mailing list for people interested only
		    in occasional announcements of significant freebsd events.
		    This includes announcements about snapshots and other
		    releases.  It contains announcements of new FreeBSD
		    capabilities.  It may contain calls for volunteers etc.
		    This is a low volume, strictly moderated mailing
		    list.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-ARCH</term>
		
		<listitem>
		  <para><emphasis>Architecture and design
		      discussions</emphasis><!-- <br> --> This is the mailing
		    list for people discussing FreeBSD architectural issues.
		    It is a closed list, and not for general
		    subscription.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-BUGS</term>
		
		<listitem>
		  <para><emphasis>Bug reports</emphasis><!-- <br> --> This is
		    the mailing list for reporting bugs in FreeBSD Whenever
		    possible, bugs should be submitted using the "send-pr(1)"
		    command or the <ulink
		      URL="http://www.freebsd.org/send-pr.html">WEB
		      interface</ulink> to it.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-CHAT</term>
		
		<listitem>
		  <para><emphasis>Non technical items related to the FreeBSD
		      community</emphasis><!-- <br> --> This list contains the
		    overflow from the other lists about non-technical, social
		    information.  It includes discussion about whether Jordan
		    looks like a toon ferret or not, whether or not to type in
		    capitals, who is drinking too much coffee, where the best
		    beer is brewed, who is brewing beer in their basement, and
		    so on. Occasional announcements of important events (such
		    as upcoming parties, weddings, births, new jobs, etc) can
		    be made to the technical lists, but the follow ups should
		    be directed to this -chat list.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-CORE</term>
		
		<listitem>
		  <para><emphasis>FreeBSD core team</emphasis><!-- <br> -->
		    This is an internal mailing list for use by the core
		    members. Messages can be sent to it when a serious
		    FreeBSD-related matter requires arbitration or high-level
		    scrutiny.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-CURRENT</term>
		
		<listitem>
		  <para><emphasis>Discussions about the use of
		      FreeBSD-current</emphasis><!-- <br> --> This is the
		    mailing list for users of freebsd-current.  It includes
		    warnings about new features coming out in -current that
		    will affect the users, and instructions on steps that must
		    be taken to remain -current. Anyone running "current" must
		    subscribe to this list. This is a technical mailing list
		    for which strictly technical content is expected.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-CURRENT-DIGEST</term>
		
		<listitem>
		  <para><emphasis>Discussions about the use of
		      FreeBSD-current</emphasis><!-- <br> --> This is the
		    digest version of the freebsd-current mailing list.  The
		    digest consists of all messages sent to freebsd-current
		    bundled together and mailed out as a single message.  The
		    average digest size is about 40kB. This list is <emphasis
		      remap=bf>Read-Only</emphasis> and should not be posted
		    to.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-STABLE</term>
		
		<listitem>
		  <para><emphasis>Discussions about the use of
		      FreeBSD-stable</emphasis><!-- <br> --> This is the
		    mailing list for users of freebsd-stable.  It includes
		    warnings about new features coming out in -stable that
		    will affect the users, and instructions on steps that must
		    be taken to remain -stable. Anyone running ``stable''
		    should subscribe to this list. This is a technical mailing
		    list for which strictly technical content is
		    expected.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-DOC</term>
		
		<listitem>
		  <para><emphasis>Documentation project</emphasis><!-- <br>
		    -->  This mailing list belongs to the FreeBSD Doc Project
		    and is for the discussion of documentation related issues
		    and projects.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-FS</term>
		
		<listitem>
		  <para><emphasis>Filesystems</emphasis><!-- <br> -->
		    Discussions concerning FreeBSD filesystems. This is a
		    technical mailing list for which strictly technical
		    content is expected.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-ISDN</term>
		
		<listitem>
		  <para><emphasis>ISDN Communications</emphasis><!-- <br> -->
		    This is the mailing list for people discussing the
		    development of ISDN support for FreeBSD.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-JAVA</term>
		
		<listitem>
		  <para><emphasis>Java Development</emphasis><!-- <br> -->
		    This is the mailing list for people discussing the
		    development of significant Java applications for FreeBSD
		    and the porting and maintenance of JDKs.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-HACKERS</term>
		
		<listitem>
		  <para><emphasis>Technical discussions</emphasis><!-- <br>
		    -->  This is a forum for technical discussions related to
		    FreeBSD.  This is the primary technical mailing list.  It
		    is for individuals actively working on FreeBSD, to bring
		    up problems or discuss alternative solutions.  Individuals
		    interested in following the technical discussion are also
		    welcome. This is a technical mailing list for which
		    strictly technical content is expected.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-HACKERS-DIGEST</term>
		
		<listitem>
		  <para><emphasis>Technical discussions</emphasis><!-- <br>
		    --> This is the digest version of the freebsd-hackers
		    mailing list.  The digest consists of all messages sent to
		    freebsd-hackers bundled together and mailed out as a
		    single message.  The average digest size is about 40kB.
		    This list is <emphasis remap=bf>Read-Only</emphasis> and
		    should not be posted to.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-HARDWARE</term>
		
		<listitem>
		  <para><emphasis>General discussion of FreeBSD
		      hardware</emphasis><!-- <br> --> General discussion
		    about the types of hardware that FreeBSD runs on, various
		    problems and suggestions concerning what to buy or
		    avoid.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-INSTALL</term>
		
		<listitem>
		  <para><emphasis>Installation discussion</emphasis><!-- <br>
		    -->  This mailing list is for discussing FreeBSD
		    installation development for the future releases and is
		    closed.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-ISP</term>
		
		<listitem>
		  <para><emphasis>Issues for Internet Service
		      Providers</emphasis><!-- <br> --> This mailing list is
		    for discussing topics relevant to Internet Service
		    Providers (ISPs) using FreeBSD. This is a technical
		    mailing list for which strictly technical content is
		    expected.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-MULTIMEDIA</term>
		
		<listitem>
		  <para><emphasis>Multimedia discussions</emphasis><!-- <br>
		    --> This is a forum about multimedia applications using
		    FreeBSD. Discussion center around multimedia applications,
		    their installation, their development and their support
		    within FreeBSD This is a technical mailing list for which
		    strictly technical content is expected.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-PLATFORMS</term>
		
		<listitem>
		  <para><emphasis>Porting to Non-Intel
		      platforms</emphasis><!-- <br> --> Cross-platform freebsd
		    issues, general discussion and proposals for non-Intel
		    FreeBSD ports. This is a technical mailing list for which
		    strictly technical content is expected.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-PORTS</term>
		
		<listitem>
		  <para><emphasis>Discussion of "ports"</emphasis><!-- <br>
		    -->  Discussions concerning FreeBSD's "ports collection"
		    (/usr/ports), proposed ports, modifications to ports
		    collection infrastructure and general coordination
		    efforts. This is a technical mailing list for which
		    strictly technical content is expected.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-QUESTIONS</term>
		
		<listitem>
		  <para><emphasis>User questions</emphasis><!-- <br> -->  This
		    is the mailing list for questions about FreeBSD.  You
		    should not send "how to" questions to the technical lists
		    unless you consider the question to be pretty
		    technical.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-QUESTIONS-DIGEST</term>
		
		<listitem>
		  <para><emphasis>User questions</emphasis><!-- <br> --> This
		    is the digest version of the freebsd-questions mailing
		    list. The digest consists of all messages sent to
		    freebsd-questions bundled together and mailed out as a
		    single message.  The average digest size is about
		    40kB.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-SCSI</term>
		
		<listitem>
		  <para><emphasis>SCSI subsystem</emphasis><!-- <br> -->  This
		    is the mailing list for people working on the scsi
		    subsystem for FreeBSD. This is a technical mailing list
		    for which strictly technical content is expected.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-SECURITY</term>
		
		<listitem>
		  <para><emphasis>Security issues</emphasis><!-- <br> -->
		    FreeBSD computer security issues (DES, Kerberos, known
		    security holes and fixes, etc). This is a technical
		    mailing list for which strictly technical content is
		    expected.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-SECURITY-NOTIFICATIONS</term>
		
		<listitem>
		  <para><emphasis>Security Notifications</emphasis><!-- <br>
		    --> Notifications of FreeBSD security problems and fixes.
		    This is not a discussion list.  The discussion list is
		    FreeBSD-security.</para>
		</listitem>
	      </varlistentry>
	      
	      <varlistentry><term>FREEBSD-USER-GROUPS</term>
		
		<listitem>
		  <para><emphasis>User Group Coordination List</emphasis><!--
		  <br> --> This is the mailing list for the coordinators from
		    each of the  local area Users Groups to discuss matters
		    with each other and a  designated individual from the Core
		    Team.  This mail list should be limited to meeting
		    synopsis and coordination of projects that span User
		    Groups.  It is a closed list.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="eresources-news">
	<title>Usenet newsgroups</title>
	
	<para>In addition to two FreeBSD specific newsgroups, there are many
	  others in which FreeBSD is discussed or are otherwise relevant to
	  FreeBSD users. <ulink
	    URL="http://minnie.cs.adfa.oz.au/BSD-info/bsdnews_search.html">Keyword searchable archives</ulink> are available for some of these newsgroups from courtesy of Warren Toomey <email>&lt;wkt@cs.adfa.oz.au&gt;</email>.</para>
	
	
	<sect2>
	  <title>BSD specific newsgroups</title>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.unix.bsd.freebsd.announce">comp.unix.bsd.freebsd.announce</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.unix.bsd.freebsd.misc">comp.unix.bsd.freebsd.misc</ulink></para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>Other Unix newsgroups of interest</title>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para><ulink URL="news:comp.unix">comp.unix</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.unix.questions">comp.unix.questions</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.unix.admin">comp.unix.admin</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.unix.programmer">comp.unix.programmer</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.unix.shell">comp.unix.shell</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.unix.user-friendly">comp.unix.user-friendly</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.security.unix">comp.security.unix</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.sources.unix">comp.sources.unix</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.unix.advocacy">comp.unix.advocacy</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.unix.misc">comp.unix.misc</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.os.386bsd.announc">comp.os.386bsd.announc</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.os.386bsd.app">comp.os.386bsd.app</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.os.386bsd.bugs">comp.os.386bsd.bugs</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.os.386bsd.development">comp.os.386bsd.development</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.os.386bsd.misc">comp.os.386bsd.misc</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.os.386bsd.questions">comp.os.386bsd.questions</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.bugs.4bsd">comp.bugs.4bsd</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.bugs.4bsd.ucb-fixes">comp.bugs.4bsd.ucb-fixes</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.unix.bsd">comp.unix.bsd</ulink></para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>X Window System</title>
	  
	  <para>
	    <itemizedlist>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.windows.x.i386unix">comp.windows.x.i386unix</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.windows.x">comp.windows.x</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.windows.x.apps">comp.windows.x.apps</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.windows.x.announce">comp.windows.x.announce</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.windows.x.intrinsics">comp.windows.x.intrinsics</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.windows.x.motif">comp.windows.x.motif</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.windows.x.pex">comp.windows.x.pex</ulink></para>
	      </listitem>
	      
	      <listitem>
		<para><ulink
		    URL="news:comp.emulators.ms-windows.wine">comp.emulators.ms-windows.wine</ulink></para>
	      </listitem>
	      
	    </itemizedlist>
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1
	id="eresources-web">
	<title>World Wide Web servers</title>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.FreeBSD.ORG/">http://www.FreeBSD.ORG/</ulink>                    <option>- Central Server</option>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.au.freebsd.org/FreeBSD/">http://www.au.freebsd.org/FreeBSD/</ulink>         <option>- Australia</option>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.br.freebsd.org/">http://www.br.freebsd.org/</ulink>                 <option>- Brazil</option>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.ca.freebsd.org/">http://www.ca.freebsd.org/</ulink>                 <option>- Canada</option>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://sunsite.mff.cuni.cz/www.freebsd.org/">http://sunsite.mff.cuni.cz/www.freebsd.org/</ulink><option>- Czech Republic</option>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://sunsite.auc.dk/www.freebsd.org/">http://sunsite.auc.dk/www.freebsd.org/</ulink>     <option>- Denmark</option>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.ee.freebsd.org/">http://www.ee.freebsd.org/</ulink>                 <option>- Estonia</option>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.fi.freebsd.org/">http://www.fi.freebsd.org/</ulink>                 <option>- Finland</option>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.de.freebsd.org/">http://www.de.freebsd.org/</ulink>                 <option>- Germany</option>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.ie.freebsd.org/">http://www.ie.freebsd.org/</ulink>                 <option>- Ireland</option>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.jp.freebsd.org/">http://www.jp.freebsd.org/</ulink>                 <option>- Japan</option>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.kr.freebsd.org/">http://www.kr.freebsd.org/</ulink>                 <option>- Korea</option>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.nl.freebsd.org/">http://www.nl.freebsd.org/</ulink>                 <option>- Netherlands</option>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.pt.freebsd.org/">http://www.pt.freebsd.org/</ulink>                 <option>- Portugal</option>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.se.freebsd.org/www.freebsd.org/">http://www.se.freebsd.org/www.freebsd.org/</ulink> <option>- Sweden</option>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www.tw.freebsd.org/freebsd.html">http://www.tw.freebsd.org/freebsd.html</ulink>     <option>- Taiwan</option>.</para>
	    </listitem>
	    
	    <listitem>
	      <para><ulink
		  URL="http://www2.ua.freebsd.org/">http://www2.ua.freebsd.org/</ulink>                <option>- Ukraine</option>.</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
    </chapter>
    
    <chapter
      id="staff">
      <title>FreeBSD Project Staff</title>
      
      <para>The FreeBSD Project is managed and operated by the following
	groups of people:</para>
      
      
      <sect1
	id="staff-core">
	<title>The FreeBSD Core Team</title>
	
	<para>The FreeBSD core team constitutes the project's ``Board of
	  Directors'', responsible for deciding the project's overall goals
	  and direction as well as managing <xref linkend="staff-who"
	    remap="specific
	    areas"> of the FreeBSD project landscape.</para>
	
	<para>(in alphabetical order by last name):</para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>&a.asami;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.jmb;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.ache;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.dyson;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.bde;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.gibbs;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.davidg;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.jkh;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.phk;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.rich;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.gpalmer;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.jdp;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.guido;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.sos;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.peter;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.wollman;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.joerg;</para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
      
      <sect1
	id="staff-committers">
	<title>The FreeBSD Developers</title>
	
	<para>These are the people who have commit privileges and do the
	  engineering work on the FreeBSD source tree.  All core team members
	  and most FreeBSD Documentation project personnel are also
	  developers.</para>
	
	<para>
	  <itemizedlist>
	    
	    <listitem>
	      <para>&a.mbarkah;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.stb;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.jb;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.torstenb;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.danny;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.charnier;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.kjc;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.gclarkii;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.cracauer;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.adam;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.dufault;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.uhclem;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.tegge;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.eivind;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.julian;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.rse;  </para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.se;  </para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.sef;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.fenner;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.jfieber;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.jfitz;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.lars;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.scrappy;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.tg;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.brandon;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.graichen;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.jgreco;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.rgrimes;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.jmg;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.hanai;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.ahasty;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.jhay;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.helbig;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.erich;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.hsu;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.itojun;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.ugen;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.gj;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.nsj;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.ljo;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.kato;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.andreas;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.imp;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.smace;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.mckay;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.jlemon;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.tedm;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.amurai;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.markm;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.max;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.alex;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.davidn;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.obrien;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.fsmp; </para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.smpatel;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.wpaul; </para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.jmacd; </para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.steve; </para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.mpp;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.dfr;  </para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.jraynard;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.darrenr;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.csgr;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.martin;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.paul;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.roberto;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.chuckr;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.dima;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.wosch;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.ats;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.jseger;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.vanilla;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.msmith;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.brian; </para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.stark;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.karl;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.cwt;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.pst;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.hoek;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.swallace;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.nate;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.yokota;</para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.jmz; </para>
	    </listitem>
	    
	    <listitem>
	      <para>&a.hosokawa; </para>
	    </listitem>
	    
	  </itemizedlist>
	</para>
	
      </sect1>
      
      <sect1
	id="staff-doc">
	<title>The FreeBSD Documentation Project
	</title>
	
	<para>The <ulink URL="http://www.freebsd.org/docproj.html">FreeBSD
	    Documentation Project</ulink> is responsible for a number of
	  different services, each service being run by an individual and his
	  <emphasis>deputies</emphasis> (if any):</para>
	
	<para>
	  <variablelist>
	    <varlistentry><term>Documentation Project Manager</term>
	      <listitem>
		<para>&a.jfieber;</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Webmaster</term>
	      
	      <listitem>
		<para>&a.mbarkah;</para>
		
		<para><emphasis>Deputy:</emphasis> &a.paul;</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Handbook &amp; FAQ Editor</term>
	      
	      <listitem>
		<para>&a.faq;</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Build Engineer</term>
	      
	      <listitem>
		<para>&a.paul;</para>
		
		<para><emphasis>Deputy:</emphasis> &a.dave;</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Mirror Manager</term>
	      
	      <listitem>
		<para>&a.ulf;</para>
		
		<para><emphasis>Deputy:</emphasis> &a.john;</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>News Editor</term>
	      
	      <listitem>
		<para>&a.nsj;</para>
		
		<para><emphasis>Deputy:</emphasis> &a.john;</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Gallery and Commercial Editor</term>
	      
	      <listitem>
		<para>&a.nsj;</para>
		
		<para><emphasis>Deputy:</emphasis> &a.cawimm;</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Style Police &amp; Art Director</term>
	      
	      <listitem>
		<para>&a.dave;</para>
		
		<para><emphasis>Deputy:</emphasis> &a.opsys;</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Database Engineer</term>
	      
	      <listitem>
		<para>&a.mayo;</para>
		
		<para><emphasis>Deputy:</emphasis> &a.cracauer;</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>CGI Engineer</term>
	      
	      <listitem>
		<para>&a.cracauer;</para>
		
		<para><emphasis>Deputy:</emphasis> &a.stb;</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Bottle Washing</term>
	      
	      <listitem>
		<para>&a.nsj;</para>
		
		<para><emphasis>Drying plates:</emphasis> &a.nik;</para>
		
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
	
      </sect1>
      
      <sect1
	id="staff-who">
	<title>Who Is Responsible for What</title>
	
	<para>
	  <variablelist>
	    <varlistentry><term>Principal Architect</term>
	      <listitem>
		<para>&a.davidg; </para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Documentation Project Manager</term>
	      
	      <listitem>
		<para>&a.jfieber;</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Internationalization</term>
	      
	      <listitem>
		<para>&a.ache; </para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Networking</term>
	      
	      <listitem>
		<para>&a.wollman; </para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Postmaster</term>
	      
	      <listitem>
		<para>&a.jmb; </para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Release Coordinator</term>
	      
	      <listitem>
		<para>&a.jkh; </para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Public Relations &amp; Corporate
		Liaison</term>
	      
	      <listitem>
		<para>&a.jkh; </para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Security Officer</term>
	      
	      <listitem>
		<para>&a.guido;</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Source Repository Managers</term>
	      
	      <listitem>
		<para>Principal: &a.peter;<!-- <br> --> Assistant: &a.jdp;<!--
		<br> --> International (Crypto): &a.markm;</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Ports Manager</term>
	      
	      <listitem>
		<para>&a.asami; </para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>XFree86 Project, Inc. Liaison</term>
	      
	      <listitem>
		<para>&a.rich; </para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>Usenet Support</term>
	      
	      <listitem>
		<para>&a.joerg;</para>
		
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry><term>GNATS Administrator</term>
	      
	      <listitem>
		<para>&a.steve;</para>
		
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
	
      </sect1>
    </chapter>
    
    <chapter
      id="pgpkeys">
      <title>PGP keys</title>
      
      <para> In case you need to verify a signature or send encrypted email to
	one of the officers or core team members a  number of keys are
	provided here for your convenience.</para>
      
      
      <sect1>
	<title>Officers</title>
	
	
	<sect2>
	  <title>FreeBSD Security Officer &lt;security-officer@freebsd.org&gt;
	  </title>
	  
	  <para>
	    <informalexample>
	      <screen>FreeBSD Security Officer
		&lt;security-officer@freebsd.org&gt; Fingerprint = 41 08 4E BB
		DB 41 60 71  F9 E5 0E 98 73 AF 3F 11 -----BEGIN PGP PUBLIC KEY
		BLOCK----- Version: 2.6.3i
		mQCNAzF7MY4AAAEEAK7qBgPuBejER5HQbQlsOldk3ZVWXlRj54raz3IbuAUrDrQL h3g57T9QY++f3Mot2LAf5lDJbsMfWrtwPrPwCCFRYQd6XH778a+l4ju5axyjrt/L Ciw9RrOC+WaPv3lIdLuqYge2QRC1LvKACIPNbIcgbnLeRGLovFUuHi5z0oilAAUR tDdGcmVlQlNEIFNlY3VyaXR5IE9mZmljZXIgPHNlY3VyaXR5LW9mZmljZXJAZnJl ZWJzZC5vcmc+iQCVAwUQMX6yrOJgpPLZnQjrAQHyowQA1Nv2AY8vJIrdp2ttV6RU tZBYnI7gTO3sFC2bhIHsCvfVU3JphfqWQ7AnTXcD2yPjGcchUfc/EcL1tSlqW4y7 PMP4GHZp9vHog1NAsgLC9Y1P/1cOeuhZ0pDpZZ5zxTo6TQcCBjQA6KhiBFP4TJql 3olFfPBh3B/Tu3dqmEbSWpuJAJUDBRAxez3C9RVb+45ULV0BAak8A/9JIG/jRJaz QbKom6wMw852C/Z0qBLJy7KdN30099zMjQYeC9PnlkZ0USjQ4TSpC8UerYv6IfhV nNY6gyF2Hx4CbEFlopnfA1c4yxtXKti1kSN6wBy/ki3SmqtfDhPQ4Q31p63cSe5A 3aoHcjvWuqPLpW4ba2uHVKGP3g7SSt6AOYkAlQMFEDF8mz0ff6kIA1j8vQEBmZcD /REaUPDRx6qr1XRQlMs6pfgNKEwnKmcUzQLCvKBnYYGmD5ydPLxCPSFnPcPthaUb 5zVgMTjfjS2fkEiRrua4duGRgqN4xY7VRAsIQeMSITBOZeBZZf2oa9Ntidr5PumS 9uQ9bvdfWMpsemk2MaRG9BSoy5Wvy8VxROYYUwpT8Cf2iQCVAwUQMXsyqWtaZ42B sqd5AQHKjAQAvolI30Nyu3IyTfNeCb/DvOe9tlOn/o+VUDNJiE/PuBe1s2Y94a/P BfcohpKC2kza3NiW6lLTp00OWQsuu0QAPc02vYOyseZWy4y3Phnw60pWzLcFdemT 0GiYS5Xm1o9nAhPFciybn9j1q8UadIlIq0wbqWgdInBT8YI/l4f5sf6JAJUDBRAx ezKXVS4eLnPSiKUBAc5OBACIXTlKqQC3B53qt7bNMV46m81fuw1PhKaJEI033mCD ovzyEFFQeOyRXeu25Jg9Bq0Sn37ynISucHSmt2tUD5W0+p1MUGyTqnfqejMUWBzO v4Xhp6a8RtDdUMBOTtro16iulGiRrCKxzVgEl4i+9Z0ZiE6BWlg5AetoF5n3mGk1 lw== =ipyA -----END PGP PUBLIC KEY BLOCK-----</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>&a.imp;</title>
	  
	  <para>
	    <informalexample>
	      <screen>Warner Losh &lt;imp@village.org&gt; aka
		&lt;imp@freebsd.org&gt; Fingerprint = D4 31 FD B9 F7 90 17 E8
		37 C5 E7 7F CF A6 C1 B9 -----BEGIN PGP PUBLIC KEY BLOCK-----
		Version: 2.6.2
		mQCNAzDzTiAAAAEEAK8D7KWEbVFUrmlqhUEnAvphNIqHEbqqT8s+c5f5c2uHtlcH V4mV2TlUaDSVBN4+/D70oHmZc4IgiQwMPCWRrSezg9z/MaKlWhaslc8YT6Xc1q+o EP/fAdKUrq49H0QQbkQk6Ks5wKW6v9AOvdmsS6ZJEcet6d9G4dxynu/2qPVhAAUR tCBNLiBXYXJuZXIgTG9zaCA8aW1wQHZpbGxhZ2Uub3JnPokAlQMFEDM/SK1VLh4u c9KIpQEBFPsD/1n0YuuUPvD4CismZ9bx9M84y5sxLolgFEfP9Ux196ZSeaPpkA0g C9YX/IyIy5VHh3372SDWN5iVSDYPwtCmZziwIV2YxzPtZw0nUu82P/Fn8ynlCSWB 5povLZmgrWijTJdnUWI0ApVBUTQoiW5MyrNN51H3HLWXGoXMgQFZXKWYiQCVAwUQ MzmhkfUVW/uOVC1dAQG3+AP/T1HL/5EYF0ij0yQmNTzt1cLt0b1e3N3zN/wPFFWs BfrQ+nsv1zw7cEgxLtktk73wBGM9jUIdJu8phgLtl5a0m9UjBq5oxrJaNJr6UTxN a+sFkapTLT1g84UFUO/+8qRB12v+hZr2WeXMYjHAFUT18mp3xwjW9DUV+2fW1Wag YDKJAJUDBRAzOYK1s1pi61mfMj0BARBbA/930CHswOF0HIr+4YYUs1ejDnZ2J3zn icTZhl9uAfEQq++Xor1x476j67Z9fESxyHltUxCmwxsJ1uOJRwzjyEoMlyFrIN4C dE0C8g8BF+sRTt7VLURLERvlBvFrVZueXSnXvmMoWFnqpSpt3EmN6TNaLe8Cm87a k6EvQy0dpnkPKokAlQMFEDD9Lorccp7v9qj1YQEBrRUD/3N4cCMWjzsIFp2Vh9y+ RzUrblyF84tJyA7Rr1p+A7dxf7je3Zx5QMEXosWL1WGnS5vC9YH2WZwv6sCU61gU rSy9z8KHlBEHh+Z6fdRMrjd9byPf+n3cktT0NhS23oXB1ZhNZcB2KKhVPlNctMqO 3gTYx+Nlo6xqjR+J2NnBYU8p =7fQV -----END PGP PUBLIC KEY BLOCK-----</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
      </sect1>
      
      <sect1>
	<title>Core Team members</title>
	
	
	<sect2>
	  <title>&a.asami;</title>
	  
	  <para>
	    <informalexample>
	      <screen>Satoshi Asami &lt;asami@cs.berkeley.edu&gt; aka
		&lt;asami@FreeBSD.ORG&gt; Fingerprint = EB 3C 68 9E FB 6C EB
		3F  DB 2E 0F 10 8F CE 79 CA -----BEGIN PGP PUBLIC KEY
		BLOCK----- Version: 2.6.2
		mQCNAzPVyoQAAAEEAL7W+kipxB171Z4SVyyL9skaA7hG3eRsSOWk7lfvfUBLtPog f3OKwrApoc/jwLf4+Qpdzv5DLEt/6Hd/clskhJ+q1gMNHyZ5ABmUxrTRRNvJMTrb 3fPU3oZj7sL/MyiFaT1zF8EaMP/iS2ZtcFsbYOqGeA8E/58uk4NA0SoeCNiJAAUR tCVTYXRvc2hpIEFzYW1pIDxhc2FtaUBjcy5iZXJrZWxleS5lZHU+iQCVAwUQM/AT +EqGN2HYnOMZAQF11QP/eSXb2FuTb1yX5yoo1Im8YnIk1SEgCGbyEbOMMBznVNDy 5g2TAD0ofLxPxy5Vodjg8rf+lfMVtO5amUH6aNcORXRncE83T10JmeM6JEp0T6jw zOHKz8jRzygYLBayGsNIJ4BGxa4LeaGxJpO1ZEvRlNkPH/YEXK5oQmq9/DlrtYOJ AEUDBRAz42JT8ng6GBbVvu0BAU8nAYCsJ8PiJpRUGlrz6rxjX8hqM1v3vqFHLcG+ G52nVMBSy+RZBgzsYIPwI5EZtWAKb22JAJUDBRAz4QBWdbtuOHaj97EBAaQPA/46 +NLUp+Wubl90JoonoXocwAg88tvAUVSzsxPXj0lvypAiSI2AJKsmn+5PuQ+/IoQy lywRsxiQ5GD7C72SZ1yw2WI9DWFeAi+qa4b8n9fcLYrnHpyCY+zxEpu4pam8FJ7H JocEUZz5HRoKKOLHErzXDiuTkkm72b1glmCqAQvnB4kAlQMFEDPZ3gyDQNEqHgjY iQEBFfUEALu2C0uo+1Z7C5+xshWRYY5xNCzK20O6bANVJ+CO2fih96KhwsMof3lw fDso5HJSwgFd8WT/sR+Wwzz6BAE5UtgsQq5GcsdYQuGI1yIlCYUpDp5sgswNm+OA bX5a+r4F/ZJqrqT1J56Mer0VVsNfe5nIRsjd/rnFAFVfjcQtaQmjiQCVAwUQM9uV mcdm8Q+/vPRJAQELHgP9GqNiMpLQlZig17fDnCJ73P0e5t/hRLFehZDlmEI2TK7j Yeqbw078nZgyyuljZ7YsbstRIsWVCxobX5eH1kX+hIxuUqCAkCsWUY4abG89kHJr XGQn6X1CX7xbZ+b6b9jLK+bJKFcLSfyqR3M2eCyscSiZYkWKQ5l3FYvbUzkeb6K0 IVNhdG9zaGkgQXNhbWkgPGFzYW1pQEZyZWVCU0QuT1JHPg== =39SC -----END PGP PUBLIC KEY BLOCK-----</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>&a.jmb;</title>
	  
	  <para>
	    <informalexample>
	      <screen>Jonathan M. Bresler &lt;jmb@FreeBSD.org&gt; Key
		fingerprint =  31 57 41 56 06 C1 40 13  C5 1C E3 E5 DC 62 0E
		FB  -----BEGIN PGP PUBLIC KEY BLOCK----- Version: 2.6.2
		mQCNAzG2GToAAAEEANI6+4SJAAgBpl53XcfEr1M9wZyBqC0tzpie7Zm4vhv3hO8s o5BizSbcJheQimQiZAY4OnlrCpPxijMFSaihshs/VMAz1qbisUYAMqwGEO/T4QIB nWNo0Q/qOniLMxUrxS1RpeW5vbghErHBKUX9GVhxbiVfbwc4wAHbXdKX5jjdAAUR tCVKb25hdGhhbiBNLiBCcmVzbGVyIDxqbWJARnJlZUJTRC5PUkc+iQCVAwUQNA3x ffUVW/uOVC1dAQHGdAQAgsnYklBtVUdGuQwXB3bYp9omTD7CVD0aibVrz+lXiPDh aTVkOC1uhEwL59+R8VdpAnEDMobdZDA/ihCc+6/FW/eE0uyrWZzb5Ng9V1MfC6HI +sXpeXPy585Z56ewadV2yY9rvzcwmmUNHmAXT/5O0S2AWB0EJZ+cewTrokSTVVOJ AJUDBRA0C3EoVS4eLnPSiKUBASb+A/95g6w9DDPRGDlbsl4pN1BlSPKrmDQPRK1X C3bddDY2HNelSNhzp2FYD0WoN1re1vMJV0oaaJHwv7wjbe3+SYEX/IdmtfzI0MbZ Q/uPybPJOxi2ud6C6J+mEGJN9iBCnsaCz8CETuC9gR1mtxsxySUj9mk0fxKfdP6S 3QDrv6CQ1IkAlQMFEDKsi9CzWmLrWZ8yPQEBduUD/RhV4Qa89rYls9vtIFm6XBjZ 8mW37FYxeqIxg3ZrIyTMlghsOPV0f7zymCCWPRGKOLePRiGo0ZCEkDTYiM9tnwQI 09rmPWJb50yfTSZXjHx6+Hcm6O6BCmDFloo0Mxo6n9pvMH/TmmqHxCsAV+p8XEWy rMZvwVSynMxmJd17Y5HLtBNKb25hdGhhbiBNLiBCcmVzbGVyiQCVAwUQMbYtYQHb XdKX5jjdAQHEHwP/fEaQoTi7zKD1U/5kW2YPIBUyMTpLiO9QOr4stYjJvhHh4Ejw fGvMIhbFrPKtxSNH1s3m4jAXKXiQBDCz17IIzL4n8dlunxNGE5MHcsmpWzggyIg4 zbPqPOcg4gLFEWsEkr2o0akwzIGa3tbCvC+ITaX/rdlWV1jaQjTqSNyPZBM= =RV56 -----END PGP PUBLIC KEY BLOCK-----</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>&a.ache;</title>
	  
	  <para>
	    <informalexample>
	      <screen>Andrey A. Chernov &lt;ache@FreeBSD.org&gt; aka
		&lt;ache@nagual.pp.ru&gt; Key fingerprint = 33 03 9F 48 33 7B
		4A 15  63 48 88 0A C4 97 FD 49 -----BEGIN PGP PUBLIC KEY
		BLOCK----- Version: 2.6.3ia
		mQCNAiqUMGQAAAEEAPGhcD6A2Buey5LYz0sphDLpVgOZc/bb9UHAbaGKUAGXmafs Dcb2HnsuYGgX/zrQXuCi/wIGtXcZWB97APtKOhFsZnPinDR5n/dde/mw9FnuhwqD m+rKSL1HlN0z/Msa5y7g16760wHhSR6NoBSEG5wQAHIMMq7Q0uJgpPLZnQjrAAUT tCVBbmRyZXkgQS4gQ2hlcm5vdiA8YWNoZUBuYWd1YWwucHAucnU+iQCVAwUQM2Ez u+JgpPLZnQjrAQEyugP8DPnS8ixJ5OeuYgPFQf5sy6l+LrB6hyaS+lgsUPahWjNY cnaDmfda/q/BV5d4+y5rlQe/pjnYG7/yQuAR3jhlXz8XDrqlBOnW9AtYjDt5rMfJ aGFTGXAPGZ6k6zQZE0/YurT8ia3qjvuZm3Fw4NJrHRx7ETHRvVJDvxA6Ggsvmr20 JEFuZHJleSBBLiBDaGVybm92IDxhY2hlQEZyZWVCU0Qub3JnPokAlQMFEDR5uVbi YKTy2Z0I6wEBLgED/2mn+hw4/3peLx0Sb9LNx//NfCCkVefSf2G9Qwhx6dvwbX7h mFca97h7BQN4GubU1Z5Ffs6TeamSBrotBYGmOCwvJ6S9WigF9YHQIQ3B4LEjskAt pcjU583y42zM11kkvEuQU2Gde61daIylJyOxsgpjSWpkxq50fgY2kLMfgl/ftCZB bmRyZXkgQS4gQ2hlcm5vdiA8YWNoZUBuaWV0enNjaGUubmV0PokAlQMFEDR5svDi YKTy2Z0I6wEBOTQD/0OTCAXIjuak363mjERvzSkVsNtIH9hA1l0w6Z95+iH0fHrW xXKT0vBZE0y0Em+S3cotLL0bMmVE3F3D3GyxhBVmgzjyx0NYNoiQjYdi+6g/PV30 Cn4vOO6hBBpSyI6vY6qGNqcsawuRtHNvK/53MpOfKwSlICEBYQimcZhkci+EtCJB bmRyZXkgQS4gQ2hlcm5vdiA8YWNoZUBuYWd1YWwucnU+iQCVAwUQMcm5HeJgpPLZ nQjrAQHwvQP9GdmAf1gdcuayHEgNkc11macPH11cwWjYjzA2YoecFMGV7iqKK8QY rr1MjbGXf8DAG8Ubfm0QbI8Lj8iG3NgqIru0c72UuHGSn/APfGGG0AtPX5UK/k7B gI0Ca2po6NA5nrSp8tDsdEz/4gyea84RXl2prtTf5Jj07hflbRstGXK0MkFuZHJl eSBBLiBDaGVybm92LCBCbGFjayBNYWdlIDxhY2hlQGFzdHJhbC5tc2suc3U+iQCV AwUQMCsAo5/rGryoL8h3AQHq1QQAidyNFqA9hvrmMcjpY7csJVFlGvj574Wj4GPa o3pZeuQaMBmsWqaXLYnWU/Aldb6kTz6+nRcQX50zFH0THSPfApwEW7yybSTI5apJ mWT3qhKN2vmLNg2yNzhqLTzHLD1lH3i1pfQq8WevrNfjLUco5S/VuekTma/osnzC Cw7fQzCJAJUDBRAwKvwoa1pnjYGyp3kBARihBACoXr3qfG65hFCyKJISmjOvaoGr anxUIkeDS0yQdTHzhQ+dwB1OhhK15E0Nwr0MKajLMm90n6+Zdb5y/FIjpPriu8dI rlHrWZlewa88eEDM+Q/NxT1iYg+HaKDAE171jmLpSpCL0MiJtO0i36L3ekVD7Hv8 vffOZHPSHirIzJOZTYkAlQMFEDAau6zFLUdtDb+QbQEBQX8D/AxwkYeFaYxZYMFO DHIvSk23hAsjCmUA2Uil1FeWAusb+o8xRfPDc7TnosrIifJqbF5+fcHCG5VSTGlh Bhd18YWUeabf/h9O2BsQX55yWRuB2x3diJ1xI/VVdG+rxlMCmE4ZR1Tl9x+Mtun9 KqKVpB39VlkCBYQ3hlgNt/TJUY4riQCVAwUQMBHMmyJRltlmbQBRAQFQkwP/YC3a hs3ZMMoriOlt3ZxGNUUPTF7rIER3j+c7mqGG46dEnDB5sUrkzacpoLX5sj1tGR3b vz9a4vmk1Av3KFNNvrZZ3/BZFGpq3mCTiAC9zsyNYQ8L0AfGIUO5goCIjqwOTNQI AOpNsJ5S+nMAkQB4YmmNlI6GTb3D18zfhPZ6uciJAJUCBRAwD0sl4uW74fteFRkB AWsAA/9NYqBRBKbmltQDpyK4+jBAYjkXBJmARFXKJYTlnTgOHMpZqoVyW96xnaa5 MzxEiu7ZWm5oL10QDIp1krkBP2KcmvfSMMHb5aGCCQc2/P8NlfXAuHtNGzYiI0UA Iwi8ih/S1liVfvnqF9uV3d3koE7VsQ9OA4Qo0ZL2ggW+/gEaYIkAlQMFEDAOz6qx /IyHe3rl4QEBIvYD/jIr8Xqo/2I5gncghSeFR01n0vELFIvaF4cHofGzyzBpYsfA +6pgFI1IM+LUF3kbUkAY/2uSf9U5ECcaMCTWCwVgJVO+oG075SHEM4buhrzutZiM 1dTyTaepaPpTyRMUUx9ZMMYJs7sbqLId1eDwrJxUPhrBNvf/w2W2sYHSY8cdiQCV AwUQMAzqgHcdkq6JcsfBAQGTxwQAtgeLFi2rhSOdllpDXUwz+SS6bEjFTWgRsWFM y9QnOcqryw7LyuFmWein4jasjY033JsODfWQPiPVNA3UEnXVg9+n8AvNMPO8JkRv Cn1eNg0VaJy9J368uArio93agd2Yf/R5r+QEuPjIssVk8hdcy/luEhSiXWf6bLMV HEA0J+OJAJUDBRAwDUi+4mCk8tmdCOsBAatBBACHB+qtW880seRCDZLjl/bT1b14 5po60U7u6a3PEBkY0NA72tWDQuRPF/Cn/0+VdFNxQUsgkrbwaJWOoi0KQsvlOm3R rsxKbn9uvEKLxExyKH3pxp76kvz/lEWwEeKvBK+84Pb1lzpG3W7u2XDfi3VQPTi3 5SZMAHc6C0Ct/mjNlYkAlQMFEDAMrPD7wj+NsTMUOQEBJckD/ik4WsZzm2qOx9Fw erGq7Zwchc+Jq1YeN5PxpzqSf4AG7+7dFIn+oe6X2FcIzgbYY+IfmgJIHEVjDHH5 +uAXyb6l4iKc89eQawO3t88pfHLJWbTzmnvgz2cMrxt94HRvgkHfvcpGEgbyldq6 EB33OunazFcfZFRIcXk1sfyLDvYE =1ahV -----END PGP PUBLIC KEY BLOCK-----</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>&a.jkh;</title>
	  
	  <para>
	    <informalexample>
	      <screen>Jordan K. Hubbard &lt;jkh@FreeBSD.org&gt; Fingerprint =
		3C F2 27 7E 4A 6C 09 0A  4B C9 47 CD 4F 4D 0B 20 -----BEGIN
		PGP PUBLIC KEY BLOCK----- Version: 2.6.2i
		mQCNAzFjX0IAAAEEAML+nm9/kDNPp43ZUZGjYkm2QLtoC1Wxr8JulZXqk7qmhYcQ jvX+fyoriJ6/7ZlnLe2oG5j9tZOnRLPvMaz0g9CpW6Dz3nkXrNPkmOFV9B8D94Mk tyFeRJFqnkCuqBj6D+H8FtBwEeeTecSh2tJ0bZZTXnAMhxeOdvUVW/uOVC1dAAUR tCNKb3JkYW4gSy4gSHViYmFyZCA8amtoQEZyZWVCU0Qub3JnPokAlQMFEDF75D1r WmeNgbKneQEBXtcD+gJIv8JzZRKlDZyTCQanK8iRgE+zMhxptI0kDObaGxT1BrpY 4/EPyiUN10G4k2Jb+DOc8Lg2xDQ3xmvgipFf9NMNV/ThaEuZ3wA31I6tW/arQEqB Tp8u6T3v20m62t7Afo9HaoE6MBpHQUk2TilxgAd5P57sporL3pgW9YojIO9ziQCV AwUQMXyV2h9/qQgDWPy9AQEMfgP/RmbSg2WlesATUQ4WuanjcdREduKPyfQatrXD 2xt+jg9X78dTyiNN1YvLqvT6msfs04MKSC0hA2mou6ozw8Xak+1QmP0fBOZKp9pP 8szO188Do9ByzJPvHF1eXT7jFMOXVq8ZIl9iwjxcIDLzlxOz49DC7LO6AT+LKQk7 UGeP+lqJAJUDBRAxe+UG9RVb+45ULV0BAXZ9A/9F9gLpGukVNkeOjaqxQdJGTS+a xh/Abk0c/nKhAEyxpAl5JyQ3ifYk6BHhPvlTi9LrZoXGA8sk/eU4eRTZVzvGEC4G +xsavlE/xzku8855QTLPpkCunUpQeu1wzaIrUUE6Zjh05imFbJYyQOBgTFpuqWsC rsUpl+2mr8IGIxG5rA== =LW9i -----END PGP PUBLIC KEY BLOCK-----</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>&a.phk;</title>
	  
	  <para>
	    <informalexample>
	      <screen>Poul-Henning Kamp &lt;phk@FreeBSD.org&gt; Fingerprint =
		A3 F3 88 28 2F 9B 99 A2  49 F4 E2 FA 5A 78 8B 3E -----BEGIN
		PGP PUBLIC KEY BLOCK----- Version: 2.6.3ia
		mQCNAzAdpMIAAAEEALHDgrFUwhZtb7PbXg3upELoDVEUPFRwnmpJH1rRqyROUGcI ooVe7u+FQlIs5OsXK8ECs/5Wpe2UrZSzHvjwBYOND5H42YtI5UULZLRCo5bFfTVA K9Rpo5icfTsYihrzU2nmnycwFMk+jYXyT/ZDYWDP/BM9iLjj0x9/qQgDWPy9AAUR tCNQb3VsLUhlbm5pbmcgS2FtcCA8cGhrQEZyZWVCU0Qub3JnPokAlQMFEDMGK9qz WmLrWZ8yPQEB4iED/18bQVhV2gUYFSxIUTaUtO2HVPi7GRpSzmXoTfS+FJyRR0ED zTqTHstoBe2PeWgTsOf9cUub5UKcJkRQp7VrJv4Kncyuq7pX69a+QMveCzuUwAur nDbt/emOL6NU8g9Uk50QuOuipb5rULQLRRoF5TkViy/VES83ERXdYQ9Ml3fWiQCV AwUQMX6NfWtaZ42Bsqd5AQEKsgP+L+uLz95dRdEmnZ+omrO+tYZM/0jHU7i8yC5q H0gguKOCljI4liR7NkqKONUJWYtfsTB81d9iSosBZRrTx6i/hB8l8kOB975n/f9S hftFwmjLYCNMFlDM4j0kySvMV20UZjAyv9BeE51VWlIZ5n/oeSuzul3Znow02tF/ zVnInJiJAJUDBRAxfJXn9RVb+45ULV0BAXJ8A/9K6NT6VLZZC5q3g7bBk5DWuzBS 3oK2Ebww6xzsD2R9edltoz1J3GPngK0CWpHh4kw5iTaRWoC2YJYRNG6icnGvlMAl 1/urqQHJVhxATINm8oljDKsj1RBJ6VKBzNbCJIHTVpX0AJoqUQX2Idi8goFr0fAm 7cD2CBb1JhoAdzEfO4kAlQMFEDFLHlwff6kIA1j8vQEBj5MD/1hA8hJdhpL7mvQj rTAIn6Ldr08Lr1lqTaKSBMdCL3suGlW0Sw/dIBgicPDhgxLahT3DVfGiIst32FSl xmWY7wine80X4TZkJ9Hiw3Mpqtjl92j6zHNq0ZZE+CceNubpEdYLDqokAIMPdWlo WPHZcPxCs5PKI5udseFYF2gQAjI2iQCVAwUQMTlDoO9huekR1Y7VAQGy+AP/Rzp+ UGtJavbSiPx5EnXOXxkA/+ulXQgQG9vdkWwewkvxDNOzHW3KkUWCGtPtIMENznbF j3QlYB+USIaf1ogvlD5EdXGPDfTINpE8CX2WXzajfgYFpYETDzduwjoWDZfEN9zZ fQqQS62VgAReOIz3k9BL708z/+WUO0++RLGCmImJAJUDBRAw5q8kAPLZCeu7G0EB AT3bBACwo+r9TgbiSyyU5cZpq5KgGT1c7eUHXjtxKmtrXD1nFNJ6j7x2DM2XGe6B YOfDWbFq4UkEAyAeXviuuUP4enQu1v2g7JGXeuI8bRM519pLdPzDq/DnbA4rNStn /SkH7awMfNSplcFuE6rc5ezVkw17eOHzDrYmwsFavL9gxZEycg== =Q45T -----END PGP PUBLIC KEY BLOCK-----</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>&a.rich;</title>
	  
	  <para>
	    <informalexample>
	      <screen>Rich Murphey &lt;rich@FreeBSD.org&gt; fingerprint = AF
		A0 60 C4 84 D6 0C 73  D1 EF C0 E9 9D 21 DB E4 -----BEGIN PGP
		PUBLIC KEY BLOCK----- Version: 2.6.2
		mQCNAy97V+MAAAEEALiNM3FCwm3qrCe81E20UOSlNclOWfZHNAyOyj1ahHeINvo1 FBF2Gd5Lbj0y8SLMno5yJ6P4F4r+x3jwHZrzAIwMs/lxDXRtB0VeVWnlj6a3Rezs wbfaTeSVyh5JohEcKdoYiMG5wjATOwK/NAwIPthB1RzRjnEeer3HI3ZYNEOpAAUR tCRSaWNoIE11cnBoZXkgPHJpY2hAbGFtcHJleS51dG1iLmVkdT6JAJUDBRAve15W vccjdlg0Q6kBAZTZBACcNd/LiVnMFURPrO4pVRn1sVQeokVX7izeWQ7siE31Iy7g Sb97WRLEYDi686osaGfsuKNA87Rm+q5F+jxeUV4w4szoqp60gGvCbD0KCB2hWraP /2s2qdVAxhfcoTin/Qp1ZWvXxFF7imGA/IjYIfB42VkaRYu6BwLEm3YAGfGcSw== =QoiM -----END PGP PUBLIC KEY BLOCK-----</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>&a.jdp;</title>
	  
	  <para>
	    <informalexample>
	      <screen>John D. Polstra &lt;jdp@polstra.com&gt; Fingerprint = 54
		3A 90 59 6B A4 9D 61  BF 1D 03 09 35 8D F6 0D -----BEGIN PGP
		PUBLIC KEY BLOCK----- Version: 2.6.2
		mQCNAzMElMEAAAEEALizp6ZW9QifQgWoFmG3cXhzQ1+Gt+a4S1adC/TdHdBvw1M/ I6Ok7TC0dKF8blW3VRgeHo4F3XhGn+n9MqIdboh4HJC5Iiy63m98sVLJSwyGO4oM dkEGyyCLxqP6h/DU/tzNBdqFzetGtYvU4ftt3RO0a506cr2CHcdm8Q+/vPRJAAUR tCFKb2huIEQuIFBvbHN0cmEgPGpkcEBwb2xzdHJhLmNvbT6JAJUDBRAzBNBE9RVb +45ULV0BAWgiA/0WWO3+c3qlptPCHJ3DFm6gG/qNKsY94agL/mHOr0fxMP5l2qKX O6a1bWkvGoYq0EwoKGFfn0QeHiCl6jVi3CdBX+W7bObMcoi+foqZ6zluOWBC1Jdk WQ5/DeqQGYXqbYjqO8voCScTAPge3XlMwVpMZTv24u+nYxtLkE0ZcwtY9IkAlQMF EDMEt/DHZvEPv7z0SQEBXh8D/2egM5ckIRpGz9kcFTDClgdWWtlgwC1iI2p9gEhq aufy+FUJlZS4GSQLWB0BlrTmDC9HuyQ+KZqKFRbVZLyzkH7WFs4zDmwQryLV5wkN C4BRRBXZfWy8s4+zT2WQD1aPO+ZsgRauYLkJgTvXTPU2JCN62Nsd8R7bJS5tuHEm 7HGmiQCVAwUQMwSvHB9/qQgDWPy9AQFAhAQAgJ1AlbKITrEoJ0+pLIsov3eQ348m SVHEBGIkU3Xznjr8NzT9aYtq4TIzt8jplqP3QoV1ka1yYpZf0NjvfZ+ffYp/sIaU wPbEpgtmHnVWJAebMbNs/Ad1w8GDvxEt9IaCbMJGZnHmfnEqOBIxF7VBDPHHoJxM V31K/PIoYsHAy5w= =cHFa -----END PGP PUBLIC KEY BLOCK-----</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>&a.guido;</title>
	  
	  <para>
	    <informalexample>
	      <screen>Guido van Rooij &lt;guido@gvr.win.tue.nl&gt; Fingerprint
		= 16 79 09 F3 C0 E4 28 A7  32 62 FA F6 60 31 C0 ED -----BEGIN
		PGP PUBLIC KEY BLOCK----- Version: 2.6.2
		mQCNAzGeO84AAAEEAKKAY91Na//DXwlUusr9GVESSlVwVP6DyH1wcZXhfN1fyZHq SwhMCEdHYoojQds+VqD1iiZQvv1RLByBgj622PDAPN4+Z49HjGs7YbZsUNuQqPPU wRPpP6ty69x1hPKq1sQIB5MS4radpCM+4wbZbhxv7l4rP3RWUbNaYutZnzI9AAUR tCZHdWlkbyB2YW4gUm9vaWogPGd1aWRvQGd2ci53aW4udHVlLm5sPokAlQMFEDMG Hcgff6kIA1j8vQEBbYgD/jm9xHuUuY+iXDkOzpCXBYACYEZDV913MjtyBAmaVqYo Rh5HFimkGXe+rCo78Aau0hc57fFMTsJqnuWEqVt3GRq28hSK1FOZ7ni9/XibHcmN rt2yugl3hYpClijo4nrDL1NxibbamkGW/vFGcljS0jqXz6NDVbGx5Oo7HBByxByz iQCVAwUQMhmtVjt/x7zOdmsfAQFuVQQApsVUTigT5YWjQA9Nd5Z0+a/oVtZpyw5Z OljLJP3vqJdMa6TidhfcatjHbFTve5x1dmjFgMX/MQTd8zf/+Xccy/PX4+lnKNpP eSf1Y4aK+E8KHmBGd6GzX6CIboyGYLS9e3kGnN06F2AQtaLyJFgQ71wRaGuyKmQG FwTn7jiKb1aJAJUDBRAyEOLXPt3iN6QQUSEBATwQA/9jqu0Nbk154+Pn+9mJX/YT fYR2UqK/5FKCqgL5Nt/Deg2re0zMD1f8F9Dj6vuAAxq8hnOkIHKlWolMjkRKkzJi mSPEWl3AuHJ31k948J8it4f8kq/o44usIA2KKVMlI63Q/rmNdfWCyiYQEVGcRbTm GTdZIHYCOgV5dOo4ebFqgYkAlQMFEDIE1nMEJn15jgpJ0QEBW6kEAKqN8XSgzTqf CrxFXT07MlHhfdbKUTNUoboxCGCLNW05vf1A8F5fdE5i14LiwkldWIzPxWD+Sa3L fNPCfCZTaCiyGcLyTzVfBHA18MBAOOX6JiTpdcm22jLGUWBf/aJK3yz/nfbWntd/ LRHysIdVp29lP5BF+J9/Lzbb/9LxP1taiQCVAwUQMgRXZ44CzbsJWQz9AQFf7gP/ Qa2FS5S6RYKG3rYanWADVe/ikFV2lxuM1azlWbsmljXvKVWGe6cV693nS5lGGAjx lbd2ADwXjlkNhv45HLWFm9PEveO9Jjr6tMuXVt8N2pxiX+1PLUN9CtphTIU7Yfjn s6ryZZfwGHSfIxNGi5ua2SoXhg0svaYnxHxXmOtH24iJAJUDBRAyAkpV8qaAEa3W TBkBARfQBAC+S3kbulEAN3SI7/A+A/dtl9DfZezT9C4SRBGsl2clQFMGIXmMQ/7v 7lLXrKQ7U2zVbgNfU8smw5h2vBIL6f1PyexSmc3mz9JY4er8KeZpcf6H0rSkHl+i d7TF0GvuTdNPFO8hc9En+GG6QHOqbkB4NRZ6cwtfwUMhk2FHXBnjF4kAlQMFEDH5 FFukUJAsCdPmTQEBe74EAMBsxDnbD9cuI5MfF/QeTNEG4BIVUZtAkDme4Eg7zvsP d3DeJKCGeNjiCWYrRTCGwaCWzMQk+/+MOmdkI6Oml+AIurJLoHceHS9jP1izdP7f N2jkdeJSBsixunbQWtUElSgOQQ4iF5kqwBhxtOfEP/L9QsoydRMR1yB6WPD75H7V iQCVAwUQMZ9YNGtaZ42Bsqd5AQH0PAQAhpVlAc3ZM/KOTywBSh8zWKVlSk3q/zGn k7hJmFThnlhH1723+WmXE8aAPJi+VXOWJUFQgwELJ6R8jSU2qvk2m1VWyYSqRKvc VRQMqT2wjss0GE1Ngg7tMrkRHT0il7E2xxIb8vMrIwmdkbTfYqBUhhGnsWPHZHq7 MoA1/b+rK7CJAJUDBRAxnvXh3IDyptUyfLkBAYTDA/4mEKlIP/EUX2Zmxgrd/JQB hqcQlkTrBAaDOnOqe/4oewMKR7yaMpztYhJs97i03Vu3fgoLhDspE55ooEeHj0r4 cOdiWfYDsjSFUYSPNVhW4OSruMA3c29ynMqNHD7hpr3rcCPUi7J2RncocOcCjjK2 BQb/9IAUNeK4C9gPxMEZLokAlQMFEDGeO86zWmLrWZ8yPQEBEEID/2fPEUrSX3Yk j5TJPFZ9MNX0lEo7AHYjnJgEbNI4pYm6C3PnMlsYfCSQDHuXmRQHAOWSdwOLvCkN F8eDaF3M6u0urgeVJ+KVUnTz2+LZoZs12XSZKCte0HxjbvPpWMTTrYyimGezH79C mgDVjsHaYOx3EXF0nnDmtXurGioEmW1J =mSvM -----END PGP PUBLIC KEY BLOCK-----</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>&a.peter;</title>
	  
	  <para>
	    <informalexample>
	      <screen>Peter Wemm &lt;peter@FreeBSD.org&gt; aka
		&lt;peter@spinner.dialix.com&gt; aka
		&lt;peter@haywire.dialix.com&gt; aka
		&lt;peter@perth.dialix.oz.au&gt; Key fingerprint = 47 05 04 CA
		4C EE F8 93  F6 DB 02 92 6D F5 58 8A -----BEGIN PGP PUBLIC KEY
		BLOCK----- Version: 2.6.3ia
		mQCNAy9/FJwAAAEEALxs9dE9tFd0Ru1TXdq301KfEoe5uYKKuldHRBOacG2Wny6/ W3Ill57hOi2+xmq5X/mHkapywxvy4cyLdt31i4GEKDvxpDvEzAYcy2n9dIup/eg2 kEhRBX9G5k/LKM4NQsRIieaIEGGgCZRm0lINqw495aZYrPpO4EqGN2HYnOMZAAUT tCVQZXRlciBXZW1tIDxwZXRlckBoYXl3aXJlLmRpYWxpeC5jb20+iQCVAwUQMwWT cXW7bjh2o/exAQEFkQP+LIx5zKlYp1uR24xGApMFNrNtjh+iDIWnxxb2M2Kb6x4G 9z6OmbUCoDTGrX9SSL2Usm2RD0BZfyv9D9QRWC2TSOPkPRqQgIycc11vgbLolJJN eixqsxlFeKLGEx9eRQCCbo3dQIUjc2yaOe484QamhsK1nL5xpoNWI1P9zIOpDiGJ AJUDBRAxsRPqSoY3Ydic4xkBAbWLA/9q1Fdnnk4unpGQsG31Qbtr4AzaQD5m/JHI 4gRmSmbj6luJMgNG3fpO06Gd/Z7uxyCJB8pTst2a8C/ljOYZxWT+5uSzkQXeMi5c YcI1sZbUpkHtmqPW623hr1PB3ZLA1TIcTbQW+NzJsxQ1Pc6XG9fGkT9WXQW3Xhet AP+juVTAhLQlUGV0ZXIgV2VtbSA8cGV0ZXJAcGVydGguZGlhbGl4Lm96LmF1PokA lQMFEDGxFCFKhjdh2JzjGQEB6XkD/2HOwfuFrnQUtdwFPUkgtEqNeSr64jQ3Maz8 xgEtbaw/ym1PbhbCk311UWQq4+izZE2xktHTFClJfaMnxVIfboPyuiSF99KHiWnf /Gspet0S7m/+RXIwZi1qSqvAanxMiA7kKgFSCmchzas8TQcyyXHtn/gl9v0khJkb /fv3R20btB5QZXRlciBXZW1tIDxwZXRlckBGcmVlQlNELm9yZz6JAJUDBRAxsRJd SoY3Ydic4xkBAZJUA/4i/NWHz5LIH/R4IF/3V3LleFyMFr5EPFY0/4mcv2v+ju9g brOEM/xd4LlPrx1XqPeZ74JQ6K9mHR64RhKR7ZJJ9A+12yr5dVqihe911KyLKab9 4qZUHYi36WQu2VtLGnw/t8Jg44fQSzbBF5q9iTzcfNOYhRkSD3BdDrC3llywO7Ql UGV0ZXIgV2VtbSA8cGV0ZXJAc3Bpbm5lci5kaWFsaXguY29tPokAlQMFEDGxEi1K hjdh2JzjGQEBdA4EAKmNFlj8RF9HQsoI3UabnvYqAWN5wCwEB4u+Zf8zq6OHic23 TzoK1SPlmSdBE1dXXQGS6aiDkLT+xOdeewNs7nfUIcH/DBjSuklAOJzKliXPQW7E kuKNwy4eq5bl+j3HB27i+WBXhn6OaNNQY674LGaR41EGq44Wo5ATcIicig/z =gv+h -----END PGP PUBLIC KEY BLOCK-----</screen>
	    </informalexample>
	  </para>
	  
	</sect2>
	
	<sect2>
	  <title>&a.joerg;</title>
	  
	  <para>
	    <informalexample>
	      <screen>Type Bits/KeyID    Date       User ID pub  1024/76A3F7B1
		1996/04/27 Joerg Wunsch &lt;joerg_wunsch@uriah.heep.sax.de&gt;
		Key fingerprint = DC 47 E6 E4 FF A6 E9 8F  93 21 E0 7D F9 12
		D6 4E Joerg Wunsch &lt;joerg_wunsch@interface-business.de&gt;
		Joerg Wunsch &lt;j@uriah.heep.sax.de&gt; Joerg Wunsch
		&lt;j@interface-business.de&gt; -----BEGIN PGP PUBLIC KEY
		BLOCK----- Version: 2.6.3ia
		mQCNAzGCFeAAAAEEAKmRBU2Nvc7nZy1Ouid61HunA/5hF4O91cXm71/KPaT7dskz q5sFXvPJPpawwvqHPHfEbAK42ZaywyFp59L1GaYj87Pda+PlAYRJyY2DJl5/7JPe ziq+7B8MdvbX6D526sdmcR+jPXPbHznASjkx9DPmK+7TgFujyXW7bjh2o/exAAUR tC1Kb2VyZyBXdW5zY2ggPGpvZXJnX3d1bnNjaEB1cmlhaC5oZWVwLnNheC5kZT6J AJUDBRA0FFkBs1pi61mfMj0BAfDCA/oCfkjrhvRwRCpSL8klJ1YDoUJdmw+v4nJc pw3OpYXbwKOPLClsE7K3KCQscHel7auf91nrekAwbrXv9Clp0TegYeAQNjw5vZ9f L6UZ5l3fH8E2GGA7+kqgNWs1KxAnG5GdUvJ9viyrWm8dqWRGo+loDWlZ12L2OgAD fp7jVZTI1okAlQMFEDQPrLoff6kIA1j8vQEB2XQEAK/+SsQPCT/X4RB/PBbxUr28 GpGJMn3AafAaA3plYw3nb4ONbqEw9tJtofAn4UeGraiWw8nHYR2DAzoAjR6OzuX3 TtUV+57BIzrTPHcNkb6h8fPuHU+dFzR+LNoPaGJsFeov6w+Ug6qS9wa5FGDAgaRo LHSyBxcRVoCbOEaS5S5EiQCVAwUQM5BktWVgqaw0+fnVAQGKPwP+OiWho3Zm2GKp lEjiZ5zx3y8upzb+r1Qutb08jr2Ewja04hLg0fCrt6Ad3DoVqxe4POghIpmHM4O4 tcW92THQil70CLzfCxtfUc6eDzoP3krD1/Gwpm2hGrmYA9b/ez9+r2vKBbnUhPmC glx5pf1IzHU9R2XyQz9Xu7FI2baOSZqJAJUDBRAyCIWZdbtuOHaj97EBAVMzA/41 VIph36l+yO9WGKkEB+NYbYOz2W/kyi74kXLvLdTXcRYFaCSZORSsQKPGNMrPZUoL oAKxE25AoCgl5towqr/sCcu0A0MMvJddUvlQ2T+ylSpGmWchqoXCN7FdGyxrZ5zz xzLIvtcio6kaHd76XxyJpltCASupdD53nEtxnu8sRrQxSm9lcmcgV3Vuc2NoIDxq b2VyZ193dW5zY2hAaW50ZXJmYWNlLWJ1c2luZXNzLmRlPokAlQMFEDIIhfR1u244 dqP3sQEBWoID/RhBm+qtW+hu2fqAj9d8CVgEKJugrxZIpXuCKFvO+bCgQtogt9EX +TJh4s8UUdcFkyEIu8CT2C3Rrr1grvckfxvrTgzSzvtYyv1072X3GkVY+SlUMBMA rdl1qNW23oT7Q558ajnsaL065XJ5m7HacgTTikiofYG8i1s7TrsEeq6PtCJKb2Vy ZyBXdW5zY2ggPGpAdXJpYWguaGVlcC5zYXguZGU+iQCVAwUQMaS91D4gHQUlG9CZ AQGYOwQAhPpiobK3d/fz+jWrbQgjkoO+j39glYGXb22+6iuEprFRs/ufKYtjljNT NK3B4DWSkyIPawcuO4Lotijp6jke2bsjFSSashGWcsJlpnwsv7EeFItT3oWTTTQQ ItPbtNyLW6M6xB+jLGtaAvJqfOlzgO9BLfHuA2LY+WvbVW447SWJAJUDBRAxqWRs dbtuOHaj97EBAXDBA/49rzZB5akkTSbt/gNd38OJgC+H8N5da25vV9dD3KoAvXfW fw7OxIsxvQ/Ab+rJmukrrWxPdsC+1WU1+1rGa4PvJp/VJRDes2awGrn+iO7/cQoS IVziC27JpcbvjLvLVcBIiy1yT/RvJ+87a3jPRHt3VFGcpFh4KykxxSNiyGygl4kA lQMFEDGCUB31FVv7jlQtXQEB5KgD/iIJZe5lFkPr2B/Cr7BKMVBot1/JSu05NsHg JZ3uK15w4mVtNPZcFi/dKbn+qRM6LKDFe/GF0HZD/ZD1FJt8yQjzF2w340B+F2GG EOwnClqZDtEAqnIBzM/ECQQqH+6Bi8gpkFZrFgg5eON7ikqmusDnOlYStM/CBfgp SbR8kDmFtCZKb2VyZyBXdW5zY2ggPGpAaW50ZXJmYWNlLWJ1c2luZXNzLmRlPokA lQMFEDHioSdlYKmsNPn51QEByz8D/10uMrwP7MdaXnptd1XNFhpaAPYTVAOcaKlY OGI/LLR9PiU3FbqXO+7INhaxFjBxa0Tw/p4au5Lq1+Mx81edHniJZNS8tz3I3goi jIC3+jn2gnVAWnK5UZUTUVUn/JLVk/oSaIJNIMMDaw4J9xPVVkb+Fh1A+XqtPsVa YESrNp0+iQCVAwUQMwXkzcdm8Q+/vPRJAQEA4QQAgNNX1HFgXrMetDb+w6yEGQDk JCDAY9b6mA2HNeKLQAhsoZl4HwA1+iuQaCgo3lyFC+1Sf097OUTs74z5X1vCedqV oFw9CxI3xuctt3pJCbbN68flOlnq0WdYouWWGlFwLlh5PEy//VtwX9lqgsizlhzi t+fX6BT4BgKi5baDhrWJAJUDBRAyCKveD9eCJxX4hUkBAebMA/9mRPy6K6i7TX2R jUKSl2p5oYrXPk12Zsw4ijuktslxzQhOCyMSCGK2UEC4UM9MXp1H1JZQxN/DcfnM 7VaUt+Ve0wZ6DC9gBSHJ1hKVxHe5XTj26mIr4rcXNy2XEDMK9QsnBxIAZnBVTjSO LdhqqSMp3ULLOpBlRL2RYrqi27IXr4kAlQMFEDGpbnd1u244dqP3sQEBJnQD/RVS Azgf4uorv3fpbosI0LE3LUufAYGBSJNJnskeKyudZkNkI5zGGDwVneH/cSkKT4OR ooeqcTBxKeMaMuXPVl30QahgNwWjfuTvl5OZ8orsQGGWIn5FhqYXsKkjEGxIOBOf vvlVQ0UbcR0N2+5F6Mb5GqrXZpIesn7jFJpkQKPU =97h7 -----END PGP PUBLIC KEY BLOCK-----</screen>
	    </informalexample>
	    
	  </para>
	  
	</sect2>
      </sect1>
    </chapter>
  </part></book>
