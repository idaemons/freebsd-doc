<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE report PUBLIC "-//FreeBSD//DTD FreeBSD XML Database for Status Report//EN" "http://www.FreeBSD.org/XML/share/xml/statusreport.dtd" >
<!-- $FreeBSD$ -->
<report>
  <date>
    <month>April-June</month>

    <year>2014</year>
  </date>

  <section>
    <title>Introduction</title>

    <p>
      <strong>This is a draft of the April-June 2014 status report.
	Please check back after it is finalized, and an announcement
	email is sent to the FreeBSD-Announce mailing
	list.</strong></p>

    <p>This report covers &os;-related projects between April and
      June 2014.  This is the second of four reports planned for
      2014.</p>

    <?ignore
    <p>The first quarter of 2014 was, again, a hectic and
      productive time for &os;.  The Ports team released their
      landmark first quarterly <q>stable</q> branch.  &os; continues
      to grow on the ARM architecture, now running on an ARM-based
      ChromeBook. SMP is now possible on multi-core ARM systems.
      bhyve, the native &os; hypervisor, continues to improve.  An
      integral test suite is taking shape, and the Jenkins Continuous
      Integration system has been implemented.  &os; patches to GCC
      are being <q>forward-ported</q>, and LLDB, the Clang/LLVM
      debugger is being ported. Desktop use has also seen
      improvements, with work on Gnome, KDE, Xfce, KMS video drivers,
      X.org, and <tt>vt</tt>, the new console driver which supports
      KMS and Unicode.  Linux and Wine binary compatibility layers
      have been improved.  UEFI booting support has been merged to
      head. The &os; Foundation continues to assist in moving &os;
      forward, sponsoring conferences and meetings and numerous
      development projects.  And these are only some of the things
      that happened! Read on for even more.</p>
    ?>

    <p>Thanks to all the reporters for the excellent work!  This
      report contains 3 entries and we hope you enjoy reading it.</p>

    <p>The deadline for submissions covering between July and
      September 2014 is October 7th, 2014.</p>
  </section>

  <category>
    <name>team</name>

    <description>&os; Team Reports</description>
  </category>

  <category>
    <name>proj</name>

    <description>Projects</description>
  </category>

  <category>
    <name>kern</name>

    <description>Kernel</description>
  </category>

  <category>
    <name>arch</name>

    <description>Architectures</description>
  </category>

  <category>
    <name>bin</name>

    <description>Userland Programs</description>
  </category>

  <category>
    <name>ports</name>

    <description>Ports</description>
  </category>

  <category>
    <name>doc</name>

    <description>Documentation</description>
  </category>

  <category>
    <name>misc</name>

    <description>Miscellaneous</description>
  </category>

  <project cat='proj'>
    <title>CUSE4BSD</title>

    <contact>
      <person>
	<name>
	  <given>Hans Petter</given>
	  <common>Selasky</common>
	</name>
	<email>hselasky@freebsd.org</email>
      </person>
    </contact>

    <links>
      <url
	href="http://svnweb.freebsd.org/changeset/base/266581">Commit</url>
    </links>

    <body>
      <p>The so-called "CUSE4BSD" has been imported into the base
	system of &os;-11.  CUSE is short for character device in
	userspace.  The CUSE library is a wrapper for the devfs(8)
	kernel functionality which is exposed through /dev/cuse.  In
	order to function the CUSE kernel code must either be enabled
	in the kernel configuration file or loaded separately as
	a module.  Follow the commit message link to get more
	information.
      </p>
    </body>
  </project>

  <project cat='proj'>
    <title>RPC/NFS and CTL/iSCSI performance optimizations.</title>

    <contact>
      <person>
	<name>
	  <given>Alexander</given>
	  <common>Motin</common>
	</name>
	<email>mav@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>The &os; RPC stack, used as base for its NFS server, took
	multiple optimizations to improve its performance and SMP
	scalability.  Algorithmic optimizations allowed to reduce
	processing overhead, while improved locking allowed it to
	scale up to at least 40 processor cores without significant
	lock congestion.  Combined with some other kernel
	optimizations that allowed to increase peak NFS request rate
	by many times, reaching up to 600K requests per second on
	modern hardware.</p>

      <p>The CAM Target Layer (CTL), used as base for new kernel iSCSI
	server, also took series of locking optimization, that allowed
	to increase its peak request rate from ~200K to ~600K IOPS
	with potential of reaching reate of 1M request per second.
	That rate is sufficient to completely saturage 2x10Gbit
	Ethernet links with 4KB requests.  For comparison, the port of
	net/istgt (user-level iSCSI server) on the same hardware with
	equal configuration shown only 100K IOPS.</p>

      <p>There is also ongoing work on improving CTL functionality.
	It was already made to support 3 of 4 VMWare VAAI storage
	acceleration primitives (net/istgt supports 2), while the goal
	is to reach full VAAI support during next months.</p>

      <p>With all above, and earlier improvements in CAM, GEOM, ZFS
	and number of other kernel areas coming soon FreeBSD 10.1 may
	become the fastest storage release ever. ;)</p>

      <p>These projects are sponsored by iXsystems, Inc.</p>
    </body>
  </project>

  <project cat="arch">
    <title>FreeBSD/arm64</title>

    <contact>
      <person>
        <name>
	  <given>Andrew</given>
	  <common>Turner</common>
        </name>
        <email>andrew@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://svnweb.freebsd.org/base/projects/arm64/" />
    </links>

    <body>
      <p>Arm64 is the name of the in-progress port of &os; to the
	ARMv8 CPU when it is in AArch64 mode. Until recently, all ARM
	CPU designs were 32-bit only. With the introduction of the
	ARMv8 architecture, ARM has added a new 64-bit mode. This new
	mode has been named AArch64.</p>

      <p>Booting &os; on the ARM Foundation Model has made a lot of
	progress since the last status report. An initial pmap
	implementation has been written.  With this &os; is able to
	enter the Machine Independent boot code. The required autoconf
	functions have been added allowing &os; to start scheduling
	tasks. Finally the cpu_switch and copystr functions were
	added. With these two &os; will boot to the mountroot
	prompt.</p>

      <p>Work has started on supporting exceptions, including
	interrupts.  This will start to allow more developers to start
	working on device drivers.</p>
    </body>

    <help>
      <task>Finish exception and interrupt handling</task>
      <task>Read the Device Tree or ACPI tables from UEFI</task>
      <task>Test on real hardware</task>
    </help>
  </project>
</report>
