<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE report PUBLIC "-//FreeBSD//DTD FreeBSD XML Database for
  Status Report//EN"
  "http://www.FreeBSD.org/XML/share/xml/statusreport.dtd" >

<!-- $FreeBSD$ -->

<report>
  <date>
    <month>April-June</month>

    <year>2016</year>
  </date>

  <section>
    <title>Introduction</title>

    <p>The second quarter of 2016.</p>

    <p>&mdash;Insert name here</p>

    <p><hr /></p>

    <p>Please submit status reports for the third quarter of 2016 by
      insert date here.</p>
  </section>

  <category>
    <name>team</name>

    <description>&os; Team Reports</description>
  </category>

  <category>
    <name>proj</name>

    <description>Projects</description>
  </category>

  <category>
    <name>kern</name>

    <description>Kernel</description>
  </category>

  <category>
    <name>arch</name>

    <description>Architectures</description>
  </category>

  <category>
    <name>bin</name>

    <description>Userland Programs</description>
  </category>

  <category>
    <name>ports</name>

    <description>Ports</description>
  </category>

  <category>
    <name>doc</name>

    <description>Documentation</description>
  </category>

  <category>
    <name>misc</name>

    <description>Miscellaneous</description>
  </category>

  <project cat='team'>
    <title>&os; Release Engineering Team</title>

    <contact>
      <person>
	<name>&os;&nbsp;Release Engineering Team</name>
	<email>re@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://www.freebsd.org/releases/10.3R/schedule.html">&os;&nbsp;10.3-RELEASE schedule</url>
      <url href="https://www.freebsd.org/releases/11.0R/schedule.html">&os;&nbsp;11.0-RELEASE schedule</url>
      <url href="http://ftp.freebsd.org/pub/FreeBSD/snapshots/ISO-IMAGES/">&os; development snapshots</url>
    </links>

    <body>
      <p>The &os; Release Engineering Team is responsible for setting
	and publishing release schedules for official project releases
	of &os;, announcing code freezes and maintaining the
	respective branches, among other things.</p>

      <p>The &os; Release Engineering Team completed the 10.3-RELEASE
	cycle late April, led by &a.marius;.  The release was one week
	behind the original schedule, to accommodate for a few last
	minute critical issues that were essential to include in the
	final release.</p>

      <p>The &os;&nbsp;11.0-RELEASE cycle started late May, one month
	behind the original schedule.  The schedule slip was primarily
	to accommodate for packaging the &os; base system with the
	<tt>pkg(8)</tt> utility.  However, as work on this progressed,
	it became apparent that there were too many outstanding
	issues.  As a result, packaged base will be a "beta" feature
	for 11.0-RELEASE, with the goal of promoting it to a
	first-class feature in 11.1-RELEASE, with additional
	provisions to ensure a seamless transition for earlier
	supported releases.</p>

      <p>Despite the fact that packaged base is not going to be a
	prime feature for &os;&nbsp;11.0-RELEASE, the Release
	Engineering Team would like to thank everyone who tested,
	provided patches, provided ideas and feedback, and in some
	cases, shot themselves in the foot due to bugs.</p>
    </body>

    <sponsor>
	The &os; Foundation
    </sponsor>
  </project>

  <project cat='ports'>
    <title>Obsoleting Rails 3</title>

    <contact>
      <person>
	<name>
	  <given>Torsten</given>
	  <common>ZÃ¼hlsdorff</common>
	</name>
	<email>tz@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>Ruby on Rails is the base for most of the rubygems in the
	Ports Collection.  Currently, versions 3.2 and 4.2 coexist.
	Since Rails 3.2 is running out of support, the time has
	come to switch to 4.2.</p>

      <p>While there is ongoing progress to remove Rails 3.2 from
	the ports tree, there are some major updates blocking this
	process.  The most recent blocker was the outstanding update
	of <tt>www/redmine</tt> from 2.6 to 3.2. This has completed
	successfully, so we can now move on.</p>

      <p>To help with porting or testing, feel free to contact me or
	the <tt>ruby@FreeBSD.org</tt> mailing list.</p>
    </body>
  </project>

  <project cat='kern'>
    <title>ARM Allwinner SoC Support</title>

    <contact>
      <person>
	<name>
	  <given>Jared</given>
	  <common>McNeill</common>
	</name>
	<email>jmcneill@freebsd.org</email>
      </person>
      <person>
	<name>
	  <given>Emmanuel</given>
	  <common>Vadot</common>
	</name>
	<email>manu@freebsd.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/FreeBSD/arm/Allwinner">Allwinner FreeBSD Wiki</url>
    </links>

    <body>
      <p>Allwinner SoCs are used in multiple hobbyist devboards and
	single board computers.  Recently, support for these SoCs
	received many updates.</p>

      <p>Theses tasks were completed during the second quarter of
	2016:</p>

      <ul>
	<li>Switch to upstream DTS is complete</li>

	<li>A83T SoC support</li>

	<li>H3 SoC support</li>

	<li>Switch to new clock framework</li>

	<li>Convert A10 interrupt controller to INTRNG</li>

	<li>OHCI support</li>

	<li>Generic ALLWINNER kernel config file</li>

	<li>A20/A31 NMI support</li>

	<li>AXP209 PMU interrupts, GPIO, and sensors support</li>

	<li>A83T thermal sensor support</li>

	<li>RSB (Reduced Serial Bus) support</li>

	<li>AXP813/AXP818 PMU support</li>

	<li>A83T Security ID support</li>

	<li>Allwinner Gigabit Ethernet controller found in
	  H3/A83T/A64</li>

	<li>USB OTG
	  <a href="https://reviews.freebsd.org/D5881">(in review)</a></li>

	<li>A10/A20 Security ID support
	  <a href="https://reviews.freebsd.org/D6383">(in review)</a></li>

	<li>A13 SoC Support
	  <a href="https://reviews.freebsd.org/D6809">(in review)</a></li>
      </ul>

      <p>Ongoing work:</p>

      <ul>
	<li>A64 support</li>

	<li>Use U-Boot EFI implementation for ARM32/ARM64</li>
      </ul>
    </body>

    <help>
      <task>SPI driver</task>

      <task>LCD Support</task>

      <task>Any unsupported hardware device that might be of
	interest.</task>
    </help>
  </project>

  <project cat='proj'>
    <title>Robust Mutexes</title>

    <contact>
      <person>
	<name>
	  <given>Konstantin</given>
	  <common>Belousov</common>
	</name>
	<email>kib@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Ed</given>
	  <common>Maste</common>
	</name>
	<email>emaste@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>Now that the process-shared locks are implemented for our
	POSIX threads implementation library, <tt>libthr</tt>,
	the only major lacking feature for POSIX compliance is robust
	mutexes.  Robust mutexes allow the application to detect, and
	theoretically, recover from crashes which occur while
	modifying the shared state.  The supported model is to protect
	shared state by a <tt>pthread_mutex</tt>, and the crash is
	detected as the thread termination while owning the mutex.  A
	thread might terminate alone, or it could be killed due to the
	termination of the containing process.   As such, the robust
	attribute is applicable to both process-private and -shared
	mutexes.</p>

      <p>An application must be specifically modified to handle and
	recover from failures.  The <tt>pthread_mutex_lock()</tt>
	function may return new error <tt>EOWNERDEAD</tt>, which
	indicates that the previous owner of the lock terminated while
	still owning the lock.  Despite returning the non-zero value,
	the lock is granted to the caller.  In the simplest form, an
	application may detect the error and refuse to operate until
	the persistent shared data is recovered, such as by manual
	reinitialization.  More sophisticated applications could try
	to automatically recover from the condition, in which case
	<tt>pthread_mutex_consistent(3)</tt> must be called on the
	lock before the unlock.  However, such recovery can be
	considered to be very hard.  Still, even the detection of
	inconsistent shared state is useful, since it avoids further
	corruption and random faults of the affected application.
      </p>

      <p>It is curious but not unexpected that this interface is not
	used widely.  The only real-life application which utilizes it
	is Samba.  Using Samba with an updated FreeBSD base uncovered
	minor bugs both in the FreeBSD robustness implementation, and
	in Samba itself.</p>

      <p>It is believed that <tt>libthr</tt> in FreeBSD 11 is
	POSIX-compliant for large features.  Further work is planned
	to look at the lock structures inlining to remove overhead
	and improve performance of the library.</p>

      <p>Most of the implementation of the robustness feature
	consisted of making small changes in the lock and unlock
	paths, both in <tt>libthr</tt> and in <tt>kern_umtx.c</tt>.
	This literally required reading all of the code dealing with
	mutexes and conditional variables, which was something I
	wanted to help future developers with.  In the end, with the
	help of Ed Maste, the man pages for <tt>umtx(2)</tt> and all
	<tt>thr*(2)</tt> syscalls were written and added to the base
	system's documentation set.
      </p>
    </body>

    <sponsor>The FreeBSD Foundation</sponsor>

    <help>
      <task>Use the implementation in real-word applications and
	report issues.</task>
    </help>
  </project>

  <project cat='proj'>
    <title>EFI Refactoring, GELI Support</title>

    <contact>
      <person>
	<name>
	  <given>Eric</given>
	  <common>McCorkle</common>
	</name>
	<email>eric@metricspace.net</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/emc2/freebsd/tree/geli_efi">GELI Support Branch</url>
      <url href="https://github.com/emc2/freebsd/tree/efize">EFI Refactoring Branch</url>
    </links>

    <body>
      <p>The EFI bootloader has undergone considerable refactoring to
	make more use of the EFI API.  The filesystem code in
	<tt>boot1</tt> has been eliminated, and a single codebase for
	filesystems now serves both <tt>boot1</tt> and
	<tt>loader</tt>.  This codebase is organized around the EFI
	driver model and it should be possible to export any
	filesystem implementation as a standalone EFI driver without
	too much effort.</p>

      <p>Both <tt>boot1</tt> and <tt>loader</tt> have been refactored
	to talk through the <tt>EFI_SIMPLE_FILE_SYSTEM</tt> interface.
	In <tt>loader</tt>, this is accomplished with a dummy
	filesystem driver that is just a translation layer between the
	<tt>loader</tt> filesystem interface and
	<tt>EFI_SIMPLE_FILE_SYSTEM</tt>.  A reverse translation layer
	allows the existing filesystem drivers to function as EFI
	drivers.</p>

      <p>The EFI refactoring by itself exists in
	<a href="https://github.com/emc2/freebsd/tree/efize">this branch</a>.</p>

      <p>Additionally, GELI support has been added using the EFI
	refactoring.  This allows booting from a GELI-encrypted
	filesystem.  Note that the EFI system partition, which
	contains <tt>boot1</tt>, must be a plaintext msdosfs
	partition.  This patch adds an intake buffer to the crypto
	framework, which allows injection of keys directly into a
	loaded kernel, without the need to pass them through
	arguments or environment variables.  This patch only uses the
	intake buffer for EFI GELI support as legacy BIOS GELI support
	still uses environment variables.</p>

      <p>EFI GELI support depends on the
	<a href="https://github.com/emc2/freebsd/tree/geli_efi">efize branch</a>.</p>

      <p>These patches have been tested and used and should be able
	to handle use by early adopters.  Note that the
	<tt>LOADER_PATH</tt> variable has been changed to
	<tt>/boot/loader.tst</tt>, to facilitate safe testing.</p>

      <strong>IMPORTANT:</strong>

      <p>As this is an encrypted filesystem patch, an error can
	potentially leave data inaccessible.  It is
	<em>strongly</em> recommended to use the following procedure
	for testing:</p>

      <ol>
	<li>
	  <p>Back up your data!</p>
	</li>

	<li>
	  <p>Do not forget to back up your data!</p>
	</li>

	<li>
	  <p>Install an EFI shell on the ESP.</p>
	</li>

	<li>
	  <p>Install the patched <tt>boot1</tt> on the ESP to
	    something like <tt>/boot/efi/BOOTX64.TST</tt>.</p>
	</li>

	<li>
	  <p>Install the patched loader to <tt>/boot/loader.tst</tt>
	    on your machine.</p>
	</li>

	<li>
	  <p>Create a GELI partition outside of the normal boot
	    partition.</p>
	</li>

	<li>
	  <p>First, try booting <tt>/boot/efi/BOOTX64.TST</tt> and
	    make sure it properly handles the encrypted partition.</p>
	</li>

	<li>
	  <p>Copy a boot environment, including the patched loader, to
	    the encrypted partition.</p>
	</li>

	<li>
	  <p>Use the loader prompt to load a kernel from the encrypted
	    partition.</p>
	</li>

	<li>
	  <p>Try switching over to an encrypted main partition once
	    everything else has worked.</p>
	</li>
      </ol>
    </body>

    <help>
      <task>Testing is needed.</task>

      <task>Code will need review and some <tt>style(9)</tt>
	normalization must occur before this code goes into
	FreeBSD.</task>
    </help>
  </project>

  <project cat='bin'>
    <title>Updates to GDB</title>

    <contact>
      <person>
	<name>
	  <given>John</given>
	  <common>Baldwin</common>
	</name>
	<email>jhb@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Luca</given>
	  <common>Pizzamiglio</common>
	</name>
	<email>luca.pizzamiglio@gmail.com</email>
      </person>
    </contact>

    <body>
      <p>The port has been updated to GDB 7.11.1.</p>

      <p>Support for system call catchpoints has been committed
	upstream.  Support for examining ELF auxiliary vector data via
	<tt>info auxv</tt> has been committed upstream.  Both features
	will be included in GDB 7.12.</p>
    </body>

    <help>
      <task>Figure out why the <tt>powerpc kgdb</tt> targets are not
	able to unwind the stack past the initial frame.</task>

      <task>Add support for more platforms, such as <tt>arm</tt>,
	<tt>mips</tt>, and <tt>aarch64</tt>, to upstream gdb for both
	userland and kgdb.</task>

      <task>Add support for debugging <tt>powerpc</tt> vector
	registers.</task>

      <task>Add support for <tt>$_siginfo</tt>.</task>

      <task>Implement <tt>info proc</tt> commands.</task>

      <task>Implement <tt>info os</tt> commands.</task>
    </help>
  </project>

  <project cat='kern'>
    <title>VIMAGE Virtualized Network Stack Update</title>

    <contact>
      <person>
	<name>
	  <given>Bjoern A.</given>
	  <common>Zeeb</common>
	</name>
	<email>bz@FreeBSD.org</email>
      </person>
    </contact>

    <links>
       <url href="https://svnweb.freebsd.org/base/projects/vnet/">Projects workspace (all merged to head now).</url>
    </links>

    <body>
      <p>VIMAGE is a virtualization framework on top of FreeBSD jails
	that was introduced to the kernel about eight years ago with
	the <tt>vnet</tt> virtualized network stack.</p>

      <p>Over the last few years, many people started to use VIMAGE
	in production, production-like setups, and appliances.  This
	adoption increased the urgency to finish the work to avoid
	panics on network stack teardown and to avoid memory
	leaks.</p>

      <p>The <tt>vnet</tt> teardown has been changed to be from top to
	bottom, trying to tear down layer by layer.  This is
	preferable to removing interfaces first and then cleaning
	everything up, as no more packets could flow.  Along with this
	work, various parts with potential memory leaks were plugged.
	Lastly, <tt>vnet</tt> support was added to formerly
	unvirtualized components, such as the <tt>pf</tt> and
	<tt>ipfilter</tt> firewalls and some virtual interfaces.</p>
    </body>

    <sponsor>The FreeBSD Foundation</sponsor>

    <help>
      <task>Please test FreeBSD 11.0-ALPHA6 or later.  When reporting
	a problem, use the <tt>vimage</tt> keyword in the FreeBSD bug
	tracker.</task>
    </help>
  </project>

  <project cat='ports'>
    <title>IPv6 Promotion Campaign</title>

    <contact>
      <person>
	<name>
	  <given>Torsten</given>
	  <common>ZÃ¼hlsdorff</common>
	</name>
	<email>tz@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/IPv6PortsTODO">Wiki Page</url>
    </links>

    <body>
      <p>Half a year ago, I started a promotion campaign to improve
	support for fetching ports via IPv6.  Research performed in
	December, 2015 showed that 10,308 of 25,522 ports are not
	fetchable when using IPv6-only as these ports ignore the <a
	  href="distcache.freebsd.org">FreeBSD.org pkg mirror</a>.</p>

      <p>As a result of the campaign, the following servers now
	successfully support IPv6:</p>

      <ol>
	<li><a href="mirror.amdmi3.ru">mirror.amdmi3.ru</a></li>

	<li><a href="vault.centos.org">vault.centos.org</a></li>

	<li><a href="mirror.centos.org">mirror.centos.org</a></li>

	<li><a href="gstreamer.freedesktop.org">gstreamer.freedesktop.org</a></li>

	<li><a href="people.freebsd.org">people.freebsd.org</a></li>
      </ol>

      <p>This enables 711 more ports to be fetched via IPv6.</p>

      <p>I would like to thank Wolfgang Zenker who is very active in
	supporting the adoption of IPv6.  During the latest RIPE
	meeting, he brought up the topic of non-support of IPv6
	being a hindrance to business.  I am hopeful that his talk
	changed some more minds and will help widen the support of
	IPv6.</p>
    </body>
  </project>

  <project cat='kern'>
    <title>FreeBSD on Hyper-V and Azure</title>

    <contact>
      <person>
	<name>
	  <given>Sepherosa</given>
	  <common>Ziehau</common>
	</name>
	<email>sepherosa@gmail.com</email>
      </person>

      <person>
	<name>
	  <given>Hongjiang</given>
	  <common>Zhang</common>
	</name>
	<email>honzhan@microsoft.com</email>
      </person>

      <person>
	<name>
	  <given>Dexuan</given>
	  <common>Cui</common>
	</name>
	<email>decui@microsoft.com</email>
      </person>

      <person>
	<name>
	  <given>Kylie</given>
	  <common>Liang</common>
	</name>
	<email>kyliel@microsoft.com</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/HyperV">FreeBSD Virtual Machines on Microsoft Hyper-V</url>
      <url href="https://technet.microsoft.com/en-us/library/dn531030.aspx">Supported Linux and FreeBSD virtual machines for Hyper-V on Windows</url>
    </links>

    <body>
      <p>During BSDCan 2016, Microsoft <a
	  href="https://azure.microsoft.com/en-us/blog/freebsd-now-available-in-azure-marketplace/">announced</a>
	the global availability of FreeBSD 10.3 images in Azure.
	There are many FreeBSD-based Azure virtual appliances in the
	Azure Marketplace, including Citrix Systems' NetScaler and
	Netgate's pfSense.  Microsoft also made an in-depth technical
	presentation to introduce how the performance of the Hyper-V
	network device driver was optimized to reach full line rate on
	10Gb networks and achieved decent performance on 40Gb
	networks.  The slides and video from the presentation are
	available from the <a
	  href="http://www.bsdcan.org/2016/schedule/events/681.en.html">BSDCan website</a>.</p>

      <p>Microsoft continues to strive to further optimize the
	performance of Hyper-V network and storage device drivers.
	Work is ongoing to replace the internal data structure in the
	LRO kernel API from a singly-linked list to a double-linked
	list, to speed up the LRO lookup by hash table, and to compare
	the performance with <tt>tcp_lro_queue_mbuf()</tt>.</p>

      <p>The handling of SCSI inquiry in the Hyper-V storage driver is
	enhanced to make sure disk hotplug and <tt>smartctl(8)</tt>
	work reliably.  Refer to <a
	  href="https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=210425">PR 210425</a>
	and <a
	  href="https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=209443">PR 209443</a>
	for details.</p>

      <p>BIS test cases are available on GitHub for <a
	  href="https://github.com/FreeBSDonHyper-V/Test-BIS">Hyper-V</a>
	and for <a
	  href="https://github.com/FreeBSDonHyper-V/azure-freebsd-automation">Azure</a>.</p>
    </body>

    <sponsor>
      Microsoft
    </sponsor>
  </project>

  <project cat='proj'>
    <title>Ceph on FreeBSD</title>

    <contact>
      <person>
	<name>
	  <given>Willem Jan</given>
	  <common>Withagen</common>
	</name>
	<email>wjw@digiware.nl</email>
      </person>
    </contact>

    <links>
      <url href="http://ceph.com">Ceph main site</url>
      <url href="https://github.com/ceph/ceph">Main repository</url>
      <url href="https://github.com/wjwithagen/ceph">My Fork </url>
      <url href="https://github.com/ceph/ceph/pull/7573">The git PULL with all changes</url>
    </links>

    <body>
      <p>Ceph is a distributed object store and file system designed
	to provide  excellent performance, reliability, and
	scalability.  It provides the following features:</p>

      <ol>
	<li>Object Storage: Ceph provides seamless access to objects
	  using native language bindings or <tt>radosgw</tt>, a REST
	  interface that is compatible with applications written for
	  S3 and Swift.</li>

	<li>Block Storage: Cephâs RADOS Block Device (RBD) provides
	  access to block device images that are striped and
	  replicated across the entire storage cluster.</li>

	<li>File System: Ceph provides a POSIX-compliant network file
	  system that aims for high performance, large data storage,
	  and maximum compatibility with legacy applications.</li>
      </ol>

      <p>I started looking into Ceph as using HAST with CARP and
	<tt>ggate</tt> did not meet my requirements.  My primary goal
	with Ceph is to run a storage cluster of ZFS storage nodes
	where the clients run bhyve on RBD disks stored in Ceph.</p>

      <p>The &os; build process can build most of the tools in
	Ceph.  However, the RBD-dependent items do not work since
	&os; does not yet provide RBD support.</p>

      <p>Since the last quarterly report, the following progress was
	made:</p>

      <ol>
	<li>The changeover from using CMake to Automake results in a
	  much cleaner development environment and better test output.
	  The changes can be found in the
	  <tt>wip-wjw-freebsd-cmake</tt> branch.</li>

	<li>Throttling code has been overhauled to prevent live locks.
	  These mainly occur on &os; but also manifest on Linux.</li>

	<li>Fixed a few more tests.  On one occasion, I was able to
	  complete the full test set without errors.</li>
      </ol>

      <p>11-CURRENT is used to compile and build test Ceph.  The
	Clang toolset needs to be at least version 3.7 as Clang 3.4
	does not have all of the capabilities required to compile
	everything.</p>

      <p>This setup will get things running for &os;:</p>

      <ul>
	<li>
	  <p>Install <tt>bash</tt> and link it in <tt>/bin</tt>
	    (requires root privileges):</p>

	  <p><tt>sudo pkg install bash</tt></p>

	  <p><tt>sudo ln -s /usr/local/bin/bash /bin/bash</tt></p>
	</li>

	<li>
	  <p>Build Ceph:</p>

	  <p><tt>git clone https://github.com/wjwithagen/ceph.git</tt></p>

	  <p><tt>cd ceph</tt></p>

	  <p><tt>git checkout wip-wjw-freebsd-tests</tt></p>

	  <p><tt>./do_freebsd.sh</tt></p>
	</li>
      </ul>

      <p>Parts Not Yet Included:</p>

      <ul>
	<li>RBD: Rados Block Devices are currently implemented in the
	  Linux kernel but there used to be a userspace
	  implementation.  It is possible that <tt>ggated</tt> could
	  be used as a template since it provides some of the same
	  functionality and it has a userspace counterpart.</li>

	<li>BlueStore: &os; and Linux have a different AIO API which
	  needs to be made compatible.  There has been some
	  discussion about <tt>aio_cancel</tt> not working for all
	  device types in &os;.</li>

	<li>CephFS: Cython tries to access an internal field in dirent
	  which does not compile.</li>

	<li>Tests that verify the correct working of the above are
	  also excluded from the testset.</li>
      </ul>

      <p>Tests Not Yet Included:</p>

      <ul>
	<li><tt>ceph-detect-init/run-tox.sh</tt>: the current
	  implementation does not know anything about &os;
	  <tt>rc-init</tt>.</li>

	<li>Tests that make use of <tt>nosestests</tt> do not really
	  work since <tt>nostests</tt> is not in <tt>/usr/bin</tt>,
	  and calling <tt>/usr/bin/env/nosetests</tt> does not work on
	  &os;.</li>

	<li><tt>test/pybind/test_ceph_argparse.py</tt></li>

	<li><tt>test/pybind/test_ceph_daemon.py</tt></li>
      </ul>
    </body>

    <help>
      <task>The current and foremost task it to get the test set to
	complete without errors.</task>

      <task>Build an automated test platform that will build
	<tt>ceph/master</tt> on &os; and report the results back to
	the Ceph developers.  This will increase the maintainability
	of the &os; side of things as developers are signaled that
	they are using Linux-isms that will not compile or run on
	&os;.  Ceph has several projects that support this: Jenkins,
	teuthology, and palpito.  But even a
	<tt>while { compile }</tt> loop that reports the build data on
	a static webpage is a good start.</task>

      <task>Run integration tests to see if the &os; daemons will work
	with a Linux Ceph platform.</task>

      <task>Get the currently excluded Python tests to work.</task>

      <task>Compile and test the user space RBD (Rados Block
	Device).</task>

      <task>Investigate if an in-kernel RBD device could be developed
	ala <tt>ggate</tt>.</task>

      <task>Investigate the keystore which currently prevents the
	building of Cephfs and some other parts.</task>

      <task>Integrate the &os; <tt>/etc/rc.d</tt> init scripts in the
	Ceph stack for testing and for running Ceph on production
	machines.</task>
    </help>
  </project>

  <project cat='ports'>
    <title>Bringing GitLab into the Ports Collection</title>

    <contact>
      <person>
	<name>
	  <given>Torsten</given>
	  <common>ZÃ¼hlsdorff</common>
	</name>
	<email>tz@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://freshports.org/www/gitlab">GitLab port</url>
      <url href="https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=208793">PR: not starting on boot</url>
    </links>

    <body>
      <p>After being in the &os; Ports Collection for three months,
	GitLab continues to mature and gain adoption.  Most of its
	starting problems have been resolved, with one known issue
	left: it does not start on boot.  Any help in solving this
	issue is welcome.</p>

      <p>Staying in sync with upstream is now easy for minor versions.
	But, some of the monthly major releases create a big workload
	by introducing a number of new dependencies.  This makes
	testing and updating an expensive process.</p>

      <p>The GitLab project itself now mentions native support on
	&os;, which is quite a commendation.</p>

      <p>Current work aims to fix the open problems, get the latest
	major version into the port, and create the documentation for
	the update progress.</p>
    </body>
  </project>

  <project cat='proj'>
    <title>ASLR Interim State</title>

    <contact>
      <person>
	<name>
	  <given>Konstantin</given>
	  <common>Belousov</common>
	</name>
	<email>kib@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://kib.kiev.ua/kib/aslr">Patch home</url>
    </links>

    <body>
      <p>This is an interim report on the technical state of the ASLR
	patch.</p>

      <p>The <tt>proccontrol(1)</tt> utility was written to manage and
	query ASLR enforcement on a per-process basis.  It is required
	for analyzing ASLR failures in specific programs.  This
	utility leverages the <tt>procctl(2)</tt> interface which was
	added to the previous version of the patch, with some bug
	fixes.</p>

      <p>With r300792, ASLR settings are reset to system-wide defaults
	whenever a setuid binary is executed.</p>

      <p>The command's syntax is:</p>

      <p><tt>proccontrol -m (trace|aslr) [-q] [-s (enable|disable)]
	[-p pid | command]</tt></p>

      <p><tt>-m</tt> (specifies trace mode to control debugger
	attachments)</p>

      <p><tt>-q</tt> (queries the state of the specified mode for the
	process with the PID specified by <tt>-p</tt> option)</p>

      <p><tt>-e</tt> (toggles the feature on or off for the given
	process or itself)</p>

      <p>If the command is specified, it inherits the applied
	settings from <tt>proccontrol</tt>.  For instance, to start a
	build of a program with ASLR disabled, use
	<tt>proccontrol -m aslr -s disable make</tt>.</p>

      <p>The ports exp run was done with ASLR tuned up to the most
	aggressive settings.  The results can be found in <a
	  href="https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=208580">PR 208580</a>.</p>

      <p>SBCL is an interesting case which illustrates several points.
	It is much smaller than JDK, and its build system is easier to
	work with.  The code provides a very non C-ish language
	runtime which utilizes a lot of corner cases and non-standard
	uses of VM, at least from the point of view of a typical C
	programmer.</p>

      <p>SBCL compiles Lisp forms into the machine native code and
	manages its own arena for objects.  The precompiled Lisp
	runtime is mapped from the <tt>core</tt> file.  SBCL relies on
	the operating system's C runtime for the initial load of Lisp,
	and needs a functional <tt>libc</tt> to issue many system
	calls, including syscalls, as well as the dynamic loader.  The
	end result is that there are unfixed <tt>mmap(2)</tt> calls
	during both startup and runtime, interfering with the
	<tt>MAP_FIXED mmaps</tt>.  The core file loading and arenas
	are hard-coded to exist at fixed addresses.</p>

      <p>This happens to work on the default address map, which is not
	changed often, so the SBCL choices of the base addresses
	evolved to work.  But any significant distortion of the
	standard map results in <tt>SBCL mmap(MAP_FIXED)</tt> requests
	to override memory from other allocators.</p>

      <p>&os; uses the <tt>MAP_EXCL</tt> flag to <tt>mmap(2)</tt>,
	which must be used in <tt>MAP_FIXED|MAP_EXCL</tt> form to
	cause <tt>mmap(2)</tt> failure if the requested range is
	already used.  I tried to force <tt>MAP_FIXED</tt> requests
	from SBCL to implicitely set <tt>MAP_EXCL</tt>, but this did
	not go well since SBCL sometimes pre-allocates regions for
	later use with <tt>MAP_FIXED</tt>.  So, <tt>MAP_EXCL</tt>
	mappings failed, dumping the process into <tt>ldb</tt>.</p>

      <p>On Linux, if a kernel is detected in AS-randomization mode,
	the initial SBCL runtime sets personality to non-random and
	re-execs.  This might be a solution for &os; as well, after
	the ASLR patch is committed, so that the <tt>procctl(2)</tt>
	knob is officially available.</p>

      <p>SBCL still has issues on Linux, even with re-exec, when
	more aggressive randomization from PaX patch is applied, as
	seen in <a
	  href="https://bugs.launchpad.net/sbcl/+bug/1523213">bug
	  1523213</a>.</p>

      <p>The Emacs build procedure involves loading the
	<tt>temacs</tt> image with the compiled Emacs Lisp files and
	then dumping the memory to recreate the image with the
	preloaded content, in order to shrink the start time.</p>

      <p>Recent Emacs sources seem to generally avoid
	<tt>MAP_FIXED</tt>, except in some situations.  When Emacs
	does use the flag, it carefully checks that the selected
	region is not busy.  In fact, Emacs would benefit from
	<tt>MAP_EXCL</tt>.</p>

      <p>I tried several runs of building Emacs and running the dumped
	binary, but was not able to reproduce the issue.  It seems
	that the code improved enough to tolerate ASLR both in Linux
	and NetBSD without turning it off.</p>

      <p>In my opinion, it is not reasonable to fight the issues in
	the kernel as most of it is not fixable from the kernel side.
	The <tt>procctl(2)</tt> interface and <tt>proccontrol(1)</tt>
	utilities provide the override when needed, but are not
	automated.</p>

      <p>The set of ports which cannot be built with ASLR turned on
	should be limited but fluid.  However, exp-runs may not
	reliably uncover all problems due to randomization, as seen in
	the Emacs example.  In the route to enable ASLR by default in
	non-aggressive settings, the ports framework should provide an
	option like <tt>ASLR_UNSAFE=yes</tt> which spawns
	<tt>proccontrol -m aslr -s disable make</tt> for the build
	stages of the unsafe port.  Users would still need to be aware
	of <tt>proccontrol(1)</tt> in order to run the resulting
	binary.</p>

      <p>A recommended approach is a flag in the ELF binary to mark
	it as not compatible with non-standard AS layouts.  This frees
	users from having to use <tt>proccontrol(1)</tt>, but still
	requires patching and upstreaming.  This approach is also
	useful outside the context of ASLR.  However, the
	mechanism is not yet ready, and developing it is a larger work
	than ASLR itself.</p>
    </body>

    <sponsor>The FreeBSD Foundation</sponsor>
  </project>

  <project cat='proj'>
    <title>Graphics Update</title>

    <contact>
      <person>
	<name>
	  <given>Matthew</given>
	  <common>Macy</common>
	</name>
	<email>mmacy@nextbsd.org</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/FreeBSDDesktop/freebsd-base-graphics">GitHub Repository</url>
    </links>

    <body>
      <p>All Intel GPUs up to and including the unreleased Kaby Lake
	are supported.  The <tt>xf86-video-intel</tt> driver will be
	updated soon.  Updating this driver requires updating
	<tt>Xorg</tt>, which in turn is blocked on Nvidia updates.</p>

      <p>Several problems remain to be solved:</p>

      <ul>
	<li>There are instances of visual artifacts that appear with
	  varying frequency, depending on workload.  Of particular
	  note is lack of redraw when a Qt5 window is partially
	  covered by a menu and then uncovered.</li>

	<li>WebGL demos will sometimes fail due to a recoverable
	  render ring hang.</li>

	<li>There are still some known stability issues with
	  processors prior to Sandy Bridge (pre-2010).</li>
      </ul>

      <p>I am hoping to be able to diagnose the first two issues,
	along with others, by updating Linux support to the point
	where the Intel GPU Tools work on &os;.</p>

      <p>The Radeon AMD/ATI has been updated to GCN 1.0.  This has
	only been tested on an R7 240.  2D-accelerated X works.  Due
	to apparent issues with user library support, X does not
	recognize the KMS driver as being 3D-capable and reports it as
	"not DRI2 capable".  The OpenCL benchmark <tt>clpeak</tt>
	fails in <tt>drm/ttm</tt>, so there may in fact be issues in
	the underlying 3D support.</p>

      <p>The AMD/ATI driver has been updated to GCN 1.1 and higher.
	The KMS driver loads and attaches on discrete GPUs, though
	problems still exist on the Carizzo APU.  X will not start due
	to unimplemented functions in <tt>libdrm</tt>.  Koop Mast is
	actively working on this and should have it fixed soon.</p>

      <p>None of the required patches to <tt>src/sys</tt> were
	committed in time for &os; 11.  Although the plan is to
	ultimately make <tt>linuxkpi</tt>, <tt>drm</tt>,
	<tt>i915</tt>, <tt>radeon</tt>, and <tt>amdgpu</tt> updates
	available as ports, this will likely not happen until
	development has slowed to the point where it is economical to
	backport them to &os; in svn.  Until that time, modern GPU
	support will be available in PC-BSD snapshots and in the
	<tt>drm-next-4.6</tt> branch on GitHub.</p>
    </body>
  </project>

  <project  cat='team'>
    <title>&os; IRC Admin Team</title>

    <contact>
      <person>
	<name>IRC Admin Team</name>
	<email>irc@FreeBSD.org</email>
      </person>
    </contact>

    <contact>
      <person>
	<name>
	  <given>Kubilay</given>
	  <common>Kocak</common>
	</name>
	<email>koobs@FreeBSD.org</email>
      </person>
    </contact>

    <contact>
      <person>
	<name>
	  <given>Eitan</given>
	  <common>Adler</common>
	</name>
	<email>eadler@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/IRC/">&os; IRC Wiki</url>
    </links>

    <body>
      <p>The &os; IRC Admin team manages the &os; Project's IRC
	presence on the freenode IRC network, looking after:</p>

      <ul>
	<li>Registrations and ongoing management of channels within
	  the official namespace (<tt>#freebsd*</tt>).</li>

	<li>Liaising with freenode staff.</li>

	<li>Allocating freebsd hostmask cloaks for users.</li>

	<li>General user support.</li>
      </ul>

      <p>In order to facilitate a constructive and positive
	environment for all members of the &os; community, IRC Admin
	over the past 3-9 months has established and consolidated a
	consistent baseline with respect to the management of its
	channels on freenode.  This report is a summary of what has
	happened so far and things to come.</p>

      <p>These activities were completed over the last few
	quarters:</p>

      <ul>
	<li>Registration of &os; Group Contacts (GC) with freenode
	  staff.  For information on what this means, see <a
	    href="https://freenode.net/groupreg">the group
	    registration page</a>.</li>

	<li>Created a &os; NickServ account to assign as primary
	  owner/founder of the <tt>#freebsd*</tt> namespace
	  channels.</li>

	<li>The primary channels are owned/founded by a generic &os;
	  account that is owned and managed by the &os; Project.</li>

	<li>Created the <tt>Services::IRC</tt> component in Bugzilla
	  for change requests and issue reports.</li>

	<li>Obtained a report of all registered freenode channels
	  matching the <tt>#freebsd*</tt> namespace and assessed the
	  list for current ownership and activity status.</li>

	<li>Assigned <tt>freebsd/</tt> user cloaks to users requesting
	  them.  For more information, see <a
	    href="https://wiki.freebsd.org/IRC/Cloaks">IRC
	    Cloaks</a>.</li>

	<li>Obtain a report on all nicknames and accounts with
	  existing <tt>freebsd/*</tt> user cloaks.</li>

	<li>Liaise with freenode staff on upcoming changes to freebsd
	  channels.</li>
      </ul>

      <p>The goals for the next few quarters are to:</p>

      <ul>
	<li>Complete the transfer of founder ownership for all
	  <tt>#freebsd*</tt> channels.  Existing channel creators,
	  some of whom are project members and others who are not,
	  will be contacted using known contact information or contact
	  information set in their registered NickServ account, in
	  order to initiate the transfer of the channel to the &os;
	  Project.  If the contact information of the existing channel
	  owner cannot be obtained, or if no response is received
	  after a suitable period of time has elapsed, IRC Admin will
	  complete the ownership transfer with freenode staff.</li>

	<li>Deregister defunct and inactive <tt>#freebsd*</tt>
	  channels.  Channels which have no visible signs of activity
	  based on last active time or registered owner last seen,
	  have been deprecated by alternative channels, or have no
	  other way of having ownership transferred will be
	  deregistered.  For channels where a sunset period may be
	  suitable, a channel topic will be set, and optionally a
	  forwarding channel, informing users of the changes,
	  including support and contact information.</li>

	<li>Create and document baseline procedures and guidelines.
	  These include: Community and User Guidelines, a Code of
	  Conduct, Operator and Moderator Guidelines and Expectations,
	  Abuse Reporting and Dispute Resolution Guidelines, and
	  procedures for delegation of channel management.</li>

	<li>Standardize and re-create channel access lists.
	  Existing access lists and user permissions for all
	  <tt>#freebsd*</tt> channels remain in their states prior to
	  &os; Group Registration.  Consolidation and reassignment to
	  the &os; Project is needed.  In order to ensure a consistent
	  user and community experience in official &os; channels
	  going forward, access lists for all channels will be created
	  from the ground up.  Users with existing access to channels
	  may, at the IRC Admin team's discretion, be provided with
	  the opportunity to re-apply for access subject to any
	  conditions, terms, or guidelines that may be
	  appropriate.</li>

	<li>Determine the methods for informing project members and
	  the community of future changes to IRC services, procedures,
	  and policies.</li>

	<li>Determine methods to designate existing channel founders
	  as channel managers or similar.</li>

	<li>Update the channels list on the Wiki to distinguish
	  official and unofficial channels.</li>

	<li>Establish consistent modes, entry messages, and topics for
	  all channels.</li>
      </ul>

      <p>Users are invited to <tt>/join #freebsd-irc</tt> on the
	freenode IRC network.  The IRC Admin team welcomes ideas,
	contructive criticism, and feedback on how the &os; Project
	can improve the service and experience it provides to the
	community.</p>

      <p>While the vast majority of the broader community interacts on
	the freenode IRC network, the &os; developer presence there
	needs to be significantly improved.</p>

      <p>There are many opportunities to be had by increasing the
	amount and quality of interaction between &os; users and
	developers, both in terms of developers keeping their finger
	on the pulse of the community and in encouraging and
	cultivating greater contributions to the Project over the long
	term.</p>

      <p>It is critical to have a strong developer presence amongst
	users and IRC Admin would like to call on all developers to
	join the &os; freenode channels to help support that
	presence.  We are the &os; giants on whose shoulders the
	future contributors stand.  It is important to be there, in
	force.</p>
    </body>
  </project>

  <project cat='ports'>
    <title>GNOME on FreeBSD</title>

    <contact>
      <person>
	<name>FreeBSD GNOME Team</name>
	<email>freebsd-gnome@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.FreeBSD.org/gnome">FreeBSD GNOME Website</url>
      <url href="https://github.com/FreeBSD/freebsd-ports-gnome">Development Repository</url>
      <url href="https://wiki.gnome.org/Projects/Jhbuild/FreeBSD">Upstream Build Bot</url>
      <url href="https://www.FreeBSD.org/doc/en_US.ISO8859-1/books/porters-handbook/using-gnome.html">USE_GNOME Porter's Handbook Chapter</url>
      <url href="https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=210272">GNOME/Gtk+ 3.20 update bug</url>
    </links>

    <body>
      <p>The &os; GNOME Team maintains the GNOME, MATE, and CINNAMON
	desktop environments and graphical user interfaces for &os;.
	GNOME 3 is part of the GNU Project.  MATE is a fork of the
	GNOME 2 desktop.  CINNAMON is a desktop environment using
	GNOME 3 technologies, but with a GNOME 2 look and feel.</p>

      <p>GNOME 3.20 was ported with help from Ruslan Makhmatkhanov and
	Gustau Perez.  Work is being done on updating GDM from the old
	3.16 version to the 3.20 version.  For some reason, scrollbars
	in Firefox are no longer working, though this has not been
	investigated.</p>

      <p>With Gtk+ 3.20, theme support was again changed, and the
	changes are not backwards compatible.  If you have a theme
	update that requires the new Gtk+ version, feel free to add it
	as a blocker bug to the GNOME/Gtk+ 3.20 update bug.  This bug
	will be used for the exp-run of GNOME 3.20, when it is ready,
	and to track the theme-related ports.  Also, there is a
	problem with the open and save dialog content going
	invisible.</p>
    </body>

    <help>
      <task>Finish GDM 3.20 porting.</task>

      <task>Investigate why the scrollbars in Firefox are missing and
	why the open/save dialog content is missing.</task>
    </help>
  </project>

  <project cat='team'>
    <title>The &os; Core Team</title>

    <contact>
      <person>
	<name>&os; Core Team</name>
	<email>core@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>The highlight of Core's second quarter has been the
	regular biennial election of a new Core team.  Core would like
	to thank Dag-Erling Sm&oslash;grav and Glen Barber for running
	the vote.  Despite an initially slow uptake on nominations,
	fourteen candidates eventually stood, including four incumbent
	members of core.  The ninth &os; Core team will be:</p>

      <ul>
	<li>John Baldwin</li>

	<li>Baptiste Daroussin</li>

	<li>Allan Jude</li>

	<li>Ed Maste</li>

	<li>Kris Moore</li>

	<li>George V. Neville-Neil</li>

	<li>Benedict Reuschling</li>

	<li>Benno Rice</li>

	<li>Hiroki Sato</li>
      </ul>

      <p>The new Core Team would like to thank the departing members
	for their many years of service.  Members stepping down
	are:</p>

      <ul>
	<li>Gavin Atkinson</li>

	<li>Gleb Smirnoff</li>

	<li>David Chisnall</li>

	<li>Robert Watson</li>

	<li>Peter Wemm</li>
      </ul>

      <p>The second most notable achievement this quarter was the
	successful conclusion of an issue that had been on Core's
	agenda for many years.  With the creation of <a
	  href="https://planet.freebsd.org/">planet.freebsd.org</a>,
	the &os; Project finally has an official blog aggregation
	service.</p>

      <p>Core spent a significant amount of time reviewing licensing
	and ensuring that the &os; source remains unencumbered by
	onerous license terms.  This quarter involved approving Adrian
	Chadd's plan to import GPLv2 licensed code, allowing
	<tt>bwn(4)</tt> to be built as a loadable module with support
	for 802.11n networking.  This required confirmation that the
	license terms on the latest dummynet AQM patches were
	acceptable and that its variant on the BSD 2-clause license is
	suitable for use in the &os; base system.</p>

      <p>Core applied for, and received, a project-wide license for
	the use of the JetBrains static analysis tool suite, at the
	behest of Mathieu Previot.</p>

      <p>Another of Core's important functions is to ensure good
	relations amongst developers.  To that end, members of Core
	provided oversight over the backing-out of disputed
	<tt>blacklistd</tt> related patches to OpenSSH, and acted to
	smooth over ruffled tempers.</p>

      <p>This quarter saw the usual quota of gentle reminders to avoid
	intemperate language and other counter-productive behavior.
	Core had to take immediate action about death threats
	appearing on some of the mailing lists.  The culprit was
	immediately banned from the mailing lists and reported to
	their email service provider.  That person will be similarly
	removed should they be identified as having rejoined under a
	different alias.</p>

      <p>Other activities included:</p>

      <ul>
	<li>Working with university authorities in an attempt to get
	  documentation certifying that a prospective GSoC student was
	  legally allowed to work on &os; code as a foreigner enrolled
	  at a USA university.  This issue was eventually solved by
	  the student returning home for the summer and working from
	  there.</li>

	<li>Issuing guidance on policy around forced commits, or
	  trivial changes used as a means of correcting a commit
	  message.  In these cases, the correct approach is to revert
	  the commit and re-commit with the correct message.  This
	  ensures the continuing usefulness of
	  <tt>svn blame</tt>.</li>

	<li>Approving a delay to the planned introduction of packaged
	  base and confirming that this did not require any change to
	  the new support policies to be introduced with
	  11.0-RELEASE.</li>
      </ul>

      <p>During this quarter, four new commit bits were awarded and
	none were taken in.  Please welcome Emmanuel Vadot, Landon
	Fuller, Mike Karels, and Eric Badger as new src committers.
	Yes, that is the same Mike Karels who was once a member of the
	CSRG at Berkeley and co-author of <i>The Design and
	  Implementation of the 4.3BSD UNIX Operating System</i>.</p>
    </body>
  </project>
</report>
