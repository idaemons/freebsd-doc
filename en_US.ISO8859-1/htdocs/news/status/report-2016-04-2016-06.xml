<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE report PUBLIC "-//FreeBSD//DTD FreeBSD XML Database for
  Status Report//EN"
  "http://www.FreeBSD.org/XML/share/xml/statusreport.dtd" >

<!-- $FreeBSD$ -->

<report>
  <date>
    <month>April-June</month>

    <year>2016</year>
  </date>

  <section>
    <title>Introduction</title>

    <p>The second quarter of 2016.</p>

    <p>&mdash;Insert name here</p>

    <p><hr /></p>

    <p>Please submit status reports for the third quarter of 2016 by
      insert date here.</p>
  </section>

  <category>
    <name>team</name>

    <description>&os; Team Reports</description>
  </category>

  <category>
    <name>proj</name>

    <description>Projects</description>
  </category>

  <category>
    <name>kern</name>

    <description>Kernel</description>
  </category>

  <category>
    <name>arch</name>

    <description>Architectures</description>
  </category>

  <category>
    <name>bin</name>

    <description>Userland Programs</description>
  </category>

  <category>
    <name>ports</name>

    <description>Ports</description>
  </category>

  <category>
    <name>doc</name>

    <description>Documentation</description>
  </category>

  <category>
    <name>misc</name>

    <description>Miscellaneous</description>
  </category>

  <project cat='team'>
    <title>&os; Release Engineering Team</title>

    <contact>
      <person>
	<name>&os;&nbsp;Release Engineering Team</name>
	<email>re@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://www.freebsd.org/releases/10.3R/schedule.html">&os;&nbsp;10.3-RELEASE schedule</url>
      <url href="https://www.freebsd.org/releases/11.0R/schedule.html">&os;&nbsp;11.0-RELEASE schedule</url>
      <url href="http://ftp.freebsd.org/pub/FreeBSD/snapshots/ISO-IMAGES/">&os; development snapshots</url>
    </links>

    <body>
      <p>The &os; Release Engineering Team is responsible for setting
	and publishing release schedules for official project releases
	of &os;, announcing code freezes and maintaining the
	respective branches, among other things.</p>

      <p>The &os; Release Engineering Team completed the 10.3-RELEASE
	cycle late April, led by &a.marius;.  The release was one week
	behind the original schedule, to accommodate for a few last
	minute critical issues that were essential to include in the
	final release.</p>

      <p>The &os;&nbsp;11.0-RELEASE cycle started late May, one month
	behind the original schedule.  The schedule slip was primarily
	to accommodate for packaging the &os; base system with the
	<tt>pkg(8)</tt> utility.  However, as work on this progressed,
	it became apparent that there were too many outstanding
	issues.  As a result, packaged base will be a "beta" feature
	for 11.0-RELEASE, with the goal of promoting it to a
	first-class feature in 11.1-RELEASE, with additional
	provisions to ensure a seamless transition for earlier
	supported releases.</p>

      <p>Despite the fact that packaged base is not going to be a
	prime feature for &os;&nbsp;11.0-RELEASE, the Release
	Engineering Team would like to thank everyone who tested,
	provided patches, provided ideas and feedback, and in some
	cases, shot themselves in the foot due to bugs.</p>
    </body>

    <sponsor>
	The &os; Foundation
    </sponsor>
  </project>

  <project cat='ports'>
    <title>Obsoleting Rails 3</title>

    <contact>
      <person>
	<name>
	  <given>Torsten</given>
	  <common>ZÃ¼hlsdorff</common>
	</name>
	<email>tz@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>Ruby on Rails is the base for most of the rubygems in the
	Ports Collection.  Currently, versions 3.2 and 4.2 coexist.
	Since Rails 3.2 is running out of support, the time has
	come to switch to 4.2.</p>

      <p>While there is ongoing progress to remove Rails 3.2 from
	the ports tree, there are some major updates blocking this
	process.  The most recent blocker was the outstanding update
	of <tt>www/redmine</tt> from 2.6 to 3.2. This has completed
	successfully, so we can now move on.</p>

      <p>To help with porting or testing, feel free to contact me or
	the <tt>ruby@FreeBSD.org</tt> mailing list.</p>
    </body>
  </project>

  <project cat='kern'>
    <title>ARM Allwinner SoC Support</title>

    <contact>
      <person>
	<name>
	  <given>Jared</given>
	  <common>McNeill</common>
	</name>
	<email>jmcneill@freebsd.org</email>
      </person>
      <person>
	<name>
	  <given>Emmanuel</given>
	  <common>Vadot</common>
	</name>
	<email>manu@freebsd.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/FreeBSD/arm/Allwinner">Allwinner FreeBSD Wiki</url>
    </links>

    <body>
      <p>Allwinner SoCs are used in multiple hobbyist devboards and
	single board computers.  Recently, support for these SoCs
	received many updates.</p>

      <p>Theses tasks were completed during the second quarter of
	2016:</p>

      <ul>
	<li>Switch to upstream DTS is complete</li>

	<li>A83T SoC support</li>

	<li>H3 SoC support</li>

	<li>Switch to new clock framework</li>

	<li>Convert A10 interrupt controller to INTRNG</li>

	<li>OHCI support</li>

	<li>Generic ALLWINNER kernel config file</li>

	<li>A20/A31 NMI support</li>

	<li>AXP209 PMU interrupts, GPIO, and sensors support</li>

	<li>A83T thermal sensor support</li>

	<li>RSB (Reduced Serial Bus) support</li>

	<li>AXP813/AXP818 PMU support</li>

	<li>A83T Security ID support</li>

	<li>Allwinner Gigabit Ethernet controller found in
	  H3/A83T/A64</li>

	<li>USB OTG
	  <a href="https://reviews.freebsd.org/D5881">(in review)</a></li>

	<li>A10/A20 Security ID support
	  <a href="https://reviews.freebsd.org/D6383">(in review)</a></li>

	<li>A13 SoC Support
	  <a href="https://reviews.freebsd.org/D6809">(in review)</a></li>
      </ul>

      <p>Ongoing work:</p>

      <ul>
	<li>A64 support</li>

	<li>Use U-Boot EFI implementation for ARM32/ARM64</li>
      </ul>
    </body>

    <help>
      <task>SPI driver</task>

      <task>LCD Support</task>

      <task>Any unsupported hardware device that might be of
	interest.</task>
    </help>
  </project>

  <project cat='proj'>
    <title>Robust Mutexes</title>

    <contact>
      <person>
	<name>
	  <given>Konstantin</given>
	  <common>Belousov</common>
	</name>
	<email>kib@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Ed</given>
	  <common>Maste</common>
	</name>
	<email>emaste@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>Now that the process-shared locks are implemented for our
	POSIX threads implementation library, <tt>libthr</tt>,
	the only major lacking feature for POSIX compliance is robust
	mutexes.  Robust mutexes allow the application to detect, and
	theoretically, recover from crashes which occur while
	modifying the shared state.  The supported model is to protect
	shared state by a <tt>pthread_mutex</tt>, and the crash is
	detected as the thread termination while owning the mutex.  A
	thread might terminate alone, or it could be killed due to the
	termination of the containing process.   As such, the robust
	attribute is applicable to both process-private and -shared
	mutexes.</p>

      <p>An application must be specifically modified to handle and
	recover from failures.  The <tt>pthread_mutex_lock()</tt>
	function may return new error <tt>EOWNERDEAD</tt>, which
	indicates that the previous owner of the lock terminated while
	still owning the lock.  Despite returning the non-zero value,
	the lock is granted to the caller.  In the simplest form, an
	application may detect the error and refuse to operate until
	the persistent shared data is recovered, such as by manual
	reinitialization.  More sophisticated applications could try
	to automatically recover from the condition, in which case
	<tt>pthread_mutex_consistent(3)</tt> must be called on the
	lock before the unlock.  However, such recovery can be
	considered to be very hard.  Still, even the detection of
	inconsistent shared state is useful, since it avoids further
	corruption and random faults of the affected application.
      </p>

      <p>It is curious but not unexpected that this interface is not
	used widely.  The only real-life application which utilizes it
	is Samba.  Using Samba with an updated FreeBSD base uncovered
	minor bugs both in the FreeBSD robustness implementation, and
	in Samba itself.</p>

      <p>It is believed that <tt>libthr</tt> in FreeBSD 11 is
	POSIX-compliant for large features.  Further work is planned
	to look at the lock structures inlining to remove overhead
	and improve performance of the library.</p>

      <p>Most of the implementation of the robustness feature
	consisted of making small changes in the lock and unlock
	paths, both in <tt>libthr</tt> and in <tt>kern_umtx.c</tt>.
	This literally required reading all of the code dealing with
	mutexes and conditional variables, which was something I
	wanted to help future developers with.  In the end, with the
	help of Ed Maste, the man pages for <tt>umtx(2)</tt> and all
	<tt>thr*(2)</tt> syscalls were written and added to the base
	system's documentation set.
      </p>
    </body>

    <sponsor>The FreeBSD Foundation</sponsor>

    <help>
      <task>Use the implementation in real-word applications and
	report issues.</task>
    </help>
  </project>

  <project cat='proj'>
    <title>EFI Refactoring, GELI Support</title>

    <contact>
      <person>
	<name>
	  <given>Eric</given>
	  <common>McCorkle</common>
	</name>
	<email>eric@metricspace.net</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/emc2/freebsd/tree/geli_efi">GELI Support Branch</url>
      <url href="https://github.com/emc2/freebsd/tree/efize">EFI Refactoring Branch</url>
    </links>

    <body>
      <p>The EFI bootloader has undergone considerable refactoring to
	make more use of the EFI API.  The filesystem code in
	<tt>boot1</tt> has been eliminated, and a single codebase for
	filesystems now serves both <tt>boot1</tt> and
	<tt>loader</tt>.  This codebase is organized around the EFI
	driver model and it should be possible to export any
	filesystem implementation as a standalone EFI driver without
	too much effort.</p>

      <p>Both <tt>boot1</tt> and <tt>loader</tt> have been refactored
	to talk through the <tt>EFI_SIMPLE_FILE_SYSTEM</tt> interface.
	In <tt>loader</tt>, this is accomplished with a dummy
	filesystem driver that is just a translation layer between the
	<tt>loader</tt> filesystem interface and
	<tt>EFI_SIMPLE_FILE_SYSTEM</tt>.  A reverse translation layer
	allows the existing filesystem drivers to function as EFI
	drivers.</p>

      <p>The EFI refactoring by itself exists in
	<a href="https://github.com/emc2/freebsd/tree/efize">this branch</a>.</p>

      <p>Additionally, GELI support has been added using the EFI
	refactoring.  This allows booting from a GELI-encrypted
	filesystem.  Note that the EFI system partition, which
	contains <tt>boot1</tt>, must be a plaintext msdosfs
	partition.  This patch adds an intake buffer to the crypto
	framework, which allows injection of keys directly into a
	loaded kernel, without the need to pass them through
	arguments or environment variables.  This patch only uses the
	intake buffer for EFI GELI support as legacy BIOS GELI support
	still uses environment variables.</p>

      <p>EFI GELI support depends on the
	<a href="https://github.com/emc2/freebsd/tree/geli_efi">efize branch</a>.</p>

      <p>These patches have been tested and used and should be able
	to handle use by early adopters.  Note that the
	<tt>LOADER_PATH</tt> variable has been changed to
	<tt>/boot/loader.tst</tt>, to facilitate safe testing.</p>

      <strong>IMPORTANT:</strong>

      <p>As this is an encrypted filesystem patch, an error can
	potentially leave data inaccessible.  It is
	<em>strongly</em> recommended to use the following procedure
	for testing:</p>

      <ol>
	<li>
	  <p>Back up your data!</p>
	</li>

	<li>
	  <p>Do not forget to back up your data!</p>
	</li>

	<li>
	  <p>Install an EFI shell on the ESP.</p>
	</li>

	<li>
	  <p>Install the patched <tt>boot1</tt> on the ESP to
	    something like <tt>/boot/efi/BOOTX64.TST</tt>.</p>
	</li>

	<li>
	  <p>Install the patched loader to <tt>/boot/loader.tst</tt>
	    on your machine.</p>
	</li>

	<li>
	  <p>Create a GELI partition outside of the normal boot
	    partition.</p>
	</li>

	<li>
	  <p>First, try booting <tt>/boot/efi/BOOTX64.TST</tt> and
	    make sure it properly handles the encrypted partition.</p>
	</li>

	<li>
	  <p>Copy a boot environment, including the patched loader, to
	    the encrypted partition.</p>
	</li>

	<li>
	  <p>Use the loader prompt to load a kernel from the encrypted
	    partition.</p>
	</li>

	<li>
	  <p>Try switching over to an encrypted main partition once
	    everything else has worked.</p>
	</li>
      </ol>
    </body>

    <help>
      <task>Testing is needed.</task>

      <task>Code will need review and some <tt>style(9)</tt>
	normalization must occur before this code goes into
	FreeBSD.</task>
    </help>
  </project>

  <project cat='bin'>
    <title>Updates to GDB</title>

    <contact>
      <person>
	<name>
	  <given>John</given>
	  <common>Baldwin</common>
	</name>
	<email>jhb@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Luca</given>
	  <common>Pizzamiglio</common>
	</name>
	<email>luca.pizzamiglio@gmail.com</email>
      </person>
    </contact>

    <body>
      <p>The port has been updated to GDB 7.11.1.</p>

      <p>Support for system call catchpoints has been committed
	upstream.  Support for examining ELF auxiliary vector data via
	<tt>info auxv</tt> has been committed upstream.  Both features
	will be included in GDB 7.12.</p>
    </body>

    <help>
      <task>Figure out why the <tt>powerpc kgdb</tt> targets are not
	able to unwind the stack past the initial frame.</task>

      <task>Add support for more platforms, such as <tt>arm</tt>,
	<tt>mips</tt>, and <tt>aarch64</tt>, to upstream gdb for both
	userland and kgdb.</task>

      <task>Add support for debugging <tt>powerpc</tt> vector
	registers.</task>

      <task>Add support for <tt>$_siginfo</tt>.</task>

      <task>Implement <tt>info proc</tt> commands.</task>

      <task>Implement <tt>info os</tt> commands.</task>
    </help>
  </project>
</report>
