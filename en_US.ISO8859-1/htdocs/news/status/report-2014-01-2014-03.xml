<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE report PUBLIC "-//FreeBSD//DTD FreeBSD XML Database for Status Report//EN" "http://www.FreeBSD.org/XML/share/xml/statusreport.dtd" >
<!-- $FreeBSD$ -->
<report>
  <date>
    <month>January-March</month>

    <year>2014</year>
  </date>

  <section>
    <title>Introduction</title>

    <p>This report covers &os;-related projects between January and
      March 2014.  This is the first of four reports planned for 2014.</p>

    <!-- XXX: Add introduction -->

    <!-- XXX: Keep the number of entries updated -->
    <p>Thanks to all the reporters for the excellent work!  This report
      contains 21 entries and we hope you enjoy reading it.</p>

    <p>The deadline for submissions covering between April and
      June 2014 is July 7th, 2014.</p>
  </section>

  <category>
    <name>team</name>

    <description>&os; Team Reports</description>
  </category>

  <category>
    <name>proj</name>

    <description>Projects</description>
  </category>

  <category>
    <name>kern</name>

    <description>Kernel</description>
  </category>

  <category>
    <name>arch</name>

    <description>Architectures</description>
  </category>

  <category>
    <name>bin</name>

    <description>Userland Programs</description>
  </category>

  <category>
    <name>ports</name>

    <description>Ports</description>
  </category>

  <category>
    <name>doc</name>

    <description>Documentation</description>
  </category>

  <project cat='ports'>
    <title>Chromium</title>

    <contact>
      <person>
	<name>Chromium on &os; Team</name>
	<email>freebsd-chromium@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.chromium.org/Home">Chromium website</url>
      <url href="https://github.com/gliaskos/freebsd-chromium">Development repository on GitHub</url>
      <url href="https://wiki.freebsd.org/Chromium">Chromium on &os; wiki</url>
    </links>

    <body>
      <p>Chromium is the open source web browser project from which
	Google Chrome draws its source code.  The browsers share the
	majority of code and features, though there are some minor
	differences in features and they have different licensing.  Over
	the last four years, the Chromium team has been busy with
	porting Chromium to &os;.  This involves patching the browser so
	that it runs on &os;, tracking and documenting security updates,
	and merging patches back upstream.</p>

      <p>While there are already several browsers available for &os;,
	advantages of Chromium are:</p>

      <ul>
	<li>Quick response from upstream to security issues, resulting
	  in approximately bi-weekly updates.</li>

	<li>A testbed for security features of &os;, like Capsicum.
	  While support for this capability and sandbox framework is
	  currently not included in the browser, a proof-of-concept
	  implementation for an early version of Chromium was realized
	  within a single weekend.</li>
      </ul>

      <p>George Liaskos and &a.rene; are currently busy with submitting
	the remaining patches specific to &os; back upstream.  Apart from
	making future updates easier, it sometimes also improves the
	overall code quality.</p>

      <p>&a.jonathan; recently updated the Capsicum patches for Chromium
	and is talking to upstream about them.</p>
    </body>

    <help>
      <task>Advocate &os;.  While patches are getting accepted by both
	humans and bots, it is not an official platform so attitude varies
	from developer to developer.  While &a.rene; thinks it is a bit
	early, it might be fruitful to investigate what is required to
	make &os; (and possibly OpenBSD) an official platform in terms
	of both hardware and procedures.</task>

      <task>If you feel comfortable with large source trees, you can try
	to build the Git version of Chromium on &os;.  If you are also
	comfortable with signing Googles Contributor License Agreement,
	you can join testing and submitting patches upstream.</task>
    </help>
  </project>

  <project cat='doc'>
    <title>ZFS Chapter of the Handbook</title>

    <contact>
      <person>
	<name>
	  <given>Allan</given>
	  <common>Jude</common>
	</name>
	<email>freebsd@allanjude.com</email>
      </person>

      <person>
	<name>
	  <given>Benedict</given>
	  <common>Reuschling</common>
	</name>
	<email>bcr@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Warren</given>
	  <common>Block</common>
	</name>
	<email>wblock@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.allanjude.com/zfs_handbook/zfs.html">Preview ZFS Handbook</url>
      <url href="http://www.allanjude.com/talks/AsiaBSDCon_2014_-_WIP_-_ZFS_Handbook.pdf">Slides from AsiaBSDCon 2014</url>
    </links>

    <body>
      <p>ZFS is one of the premier features of &os;.  The current
	documentation in the Handbook and elsewhere online is severely
	lacking.  Much of the original documentation from Sun and Oracle
	has disappeared, moved, or is about the proprietary version of
	ZFS.</p>

      <p>New users have many questions about ZFS and yet there exists a
	great deal more bad advice about ZFS than proper documentation.
	The current ZFS chapter of the &os; Handbook starts off with the
	required steps to configure an i386 machine to run ZFS.  This is
	more likely to scare off a new user than to educate them about
	how to properly use ZFS.</p>

      <p>At BSDCan&nbsp;2013, the process of writing an entirely new
	chapter of the Handbook on ZFS was started.  Currently this
	chapter consists of approximately 16,000 words covering all
	subcommands of the <tt>zpool(8)</tt> and <tt>zfs(8)</tt>
	utilities, delegation, tuning and a section devoted to
	defintions and explainations of the terms and features of
	ZFS.</p>

      <p>The remaining section is the FAQ.  To help users address the
	most common problems they might run into with ZFS.  It would be
	useful to hear experiences, questions, misconceptions, gotchas,
	stumbling blocks and suggestions for the FAQ section from other
	users.  Also, a use cases section that highlights some of the
	cases where ZFS provides advantages over traditional file
	systems.</p>

      <p>Please send suggestions to the <tt>freebsd-doc</tt> mailing
	list.</p>
    </body>

    <sponsor>ScaleEngine, Inc</sponsor>

    <help>
      <task>Technical review by Matt Ahrens (co-creator of ZFS).</task>
      <task>Improve delegation section.</task>
      <task>Improve tuning section, add new sysctls added in
	<tt>head</tt>.</task>
      <task>Add section on jails and the jailed property.</task>
      <task>Add FAQ section.</task>
      <task>Add <q>Use Cases</q> section.</task>
      <task>General editing and review.</task>
    </help>
  </project>

  <project cat='team'>
    <title>&os; Release Engineering Team</title>

    <contact>
      <person>
	<name>&os; Release Engineering Team</name>
	<email>re@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.FreeBSD.org/releases/9.3R/schedule.html">&os;&nbsp;9.3-RELEASE schedule</url>
      <url href="http://www.FreeBSD.org/releases/9.3R/todo.html">&os;&nbsp;9.3-RELEASE todo list</url>
      <url href="http://ftp.FreeBSD.org/pub/FreeBSD/snapshots/ISO-IMAGES/">&os;&nbsp;development snapshots</url>
    </links>

    <body>
      <p>In early January, the &os; Release Engineering Team became
	aware of several last-minute showstopper issues in
	&os;&nbsp;10.0, which lead to an extension in the final release
	builds.  &os;&nbsp;10.0-RELEASE was announced on January 20, two
	months behind the original schedule.</p>

      <p>The schedule for the &os;&nbsp;9.3-RELEASE cycle has been
	written and posted to the website, and the release cycle will
	begin early May.</p>

      <p>There is ongoing work to integrate support for embedded
	architectures as part of the release build process.  At this
	time, support exists for a number of ARM kernels, in particular
	the Raspberry Pi, BeagleBone, and WandBoard.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>
  </project>

  <project cat='team'>
    <title>&os; Documentation Engineering Team</title>

    <contact>
      <person>
	<name>&os; Documentation Engineering Team</name>
	<email>doceng@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://lists.freebsd.org/pipermail/freebsd-doc/2014-February/023265.html">Announcement of Warren Block's addition</url>
    </links>

    <body>
      <p>The &os; Documentation Engineering Team is responsible for
	defining and following up documentation goals for the committers
	in the Documentation project.  The team is pleased to announce a
	new member &mdash; &a.wblock;.  In early March, the &os;
	Documentation Engineering Team members assumed responsibility
	for the &os; Webmaster Team.</p>
    </body>
  </project>

  <project cat='ports'>
    <title>&os; Ada Ports</title>

    <contact>
      <person>
	<name>
	  <given>John</given>
	  <common>Marino</common>
	</name>
	<email>marino@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.dragonlace.net"/>
      <url href="http://www.spark-2014.org/about/">SPARK 2014</url>
    </links>

    <body>
      <p>Ada is a structured, statically typed, imperative,
	wide-spectrum, and object-oriented high-level computer
	programming language, extended from Pascal and other languages,
	originally targeted at embedded and real-time systems.  The
	number of Ada ports in the collection has grown significantly
	since the last report six months ago.  There are almost 50
	Ada-related ports now, with new ones getting added all the time.</p>

      <p>The previous plan was to move from the GCC 4.7-based GNAT
	compiler to a GCC 4.8-based one, but finally GCC 4.8 was skipped
	and now a GCC 4.9-based GNAT is the standard Ada compiler, which
	fully supports the new ISO standard, Ada 2012.  Moving to a
	newer compiler allowed several important ports like PolyOrb and
	GPRBuild to be upgraded to the latest available versions.  In
	fact, almost every Ada port is currently at its most recent
	upstream version.</p>

      <p>For non-Windows-based Ada development, &os; and DragonFly are
	now undisputed as the go-to platforms.  The other candidates are
	Debian and Fedora, but there are few Ada software on those
	platforms that are not also in the &os; ports tree, but the versions are
	much older.  The Ports Collection also features software not found
	anywhere else such as the USAFA's Ironsides DNS server,
	libsparkcrypto, matreshka, GNATDroid (Android cross-compiler) and
	several developer libraries.</p>

      <p>A desired addition to the Ada ports will be SPARK 2014 (see
	links), which should cement &os; as an option for professional,
	safety-critical application development.  This package should
	have its first release by early summer.</p>
    </body>
  </project>

  <project cat='ports'>
    <title>Xfce/&os;</title>

    <contact>
      <person>
	<name>
	  <given>&os; Xfce Team</given>
	</name>
	<email>xfce@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/Xfce"/>
      <url href="https://svn.redports.org/olivierd/xfce4/">Development repository</url>
      <url href="https://people.freebsd.org/~olivierd/xfce-core-unstable.html"/>
      <url href="http://www.freebsd.org/cgi/query-pr.cgi?pr=183690">ports/183690</url>
    </links>

    <body>
      <p>Xfce is a free software desktop environment for Unix and
	Unix-like platforms, such as &os;.  It aims to be fast and
	lightweight, while still being visually appealing and easy to
	use.  The Xfce team continues to keep up-to-date each piece of
	the Xfce Desktop.</p>

      <p>The latest commits concerned:</p>

      <ul>
	<li>Applications:</li>

	<ul>
	  <li>Midori (0.5.7)</li>
	  <li>xfburn (0.5.0)</li>
	  <li>xfce4-parole (0.5.4)</li>
	  <li>xfce4-taskmanager (1.0.1)</li>
	  <li>xfce4-tumbler (0.1.30)</li>
	</ul>

	<li>Panel plugins:</li>

	<ul>
	  <li>xfce4-clipman-plugin (1.2.5)</li>
	  <li>xfce4-equake-plugin (1.3.4)</li>
	  <li>xfce4-wavelan-plugin (0.5.11)</li>
	  <li>xfce4-whiskermenu-plugin (1.3.2)</li>
	</ul>
      </ul>

      <p>We also follow development of core components (available in
	your repository).  See link for documentation on how to upgrade
	those libraries.</p>

      <ul>
	<li>garcon (0.3.0)</li>
	<li>libxfce4menu (4.11.1)</li>
	<li>libxfce4util (4.11.0)</li>
	<li>xfce4-appfinder (4.11.0)</li>
	<li>xfce4-desktop (4.11.4)</li>
	<li>xfce4-dev-tools (4.11.0)</li>
	<li>xfce4-panel (4.11.0)</li>
	<li>xfce4-parole (0.6.0)</li>
	<li>xfce4-settings (4.11.2)</li>
	<li>xfce4-session (4.11.0)</li>
	<li>xfce4-wm (4.11.1)</li>
	<li>xfce4-xkb-plugin (0.7.0)</li>
      </ul>
    </body>

    <help>
      <task>Add support of DragonFly for xfce4-taskmanger.</task>

      <task>Finish to replace Tango icons theme by GNOME, in order to
	close <tt>ports/183690</tt> (see links, it remains
	Midori).</task>
    </help>
  </project>

  <project cat='kern'>
    <title>PCI SR-IOV Infrastructure</title>

    <contact>
      <person>
	<name>
	  <given>Ryan</given>
	  <common>Stone</common>
	</name>
	<email>rstone@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/rysto32/freebsd/tree/iov_ixgbe">Work in progress on GitHub</url>
    </links>

    <body>
      <p>PCI Single Root I/O Virtualization (SR-IOV) is an optional part
	of the PCIe standard that provides hardware acceleration for the
	virtualization of PCIe devices.  When SR-IOV is in use, a
	function in a PCI device (known as a Physical Function, or PF)
	will present multiple Virtual PCI Functions (VF) on the PCI bus.
	These VFs are fully independent PCI devices that have
	 access to the resources of the PF.  For example, on a network
	interface card VFs could transmit and receive packets
	independent of the PF.</p>

      <p>The most obvious use case for SR-IOV is virtualization.  A
	hypervisor like bhyve could instantiate a VF for every VM and
	use PCI passthrough to assign the VFs to the VMs.  This would
	allow multiple VMs to share access to the PCI device without
	having to do any expensive communication with the hypervisor,
	greatly increasing performance of performing I/O from a VM.</p>

      <p>There are two parts to this project.  The first is implementing
	an API in the PCI subsystem for creating VFs and configuring
	standard PCI features like BARs.  The second part is updating
	individual drivers for PCI devices that support SR-IOV to
	configure their VFs.  For example, a network interface driver
	will typically have to assign a MAC address to a VF and
	configure the interface to route packets destined for that MAC
	address to the VF.</p>

      <p>At this point only SR-IOV support for the <tt>ixgbe(4)</tt>
	driver is planned.  The PCI subsystem API is designed to be
	generic and should support SR-IOV on any device, but fairly
	extensive driver work is necessary to support SR-IOV, which is
	currently not planned due to lack of time and hardware.</p>

      <p>At present, <tt>ixgbe(4)</tt> is able to create VFs and the
	<tt>ixgbevf</tt> driver is able to pass traffic.  There is still
	a fair amount of work to support VLAN tags, multicast addresses
	and other features on the VFs.  Also, the VF configuration needs
	to be better integrated with the PF initialization path to
	ensure that resets of the PF do not interrupt operation of the
	VFs.</p>
    </body>

    <sponsor>Sandvine, Inc</sponsor>
  </project>

  <project cat='bin'>
    <title>&os; Test Suite</title>

    <contact>
      <person>
	<name>
	  <given>Julio</given>
	  <common>Merino</common>
	</name>
	<email>jmmv@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://wiki.FreeBSD.org/TestSuite">Project page</url>
      <url href="http://kyua1.nyi.FreeBSD.org/">Testing cluster</url>
      <url href="http://julipedia.meroh.net/2014/01/freebsd-test-suite-goals-and-planning.html">Roadmap for the project</url>
      <url href="https://drive.google.com/a/meroh.net/#folders/0B08g-X1kPkSYNmlEdTB5RjlFbkk">AsiaBSDCon 2014 tutorial materials</url>
    </links>

    <body>
      <p>The &os; Test Suite project aims to equip &os; with a
	comprehensive collection of tests that are easy to run out of
	the box and during the development of the system.  The test
	suite is installed into <tt>/usr/tests/</tt> and the
	<tt>kyua(1)</tt> command-line tool (<tt>devel/kyua</tt> in the
	Ports Collection) is used to run them.  See the project page for
	more details.</p>

      <p>Since the last status report, we have been hard at work
	polishing the framework in many different areas.  The highlights
	are:</p>

      <ul>
	<li>A roadmap for the project has been prepared and published,
	  see links.</li>

	<li>Many tests have been added to the test suite thanks to the
	  work of various developers and, in particular, a good bunch of
	  old tests from <tt>src/tools/regression/</tt> have been
	  incorporated into the new test suite.  As of this writing,
	  there are 509 test cases continuously running.</li>

	<li>The testing infrastructure in the <tt>stable/10</tt> branch has
	  been synced to <tt>head</tt>.  It should now be possible to
	  seamlessly MFC changes to the stable branch along with their
	  tests, if any.</li>

	<li>The testing cluster, which only issued <tt>amd64</tt>
	  builds, has been extended to perform <tt>i386</tt> builds as
	  well.  Additionally, a canary machine has been put in place so
	  that changes to the cluster configuration can be properly
	  validated before deployment.</li>

	<li>A tutorial on Kyua and the &os; Test Suite was given at
	  AsiaBSDCon 2014.  The tutorial materials are available for
	  public consumption, please consult the links.</li>

	<li>Both Kyua's and ATF's upstream sites have been moved to
	  GitHub, mostly due to the discontinuation of file downloads in
	  Google Code.</li>
      </ul>
    </body>

    <help>
      <task>Enable the build of the test suite by default.</task>

      <task>Add alerting for failed or missing test runs from the
	testing cluster.</task>

      <task>Add bhyve support to the testing cluster for faster
	turnaround times.</task>

      <task>Simplify and improve Kyua HTML reports.  In particular,
	reports will be coalesced into single HTML files for easier
	management and will include more useful details for debugging.
	Such details are the revision at which the system was built,
	date and duration of the whole run, or list of installed
	packages, to mention a few examples.</task>

      <task>Add JUnit XML output to Kyua for better integration with
	Jenkins.  This work is actively ongoing and should be ready for
	prime time at BSDCan&nbsp;2014.</task>
    </help>
  </project>

  <project cat='ports'>
    <title>OpenAFS on &os;</title>

    <contact>
      <person>
	<name>
	  <given>Benjamin</given>
	  <common>Kaduk</common>
	</name>
	<email>bjk@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://openafs.org">OpenAFS homepage</url>
    </links>

    <body>
      <p>AFS is a distributed network filesystem that originated from
	the Andrew Project at Carnegie-Mellon University.  OpenAFS is an
	open-source implementation of the AFS protocol derived from IBM
	AFS, which was released under the IBM Public License.  OpenAFS
	on &os; (the <tt>net/openafs</tt> port) is suitable for light
	use, but is not yet production ready.</p>

      <p>We got a chance to pick up this porting project after some
	hiatus.  Recent work focused on investigating the bugs preventing
	the use of a disk cache for caching file data.  An internal
	"lookupname" abstraction was intended to return an unlocked,
	referenced vnode, but instead returned a locked, referenced
	vnode, leading to various failure modes depending on the number
	of kernel debugging options enabled.</p>
    </body>

    <help>
      <task>Track down an issue involving incorrect reference counts on
	the AFS root vnode that cause warnings on shutdown.</task>

      <task>Audit the locking in all the vnode operations code &mdash;
	it is expected that there remain some incorrectly locked areas,
	though none that present visible issues under light load.</task>
    </help>
  </project>

  <project cat='ports'>
    <title>libvirt/bhyve Support</title>

    <contact>
      <person>
	<name>
	  <given>Roman</given>
	  <common>Bogorodskiy</common>
	</name>
	<email>novel@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://libvirt.org/drvbhyve.html">bhyve Driver</url>
      <url href="http://libvirt.org/">libvirt Home Page</url>
      <url href="http://empt1e.blogspot.ru/search/label/libvirt">Developer Blog</url>
    </links>

    <body>
      <p>Libvirt is a virtualization library providing a common API for
	various hypervisors (Qemu/KVM, Xen, LXC, and others), and also a
	popular library used by a number of projects.  Libvirt 1.2.2,
	released on March, 2014, was the first release to include bhyve
	support.  Enabling bhyve support allows consumers to use bhyve
	in libvirt-ready applications without major efforts.</p>

      <p>Currently, libvirt supports almost all essential features of
	bhyve, such as Virtual Machince lifecycle (start, stop), bridged
	networking, and virtio/SATA driver support.  The work continues
	to implement more API calls and to cover more of features
	offered by bhyve.</p>
    </body>

    <help>
      <task>&os; port of <tt>netcf</tt> is needed for adding interface
	driver support to libvirt.</task>
    </help>
  </project>

  <project cat='arch'>
    <title>&os;/arm64</title>

    <contact>
      <person>
	<name>
	  <given>Andrew</given>
	  <common>Turner</common>
	</name>
	<email>andrew@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://svnweb.freebsd.org/base/projects/arm64/">Project branch in the Subversion repository</url>
      <url href="https://github.com/zxombie/aarch64-freebsd-sandbox">GitHub repository</url>
    </links>

    <body>
      <p>Arm64 is the name of the in-progress port of &os; to the ARMv8
	CPU when it is in AArch64 mode.  Until recently, all ARM CPU
	designs were 32-bit only.  With the introduction of the ARMv8,
	architecture ARM has added a new 64-bit mode.  This new mode has
	been named AArch64.</p>

      <p>Progress has been good on getting &os; to build and run on the
	ARM Foundation model.  &os; is able to be built for this
	architecture, however it requires a number of external tools
	including <tt>objdump(1)</tt> and <tt>ld(1)</tt>.  These tools
	are provided by an external copy of binutils until replacements
	can be written.</p>

      <p>&os; will run the early boot on the Foundation model.  The
	loader has been ported to the AArch64 UEFI environment and can
	load and run the kernel.  The kernel is able to create the
	initial page tables to be able to run from virtual memory.  It
	can then execute C code to parse the memory map provided by the
	loader.  This is as far as the kernel currently boots.</p>

      <p>This work is now happening in the &os; Subversion repository in
	a project branch, see the links.</p>
    </body>

    <help>
      <task>Implement an initial <tt>pmap(9)</tt> layer.</task>
      <task>Write the missing machine-dependent code.</task>
      <task>Test on real hardware.</task>
    </help>
  </project>

  <project cat='arch'>
    <title>&os;/armv6hf</title>

    <contact>
      <person>
	<name>
	  <given>Andrew</given>
	  <common>Turner</common>
	</name>
	<email>andrew@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>&os; has been updated to allow it to use the VFP variant of the
	ARM EABI ABI.  The VFP unit is the ARM hardware to perform
	floating-point operations.  This changes the ABI to improve the
	performance of code that uses floating-point operations.  By
	default, &os; already uses the ARM EABI on all releases from
	10.0.</p>

      <p>This is important for users of &os;/arm with an ARMv6 or ARMv7
	SoC and who use code that makes use of floating-point
	operations.  It removes the need for the slow software
	floating-point support in <tt>libc</tt>.  This is mostly
	compatible with the existing ABI, with the exception of how
	floating-point values are passed into functions.  Because no
	floating-point values are passed to the kernel, the
	<tt>armv6</tt> and <tt>armv6hf</tt> kernels will work with
	either userland.</p>

      <p>As part of this, some support functions have been updated to
	use the VFP unit when available.  It is intended the existing
	<tt>armv6</tt> target architecture will be kept for cases where
	the SoC lacks a VFP unit, or existing binaries that are
	incompatible with the new ABI.</p>
    </body>

    <help>
      <task>Testing.</task>
      <task>More testing.</task>
    </help>
  </project>

  <project cat='ports'>
    <title>Using CentOS 6.5 as Linux base</title>

    <contact>
      <person>
	<name>
	  <given>Johannes</given>
	  <common>Meixner</common>
	</name>
	<email>xmj@chaot.net</email>
      </person>
    </contact>

    <links>
      <url href="http://github.com/xmj/linux-ports">Work in Progress</url>
      <url href="http://www.freebsd.org/cgi/query-pr.cgi?pr=ports/187786">ports/187786</url>
    </links>

    <body>
      <p>The current Linux emulation layer relies on using a Linux base
	distribution along with Linux ports of relevant non-base
	software.  Fedora 10 has been imported in 2006, and it shows
	&mdash; current Linux software like Skype 4, Sublime Text 2, or
	even modern games fail to run with the provided libraries.</p>

      <p>CentOS 6.5 has been released in December 2013 and will be
	supported until 2017, thus making it an ideal basis for an
	update to the ports infrastructure.  Built upon the work of
	Carlos Jacobo Puga Medina, all ports using Linux has been
	updated to work with either Fedora 10 or CentOS 6.5.</p>

      <p>The goal of this project is to make CentOS 6.5 the default
	Linux distribution, so that &os; users can enjoy running modern
	Linux binaries without having to resort to proper virtualization
	à la VirtualBox, or even dual-booting.</p>
    </body>

    <sponsor>Goldener Grund OÜ</sponsor>

    <help>
      <task>Clean up <tt>Mk/bsd.linux-*.mk</tt> and fix errors detected
	in <tt>ports/187786</tt>.</task>

      <task>Revert making c6 the default (in the git repository).</task>
      <task>Testing.</task>

      <task>Review patches and import into the ports tree (any help
	appreciated).</task>

      <task>Make c6 the default (after sufficient testing) within the
	ports tree.</task>
    </help>
  </project>

  <project cat='kern'>
    <title>ASLR and PIE</title>

    <contact>
      <person>
	<name>
	  <given>Shawn</given>
	  <common>Webb</common>
	</name>
	<email>lattera@gmail.com</email>
      </person>

      <person>
	<name>
	  <given>Olivér</given>
	  <common>Pintér</common>
	</name>
	<email>oliver.pntr@gmail.com</email>
      </person>
    </contact>

    <links>
      <url href="http://0xfeedface.org/blog/lattera/2014-04-03/awesome-freebsd-aslr-progress">Blog post with latest status update</url>
      <url href="https://github.com/lattera/freebsd/tree/soldierx/lattera/aslr">Shawn's ASLR branch</url>
      <url href="https://github.com/opntr/opBSD/tree/op/stable/10-aslr">Olivér's ASLR branch</url>
    </links>

    <body>
      <p>Address space layout randomization (ASLR) is a computer
	security technique involved in protection from buffer overflow
	attacks.  In order to prevent an attacker from reliably jumping
	to a particular exploited function in memory, ASLR involves
	randomly arranging the positions of key data areas of a program,
	including the base of the executable and the positions of the
	stack, heap, and libraries, in a process' address space.</p>

      <p>We have added ASLR support to all architectures.  As the
	primary developers behind this feature have the most access to
	<tt>amd64</tt>, the focus of development is on the
	<tt>amd64</tt> architecture.  Other architectures, such as ARM,
	have known bugs with our current ASLR implementation and we are
	working hard to fix them.  We added support for
	Position-Independent Executables (PIEs) in a number of
	applications in base.</p>
    </body>

    <help>
      <task>Shawn has access to a Raspberry Pi (RPI).  PIE is 90%
	broken.  Debug and fix major issues on the RPI.  The existing NX
	stack protections are not obeyed on RPI.  Properly implemented
	ASLR requires NX stack.</task>

      <task>Shawn will be receiving a <tt>sparc64</tt> box on April 6,
	2014.  He will test ASLR on <tt>sparc64</tt>, identifying and
	fixing any bugs that pop up.</task>

      <task>Olivér has identified one or more bugs with the Linuxulator.
	He will be looking into that and fixing those.</task>

      <task>Shawn will be cleaning up code and adding more applications
	in base to support PIE.  He will also add PIE support to the
	ports framework for general consumption.</task>

      <task>Shawn will be giving a presentation regarding ASLR at
	BSDCan&nbsp;2014.</task>
    </help>
  </project>

  <project cat='kern'>
    <title>UEFI Boot</title>

    <contact>
      <person>
	<name>
	  <given>Ed</given>
	  <common>Maste</common>
	</name>
	<email>emaste@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/UEFI">Project page on the wiki</url>
    </links>

    <body>
      <p>The Unified Extensible Firmware Interface (UEFI) provides boot-
	and run-time services for x86 computers, and is a replacement
	for the legacy BIOS.  This project will adapt the &os; loader
	and kernel boot process for compatibility with UEFI firmware,
	found on contemporary servers, desktops, and laptops.</p>

      <p>Starting with &a.rpaulo;'s <tt>i386</tt> EFI loader, &a.benno;
	developed a working proof-of-concept <tt>amd64</tt> loader in 2013
	under sponsorship from the &os; Foundation.  After refinement,
	that work has now been merged from the <tt>projects/uefi</tt>
	Subversion branch into &os; <tt>head</tt>.  The project includes
	the infrastructure to build a UEFI-enabled loader, and the
	kernel-side changes to parse metadata provided by the
	loader.</p>

      <p>A number of integration tasks remain, with a plan to have UEFI
	installation and boot support merged to <tt>stable/10</tt> in
	time for &os; 10.1-RELEASE.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>

    <help>
      <task>Document manual installation, including dual-boot
	configurations.</task>

      <task>Implement chain-loading from UFS/ZFS file systems.</task>
      <task>Integrate UEFI configuration with the &os; installer.</task>
      <task>Support secure boot.</task>
    </help>
  </project>

  <project cat='team'>
    <title>&os; Cluster Administration Team</title>

    <contact>
      <person>
	<name>&os; Cluster Administration Team</name>
	<!-- email intentionally left incomplete -->
	<email>admins@</email>
      </person>
    </contact>

    <body>
      <p>The &os; Cluster Administration Team consists of the people
	responsible for administering the machines that the project
	relies on for its distributed work and communications to be
	synchronised.  In this quarter, the team has worked on the
	following:</p>

      <ul>
	<li>Assimilated master email configurations into a single source
	  control repository.</li>

	<li>Moved the &os; web server CGI services to a new location
	  (sponsored).</li>

	<li>Further enhanced upon our internal monitoring
	  utilities.</li>

	<li>Added a Russian <tt>pkg(8)</tt> mirror, hosted by
	  Yandex.</li>

	<li>Moved the &os;&nbsp;Foundation web services to a new server
	  (sponsored).</li>
      </ul>
    </body>

    <sponsor>The &os; Foundation</sponsor>
  </project>

  <project cat='ports'>
    <title>KDE/&os;</title>

    <contact>
      <person>
	<name>KDE/&os; Team</name>
	<email>kde@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://FreeBSD.kde.org">KDE/&os; Home Page</url>
      <url href="http://FreeBSD.kde.org/area51.php">area51</url>
      <url href="http://portscout.freebsd.org/kde@freebsd.org.html">PortScout Status</url>
    </links>

    <body>
      <p>KDE is an international free software community producing an
	integrated set of cross-platform applications designed to run on
	Linux, &os;, Solaris, Microsoft Windows, and OS X systems.  The
	KDE/&os; Team have continued to improve the experience of KDE
	software and Qt under &os;.</p>

      <p>During this quarter, the team has kept most of the KDE and Qt
	ports up-to-date, working on the following releases:</p>

      <ul>
	<li>KDE SC: 4.12.2, 4.12.3, and 4.12.4; Workspace: 4.11.6,
	  4.11.7, and 4.11.8</li>
	<li>Qt: 5.2.1</li>
	<li>KDevelop: 4.6.0</li>
	<li>Digikam (and KIPI-plugins): 3.5.0</li>
      </ul>

      <p>As a result &mdash; according to PortScout &mdash;
	<tt>kde@</tt> has 526 ports (up from 464), of which 98.86% are
	up-to-date (up from 88.15%).  iXsystems continues to provide a
	machine for the team to build packages and to test updates.
	They have been providing the KDE/&os; team with support for
	quite a long time and we are very grateful for that.</p>

      <p>A major change has been the depreciation of the KDE3 ports and
	the move of the <tt>KDE4_PREFIX</tt> to <tt>LOCALBASE</tt>.
	Also, work on Qt5 continues to maturity.  &a.rakuco; has been
	working with upstream to ensure Baloo (Nepomuk successor in KDE
	SC 4.13) compiles and runs on non-Linux systems.  His work not
	only benefits &os; but other BSDs and OS X.</p>

      <p>As usual, the team is always looking for more testers and
	porters, so please contact us and visit our home page (see
	links).  It would be especially useful to have more helping
	hands on tasks such as getting rid of the dependency on the
	defunct HAL project and providing integration with KDE's
	Bluedevil Bluetooth interface.</p>
    </body>

    <sponsor>iXsystems, Inc</sponsor>

    <help>
      <task>Update out-of-date ports, see PortScout for a list.</task>
      <task>Work on Qt 5.</task>

      <task>Make sure the whole KDE stack (including Qt) builds and
	works correctly with Clang and <tt>libc++</tt>.</task>
      <task>Remove the dependency on HAL.</task>
    </help>
  </project>

  <project cat='ports'>
    <title>Wine/&os;</title>

    <contact>
      <person>
	<name>
	  <given>Gerald</given>
	  <common>Pfeifer</common>
	</name>
	<email>gerald@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>David</given>
	  <common>Naylor</common>
	</name>
	<email>dbn@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://wiki.FreeBSD.org/Wine">Wine Wiki Page</url>
      <url href="http://wiki.FreeBSD.org/i386-Wine">Wine on amd64 Wiki Page</url>
      <url href="http://www.winehq.org/">Wine Home Page</url>
    </links>

    <body>
      <p>Wine is a free and open source software application that aims
	to allow applications designed for Microsoft Windows to run on
	Unix-like operating systems, such as &os;.  The Wine project has
	been in maintenance mode this quarter and has updated the ports
	for the following versions:</p>

      <ul>
	<li>Stable releases: 1.6.2</li>
	<li>Development releases: 1.7.9 through 1.7.15</li>
      </ul>

      <p>The ports have packages built for <tt>amd64</tt>, available
	through the the ports <tt>emulators/i386-wine</tt> and
	<tt>emulators/i386-wine-devel</tt>.</p>
    </body>

    <help>
      <task>See the <q>Open Tasks</q> and <q>Known Problems</q> sections
	on the Wine wiki page.</task>

      <task>&os;/<tt>amd64</tt> integration, consult the i386-Wine wiki
	page for the details.</task>

      <task>Port WoW64 and Wine64.</task>
    </help>
  </project>

  <project cat='arch'>
    <title>&os; on Chromebook</title>

    <contact>
      <person>
	<name>
	  <given>Ruslan</given>
	  <common>Bukin</common>
	</name>
	<email>br@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/FreeBSD/arm/Chromebook">Manual</url>
    </links>

    <body>
      <p>Chromebook is an ARMv7 Cortex-A15 personal computer powered by
	Samsung Exynos 5 Dual System-on-Chip.  As of the current status
	of this project, such laptop can be booted with &os; from USB
	flash &mdash; it works stable (including SMP) and it can build
	third-party applications.  Display and keyboard works.</p>

      <p>Thank &a.grehan; for providing hardware.</p>
    </body>

    <help>
      <task>Implement keyboard polling mode.</task>

      <task>Add support for the upcoming second generation of
	Chromebook.</task>

      <task>Write SD, SATA drivers.</task>
    </help>
  </project>

  <project cat='proj'>
    <title>Jenkins Continuous Integration for &os;</title>

    <contact>
      <person>
	<name>
	  <given>Craig</given>
	  <common>Rodrigues</common>
	</name>
	<email>rodrigc@FreeBSD.org</email>
      </person>

      <person>
	<name>Jenkins Administrators</name>
	<email>jenkins-admin@FreeBSD.org</email>
      </person>

      <person>
	<name>&os; Testing</name>
	<email>freebsd-testing@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://jenkins.FreeBSD.org">Jenkins CI server in &os; cluster</url>
      <url href="https://wiki.freebsd.org/Jenkins#Jenkins_for_FreeBSD_status">Jenkins on &os; project status</url>
      <url href="https://wiki.freebsd.org/Jenkins#Presentations_and_Working_Groups">Video and slides of March 13, 2014 presentation at Bay Area &os; User Group (BAFUG)</url>
      <url href="http://empt1e.blogspot.ru/2014/03/using-jenkins-libvirt-slave-plugin-with.html">Jenkins, libvirt, and bhyve</url>
      <url href="http://jenkins-ci.org">Jenkins Continuous Integration</url>
      <url href="http://www.ansible.com">Ansible</url>
    </links>

    <body>
      <p>Jenkins is a framework that is used by many companies and open
	source projects for Continuous Integration (CI).  CI allows
	developers to commit code to a Source Code Management (SCM)
	system such as Subversion, and then have automated programs
	check out, build, and test the code.  Jenkins is implemented in
	the Java language.</p>

      <p>&a.emaste; reviewed some CI work that &a.rodrigc; had done for
	the FreeNAS project with Jenkins, and encouraged him to set up
	something similar for the &os; Project.  With the help of the
	&os; Cluster Administration Team, He set up a &os; machine
	running two bhyve virtual machines,
	<tt>jenkins-9.FreeBSD.org</tt> and
	<tt>jenkins-10.FreeBSD.org</tt>.  He set up software builds of
	<tt>head</tt> and several <tt>stable</tt> branches on these
	machines.  The status of these builds is visible via a web
	interface which is accessible via <tt>jenkins.FreeBSD.org</tt>.
	When any of these builds fail, emails are sent to
	<tt>freebsd-current</tt> or <tt>freebsd-stable</tt>.  Emails are
	also sent directly to the list of people who recently committed
	code to Subversion since the last successful build.</p>

      <p>As part of the Jenkins setup, &a.rodrigc; encountered problems
	with running Java &os;&nbsp;9.2 and &os;&nbsp;10.0.  Both problems
	stemmed from changes to the &os; Virtual Memory (VM) subsystem.
	On &os; 9.2-RELEASE, running Jenkins under Java would cause the
	kernel to panic.  This was a known problem, and fixed in
	9.2.-RELEASE-p3.  On &os; 10.0-RELEASE, Java processes would
	randomly crash.  Disabling the <tt>vm.pmap.pcid_enabled</tt>
	<tt>sysctl(3)</tt> variable seemed to fix the problem.  In
	<tt>kern/187238</tt>, Henrik Gulbrandsen submitted fixes to the
	&os; VM to address this problem.  &a.kib; committed these fixes
	to <tt>head</tt>.  These fixes are being tested now.</p>

      <p>During the setup of the bhyve VM's which run Jenkins processes,
	&a.rodrigc; wrote scripts to start bhyve VM's from the
	<tt>rc.d</tt> bootup scripts, which were then published at
	GitHub.</p>

      <p>On February 19, 2014, &a.rodrigc; notified the &os; developers
	that Jenkins was running in the &os; cluster, and that they
	could look at the web interface to see the status of builds.</p>

      <p>On March 13, 2014, &a.rodrigc; gave a presentation of the
	Jenkins work at the Bay Area &os; User Group (BAFUG) in Mountain
	View, California, USA.  Video of the presentation was recorded
	and put online by iXsystems.</p>

      <p>&a.rodrigc; assembled a team of volunteers,
	<tt>jenkins-admin</tt>, to help maintain
	<tt>jenkins.FreeBSD.org</tt> and expand the use of Jenkins CI
	used in the &os; cluster.  <tt>jenkins-admin</tt> consists of
	the following people working in the following areas:</p>

      <ul>
	<li>R. Tyler Croy is both a &os; developer and a Jenkins
	  developer.  He will be working on fixing bugs in Jenkins
	  specific to &os;.  He is first looking at fixing the libpam4j
	  library which is used by Jenkins to interface with the PAM
	  system for user authentication.  The released version of
	  libpam4j does not currently work on &os;.</li>

	<li>&a.lwhsu; maintains the <tt>devel/jenkins</tt> port.  He set
	  up a Jenkins build which rans the scan-build static analyzer
	  which is part of LLVM.</li>

	<li>&a.skreuzer; has experience administering Jenkins systems.
	  He set up several builds on <tt>jenkins.FreeBSD.org</tt>,
	  including a Jenkins build of the &os; documentation.  He is
	  looking into automatic provisioning of VM's running Jenkins in
	  the &os; cluster using Ansible.</li>

	<li>&a.rodrigc; will be running a Continuous Testing working
	  group at the &os; Devsummit in Ottawa on May 15, 2014.
	  He will also give a Jenkins presentation on May 17, 2014.
	  He is interested in working with &a.jmmv; to
	  integrate Jenkins and Kyua.  They have exchanged
	  some emails about this on the <tt>freebsd-testing</tt> list.</li>

	<li>&a.swills; maintains the <tt>devel/jenkins-lts</tt> port.
	  He has implemented several builds at <tt>jenkins.FreeBSD.org</tt>
	  which detect commits to the &os; ports repository, and then
	  builds the ports tree using Poudrière.</li>
      </ul>

      <p>At the end of March, &a.novel; reported to
	<tt>jenkins-admin</tt> that he has successfully run the Jenkins
	libvirt plugin with his libvirt modifications to integrate with
	bhyve.  He provided a link to a blog posting where he described
	his experience.</p>
    </body>

    <sponsor>iXsystems, Inc</sponsor>

    <help>
      <task>Obtain certificates for LDAP and web servers, to replace
	self-signed certificates.</task>

      <task>Set up more Jenkins builds of the &os; base repository on
	different branches and with different configurations.</task>

      <task>Set up more Jenkins builds of the &os; ports repository on
	different &os; versions.</task>

      <task>Integrate with Kyua, so that Jenkins can run Kyua tests, and
	report the results directly in the native Jenkins web UI where
	test results are reported.</task>

      <task>Write scripts which can take a Jenkins build of &os;, and
	boot the results in a bhyve VM or on real hardware.</task>

      <task>Fix libpam4j on &os;.</task>
      <task>Continuous Testing working group at Devsummit on May 15, 2014</task> 
      <task>Jenkins presentation at BSDCan on May 17, 2014</task> 
    </help>
  </project>

  <project cat='kern'>
    <title>Native iSCSI Stack</title>

    <contact>
      <person>
	<name>
	  <given>Edward Tomasz</given>
	  <common>Napierała</common>
	</name>
	<email>trasz@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/Native%20iSCSI%20target"/>
    </links>

    <body>
      <p>The new &os; in-kernel iSCSI stack was functionally complete in
	&os; 10.0-RELEASE, but ongoing enhancements and bug fixes are
	being committed to &os; <tt>head</tt>, with a plan to merge them
	back to <tt>stable/10</tt> in time for &os; 10.1-RELEASE.</p>

      <p>Many issues have been resolved, including very slow operation
	with data digests enabled, bugs in persistent reservations which
	impacted Hyper-V Failover Cluster, and a negotiation problem
	affecting Dell Equallogic users.</p>

      <p>There have also been numerous enhancements, such as support for
	redirections, which are neccessary for some High Availability
	setups, and the ability to modify session parameters in the
	iscsictl utility.  Previously it was necessary to remove the
	session and add it again.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>
  </project>
</report>
