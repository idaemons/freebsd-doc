<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE report PUBLIC "-//FreeBSD//DTD FreeBSD XML Database for
  Status Report//EN"
  "http://www.FreeBSD.org/XML/share/xml/statusreport.dtd" >

<!-- $FreeBSD$ -->

<report>
  <date>
    <month>October-December</month>

    <year>2015</year>
  </date>

  <section>
    <title>Introduction</title>

    <p><strong>This is a draft of the October&ndash;December 2015
      status report.  Please check back after it is finalized, and
      an announcement email is sent to the &os;-Announce mailing
      list.</strong></p>

    <?ignore
    <p>This report covers &os;-related projects between October and
      December 2015.  This is the last of four reports planned for
      2015.</p>

    <p>The fourth quarter of 2015 was another productive quarter for
      the &os; project and community. [...]</p>

    <p>Thanks to all the reporters for the excellent work!</p>

    <p>The deadline for submissions covering the period from January
      to March 2016 is April 7, 2016.</p>
     ?>
  </section>

  <category>
    <name>team</name>

    <description>&os; Team Reports</description>
  </category>

  <category>
    <name>proj</name>

    <description>Projects</description>
  </category>

  <category>
    <name>kern</name>

    <description>Kernel</description>
  </category>

  <category>
    <name>arch</name>

    <description>Architectures</description>
  </category>

  <category>
    <name>bin</name>

    <description>Userland Programs</description>
  </category>

  <category>
    <name>ports</name>

    <description>Ports</description>
  </category>

  <category>
    <name>doc</name>

    <description>Documentation</description>
  </category>

  <category>
    <name>misc</name>

    <description>Miscellaneous</description>
  </category>

  <project cat='ports'>
    <title>Linux Kernel as a Library Added to the Ports Collection</title>

    <contact>
      <person>
	<name>
	  <given>Conrad</given>
	  <common>Meyer</common>
	</name>
	<email>cem@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/lkl/linux">Upstream LKL Github repository</url>
    </links>

    <body>
      <p>LKL (&quot;Linux Kernel as a Library&quot;) is a special
	&quot;architecture&quot; of the full Linux kernel that builds as a
	userspace library on various platforms, including &os;.  One
	application of such a library is using Linux's filesystem drivers
	to implement a FUSE backend.</p>

      <p>fusefs-lkl's <tt>lklfuse</tt> binary is such a FUSE
	filesystem.  It can mount <tt>ext4/3/2</tt>, <tt>XFS</tt>, and
	<tt>BTRFS</tt> read-write, using the native drivers from
	Linux.</p>

      <p>The <tt>sysutils/fusefs-lkl</tt> port may now be installed from
	packages or ports, providing access to these filesystems on
	&os; via FUSE.</p>
    </body>
  </project>

  <project cat='doc'>
    <title>Style(9) enhanced to allow C99 'bool'</title>

    <contact>
      <person>
	<name>
	  <given>Bruce</given>
	  <common>Evans</common>
	</name>
	<email>brde@optusnet.com.au</email>
      </person>

      <person>
	<name>
	  <given>Conrad</given>
	  <common>Meyer</common>
	</name>
	<email>cem@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://lists.FreeBSD.org/pipermail/svn-src-head/2015-December/079671.html">Bruce's email requesting bool be added to <tt>style(9)</tt></url>
      <url href="https://reviews.FreeBSD.org/D4384">Differential Revision for the change</url>
    </links>

    <body>
      <p>Use of <tt>bool</tt> is now allowed.  It was allowed
	previously, as well, but now it's <em>really</em> allowed.  Party
	like it's 1999!</p>
    </body>

    <sponsor>
      EMC / Isilon Storage Division
    </sponsor>

    <help>
      <task>
	<p>Specify <tt>style(9)</tt>'s opinion on <tt>iso646.h.</tt></p>
      </task>

      <task>
	<p>Fix <tt>intmax_t</tt> to be 128-bit on platforms where
	  <tt>__int128_t</tt> is used.</p>
      </task>
    </help>
  </project>

  <project cat='kern'>
    <title>Sysctl enhancements</title>

    <contact>
      <person>
	<name>
	  <given>Conrad</given>
	  <common>Meyer</common>
	</name>
	<email>cem@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Ravi</given>
	  <common>Pokala</common>
	</name>
	<email>rpokala@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Marcelo</given>
	  <common>Araujo</common>
	</name>
	<email>araujo@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://en.wikipedia.org/wiki/C_data_types#Fixed-width_integer_types">Wikipedia Entry on C99 Fixed-Width Integer Types</url>
      <url href="https://bugs.FreeBSD.org/bugzilla/show_bug.cgi?id=203918"><tt>sysctl(8)</tt> -t Submission PR</url>
    </links>

    <body>
      <p> This quarter, support was added for fixed-width sysctls
	(signed and unsigned 8-bit, 16-bit, 32-bit, and 64-bit integers).
	The new KPIs are documented in the <tt>sysctl(9)</tt> manual page.
	The <tt>sysctl(8)</tt> command line tool supports all of the new
	types.</p>

      <p><tt>sysctl(8)</tt> gained the '-t' flag, which prints sysctl type
	information (the original patch was submitted by Yoshihiro Ota).
	This support includes the newly added fixed-width types.</p>
    </body>

    <sponsor>
      EMC / Isilon Storage Division
    </sponsor>
  </project>

  <project cat='kern'>
    <title>ioat(4) driver enhancements</title>

    <contact>
      <person>
	<name>
	  <given>Conrad</given>
	  <common>Meyer</common>
	</name>
	<email>cem@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://en.wikipedia.org/wiki/I/O_Acceleration_Technology">Wikipedia on I/OAT</url>
      <url href="https://www.FreeBSD.org/news/status/report-2015-07-2015-09.html#ioat%284%29-Driver-Import">Last quarter's <tt>ioat(4)</tt> report</url>
    </links>

    <body>
      <p> I/OAT DMA engines are bulk memory operation offload
	engines built into some Intel Server/Storage platform
	CPUs.</p>

      <p>This quarter, several enhancements were made to the driver.
	The driver now avoids memory allocation in locked paths, which
	should avoid deadlocking in memory pressure scenarios.  Support
	for Broadwell-EP devices has been added.  The
	&quot;blockfill&quot; operation and a non-contiguous 8 KB copy
	operation have been added to the API.  The driver can recover from
	various programming errors by resetting the hardware.</p>
    </body>

    <sponsor>
      EMC / Isilon Storage Division
    </sponsor>

    <help>
      <task>
	<p>XOR and other advanced (&quot;RAID&quot;) operation support.</p>
      </task>
    </help>
  </project>

  <project cat='kern'>
    <title>ntb_hw(4)/if_ntb(4) driver synced up to Linux</title>

    <contact>
      <person>
	<name>
	  <given>Conrad</given>
	  <common>Meyer</common>
	</name>
	<email>cem@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/jonmason/ntb/wiki">Jon Mason's NTB wiki</url>
      <url href="https://www-ssl.intel.com/content/dam/www/public/us/en/documents/white-papers/xeon-c5500-c3500-non-transparent-bridge-paper.pdf">Intel NTB whitepaper</url>
    </links>

    <body>
      <p><tt>ntb_hw(4)</tt> is now up-to-date with the Linux NTB driver as
	of the work-in-progress 4.4 kernel (and actually, contains some
	fixes that haven't landed in the mainline Linux tree yet but will
	land in 4.5).  Only Back-to-back (&quot;B2B&quot;) configurations
	are supported at this time.  Going forward, newer hardware may
	only support the B2B configuration.</p>

      <p><tt>if_ntb(4)</tt> is mostly up-to-date with the Linux NTB netdevice
	driver.  Notably absent is support for changing the MTU at
	runtime.</p>
    </body>

    <sponsor>
      EMC / Isilon Storage Division
    </sponsor>

    <help>
      <task>
	<p>Improving <tt>if_ntb(4)</tt> to avoid using the entire Base
	  Address Register (BAR) when very large BAR sizes are configured
	  (e.g., 512 GB).</p>
      </task>

      <task>
	<p>Improving <tt>pmap_mapdev(9)</tt> to somehow allocate only
	  superpage mappings for large BARs, on platforms that support
	  superpages.  (NTB BARs can be as large as 512 GB.)</p>
      </task>
    </help>
  </project>

  <project cat='arch'>
    <title>&os; on newer ARM boards</title>

    <contact>
      <person>
	<name>
	  <given>John</given>
	  <common>Wehle</common>
	</name>
	<email>john@feith.com</email>
      </person>

      <person>
	<name>
	  <given>Ganbold</given>
	  <common>Tsagaankhuu</common>
	</name>
	<email>ganbold@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/FreeBSD/arm/Odroid-C1">&os; on Odroid-C1</url>
      <url href="https://svnweb.FreeBSD.org/changeset/base/291683">Commit adding glue driver</url>
    </links>

    <body>
      <p>This quarter, we made the changes necessary to support the
	Amlogic Meson Ethernet controller on the Hardkernel ODROID-C1
	board which has an Amlogic aml8726-m8b SoC.  The main effort
	needed was to write a glue driver for the Ethernet controller
	&mdash; the Amlogic Meson Ethernet controller is compatible with
	Synopsys DesignWare 10/100/1000 Ethernet MAC
	(<tt>if_dwc</tt>).</p>
    </body>
  </project>

  <project cat='kern'>
    <title>Mellanox Drivers</title>

    <contact>
      <person>
	<name>
	  <given>Hans Petter</given>
	  <common>Selasky</common>
	</name>
	<email>hselasky@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.mellanox.com/page/ethernet_cards_overview">Hardware Information</url>
      <url href="https://svnweb.FreeBSD.org/changeset/base/290650">Commit Adding the Driver</url>
    </links>

    <body>
      <p>The Mellanox &os; team is proud to announce support for the
	ConnectX-4 series of network cards in &os; 11-current and &os;
	10-stable.  These devices deliver top performance, with up to
	100GBit/s of raw transfer capacity, and support both Ethernet and
	Infiniband.  Currently, the Ethernet driver is ready for use and
	the Infiniband support for ConnectX-4 is making good progress.  We
	hope that it will be complete before &os; 11.0 is released.  For
	more technical information, refer to the <tt>mlx5en(4)</tt> manual
	page in 11-current.  The new driver for ConnectX-4 cards is called
	<tt>mlx5</tt> and is put under <tt>/sys/dev</tt> and not under
	<tt>/sys/ofed</tt> as was done for the previous
	<tt>mlx4</tt> driver.  The <tt>mlx5en(4)</tt> kernel module is
	compiled by default in GENERIC kernels.</p>
    </body>

    <sponsor>
      Mellanox Technologies
    </sponsor>
  </project>

  <project cat='doc'>
    <title>&quot;FreeBSD Mastery: Specialty Filesystems&quot; early access version now available</title>

    <contact>
      <person>
	<name>
	  <given>Michael</given>
	  <common>Lucas</common>
	</name>
	<email>mwlucas@michaelwlucas.com</email>
      </person>
    </contact>

    <links>
      <url href="https://www.michaelwlucas.com/nonfiction/fmsf">Book site</url>
      <url href="https://www.tiltedwindmillpress.com/?product=fmspf">Early access version</url>
    </links>

    <body>
      <p><u>FreeBSD Mastery: Specialty Filesystems</u> is now in
	copyediting.  The ebook should be available by the end of January
	at all major vendors, and the print in February.</p>

      <p>The book covers everything from removable media, to FUSE,
	NFSv4 ACLs, iSCSI, CIFS, and more.</p>

      <p>If you act really quickly, you can get the electronic early
	access version at a 10% discount.  You'll get the final ebook when
	it comes out as well. (This offer evaporates when the final
	version comes out.)</p>
    </body>
  </project>

  <project cat='bin'>
    <title>Updates to GDB</title>

    <contact>
      <person>
	<name>
	  <given>John</given>
	  <common>Baldwin</common>
	</name>
	<email>jhb@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/bsdjhb/gdb/tree/FreeBSD-threads">New 1:1-only thread target for &os;</url>
    </links>

    <body>
      <p>The KGDB option is now on by default in the devel/gdb
	port.</p>

      <p>The changes to support cross-debugging of crashdumps in
	libkvm were committed to HEAD in r291406.</p>

      <p>A new thread target for &os; that is suitable for merging
	upstream has been written and lightly tested.  However, it is not
	yet available as an option in the port.  This thread target uses
	<tt>ptrace(2)</tt> directly rather than <tt>libthread_db</tt> and
	as such supports threads on all ABIs (such as &os;/i386 binaries
	on &os;/amd64 and possibly Linux binaries, though that is not yet
	tested).  It also requires less-invasive changes in the MD targets
	in GDB compared to the <tt>libthread_db</tt>-based target.</p>
    </body>

    <help>
      <task>
	<p>Add a port option for the new 1:1-only thread target.</p>
      </task>

      <task>
	<p>Test the new 1:1-only thread target.</p>
      </task>

      <task>
	<p>Figure out why the powerpc kgdb targets are not able to
	  unwind the stack past the initial frame.</p>
      </task>

      <task>
	<p>Add support for more platforms (arm, mips, aarch64) to
	  upstream <tt>gdb</tt> for both userland and <tt>kgdb</tt>.</p>
      </task>

      <task>
	<p>Add support for debugging powerpc vector registers.</p>
      </task>
    </help>
  </project>

  <project cat='kern'>
    <title>iMX.6 video output support</title>

    <contact>
      <person>
	<name>
	  <given>Oleksandr</given>
	  <common>Tymoshenko</common>
	</name>
	<email>gonzo@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://svnweb.FreeBSD.org/changeset/base/292574">Commit Adding Basic Video Support</url>
    </links>

    <body>
      <p>iMX.6 is a family of SoC used in multiple hobbyist ARM
	boards such as the Hummingboard, RIoTboard, and Cubox.  Most of
	these products have HDMI output, but until recently, &os; did not
	benefit from it.  As of r292574, there is basic video output
	support so you can use the console on iMX6-based boards and
	probably run Xorg (not yet tested).</p>

      <p>Due to the lack of some kernel functionality (see open
	tasks), the only supported mode is 1024x768.</p>
    </body>

    <help>
      <task>
	<p>Proper pixel clock initialization (relies on a clock
	  framework).</p>
      </task>

      <task>
	<p>More flexible video output path (support multiple IPUs
	  and DIs).</p>
      </task>
    </help>
  </project>

  <project cat='kern'>
    <title>Touchscreen support for Raspberry Pi and Beaglebone Black</title>

    <contact>
      <person>
	<name>
	  <given>Oleksandr</given>
	  <common>Tymoshenko</common>
	</name>
	<email>gonzo@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://kernelnomicon.org/?p=534">Beaglebone Black with 4DCAPE-43T Demo</url>
      <url href="https://wiki.FreeBSD.org/201510DevSummit/GraphicsStack">Input Stack Plans</url>
      <url href="https://wiki.FreeBSD.org/SummerOfCode2014/evdev_Touchscreens">evdev Port</url>
    </links>

    <body>
      <p>There are two working proof-of-concept drivers for the
	AM335x touchscreen and for the official Raspberry Pi's touchscreen
	LCD.</p>
	
      <p>Proper touchscreen support would consist of a userland event
	reading API, a kernel event reporting API, and kernel hardware
	drivers for specific devices.  There is an ongoing effort to port
	the Linux evdev API to &os; so applications that use libraries like
	libinput or tslib could be used without any major changes.  Since
	it is not yet complete, I created a naive evdev-like API for both
	kernel and tslib and was able to run a demo on a Beaglebone Black
	with 4DCAPE-43T.</p>

      <p>Once evdev makes it into the tree, both hardware drivers
	can be modified to include &quot;report events&quot;
	portions and committed.</p>
    </body>
  </project>

  <project cat='kern'>
    <title>Kernel Vnode Cache Tuning</title>

    <contact>
      <person>
	<name>
	  <given>Kirk</given>
	  <common>McKusick</common>
	</name>
	<email>mckusick@mckusick.com</email>
      </person>

      <person>
	<name>
	  <given>Bruce</given>
	  <common>Evans</common>
	</name>
	<email>bde@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Konstantin</given>
	  <common>Belousov</common>
	</name>
	<email>kib@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Peter</given>
	  <common>Holm</common>
	</name>
	<email>pho@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Mateusz</given>
	  <common>Guzik</common>
	</name>
	<email>mjg@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://reviews.FreeBSD.org/rS292895">MFC to stable/10</url>
    </links>

    <body>
      <p>This completed project includes changes to better manage
	the vnode freelist and to streamline the allocation and freeing of
	vnodes.</p>

      <p>Vnode cache recycling was reworked to meet free and unused
	vnodes targets.  Free vnodes are rarely completely free; rather,
	they are just ones that are cheap to recycle.  Usually they are
	for files which have been stat'd but not read; these usually have
	inode and namecache data attached to them.  The free vnode target
	is the preferred minimum size of a sub-cache consisting mostly of
	such files.  The system balances the size of this sub-cache with
	its complement to try to prevent either from thrashing while the
	other is relatively inactive.  The targets express a preference
	for the best balance.</p>

      <p>&quot;Above&quot; this target there are 2 further targets
	(watermarks) related to the recyling of free vnodes.  In the
	best-operating case, the cache is exactly full, the free list has
	size between vlowat and vhiwat above the free target, and
	recycling from the free list and normal use maintains this state.
	Sometimes the free list is below vlowat or even empty, but this
	state is even better for immediate use, provided the cache is not
	full.  Otherwise, vnlru_proc() runs to reclaim enough vnodes
	(usually non-free ones) to reach one of these states.  The
	watermarks are currently hard-coded as 4% and 9% of the available
	space.  These, and the default of 25% for wantfreevnodes, are too
	large if the memory size is large.  E.g., 9% of 75% of MAXVNODES
	is more than 566000 vnodes to reclaim whenever vnlru_proc()
	becomes active.</p>

      <p>The <tt>vfs.vlru_alloc_cache_src</tt> sysctl is removed.
	New code frees namecache sources as the last chance to satisfy the
	highest watermark, instead of selecting source vnodes randomly.
	This provides good enough behaviour to keep vn_fullpath() working
	in most situations.  Filesystem layouts with deep trees, where the
	removed knob was required, is thus handled automatically.</p>

      <p>As the kernel allocates and frees vnodes, it fully
	initializes them on every allocation and fully releases them on
	every free.  These are not trivial costs: it starts by zeroing a
	large structure, then initializes a mutex, a lock manager lock, an
	rw lock, four lists, and six pointers.  Looking at
	<tt>vfs.vnodes_created</tt>, these operations are being done
	millions of times an hour on a busy machine.</p>

      <p>As a performance optimization, this code update uses the
	uma_init and uma_fini routines to do these initializations and
	cleanups only as the vnodes enter and leave the vnode zone.  With
	this change, the initializations are done <tt>kern.maxvnodes</tt>
	times at system startup, and then only rarely again.  The frees
	are done only if the vnode zone shrinks, which never happens in
	practice.  For those curious about the avoided work, look at the
	vnode_init() and vnode_fini() functions in sys/kern/vfs_subr.c to
	see the code that has been removed from the main vnode
	allocation/free path.</p>
    </body>
  </project>

  <project cat='proj'>
    <title>Improvements to QLogic HBA driver</title>

    <contact>
      <person>
	<name>
	  <given>Alexander</given>
	  <common>Motin</common>
	</name>
	<email>mav@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>The QLogic HBA driver <tt>isp(4)</tt> received a
	substantial set of changes.  Their primary goal was to make Fibre
	Channel target role work well with CTL, but many other things were
	also fixed/improved:</p>

      <ul>
	<li>Added support for modern 16Gbps 26xx FC cards.</li>

	<li>The firmware in <tt>ispfw(4)</tt> were updated to the
	  latest versions.</li>

	<li>Target role support was fixed and tested for all FC cards from
	  ancient 1Gbps 22xx to modern 16Gbps 26xx.</li>

	<li>Port database handling was unified for target and initiator
	  roles, allowing HBA port to play both roles at the same time.</li>

	<li>The maximal number of ports was increased from 256 to
	  1024.</li>

	<li>Multi-ID (NPIV) functionality was fixed/implemented, allowing
	  24xx and above cards to provide up to 255 virtual FC ports per
	  physical port.</li>

	<li>Added support for 8-byte LUNs for 24xx and above cards.</li>
      </ul>

      <p>The code is committed to &os; head and stable/10 branches.</p>
    </body>

    <sponsor>
      iXsystems, Inc.
    </sponsor>

    <help>
      <task>
	<p>NVRAM data reading is hackish and requires rework.</p>
      </task>

      <task>
	<p>FCoE support for 26xx cards was not tested yet.</p>
      </task>
    </help>
  </project>

  <project cat='proj'>
    <title>Raspberry Pi: VideoCore userland application packaging</title>

    <contact>
      <person>
	<name>
	  <given>Mika&euml;l</given>
	  <common>Urankar</common>
	</name>
	<email>mikael.urankar@gmail.com</email>
      </person>

      <person>
	<name>
	  <given>Oleksandr</given>
	  <common>Tymoshenko</common>
	</name>
	<email>gonzo@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>The Raspberry Pi SoC consists of two parts: ARM and GPU
	(VideoCore).  Many interesting features like OpenGL, video
	playback, and HDMI controls are implemented on the VideoCore side
	and can be accessed from the OS through libraries provided by
	Broadcom (userland repo).  These libraries were ported to &os;
	some time ago, so Mika&euml;l created the port
	<tt>misc/raspberrypi-userland</tt> for them.  He also created a
	port for <tt>omxplayer</tt> (a low-level video player that
	utilizes VideoCore APIs) and is working on a port for Kodi
	(ex-XBMC), a more user-firendly media player software with
	Raspberry Pi support.</p>
    </body>
  </project>

  <project cat='ports'>
    <title>LXQt on &os;</title>

    <contact>
      <person>
	<name>
	  <given>Olivier</given>
	  <common>Duchateau</common>
	</name>
	<email>olivierd@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/LXQt">&os; LXQt Project</url>
      <url href="https://www.assembla.com/spaces/lxqt/subversion/source">LXQt Devel Repository</url>
    </links>

    <body>
      <p><a href="http://lxqt.org/">LXQt</a> is the Qt port of and
	the upcoming version of LXDE, the Lightweight Desktop Environment.
	It is the product of the merge between the LXDE-Qt and the
	Razor-qt projects.</p>

      <p>The porting effort remains heavily a work in progress: it
	needs some components of Plasma 5 (the new major KDE's
	workspace).</p>

      <p>Currently, only the 0.10 branch is functional.  See our
	wiki page for a complete list of applications.</p>

      <p>We also sent updates for some components of LXDE (required
	for the LXQt desktop):</p>

      <ul>
	<li><tt>x11/menu-cache</tt> 1.0.1</li>

	<li><tt>x11/lxmenu-data</tt> 0.1.4</li>
      </ul>

      <p>Binary packages are available (only for test purposes)
	which are regularly tested with the KDE development
	repository.</p>
    </body>

    <help>
      <task>
	<p>Port libsysstat to BSD systems.</p>
      </task>

      <task>
	<p>Fix some issues that need to be resolved, especially the
	  shutdown and reboot commands.</p>
      </task>
    </help>
  </project>

  <project cat='ports'>
    <title>Node.js Modules</title>

    <contact>
      <person>
	<name>
	  <given>Olivier</given>
	  <common>Duchateau</common>
	</name>
	<email>olivierd@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://www.assembla.com/spaces/cozycloud/subversion/source">Node.js Modules Repository</url>
    </links>

    <body>
      <p>Node.js is a platform built on Chrome's JavaScript runtime
	for easily building fast, scalable network applications.  It uses
	an event-driven, non-blocking I/O model that makes it lightweight
	and efficient &mdash; perfect for data-intensive real-time applications
	that run across distributed devices.</p>

      <p>The goal of this project is to make it easy to install the
	modules available in the <a href="http://npmjs.org/">npm package
	registry</a>.</p>

      <p>Currently, the repository contains slightly fewer than 300
	new ports, in particular:</p>

      <ul>
	<li>Socket.IO (a library for realtime web applications)</li>

	<li>Jison (a JavaSript parser generator)</li>
      </ul>

      <p>We have improved the USES framework:</p>

      <ul>
	<li>Users can define which version of Node.js will be
	  installed through <tt>/etc/make.conf</tt>.</li>

	<li><tt>node-gyp</tt> is now well-integrated into the USES
	  framework, via the <strong>build</strong> argument.</li>

	<li>The <tt>pkg-plist</tt> is now automatically generated,
	  in order to make the <tt>portlint</tt> utility happy.</li>
      </ul>

      <p>Each port is up-to-date.</p>
    </body>

    <help>
      <task>
	<p>Update the pre-draft documentation.</p>
      </task>

      <task>
	<p>Bring in grunt.js (and modules), the JavaScript task runner.</p>
      </task>
    </help>
  </project>

  <project cat='ports'>
    <title>Xfce on &os;</title>

    <contact>
      <person>
	<name>&os; Xfce Team</name>
	<email>xfce@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/Xfce">&os; Xfce Project</url>
      <url href="https://www.assembla.com/spaces/xfce4/subversion/source">&os; Xfce Repository</url>
    </links>

    <body>
      <p>Xfce is a free software desktop environment for Unix and
	Unix-like platforms, such as &os;.  It aims to be fast and
	lightweight, while still being visually appealing and easy to
	use.</p>

      <p>During this quarter, the team has kept these applications
	up-to-date:</p>

      <ul>
	<li><tt>audio/xfce4-pulseaudio-plugin</tt> 0.2.4</li>
	<li><tt>multimedia/xfce4-parole</tt> 0.8.1</li>
	<li><tt>x11/xfce4-whiskermenu-plugin</tt> 1.5.2</li>
      </ul>

      <p>We also follow the unstable releases (available in our
	experimental repository) of:</p>

      <ul>
	<li><tt>x11/xfce4-dashboard</tt> 0.5.4</li>
      </ul>
    </body>

    <help>
      <task>
	<p>Propose a patch to upstreamto fix Xfdashboard with our
	  version of OpenGL (it currently coredumps).</p>
      </task>
    </help>
  </project>

  <project cat='proj'>
    <title>Supporting Variants in the Ports Framework</title>

    <contact>
      <person>
	<name>
	  <given>Brendan</given>
	  <common>Molloy</common>
	</name>
	<email>brendan+freebsd@bbqsrc.net</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/bbqsrc/poudriere/compare/master...feature/variants">Poudriere PoC with Variants</url>
      <url href="https://gist.github.com/bbqsrc/e7e3a54d84706485aa3a">Ports Makefile PoC with Examples</url>
    </links>

    <body>
      <p>I recently became involved with &os; (as in, the last 2-3
	weeks), and found myself quickly involved with Ports development.
	What quickly struck me was the difficulty in providing a Python
	package that was depended upon by multiple versions of Python.  As
	it turns out, poudriere can currently only generate one package
	per port, meaning that a Python version-neutral (compatible with
	2.x and 3.x) port cannot simultaneously be packaged for each
	variant at the same time.</p>

      <p>I discussed the issue with &a.koobs;, who suggested that I
	look into implementing a &quot;variants protocol&quot; within the
	Ports framework and the necessary changes to poudriere in order to
	allow a port to generate more than one package.</p>

      <p>Support for variants is strongly needed in Ports and
	provides significant benefits.</p>

      <ul>
	<li>It would allow Python and other languages to provide
	  packages for dependencies for multiple language versions from the
	  same port.</li>

	<li>It alleviates the need for so-called &quot;slave
	  ports&quot;, as a single port could now have multiple generated
	  packages from a single port.</li>

	<li>It would have a very small impact on the greater Ports
	  ecosystem: adding only two new variables, <tt>VARIANT</tt> and
	  <tt>VARIANTS</tt>.</li>

	<li>It would provide a more consistent approach between
	  different packaging teams for handling variations.</li>
      </ul>

      <p>For a simple example, <tt>editors/vim-lite</tt> could
	be folded into the <tt>editors/vim</tt> port, while still
	generating a <tt>vim</tt> and <tt>vim-lite</tt> package.
	For Python, <tt>VARIANTS</tt> can be derived from the already
	used <tt>USES</tt> flags and generate compatible packages.
	<tt>py27-foobar</tt> and <tt>py34-foobar</tt> could now be
	consistently generated by poudriere without issue.</p>

      <p>Fortunately, this is not a wishful thinking piece.  I dug
	in my heels and have implemented a proof-of-concept implementation
	of variants in the Ports framework, including the necessary
	modifications to poudriere in order to support it.  It was mildly
	upsetting to find that poudriere is mostly written in Bourne shell
	scripts, but press on I did nonetheless.</p>

      <p>I started with <a
	  href="https://github.com/bapt/ports-wip/compare/variants">the
	  prototype made by &a.bapt;</a> as a base, and built from there.
	The poudriere PoC aims to limit changes as much as possible to
	merely adding support for the new variants flags, while also at
	the request of &a.koobs; making the logging output more
	package-centric (as opposed to port-centric) as a result of these
	changes.</p>

      <p>This is a <strong>work in progress</strong>, and I would
	love to hear your feedback.  I've enjoyed my first few weeks
	working on &os;, and I hope to stay here for quite some time.</p>
    </body>

    <help>
      <task>
	<p>Any constructive feedback on the implementation would be
	  very welcome!</p>
      </task>

      <task>
	<p>Hopefully the code will be of sufficient quality to be considered
	  for formal review in the coming months.</p>
      </task>
    </help>
  </project>

  <project cat='ports'>
    <title>New tools to enhance the porting experience</title>

    <contact>
      <person>
      <name>
	<given>Brendan</given>
	<common>Molloy</common>
      </name>
      <email>brendan+freebsd@bbqsrc.net</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/FreeBSD/pytoport">pytoport: Generate &os; Ports from Python modules on PyPI</url>
      <url href="https://github.com/bbqsrc/bandar">bandar: Create Development Overlays for the Ports tree</url>
      <url href="https://github.com/bbqsrc/skog-python">skog: Generate Visual Dependency Trees for &os; Ports</url>
      <url href="https://github.com/bbqsrc/spdx-lookup-python">spdx-lookup: SPDX License List Query Tool</url>
    </links>

    <body>
      <p>When I starting working on ports for &os; in the last
	couple of weeks, I found that my workflow was not as efficient as
	it could be, using just the available tools, so I made a few that
	could be useful to the development community at large.  All of
	these have been added to the Ports tree, or otherwise will soon be
	added, so you can play with them today!</p>

      <p><tt>pytoport</tt> is a command-line application that
	generates a skeleton port for a given PyPI package name.  It
	attempts to generate the correct dependencies, makes a good
	attempt at guessing the license using <tt>spdx-lookup</tt>, and
	generates a <tt>pkg-descr</tt>.  This made generating the fifteen
	or so ports I was working on a complete breeze.</p>

      <p>While doing this, however, I noticed that some ports were
	bringing in dependencies that I did not expect, and I needed some
	way to visualise this.  <tt>skog</tt> builds a dependency tree
	from the depends lists output by the Ports framework, and displays
	it on the command line (with extra shiny output if you are using
	UTF-8).  No more pesky example and documentation dependencies
	being dragged in when you <em>clearly</em> toggled that
	<tt>OPTION</tt> as far off as it would go.</p>

      <p>While doing all of this, I found it cumbersome to be
	copying ports back and forth between my small development tree
	living in git and the larger upstream SVN tree I was using in
	poudriere.  I built a tool called <tt>bandar</tt> that takes
	advantage of the FUSE version of unionfs to easily overlay my dev
	tree on the upstream tree, run linting, poudriere and generate
	archives with ease.</p>

      <p>I'm very impressed with how easy it was to build more
	tooling for &os;.  I hope some of these tools will be of some use
	to you, and as always, I'd love to hear your feedback!</p>
    </body>

    <help>
      <task>
	<p>Improve skog to support searching a tree for a certain
	  port.</p>
      </task>

      <task>
	<p>Get the bandar port completed.</p>
      </task>

      <task>
	<p>Continue to improve pytoport, adding trove support and better
	  depedency handling.</p>
      </task>

      <task>
	<p>Patches welcome for all of the above!</p>
      </task>
    </help>
  </project>

  <project cat='kern'>
    <title>Out of Memory Handler Rewrite</title>

    <contact>
      <person>
	<name>
	  <given>Konstantin</given>
	  <common>Belousov</common>
	</name>
	<email>kib@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>The Out of Memory (OOM) code is intended to handle the
	situation where the system needs free memory to make progress,
	while no memory can be reused.  Most often, the situation is that
	to free memory, the system needs more free memory.  Consider a
	case where the system needs to page-out dirty pages, but needs to
	allocate structures to track the writes.  OOM &quot;solves&quot;
	the problem by killing some selection of user processes.  In other
	words, it trades away system deadlock by suffering a partial loss
	of user data.  The assumption is that it is better to kill a
	process and recover data in other processes, than lose
	everything.</p>

      <p>Free memory in the &os; Virtual Memory (VM) system appears
	from two sources.  One is the voluntary reclamation of pages used
	by a process, for example unmapping private anonymous regions, or
	the last unlink of an otherwise unreferenced file with cached
	pages.  Another source is the pagedaemon, which forcefully frees
	pages which carry data, of course, after the data is moved to some
	other storage, like swap or file blocks.  OOM is triggered when
	the pagedaemon definitely cannot free memory to satisfy the
	requests.</p>

      <p>The old criteria to trigger OOM action was a combination of
	low free swap space and a low count of free pages (the later is
	expressed precisely with the paging targets constants, but this is
	not relevant to the discussion).  That test is mostly incorrect,
	e.g., a low free page state might be caused by a greedy consumer
	allocating all pages freed by the page daemon in the current pass,
	but this does not preclude the page daemon from producing more
	pages.  Also, since page-outs are asynchronous, the previous page
	daemon pass might not immmediately produce any free pages, but
	they would appear some short time later.</p>

      <p>More seriously, low swap space does not necessarily indicate
	that we are in trouble: lots of pages may not require swap
	allocations to freed, e.g., clean pages or pages backed by files.
	The last notion is serious, since swap-less systems were
	considered as having full swap.</p>

      <p>Instead of trying to deduce the deadlock from looking at
	the current VM state, the new OOM handler tracks the history of
	page daemon passes.  Only if several consequtive passes failed to
	meet the paging target is an OOM kill considered neccessary.  The
	count of consequent failed passes was selected empirically, by
	testing on small (32M) and large (512G) machines.  Auto-tuning of
	the counter is possible, but requires some more architectural
	changes to the I/O subsystem.</p>

      <p>Another issue was identified with the algorithm which
	selects a victim process for OOM kill.  It compared the counts of
	pages mapping entries (PTEs) installed into the machine paging
	structures.  For different reasons, machine-dependent VM code
	(pmap) may remove the pte for a memory-resident page.  Under some
	circumstances, related to other measures to prevent low memory
	deadlock, very large processes which consume all system memory,
	could have few or no ptes, and the old OOM selector ignored the
	process which caused the deadlock, killing unrelated
	processes.</p>

      <p>A new function vm_pageout_oom_pagecount() was written which
	applies a reasonable heuristic to estimate the number of pages
	which would be freed by killing the given process.  This
	eliminates the effect of selecting small unrelated processes for
	OOM kill.</p>

      <p>The rewrite was committed to HEAD in r290917 and r290920.</p>
    </body>

    <sponsor>The FreeBSD Foundation</sponsor>
  </project>

  <project cat='kern'>
    <title>Chelsio iSCSI Offload Driver (Initiator and Target)</title>

    <contact>
      <person>
	<name>
	  <given>Navdeep</given>
	  <common>Parhar</common>
	</name>
	<email>navdeep@chelsio.com</email>
      </person>
    </contact>

    <links>
      <url href="https://svnweb.freebsd.org/changeset/base/292740">Commit Adding Hardware Acceleration Support</url>
    </links>

    <body>
      <p>A new driver, <tt>cxgbei</tt>, that enables hardware
	accelerated iSCSI with Chelsio's T5- and T4-based offload-capable
	cards, has been committed to HEAD.  Both Initiator and Target are
	supported.  The wire traffic is standard iSCSI (SCSI over TCP as
	per RFC 3720, etc.) so an Initiator/Target using this driver will
	interoperate with all other standards-compliant
	implementations.</p>

      <p>Hardware assistance provided by the T5 and T4 ASICs includes:</p>

      <ul>
	<li>Complete TCP processing.</li>

	<li>iSCSI PDU identification and extraction from the byte
	  oriented TCP stream.</li>

	<li>Header and/or data digest generation and
	  verification.</li>

	<li>Zero copy support for both transmit and receive.</li>
      </ul>
    </body>

    <sponsor>
      Chelsio Communications
    </sponsor>

    <help>
      <task>
	<p>The <tt>cxgbei(4)</tt> man page is missing but will be
	  committed shortly.</p>
      </task>

      <task>
	<p>The driver is in advanced stage QA and will see some
	  bugfixes and performance enhancements in the very near future.
	  MFC is possible as soon as the QA cycle completes.</p>
      </task>
    </help>
  </project>

  <project cat='proj'>
    <title>OpenBSM</title>

    <contact>
      <person>
	<name>
	  <given>Christian</given>
	  <common>Brueffer</common>
	</name>
	<email>brueffer@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Robert</given>
	  <common>Watson</common>
	</name>
	<email>rwatson@FreeBSD.org</email>
      </person>

      <person>
	<name>TrustedBSD audit mailing list</name>
	<email>trustedbsd-audit@TrustedBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.openbsm.org">OpenBSM: Open Source Basic Security Module (BSM) Audit Implementation</url>
      <url href="https://github.com/openbsm/openbsm">OpenBSM on GitHub</url>
      <url href="https://www.FreeBSD.org/doc/en_US.ISO8859-1/books/handbook/audit.html">&os; Audit Handbook Chapter</url>
    </links>

    <body>
      <p>OpenBSM is a BSD-licensed implementation of Sun's Basic
	Security Module (BSM) API and file format.  It is the user-space
	side of the CAPP Audit implementations in &os; and Mac OS X.
	Additionally, the audit trail processing tools are expected to
	work on Linux.</p>

      <p>Progress has been slow but steady this quarter, culminating
	in OpenBSM 1.2 alpha 4, the first release in three years.  It
	features various bug fixes and documentation improvements; the
	complete list of changes is documented in the <a
	  href="https://github.com/openbsm/openbsm/blob/master/NEWS">NEWS</a>
	file on GitHub.  The release was imported into &os; HEAD and
	merged to &os; 10-STABLE.  As such it will be part of &os;
	10.3-RELEASE.</p>
    </body>

    <help>
      <task>
	<p>Test the new release on different versions of &os;, Mac
	  OS X and Linux.  In particular, testing on Mac OS X 10.9 (Mavericks)
	  and newer would be greatly appreciated.</p>
      </task>

      <task>
	<p>Fix problems that have been reported via GitHub and the
	  &os; bug tracker.</p>
      </task>

      <task>
	<p>Implement features mentioned in the
	  <a href="https://github.com/openbsm/openbsm/blob/master/TODO">TODO</a>
	  list on GitHub.</p>
      </task>
    </help>
  </project>

  <project cat='arch'>
    <title>&os; on Marvell Armada38x</title>

    <contact>
      <person>
	<name>
	  <given>Marcin</given>
	  <common>Wojtas</common>
	</name>
	<email>mw@semihalf.com</email>
      </person>

      <person>
	<name>
	  <given>Michal</given>
	  <common>Stanek</common>
	</name>
	<email>mst@semihalf.com</email>
      </person>

      <person>
	<name>
	  <given>Bartosz</given>
	  <common>Szczepanek</common>
	</name>
	<email>bsz@semihalf.com</email>
      </person>

      <person>
	<name>
	  <given>Jan</given>
	  <common>Dabros</common>
	</name>
	<email>jsd@semihalf.com</email>
      </person>
    </contact>

    <body>
      <p>&os; has been ported to run on the Marvell Armada38x
	platform.  This SoC family boasts single/dual high-performance ARM
	Cortex-A9 CPUs.</p>

      <p>The multi-user SMP system is fully working and has been
	tested on Marvell DB-88F6288-GP and SolidRun ClearFog development
	boards.</p>

      <p>The root filesystem can be hosted on a USB 3.0/2.0 drive or
	via NFS using a PCIe network card.  Experimental support is
	available for on-chip Gigabit Ethernet (NETA).</p>

      <p>Additional features:</p>

      <ul>
	<li>GIC+MPIC cascaded interrupts courtesy of INTRNG</li>

	<li>CESA dual-channel cryptographic engine</li>

	<li>USB 3.0 and 2.0</li>

	<li>PCIe 2.0</li>

	<li>I2C</li>

	<li>GPIO</li>

	<li>Watchdog</li>

	<li>RTC</li>
      </ul>

      <p>The port is under community review and will be integrated
	into HEAD soon.</p>
    </body>

    <sponsor>
      Stormshield
    </sponsor>

    <sponsor>
      Semihalf
    </sponsor>

    <help>
      <task>
	<p>Optimize performance of NETA and prepare for
	  submission.</p>
      </task>
    </help>
  </project>

  <project cat='ports'>
    <title>Bringing GitLab into the Ports Collection</title>

    <contact>
      <person>
	<name>
	  <given>Torsten</given>
	  <common>Z&uuml;hlsdorff</common>
	</name>
	<email>ports@toco-domains.de</email>
      </person>
    </contact>

    <links>
      <url href="https://bugs.FreeBSD.org/bugzilla/show_bug.cgi?id=202468">PR for the new Port</url>
      <url href="https://github.com/t-zuehlsdorff/gitlabhq/blob/master/doc/install/installation-FreeBSD.md">Installation Guide</url>
      <url href="https://github.com/gitlabhq/gitlabhq/">Upstream GitLab website</url>
    </links>

    <body>
      <p>GitLab is a web-based Git repository manager with many
	features that is used by more than 100.000 organizations including
	NASA and Alibaba.  It also is a very long-standing entry on the
	&quot;Wanted Ports&quot; list of the &os; Wiki.</p>

      <p>In the last quarter, there was steady progress in the
	project itself and the porting.  The current release of GitLab 8.3
	is now based on Rails 4.2, which obsoletes the need for around 50
	new ports.  Now there are only 5 dependencies left to be
	committed!</p>

      <p>While the new version of GitLab 8.3 eases the porting,
	there are big changes between the last working port of GitLab
	7.14.  Nonetheless, it could be expected to see the next working
	port in the first quarter of 2016</p>
    </body>

    <sponsor>
      anyMOTION GRAPHICS GmbH, D&uuml;sseldorf, Germany
    </sponsor>

    <help>
      <task>
	<p>Update the patches from GitLab 7.14 to 8.3.</p>
      </task>

      <task>
	<p>Update the documentation.</p>
      </task>

      <task>
	<p>Provide an updated patch.</p>
      </task>
    </help>
  </project>

  <project cat='ports'>
    <title>IPv6 Promotion Campaign</title>

    <contact>
      <person>
	<name>
	  <given>Torsten</given>
	  <common>Z&uuml;hlsdorff</common>
	</name>
	<email>ports@toco-domains.de</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/IPv6PortsTODO" />
    </links>

    <body>
      <p>There are more and more machines on the internet that
	<strong>only</strong> support IPv6.  I manage some of them, and
	was regularly hit by missing IPv6 support when building ports.</p>

      <p>I did some research into the impact of missing IPv6 support
	on the ports tree.  The results are that 10.308 of 25.522 ports
	are not fetchable when using IPv6.  This renders &mdash; through
	dependencies &mdash; a total of 17.715 ports unbuildable from
	IPv6-only systems.  All you can do than is wait and hope that
	distcache.FreeBSD.org caches the distfile.  But this will take
	some time, which may not be a luxury available when a piece of
	software in use is hit by a security issue.</p>

      <p>Based on the research, a promotion campaign for IPv6 was
	started.  Some volunteers will contact the relevant system
	administrators and try to convince them to support IPv6.  This
	will start in January 2016 and will hopefully create some progress
	soon.</p>
    </body>
  </project>

  <project cat='ports'>
    <title>KDE on &os;</title>

    <contact>
      <person>
	<name>KDE on &os; team</name>
	<email>kde@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://FreeBSD.kde.org/">KDE on &os; website</url>
      <url href="https://FreeBSD.kde.org/area51.php">Experimental KDE ports staging area</url>
      <url href="https://wiki.FreeBSD.org/KDE">KDE on &os; Wiki</url>
      <url href="https://mail.kde.org/mailman/listinfo/kde-FreeBSD">KDE/&os; Mailing List</url>
      <url href="http://src.mouf.net/area51/log/branches/plasma5">Development Repository for Integrating KDE Frameworks 5 and Plasma 5</url>
    </links>

    <body>
      <p>The KDE on &os; team focuses on packaging and making sure
	that the experience of KDE and Qt on &os; is as good as
	possible.</p>

      <p>The team kept busy during the last quarter of 2015.  Quite
	a few big updates were committed to the ports tree, and a few more
	are being worked on in our experimental repository.</p>

      <p>As in previous quarters, we would like to thank several
	people who have contributed with machines, patches and general
	help.  Tobias Berner, &a.madpilot; (madpilot@), Adriaan de Groot, Ralf
	Nolden, &a.swills; (swills@), and &a.jpaetzel; (jpaetzel@) have been
	essential to our work.</p>

      <p>The following big updates were landed in the ports tree
	this quarter.  In many cases, we have also contributed patches to
	the upstream projects.</p>

      <ul>
	<li>CMake 3.4.0 and 3.4.1</li>

	<li>Calligra 2.9.1, the latest release of the integrated
	  work applications suite.  Calligra had last been updated in the
	  ports tree in the end of 2013!</li>

	<li>PyQt4 4.11.4, QScintilla2 2.9.1 and SIP 4.17.</li>

	<li>PyQt5 5.5.1.  Thanks to the work spearheaded by Guido
	  Falsi and Tobias Berner in the previous quarter, the PyQt5 ports
	  have finally been committed to the ports tree.  Not only was this
	  long-awaited on its own, but it also allows other ports to be
	  updated to their latest versions.</li>

	<li>QtCreator 3.5.1 and 3.6.0.</li>

	<li>A couple of Qt5 packaging bugs were fixed: it should now
	  be more straightforward to use the Qt5 ports to build software
	  outside the ports tree, and it is now possible to build ports that
	  require a C++11 compiler and Qt5 on &os; 9.x.</li>
      </ul>

      <p>Work on updating the Qt5 ports to their latest version, as
	well as porting KDE Frameworks 5 and Plasma 5 to &os;, is well
	underway in our experimental area51 repository.  At the moment, it
	contains Qt5 5.5.1, KDE Frameworks 5.17.0, Plasma 5.5.1 and KDE
	Applications 15.12.0.</p>

      <p>Users interested in testing those ports are encouraged to
	follow the instructions in
	<a href="https://FreeBSD.kde.org/area51.php">our website</a> and
	report their results to our mailing list.  Qt5 5.5.1 is in our
	&quot;qt-5.5&quot; branch, and Plasma 5 and the rest is in
	the &quot;plasma5&quot; branch (which also contains Qt 5.5.1).</p>
    </body>

    <help>
      <task>
	<p>Commit the Qt5 5.5.1 update.</p>
      </task>

      <task>
	<p>Land the KDE Frameworks 5 and Plasma 5 ports to the
	  tree.</p>
      </task>

      <task>
	<p>Investigate what needs to be done to make QtWebEngine,
	  the Chromium-based replacement for QtWebKit, work on &os;.</p>
      </task>
    </help>
  </project>

  <project cat='ports'>
    <title>Ports Collection</title>

    <contact>
      <person>
	<name>
	  <given>Frederic</given>
	  <common>Culot</common>
	</name>
	<email>portmgr-secretary@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Frederic</given>
	  <common>Culot</common>
	</name>
	<email>culot@FreeBSD.org</email>
      </person>

      <person>
	<name>&os; Ports Management Team</name>
	<email>portmgr@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.FreeBSD.org/ports/">Ports Collection Landing Page</url>
      <url href="http://www.FreeBSD.org/doc/en_US.ISO8859-1/articles/contributing-ports/">Contributor's Guide</url>
      <url href="http://portsmon.FreeBSD.org/index.html">Ports Monitoring Service</url>
      <url href="http://www.FreeBSD.org/portmgr/index.html">Ports Management Team Website</url>
      <url href="http://www.facebook.com/portmgr">Portmgr on Facebook</url>
    </links>

    <body>
      <p>As of the end of Q4 the ports tree holds a bit more
	than 25,000 ports, and the PR count is around 2,000.
	The activity on the ports tree remains steady, with
	about 7,000 commits performed by almost 120 active
	committers.</p>

      <p>On the problem reports front, figures show an
	encouraging trend, with a significant increase in the
	number of PRs fixed during Q4.  Indeed, almost 1,800
	reports were fixed, which makes an increase of about
	20% compared to Q3.</p>

      <p>In Q4 8 commit bits were taken in for safekeeping,
	following an inactivity period of more than 18 months
	(lioux, lippe, simon, jhay, max, sumikawa, alexey, sperber).
	Three new developers were granted a ports commit bit (Kenji
	Takefu, Carlos Puga Medina, and Ian Lepore), and one
	returning committer (miwi) had his commit bit reinstated.</p>

      <p>Also related to the management of ports commit bits,
	nox's grants were revoked, since the &os; developers
	learnt that Juergen Lock passed away.</p>

      <p>On the management side, no changes were made to the
	portmgr team during Q4.</p>

      <p>On QA side 33 exp-runs were performed to validate sensitive
	updates or cleanups.  Amongst those noticeable changes are
	the update to GCC 4.9, CMake to 3.4.1, PostgreSQL to 9.4, and
	ruby-gems to 2.5.0.  Some infrastructure changes included the
	usage of a WRKSRC different from WRKDIR when NO_WRKSUBDIR
	is set, the removal of bsd.cpu.mk from sys.mk, and the
	move of QT_NONSTANDARD to bsd.qt.mk.</p>
    </body>

    <help>
      <task>
	<p>We would like to remind everyone that the ports tree is
	  built and run by volunteers, and any help is greatly
	  appreciated.  While Q4 saw a significant increase in the
	  number of problem reports fixed, we encourage all ports
	  committers to have a look at the issues reported by our
	  users and try to fix as many as possible.  Many thanks to
	  all who made a contribution during Q4, and keep up the
	  good work in 2016!</p>
      </task>
    </help>
  </project>

  <project cat='team'>
    <title>Issue Tracking (Bugzilla)</title>

    <contact>
      <person>
	<name>Bugmeisters</name>
	<email>bugmeister@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Kubilay</given>
	  <common>Kocak</common>
	</name>
	<email>koobs@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Mahdi</given>
	  <common>Mokhtari</common>
	</name>
	<email>mokhi64@gmail.com</email>
      </person>
    </contact>

    <links>
      <url href="https://bugs.freebsd.org/bugzilla/">Bugzilla Home Page</url>
    </links>

    <body>
      <p>This quarter, the bugmeister team has gained a new member,
	Mahdi Mokhtari (mokhi64@gmail.com).  Mahdi has been contributing
	to the &os; Project for just over one month.  After getting
	started by creating ports for Chef-Server and MySQL 5.7 (With
	Bernard Spil's help), an introduction to to &a.koobs; led to
	guidance on appropriate projects, such as Bugzilla development,
	helping Bugmeister, the Bugzilla Triage team, Developers, and the
	Community by making issue tracking better.  This is how things are
	going so far:</p>

      <p>Issue Tracking can be either &quot;Defect Tracking for
	Systems&quot; or &quot;Bug-Tracking for Systems&quot;.  System
	Defect Tracking is to allow individual or groups of developers to
	keep track of outstanding issues in their product effectively.  We
	use Bugzilla to manage issues for the &os; project.  </p>

      <p>We are pleased to announce some developments on our issue
	management systems:</p>

      <ul>
	<li>We have made improvements to the AutoAssigner module
	  (not yet deployed) that was previousely developed by Marcus to
	  assign ports' bugs to their maintainers by default, such as:

	  <ul>
	    <li>Improvements and bugfixes to port detection in
	      the Summary: field of issues, for automatic assignment
	      to their maintainers in a better way.</li>

	    <li>Refactoring code to make future development easier
	      and faster in a more modular way.</li>
	  </ul>
	</li>

	<li>We have developed a new module (FBSDAttachment), which
	  automates setting maintainer-approval flag values on attachments
	  under most conditions.  This will improve time to resolution,
	  consistency of triage, and save manual effort on behalf of
	  triagers and maintainers.</li>

	<li>We reported and upstreamed a number of bugs in Bugzilla, working
	  with the upstream Bugzilla developers.</li>
      </ul>
    </body>

    <help>
      <task>
	<p>Major improvements to templates for usability and
	  simplicity.</p>
      </task>

      <task>
	<p>Further improvements to automation (for example,
	  additional processing of commit logs).</p>
      </task>
    </help>
  </project>

  <project cat='proj'>
    <title>Root Remount</title>

    <contact>
      <person>
	<name>
	  <given>Edward Tomasz</given>
	  <common>Napierala</common>
	</name>
	<email>trasz@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>One of the long-missing features of &os; was the ability to
	boot up with a temporary rootfs, configure the kernel to be able
	to access the real rootfs, and then replace the temporary root
	with the real one.  In Linux, this functionality is known as
	pivot_root.  The reroot projects provides similar functionality in
	a different, slightly more user-friendly way: rerooting.  Simply
	put, from the user point of view it looks like the system performs
	a partial shutdown, killing all processes and unmounting the
	rootfs, and then partial bringup, mounting the new rootfs, running
	init, and running the startup scripts as usual.</p>

      <p>The project is finished.  All the relevant code has been committed
	to &os; 11-CURRENT, and is expected to ship with &os; 11.0.</p>
    </body>

    <sponsor>
      The FreeBSD Foundation
    </sponsor>
  </project>
</report>
