<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE report PUBLIC "-//FreeBSD//DTD FreeBSD XML Database for
  Status Report//EN"
  "http://www.FreeBSD.org/XML/share/xml/statusreport.dtd" >

<!-- $FreeBSD$ -->

<report>
  <date>
    <month>October-December</month>

    <year>2015</year>
  </date>

  <section>
    <title>Introduction</title>

    <p><strong>This is a draft of the October&ndash;December 2015
      status report.  Please check back after it is finalized, and
      an announcement email is sent to the &os;-Announce mailing
      list.</strong></p>

    <?ignore
    <p>This report covers &os;-related projects between October and
      December 2015.  This is the last of four reports planned for
      2015.</p>

    <p>The fourth quarter of 2015 was another productive quarter for
      the &os; project and community. [...]</p>

    <p>Thanks to all the reporters for the excellent work!</p>

    <p>The deadline for submissions covering the period from January
      to March 2016 is April 7, 2016.</p>
     ?>
  </section>

  <category>
    <name>team</name>

    <description>&os; Team Reports</description>
  </category>

  <category>
    <name>proj</name>

    <description>Projects</description>
  </category>

  <category>
    <name>kern</name>

    <description>Kernel</description>
  </category>

  <category>
    <name>arch</name>

    <description>Architectures</description>
  </category>

  <category>
    <name>bin</name>

    <description>Userland Programs</description>
  </category>

  <category>
    <name>ports</name>

    <description>Ports</description>
  </category>

  <category>
    <name>doc</name>

    <description>Documentation</description>
  </category>

  <category>
    <name>misc</name>

    <description>Miscellaneous</description>
  </category>

  <project cat='ports'>
    <title>Linux Kernel as a Library Added to the Ports Collection</title>

    <contact>
      <person>
	<name>
	  <given>Conrad</given>
	  <common>Meyer</common>
	</name>
	<email>cem@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/lkl/linux">Upstream LKL Github repository</url>
    </links>

    <body>
      <p>LKL (&quot;Linux Kernel as a Library&quot;) is a special
	&quot;architecture&quot; of the full Linux kernel that builds as a
	userspace library on various platforms, including &os;.  One
	application of such a library is using Linux's filesystem drivers
	to implement a FUSE backend.</p>

      <p>fusefs-lkl's <tt>lklfuse</tt> binary is such a FUSE
	filesystem.  It can mount <tt>ext4/3/2</tt>, <tt>XFS</tt>, and
	<tt>BTRFS</tt> read-write, using the native drivers from
	Linux.</p>

      <p>The <tt>sysutils/fusefs-lkl</tt> port may now be installed from
	packages or ports, providing access to these filesystems on
	&os; via FUSE.</p>
    </body>
  </project>

  <project cat='doc'>
    <title>Style(9) enhanced to allow C99 'bool'</title>

    <contact>
      <person>
	<name>
	  <given>Bruce</given>
	  <common>Evans</common>
	</name>
	<email>brde@optusnet.com.au</email>
      </person>

      <person>
	<name>
	  <given>Conrad</given>
	  <common>Meyer</common>
	</name>
	<email>cem@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://lists.FreeBSD.org/pipermail/svn-src-head/2015-December/079671.html">Bruce's email requesting bool be added to <tt>style(9)</tt></url>
      <url href="https://reviews.FreeBSD.org/D4384">Differential Revision for the change</url>
    </links>

    <body>
      <p>Use of <tt>bool</tt> is now allowed.  It was allowed
	previously, as well, but now it's <em>really</em> allowed.  Party
	like it's 1999!</p>
    </body>

    <sponsor>
      EMC / Isilon Storage Division
    </sponsor>

    <help>
      <task>
	<p>Specify <tt>style(9)</tt>'s opinion on <tt>iso646.h.</tt></p>
      </task>

      <task>
	<p>Fix <tt>intmax_t</tt> to be 128-bit on platforms where
	  <tt>__int128_t</tt> is used.</p>
      </task>
    </help>
  </project>

  <project cat='kern'>
    <title>Sysctl enhancements</title>

    <contact>
      <person>
	<name>
	  <given>Conrad</given>
	  <common>Meyer</common>
	</name>
	<email>cem@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Ravi</given>
	  <common>Pokala</common>
	</name>
	<email>rpokala@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Marcelo</given>
	  <common>Araujo</common>
	</name>
	<email>araujo@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://en.wikipedia.org/wiki/C_data_types#Fixed-width_integer_types">Wikipedia Entry on C99 Fixed-Width Integer Types</url>
      <url href="https://bugs.FreeBSD.org/bugzilla/show_bug.cgi?id=203918"><tt>sysctl(8)</tt> -t Submission PR</url>
    </links>

    <body>
      <p> This quarter, support was added for fixed-width sysctls
	(signed and unsigned 8-bit, 16-bit, 32-bit, and 64-bit integers).
	The new KPIs are documented in the <tt>sysctl(9)</tt> manual page.
	The <tt>sysctl(8)</tt> command line tool supports all of the new
	types.</p>

      <p><tt>sysctl(8)</tt> gained the '-t' flag, which prints sysctl type
	information (the original patch was submitted by Yoshihiro Ota).
	This support includes the newly added fixed-width types.</p>
    </body>

    <sponsor>
      EMC / Isilon Storage Division
    </sponsor>
  </project>

  <project cat='kern'>
    <title>ioat(4) driver enhancements</title>

    <contact>
      <person>
	<name>
	  <given>Conrad</given>
	  <common>Meyer</common>
	</name>
	<email>cem@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://en.wikipedia.org/wiki/I/O_Acceleration_Technology">Wikipedia on I/OAT</url>
      <url href="https://www.FreeBSD.org/news/status/report-2015-07-2015-09.html#ioat%284%29-Driver-Import">Last quarter's <tt>ioat(4)</tt> report</url>
    </links>

    <body>
      <p> I/OAT DMA engines are bulk memory operation offload
	engines built into some Intel Server/Storage platform
	CPUs.</p>

      <p>This quarter, several enhancements were made to the driver.
	The driver now avoids memory allocation in locked paths, which
	should avoid deadlocking in memory pressure scenarios.  Support
	for Broadwell-EP devices has been added.  The
	&quot;blockfill&quot; operation and a non-contiguous 8 KB copy
	operation have been added to the API.  The driver can recover from
	various programming errors by resetting the hardware.</p>
    </body>

    <sponsor>
      EMC / Isilon Storage Division
    </sponsor>

    <help>
      <task>
	<p>XOR and other advanced (&quot;RAID&quot;) operation support.</p>
      </task>
    </help>
  </project>

  <project cat='kern'>
    <title>ntb_hw(4)/if_ntb(4) driver synced up to Linux</title>

    <contact>
      <person>
	<name>
	  <given>Conrad</given>
	  <common>Meyer</common>
	</name>
	<email>cem@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/jonmason/ntb/wiki">Jon Mason's NTB wiki</url>
      <url href="https://www-ssl.intel.com/content/dam/www/public/us/en/documents/white-papers/xeon-c5500-c3500-non-transparent-bridge-paper.pdf">Intel NTB whitepaper</url>
    </links>

    <body>
      <p><tt>ntb_hw(4)</tt> is now up-to-date with the Linux NTB driver as
	of the work-in-progress 4.4 kernel (and actually, contains some
	fixes that haven't landed in the mainline Linux tree yet but will
	land in 4.5).  Only Back-to-back (&quot;B2B&quot;) configurations
	are supported at this time.  Going forward, newer hardware may
	only support the B2B configuration.</p>

      <p><tt>if_ntb(4)</tt> is mostly up-to-date with the Linux NTB netdevice
	driver.  Notably absent is support for changing the MTU at
	runtime.</p>
    </body>

    <sponsor>
      EMC / Isilon Storage Division
    </sponsor>

    <help>
      <task>
	<p>Improving <tt>if_ntb(4)</tt> to avoid using the entire Base
	  Address Register (BAR) when very large BAR sizes are configured
	  (e.g., 512 GB).</p>
      </task>

      <task>
	<p>Improving <tt>pmap_mapdev(9)</tt> to somehow allocate only
	  superpage mappings for large BARs, on platforms that support
	  superpages.  (NTB BARs can be as large as 512 GB.)</p>
      </task>
    </help>
  </project>

  <project cat='arch'>
    <title>&os; on newer ARM boards</title>

    <contact>
      <person>
	<name>
	  <given>John</given>
	  <common>Wehle</common>
	</name>
	<email>john@feith.com</email>
      </person>

      <person>
	<name>
	  <given>Ganbold</given>
	  <common>Tsagaankhuu</common>
	</name>
	<email>ganbold@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/FreeBSD/arm/Odroid-C1">&os; on Odroid-C1</url>
      <url href="https://svnweb.FreeBSD.org/changeset/base/291683">Commit adding glue driver</url>
    </links>

    <body>
      <p>This quarter, we made the changes necessary to support the
	Amlogic Meson Ethernet controller on the Hardkernel ODROID-C1
	board which has an Amlogic aml8726-m8b SoC.  The main effort
	needed was to write a glue driver for the Ethernet controller
	&mdash; the Amlogic Meson Ethernet controller is compatible with
	Synopsys DesignWare 10/100/1000 Ethernet MAC
	(<tt>if_dwc</tt>).</p>
    </body>
  </project>

  <project cat='kern'>
    <title>Mellanox Drivers</title>

    <contact>
      <person>
	<name>
	  <given>Hans Petter</given>
	  <common>Selasky</common>
	</name>
	<email>hselasky@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.mellanox.com/page/ethernet_cards_overview">Hardware Information</url>
      <url href="https://svnweb.FreeBSD.org/changeset/base/290650">Commit Adding the Driver</url>
    </links>

    <body>
      <p>The Mellanox &os; team is proud to announce support for the
	ConnectX-4 series of network cards in &os; 11-current and &os;
	10-stable.  These devices deliver top performance, with up to
	100GBit/s of raw transfer capacity, and support both Ethernet and
	Infiniband.  Currently, the Ethernet driver is ready for use and
	the Infiniband support for ConnectX-4 is making good progress.  We
	hope that it will be complete before &os; 11.0 is released.  For
	more technical information, refer to the <tt>mlx5en(4)</tt> manual
	page in 11-current.  The new driver for ConnectX-4 cards is called
	<tt>mlx5</tt> and is put under <tt>/sys/dev</tt> and not under
	<tt>/sys/ofed</tt> as was done for the previous
	<tt>mlx4</tt> driver.  The <tt>mlx5en(4)</tt> kernel module is
	compiled by default in GENERIC kernels.</p>
    </body>

    <sponsor>
      Mellanox Technologies
    </sponsor>
  </project>

  <project cat='doc'>
    <title>&quot;FreeBSD Mastery: Specialty Filesystems&quot; early access version now available</title>

    <contact>
      <person>
	<name>
	  <given>Michael</given>
	  <common>Lucas</common>
	</name>
	<email>mwlucas@michaelwlucas.com</email>
      </person>
    </contact>

    <links>
      <url href="https://www.michaelwlucas.com/nonfiction/fmsf">Book site</url>
      <url href="https://www.tiltedwindmillpress.com/?product=fmspf">Early access version</url>
    </links>

    <body>
      <p><u>FreeBSD Mastery: Specialty Filesystems</u> is now in
	copyediting.  The ebook should be available by the end of January
	at all major vendors, and the print in February.</p>

      <p>The book covers everything from removable media, to FUSE,
	NFSv4 ACLs, iSCSI, CIFS, and more.</p>

      <p>If you act really quickly, you can get the electronic early
	access version at a 10% discount.  You'll get the final ebook when
	it comes out as well. (This offer evaporates when the final
	version comes out.)</p>
    </body>
  </project>

  <project cat='bin'>
    <title>Updates to GDB</title>

    <contact>
      <person>
	<name>
	  <given>John</given>
	  <common>Baldwin</common>
	</name>
	<email>jhb@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/bsdjhb/gdb/tree/FreeBSD-threads">New 1:1-only thread target for &os;</url>
    </links>

    <body>
      <p>The KGDB option is now on by default in the devel/gdb
	port.</p>

      <p>The changes to support cross-debugging of crashdumps in
	libkvm were committed to HEAD in r291406.</p>

      <p>A new thread target for &os; that is suitable for merging
	upstream has been written and lightly tested.  However, it is not
	yet available as an option in the port.  This thread target uses
	<tt>ptrace(2)</tt> directly rather than <tt>libthread_db</tt> and
	as such supports threads on all ABIs (such as &os;/i386 binaries
	on &os;/amd64 and possibly Linux binaries, though that is not yet
	tested).  It also requires less-invasive changes in the MD targets
	in GDB compared to the <tt>libthread_db</tt>-based target.</p>
    </body>

    <help>
      <task>
	<p>Add a port option for the new 1:1-only thread target.</p>
      </task>

      <task>
	<p>Test the new 1:1-only thread target.</p>
      </task>

      <task>
	<p>Figure out why the powerpc kgdb targets are not able to
	  unwind the stack past the initial frame.</p>
      </task>

      <task>
	<p>Add support for more platforms (arm, mips, aarch64) to
	  upstream <tt>gdb</tt> for both userland and <tt>kgdb</tt>.</p>
      </task>

      <task>
	<p>Add support for debugging powerpc vector registers.</p>
      </task>
    </help>
  </project>

  <project cat='kern'>
    <title>iMX.6 video output support</title>

    <contact>
      <person>
	<name>
	  <given>Oleksandr</given>
	  <common>Tymoshenko</common>
	</name>
	<email>gonzo@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://svnweb.FreeBSD.org/changeset/base/292574">Commit Adding Basic Video Support</url>
    </links>

    <body>
      <p>iMX.6 is a family of SoC used in multiple hobbyist ARM
	boards such as the Hummingboard, RIoTboard, and Cubox.  Most of
	these products have HDMI output, but until recently, &os; did not
	benefit from it.  As of r292574, there is basic video output
	support so you can use the console on iMX6-based boards and
	probably run Xorg (not yet tested).</p>

      <p>Due to the lack of some kernel functionality (see open
	tasks), the only supported mode is 1024x768.</p>
    </body>

    <help>
      <task>
	<p>Proper pixel clock initialization (relies on a clock
	  framework).</p>
      </task>

      <task>
	<p>More flexible video output path (support multiple IPUs
	  and DIs).</p>
      </task>
    </help>
  </project>

  <project cat='kern'>
    <title>Touchscreen support for Raspberry Pi and Beaglebone Black</title>

    <contact>
      <person>
	<name>
	  <given>Oleksandr</given>
	  <common>Tymoshenko</common>
	</name>
	<email>gonzo@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://kernelnomicon.org/?p=534">Beaglebone Black with 4DCAPE-43T Demo</url>
      <url href="https://wiki.FreeBSD.org/201510DevSummit/GraphicsStack">Input Stack Plans</url>
      <url href="https://wiki.FreeBSD.org/SummerOfCode2014/evdev_Touchscreens">evdev Port</url>
    </links>

    <body>
      <p>There are two working proof-of-concept drivers for the
	AM335x touchscreen and for the official Raspberry Pi's touchscreen
	LCD.</p>
	
      <p>Proper touchscreen support would consist of a userland event
	reading API, a kernel event reporting API, and kernel hardware
	drivers for specific devices.  There is an ongoing effort to port
	the Linux evdev API to &os; so applications that use libraries like
	libinput or tslib could be used without any major changes.  Since
	it is not yet complete, I created a naive evdev-like API for both
	kernel and tslib and was able to run a demo on a Beaglebone Black
	with 4DCAPE-43T.</p>

      <p>Once evdev makes it into the tree, both hardware drivers
	can be modified to include &quot;report events&quot;
	portions and committed.</p>
    </body>
  </project>

  <project cat='kern'>
    <title>Kernel Vnode Cache Tuning</title>

    <contact>
      <person>
	<name>
	  <given>Kirk</given>
	  <common>McKusick</common>
	</name>
	<email>mckusick@mckusick.com</email>
      </person>

      <person>
	<name>
	  <given>Bruce</given>
	  <common>Evans</common>
	</name>
	<email>bde@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Konstantin</given>
	  <common>Belousov</common>
	</name>
	<email>kib@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Peter</given>
	  <common>Holm</common>
	</name>
	<email>pho@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Mateusz</given>
	  <common>Guzik</common>
	</name>
	<email>mjg@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://reviews.FreeBSD.org/rS292895">MFC to stable/10</url>
    </links>

    <body>
      <p>This completed project includes changes to better manage
	the vnode freelist and to streamline the allocation and freeing of
	vnodes.</p>

      <p>Vnode cache recycling was reworked to meet free and unused
	vnodes targets.  Free vnodes are rarely completely free; rather,
	they are just ones that are cheap to recycle.  Usually they are
	for files which have been stat'd but not read; these usually have
	inode and namecache data attached to them.  The free vnode target
	is the preferred minimum size of a sub-cache consisting mostly of
	such files.  The system balances the size of this sub-cache with
	its complement to try to prevent either from thrashing while the
	other is relatively inactive.  The targets express a preference
	for the best balance.</p>

      <p>&quot;Above&quot; this target there are 2 further targets
	(watermarks) related to the recyling of free vnodes.  In the
	best-operating case, the cache is exactly full, the free list has
	size between vlowat and vhiwat above the free target, and
	recycling from the free list and normal use maintains this state.
	Sometimes the free list is below vlowat or even empty, but this
	state is even better for immediate use, provided the cache is not
	full.  Otherwise, vnlru_proc() runs to reclaim enough vnodes
	(usually non-free ones) to reach one of these states.  The
	watermarks are currently hard-coded as 4% and 9% of the available
	space.  These, and the default of 25% for wantfreevnodes, are too
	large if the memory size is large.  E.g., 9% of 75% of MAXVNODES
	is more than 566000 vnodes to reclaim whenever vnlru_proc()
	becomes active.</p>

      <p>The <tt>vfs.vlru_alloc_cache_src</tt> sysctl is removed.
	New code frees namecache sources as the last chance to satisfy the
	highest watermark, instead of selecting source vnodes randomly.
	This provides good enough behaviour to keep vn_fullpath() working
	in most situations.  Filesystem layouts with deep trees, where the
	removed knob was required, is thus handled automatically.</p>

      <p>As the kernel allocates and frees vnodes, it fully
	initializes them on every allocation and fully releases them on
	every free.  These are not trivial costs: it starts by zeroing a
	large structure, then initializes a mutex, a lock manager lock, an
	rw lock, four lists, and six pointers.  Looking at
	<tt>vfs.vnodes_created</tt>, these operations are being done
	millions of times an hour on a busy machine.</p>

      <p>As a performance optimization, this code update uses the
	uma_init and uma_fini routines to do these initializations and
	cleanups only as the vnodes enter and leave the vnode zone.  With
	this change, the initializations are done <tt>kern.maxvnodes</tt>
	times at system startup, and then only rarely again.  The frees
	are done only if the vnode zone shrinks, which never happens in
	practice.  For those curious about the avoided work, look at the
	vnode_init() and vnode_fini() functions in sys/kern/vfs_subr.c to
	see the code that has been removed from the main vnode
	allocation/free path.</p>
    </body>
  </project>

  <project cat='proj'>
    <title>Improvements to QLogic HBA driver</title>

    <contact>
      <person>
	<name>
	  <given>Alexander</given>
	  <common>Motin</common>
	</name>
	<email>mav@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>The QLogic HBA driver <tt>isp(4)</tt> received a
	substantial set of changes.  Their primary goal was to make Fibre
	Channel target role work well with CTL, but many other things were
	also fixed/improved:</p>

      <ul>
	<li>Added support for modern 16Gbps 26xx FC cards.</li>

	<li>The firmware in <tt>ispfw(4)</tt> were updated to the
	  latest versions.</li>

	<li>Target role support was fixed and tested for all FC cards from
	  ancient 1Gbps 22xx to modern 16Gbps 26xx.</li>

	<li>Port database handling was unified for target and initiator
	  roles, allowing HBA port to play both roles at the same time.</li>

	<li>The maximal number of ports was increased from 256 to
	  1024.</li>

	<li>Multi-ID (NPIV) functionality was fixed/implemented, allowing
	  24xx and above cards to provide up to 255 virtual FC ports per
	  physical port.</li>

	<li>Added support for 8-byte LUNs for 24xx and above cards.</li>
      </ul>

      <p>The code is committed to &os; head and stable/10 branches.</p>
    </body>

    <sponsor>
      iXsystems, Inc.
    </sponsor>

    <help>
      <task>
	<p>NVRAM data reading is hackish and requires rework.</p>
      </task>

      <task>
	<p>FCoE support for 26xx cards was not tested yet.</p>
      </task>
    </help>
  </project>
</report>
