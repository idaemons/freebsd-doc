<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE report PUBLIC "-//FreeBSD//DTD FreeBSD XML Database for
  Status Report//EN"
  "http://www.FreeBSD.org/XML/share/xml/statusreport.dtd" >

<!-- $FreeBSD$ -->

<report>
  <date>
    <month>January-March</month>

    <year>2016</year>
  </date>

  <section>
    <title>Introduction</title>

    <p><strong>This is a draft of the January&ndash;March 2016
      status report.  Please check back after it is finalized, and
      an announcement email is sent to the &os;-Announce mailing
      list.</strong></p>

    <?ignore
    <p>This report covers &os;-related projects between January and
      March 2016.  This is the first of four reports planned for
      2016.</p>

    <p>The first quarter of 2016 was another productive quarter for
      the &os; project and community.  [...]</p>

    <p>Thanks to all the reporters for the excellent work!</p>

    <p>The deadline for submissions covering the period from April
      to June 2016 is July 7, 2016.</p>
    ?>
  </section>

  <category>
    <name>team</name>

    <description>&os; Team Reports</description>
  </category>

  <category>
    <name>proj</name>

    <description>Projects</description>
  </category>

  <category>
    <name>kern</name>

    <description>Kernel</description>
  </category>

  <category>
    <name>arch</name>

    <description>Architectures</description>
  </category>

  <category>
    <name>bin</name>

    <description>Userland Programs</description>
  </category>

  <category>
    <name>ports</name>

    <description>Ports</description>
  </category>

  <category>
    <name>doc</name>

    <description>Documentation</description>
  </category>

  <category>
    <name>misc</name>

    <description>Miscellaneous</description>
  </category>

  <project cat='kern'>
    <title>Static Analysis of the &os; Kernel with PVS Studio</title>

    <icon>kern64x64.png</icon>

    <contact>
      <person>
	<name>
	  <given>Warren</given>
	  <common>Block</common>
	</name>
	<email>wblock@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.viva64.com/en/b/0377/">PVS-Studio delved into the FreeBSD kernel</url>
      <url href="https://reviews.freebsd.org/D5245">PVS Static Analysis Phabricator Review</url>
    </links>

    <body>
      <p>In February, Program Verification Systems used their
	PVS-Studio tool to run a static analysis of the &os; kernel.
	A Phabricator review was created to allow developers to share
	comments on the results.  A number of bugs ranging from
	trivial typos to redundant code to important logic errors were
	found and fixed.  Some results were false positives.  Several
	of these were addressed by changing code that misled the
	static analyzer and could also mislead a human reader.</p>

      <p>The cooperation that Program Verification Systems offers to
	open-source projects like &os; benefits everyone.  We thank
	them for sharing this analysis and their insights with us.</p>
    </body>
  </project>

  <project cat='doc'>
    <title>Spanish FAQ and Chinese Porter&rsquo;s Handbook
      Translations</title>

    <icon>doc-mid.jpg</icon>

    <contact>
      <person>
	<name>
	  <given>Federico</given>
	  <common>Caminiti</common>
	</name>
	<email>demian.fc@gmail.com</email>
      </person>

      <person>
	<name>
	  <given>Carlos</given>
	  <common>J Puga Medina</common>
	</name>
	<email>cpm@fbsd.es</email>
      </person>

      <person>
	<name>
	  <given>Ruey-Cherng</given>
	  <common>Yu</common>
	</name>
	<email>raycherng@gmail.com</email>
      </person>

      <person>
	<name>
	  <given>Warren</given>
	  <common>Block</common>
	</name>
	<email>wblock@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://www.freebsd.org/doc/es_ES.ISO8859-1/books/faq/">Preguntas Frecuentes para FreeBSD 9.X y 10.X</url>
      <url href="https://www.freebsd.org/doc/zh_TW.UTF-8/books/porters-handbook/">FreeBSD Porter 手冊</url>
      <url href="https://lists.freebsd.org/pipermail/freebsd-translators/">&os; Translators Mailing List</url>
      <url href="https://www.freebsd.org/doc/en_US.ISO8859-1/books/fdp-primer/po-translations.html">PO Translations</url>
      <url href="https://www.freebsd.org/doc/en_US.ISO8859-1/books/fdp-primer/">&os; Documentation Project Primer for New Contributors</url>
    </links>

    <body>
      <p>Federico Caminiti created an entirely new Spanish translation
	of the 31,000-word
	<a href="https://www.freebsd.org/doc/en_US.ISO8859-1/books/faq/">FAQ</a>
	with editorial help from Carlos J Puga Medina.</p>

      <p>This landmark accomplishment marks the first use of the new
	PO translation system to translate an entire book!</p>

      <p>Ruey-Cherng Yu has begun an ambitious Chinese translation
	(zh_TW) of the 64,000-word
	<a href="https://www.freebsd.org/doc/en_US.ISO8859-1/books/porters-handbook/">Porter's Handbook</a>.
	About half of the strings in the book have been translated so
	far.</p>
    </body>

    <help>
      <task>
	<p>Help add and improve translations of &os; documents into
	  Spanish:
	  <a href="https://lists.freebsd.org/pipermail/freebsd-translators/2016-March/000113.html">start of <tt>freebsd-translators</tt> thread</a>.</p>
      </task>

      <task>
	<p>Help add and improve translations of &os; documents into
	  Chinese or other languages.</p>
      </task>
    </help>
  </project>

  <project cat='kern'>
    <title>NFS Server</title>

    <contact>
      <person>
	<name>
	  <given>Rick</given>
	  <common>Macklem</common>
	</name>
	<email>rmacklem@FreeBSD.org</email>
      </person>
    </contact>


    <body>
      <p>A new <tt>-manage-gids</tt> option was added to the
	<tt>nfsuserd</tt> daemon.  This option tells the NFS server to
	use the list of groups for a uid on the server and not the
	list of groups in the NFS RPC request.  Use of this option
	avoids the 16 group limit for NFS RPCs using AUTH_SYS (the
	default).</p>

      <p>Work is ongoing with respect to development of pNFS support
	for the NFS server using GlusterFS as a back end.  This will
	be a long term project with the eventual goal of allowing the
	NFS server to scale beyond a single server system.  Hopefully
	it will be available for testing in late Spring 2016.  pNFS
	allows a NFSv4.1 client to do reads/writes directly to a data
	server and not the NFS server.</p>
    </body>

    <help>
      <task>
	<p>Development of the pNFS server will be in need of testing
	  or it will never progress to a near production status.  I
	  hope to have code available in FreeBSD's subversion projects
	  branch for testing in late spring 2016.</p>
      </task>
    </help>
  </project>

  <project cat='arch'>
    <title><tt>powerpcspe</tt> Target</title>

    <contact>
      <person>
	<name>
	  <given>Justin</given>
	  <common>Hibbits</common>
	</name>
	<email>jhibbits@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://svnweb.freebsd.org/base/projects/powerpcspe/">Source tree</url>
    </links>

    <body>
      <p>The purpose of this is to enable use of the Signal Processing
	Engine found in the NXP/Freescale e500v2 SoC.  The SPE uses
	opcodes overlapping with Altivec, so is mutually exclusive.
	Additionally, the e500v2 does not have a traditional FPU, and
	instead uses the SPE for all floating point operations (or
	emulation as is currently done).  Combined with the fact that
	the SPE ABI is incompatible with traditional ABI, a new
	MACHINE_ARCH is created to address this.</p>

      <p>A project branch has been created with the work.  A
	powerpcspe kernel boots on the RouterBoard RB800, and base
	utilities run properly.</p>
    </body>

    <help>
      <task>
	<p>Potentially optimizing <tt>setjmp</tt>/<tt>longjmp</tt> to
	  not use SPE unless it has already been enabled.  This would
	  save the kernel switch for processes that do not otherwise
	  use the SPE.  This is a low priority task which may not be
	  completed.</p>
      </task>
    </help>
  </project>

  <project cat="proj">
    <title>The Graphics Stack on FreeBSD</title>

    <contact>
      <person>
	<name>
	  <common>FreeBSD Graphics team</common>
	</name>
	<email>freebsd-x11@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/Graphics">Graphics stack roadmap and supported hardware matrix</url>
      <url href="https://github.com/freebsd/freebsd-ports-graphics">Ports development tree on GitHub</url>
      <url href="https://fosdem.org/2016/schedule/event/freebsd_graphic_stack/">FreeBSD Graphics Team at FOSDEM 2016</url>
      <url href="https://wiki.freebsd.org/SummerOfCodeIdeas#Devices_management:_link_.2Fdev_entries_to_sysctl_nodes">GSoC 2016: link /dev entries to sysctl nodes</url>
      <url href="https://wiki.freebsd.org/SummerOfCodeIdeas#Devices_management:_redesign_and_rewrite_libdevq">GSoC 2016: redesign libdevq</url>
    </links>

    <body>
      <p>The major news for this quarter is the update of the i915
	driver in the kernel!  The driver now matches Linux 3.8.13, so
	it includes initial Haswell support.  Linux 3.8 is already
	three years old, but work continues to upgrade DRM further.
	In particular, the move to <tt>linuxkpi</tt> was started.</p>

      <p>In the Ports tree, Mesa was updated to 11.1.2. The next minor
	release, 11.2.0, is ready for testing in our development tree.
	We also updated libclc to 0.2.0.20151006, a library used by
	Mesa to provide OpenCL support. Upstream patches were added
	to beignet so all these ports now use the same LLVM version.</p>

      <p>We attended FOSDEM 2016 in Brussels.  Jean-Sébastien Pédron
	gave a talk to explain the work of the graphics team and show
	how people can contribute.  It was well received and the
	presentation was followed by interesting discussions.  FOSDEM
	was also a nice occasion to meet and talk again to the nice
	"upstream" developers of the graphics stack.</p>

      <p>For the first year, we added two ideas for GSoC 2016: one for
	a kernel task, one to redesign <tt>libdevq</tt>.  Six students
	submitted a proposal for those two ideas, that was unexpected!
	We now need to decide which one we want to mentor and the
	choice is difficult.</p>

      <p>The blog is still down.  We started to work on a replacement.
	We will probably go with a static generated website hosted on
	GitHub pages.</p>
    </body>

    <help>
      <task>
	<p>See the "Graphics" wiki page for up-to-date
	  information.</p>
      </task>
    </help>
  </project>

  <project cat='kern'>
    <title>ARM Allwinner SoC Support</title>

    <contact>
      <person>
	<name>
	  <given>Jared</given>
	  <common>McNeill</common>
	</name>
	<email>jmcneill@freebsd.org</email>
      </person>

      <person>
	<name>
	  <given>Emmanuel</given>
	  <common>Vadot</common>
	</name>
	<email>manu@bidouilliste.com</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/FreeBSD/arm/Allwinner">Allwinner FreeBSD Wiki</url>
    </links>

    <body>
      <p>Allwinner SoC are used in multiple hobbyist devboards and
	single board computers.  Recently, support for these SoC have
	received a lot of updates</p>

      <p>Task done during first quarter :</p>

      <ul>
	<li>I2C</li>
	<li>HDMI output</li>
	<li>Basic AXP209 support (Power Management Unit)</li>
	<li>Switch to upstream DTS for most boards</li>
	<li>Basic Support for A31/A31S SoC</li>
	<li>RTC</li>
	<li>Proper Pinmux/GPIO support</li>
	<li>Audio Codec / Audio HDMI</li>
	<li>A10/A20 DMA support</li>
	<li>A20 now uses the GIC (General Interrupt Controller)</li>
	<li>A20 now uses the ARM Generic Timer</li>
      </ul>

      <p>Ongoing task :</p>

      <ul>
	<li>Switch to new clock framework
	  <a href="https://reviews.freebsd.org/D5752">(In review)</a></li>

	<li>Convert A10 interrupt controller to INTRNG
	  <a href="https://reviews.freebsd.org/D5573">(In review)</a></li>

	<li>OHCI support
	  <a href="https://reviews.freebsd.org/D5481">(In review)</a></li>

	<li>Generic ALLWINNER kernel config file
	  <a href="https://reviews.freebsd.org/D5580">(In review)</a></li>

	<li>A20/A31 NMI support
	  <a href="https://reviews.freebsd.org/D5663">(In review)</a></li>

	<li>USB OTG</li>

	<li>Finish the switch to upstream DTS</li>

	<li>A83T SoC Support</li>

	<li>H3 SoC Support</li>
      </ul>
    </body>

    <help>
      <task>
	<p>SPI driver</p>
      </task>

      <task>
	<p>LCD Support</p>
      </task>

      <task>
	<p>Any unsupported hardware device that might be of
	  interest.</p>
      </task>
    </help>
  </project>

  <project cat='docs'>
    <title>New "FreeBSD Mastery" Books</title>

    <contact>
      <person>
	<name>
	  <given>Michael</given>
	  <common>Lucas</common>
	</name>
	<email>mwlucas@michaelwlucas.com</email>
      </person>
    </contact>

    <links>
      <url href="https://www.michaelwlucas.com/nonfiction/fmsf">FreeBSD Mastery: Specialty Filesystems</url>
    </links>

    <body>
      <p><a href="https://www.michaelwlucas.com/nonfiction/fmsf">FreeBSD Mastery: Specialty Filesystems</a>
	is now available everywhere, in print and ebook.</p>

      <p>Lucas and Allan Jude have also finished writing "FreeBSD
	Mastery: Advanced ZFS."  It is in copyedit now, and should be
	available before May 2016.  Check
	<a href="zfsbook.com">zfsbook.com</a> for details.</p>

      <p>Lucas' next book, "PAM Mastery," has a whole bunch of FreeBSD
	content in it.</p>
    </body>

    <help>
      <task>
	<p>Make grammar corrections to Advanced ZFS, get it in
	  print.</p>
      </task>
    </help>
  </project>

  <project cat='arch'>
    <title>FreeBSD on Cavium ThunderX (arm64)</title>

    <contact>
      <person>
	<name>
	  <given>Dominik</given>
	  <common>Ermel</common>
	</name>
	<email>der@semihalf.com</email>
      </person>

      <person>
	<name>
	  <given>Wojciech</given>
	  <common>Macek</common>
	</name>
	<email>wma@semihalf.com</email>
      </person>

      <person>
	<name>
	  <given>Zbigniew</given>
	  <common>Bodek</common>
	</name>
	<email>zbb@semihalf.com</email>
      </person>
    </contact>


    <body>
      <p>Since the last report &os; support for ThunderX has been
	significantly improved and stabilized.  Semihalf contributions
	include the following items:</p>

      <ul>
	<li>Support for the newest ThunderX chip revisions (Pass 2.0)
	  and current Cavium firmware.  Backward compatibility is
	  maintained.</li>

	<li>Moved to using <tt>pci_host_generic.c</tt> as a main
	  driver for the internal PCIe bridge.  Significant rework of
	  PCIe code to support both generic and ThunderX based
	  platforms.</li>

	<li> Serious networking performance boost and bug fixes: </li>
	  <ul>
	    <li>Fixed race condition on Rx path causing very rare
	      ‘use after free’ issue</li>

	    <li>Hardware L3 and L4 checksums support</li>

	    <li>Hardware assisted TCP Segmentation Offloading
	      (TSO)</li>

	    <li>Support for software Large Receive Offload (LRO)</li>

	    <li>Various improvements to Tx and Rx paths and
	      configuration</li>
	  </ul>
      </ul>

      <p>The driver supports all available Ethernet connections (1,
	10, 30 Gbps) and system can saturate 10 Gbps link (on Tx)
	using 4 CPU cores.</p>

      <ul>
	<li>Significantly improved overall I/O performance:</li>
	<ul>
	  <li>Complete rework of <tt>copyin</tt>/<tt>copyout</tt> and
	    <tt>bzero</tt> functionalities</li>
	</ul>

	<li>Other improvements:</li>
	  <ul>
	    <li>Support for interrupt to CPU binding (including
	      GICv3/ITS backends)</li>
	  </ul>
      </ul>

      <p>This work is integrated to the FreeBSD HEAD on an on-going
	basis.</p>
    </body>

    <sponsor>
      Cavium
    </sponsor>

    <sponsor>
      Semihalf
    </sponsor>

    <help>
      <task>
	<p>Support for multi Queue Set operation in VNIC</p>
      </task>
    </help>
  </project>

  <project cat='bin'>
    <title>Updates to GDB</title>

    <contact>
      <person>
	<name>
	  <given>John</given>
	  <common>Baldwin</common>
	</name>
	<email>jhb@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>The new thread target that directly uses <tt>ptrace(2)</tt>
	was committed upstream and included in GDB 7.11.  The port was
	also updated to GDB 7.11.</p>
    </body>

    <help>
      <task>
	<p>Figure out why the powerpc kgdb targets are not able to
	  unwind the stack past the initial frame.</p>
      </task>

      <task>
	<p>Add support for more platforms (arm, mips, aarch64) to
	  upstream gdb for both userland and kgdb.</p>
      </task>

      <task>
	<p>Add support for debugging powerpc vector registers.</p>
      </task>

      <task>
	<p>Add support for catching system calls.</p>
      </task>

      <task>
	<p>Add support for <tt>&dollar;_siginfo</tt>.</p>
      </task>

      <task>
	<p>Add support for ELF auxv data via <tt>info auxv</tt>.</p>
      </task>

      <task>
	<p>Implement <tt>info os</tt> commands.</p>
      </task>

      <task>
	<p>Implement <tt>gdbserver</tt> for FreeBSD.</p>
      </task>
    </help>
  </project>

  <project cat='bin'>
    <title>Native PCI-express HotPlug</title>

    <contact>
      <person>
	<name>
	  <given>John</given>
	  <common>Baldwin</common>
	</name>
	<email>jhb@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://github.com/bsdjhb/freebsd/tree/pci_hp">Native PCI-express HotPlug support</url>
    </links>

    <body>
      <p>A new implementation for support of native PCI-express
	hotplug is present at the URL above.  Much of the new code
	lives in the PCI-PCI bridge driver to handle hotplug events
	and manage the PCI-express slot registers.  Additional changes
	in the branch include adding new <tt>rescan</tt> and
	<tt>delete</tt> commands to <tt>devctl(8)</tt> as well as
	support for rescanning PCI busses.</p>

      <p>The current implementation has been tested on systems with
	ExpressCard but could use additional testing, especially on
	systems with other PCI-express HotPlug features such as
	mechanical latches, attention buttons, indicators, and so
	on.</p>
    </body>

    <help>
      <task>
	<p>Split branch into separate logical changes as commit
	  candidates.</p>
      </task>

      <task>
	<p>Additional testing.</p>
      </task>
    </help>
  </project>

  <project cat='ports'>
    <title>KDE on FreeBSD</title>

    <contact>
      <person>
	<name>KDE on FreeBSD team</name>
	<email>kde@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://freebsd.kde.org/">KDE on FreeBSD website</url>
      <url href="https://freebsd.kde.org/area51.php">Experimental KDE ports staging area</url>
      <url href="https://wiki.FreeBSD.org/KDE">KDE on FreeBSD wiki</url>
      <url href="https://mail.kde.org/mailman/listinfo/kde-freebsd">KDE/FreeBSD mailing list</url>
      <url href="http://src.mouf.net/area51/log/branches/plasma5">Development repository for integrating KDE Frameworks 5 and Plasma 5</url>
    </links>

    <body>
      <p>The KDE on FreeBSD team focuses on packaging and making sure
	that the experience of KDE and Qt on FreeBSD is as good as
	possible.</p>

      <p>While the list of updates is shorter than that for the
	previous quarter, the team remained busy and work on KDE
	Frameworks 5 and Plasma 5 continues.</p>

      <p>Tobias Berner, who has been driving our KDE
	Frameworks 5 and Plasma 5 efforts from the beginning, received
	a KDE commit bit, and has been putting it to good use by
	upstreaming FreeBSD across several KDE repositories.  Another
	team highlight in the beginning of this year is the
	(re)addition of another committer to our experimental
	repository: Adriaan de Groot, a longtime KDE contributor who
	also used to work on KDE and FreeBSD almost a decade ago when
	our team was first formed.  Welcome back, Ade!</p>

      <p>The following big updates were landed in the ports tree this
	quarter.  In many cases, we have also contributed patches to
	the upstream projects.</p>

      <ul>
	<li>CMake 3.4.2 and 3.5.0</li>

	<li>Calligra 2.9.11, the latest release of the integrated work
	  applications suite.  We have managed to keep in sync with
	  the upstream releases since 2.9.10.</li>

	<li>KDE Telepathy was updated to 0.9.0 and Telepathy-Qt4 was
	  updated to 0.9.6.1, the latest upstream releases.</li>

	<li>The Qt 5 ports were finally updated to 5.5.1, which were
	  the latest stable version at the time.</li>

	<li>The first commit preparing the groundwork for KDE
	  Frameworks 5 and Plasma 5
	  <a href="https://svnweb.freebsd.org/changeset/ports/411156">was
	    landed to the ports tree</a>.</li>
      </ul>

      <p>Work on Qt 5.6.0 is
	under way in our experimental repositories.  At
	the time of writing, it also contains KDE Frameworks 5.20.0,
	Plasma 5.6.1, and KDE Applications 16.03.80.</p>

      <p>Users interested in testing those ports are encouraged to
	follow the instructions in
	<a href="https://freebsd.kde.org/area51.php">our website</a>
	and report their results to our mailing list.  Qt5 5.6.0 is in
	our <tt>qt-5.6</tt> branch, and Plasma 5 and the rest is in
	the <tt>plasma5</tt> branch.</p>
    </body>

    <help>
      <task>
	<p>Land the KDE Frameworks 5 and Plasma 5 ports to the
	  tree.</p>
      </task>

      <task>
	<p>Commit the DigiKam 4.14.0 update currently being worked on
	  in our experimental repository.</p>
      </task>
    </help>
  </project>

  <project cat='proj'>
    <title>Process-Shared Locks for <tt>libthr</tt></title>

    <contact>
      <person>
	<name>
	  <given>Konstantin</given>
	  <common>Belousov</common>
	</name>

	<email>kib@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>POSIX specifies several kinds of pthread locks, for this
	report the private and process-shared variants are considered.
	Private locks can be used only by the threads of the same
	process, which share the address space.  Process-shared locks
	can be used by threads from any process, assuming the process
	can map the lock memory into its address space.</p>

      <p>Our libthr, the library implementing the POSIX threads and
	locking operations, uses a pointer as the internal
	representation behind a lock.  The pointer contains the
	address of the actual structure carrying the lock.  This has
	unfortunate consequences for implementing the
	<tt>PTHREAD_PROCESS_SHARED</tt> attribute for locks, since
	really only the pointer is shared when the lock is mapped into
	distinct address spaces.</p>

      <p>A common opinion was that we have no choice but to break the
	libthr Application Binary Interface (ABI) by changing the lock
	types to be the actual lock structures (and padding for future
	ABI extension).  This is very painful for users, as our
	previous experience with non-versioned libc and libc_r
	shown.</p>

      <p>Instead, I proposed and implemented a scheme where
	process-shared locks can be implemented without breaking the
	ABI.  The lock memory is used as a key into the system-global
	hash of the shared memory objects (off-pages), which carry the
	real lock structures.</p>

      <p>New umtx operations to create or look up the shared object,
	by the memory key, were added.  Libthr is modified to lookup
	the object and use it for shared locks, instead of using
	malloc() as for private locks.</p>

      <p>The pointer value in the user-visible lock type contains a
	canary for shared locks.  Libthr detects the canary and
	switches into the shared-lock mode.</p>

      <p>The proposal of inlining the lock structures, besides the
	drawbacks of breaking ABI, has its merits.  Most important,
	the inlining avoids the need of indirection.  Another
	important advantage over the off-page page approach is that no
	off-page object needs to be maintained, and the lifecycle of
	the shared lock naturally finishes with the destruction of the
	shared memory, without explicit cleanup.  Right now, off-pages
	hook into vm object termination to avoid leakage, but long
	liviness of the vnode vm object prolonges the off-page
	existence for shared locks backed by files, however unlikely
	they may be.</p>

      <p>Libthr with inlined locks become informally known as libthr2
	project, since the library name better be changed instead of
	only bumping the library version.  The rtld should ensure that
	libthr and libthr2 do not become simultaneously loaded into a
	single address space.</p>
    </body>

    <sponsor>The FreeBSD Foundation</sponsor>

    <help>
      <task>
	<p>Implement robust mutexes.</p>
      </task>

      <task>
	<p>Evaluate and implement libthr2.</p>
      </task>
    </help>
  </project>

  <project cat='team'>
    <title>Clusteradm</title>

    <contact>
      <person>
	<email>clusteradm@freebsd.org</email>
      </person>
    </contact>


    <body>
      <p>
	<ul>
	  <li>migrated services out of the hosting space in ISC
	    (peter, sbruno)</li>

	  <li>begun migration of services into RootBSD hosting space
	    (peter, sbruno)</li>

	  <li>collaborated with phabricator admin team to migrate to
	    new and improved host in NYI. (AllanJude, peter,
	    sbruno)</li>

	  <li>installed new and beefier Jenkins machine(gnn, lwshu,
	    sbruno)</li>

	  <li>still looking for more Asian mirrors for pkg,svn,ftp
	    (Japan, India). (sbruno)</li>

	  <li>migration of Taiwanese mirror to new location completed.
	    (lwshu)</li>

	  <li>clang/llvm buildbbot now hosted in the FreeBSD cluster
	    at NYI (sbruno, emaste)</li>

	  <li>resolved UK mirror outage with Bytemark (gavin,
	    peter)</li>
	</ul></p>
    </body>
  </project>

  <project cat='ports'>
    <title>Obsoleting Rails 3</title>

    <contact>
      <person>
	<name>
	  <given>Torsten</given>
	  <common>Zühlsdorff</common>
	</name>
	<email>ports@toco-domains.de</email>
      </person>
    </contact>


    <body>
      <p>Ruby on Rails is the base for most of the rubygems in the
	portstree.  Currently version 3.2 and 4.2 coexists, but since
	Rails 3.2 runs out of support, the time has come to
	switch.</p>

      <p>There is an ongoing progress to remove Rails 3.2 from the
	ports tree.  While many gems already work with the new
	version, there are some exceptions.  For example www/redmine
	needs a big update (which is currently tested) because it
	depends on gems which therefore depends on Rails 3.2.</p>

      <p>If you want to help porting or testing, feel free to contact
	me or the mailinglist <tt>ruby@FreeBSD.org</tt>.</p>
    </body>
  </project>

  <project cat='ports'>
    <title>GitLab Port</title>

    <contact>
      <person>
	<name>
	  <given>Torsten</given>
	  <common>Zühlsdorff</common>
	</name>
	<email>ports@toco-domains.de</email>
      </person>
    </contact>


    <body>
      <p>After nearly a year of work on this project, GitLab 8.5.5 was
	committed into the ports tree.  A big thanks to the enormous
	number of people involved! Since GitLab is a fast moving
	project, there is also ongoing work to stay in sync with
	upstream.  Have fun!</p>
    </body>
  </project>

  <project cat='misc'>
    <title>FreeBSD Build</title>

    <contact>
      <person>
	<name>
	  <given>Bryan</given>
	  <common>Drewery</common>
	</name>
	<email>bdrewery@FreeBSD.org</email>
      </person>
    </contact>


    <body>
      <p>Build improvements for buildworld on <em>head</em> continue.
	Some highlights include:</p>

      <ul>
	<li><tt>WITH_FAST_DEPEND</tt> was made default in r296668 and
	  later made the only option in r297434.  The new depend code
	  avoids a <tt>make depend</tt> tree walk and generates
	  <tt>.depend</tt> files during build as a side-effect of
	  compiling.  This is using the <tt>-MF</tt> flags of the
	  compiler.  This speeds up the build by 15-35%.</li>

	<li><a href="http://bugs.freebsd.org/196193">PR 196193</a>:
	  <tt>WITHOUT_CROSS_COMPILER</tt> was fixed to properly use
	  <tt>--sysroot</tt> which allows the option to work in more
	  cases.  It is still unsafe when major compiler upgrades
	  occur.  Further work is planned to improve that still.</li>

	<li><tt>WITHOUT_TOOLCHAIN</tt> now properly builds.</li>
      </ul>
    </body>

    <sponsor>
      EMC / Isilon Storage Division
    </sponsor>

    <help>
      <task>
	<p>Opportunistically skipping the bootstrap compiler phase of
	  buildworld.</p>
      </task>

      <task>
	<p>Skipping the <tt>make obj</tt> tree walk.</p>
      </task>

      <task>
	<p>Enabling <tt>WITH_META_MODE</tt> in buildworld to provide a
	  reliable incremental build using <tt>filemon(4)</tt> and
	  <tt>bmake</tt>'s <tt>.MAKE.MODE=meta</tt>.  This should not
	  be confused with <tt>WITH_DIRDEPS_BUILD</tt> which
	  previously was named <tt>WITH_META_MODE</tt> and is a
	  drastically different build system presented at BSDCan 2014
	  by Simon Gerraty.</p>
      </task>
    </help>
  </project>

  <project cat='kern'>
    <title>Filemon Performance/Stability Improvements</title>

    <contact>
      <person>
	<name>
	  <given>Bryan</given>
	  <common>Drewery</common>
	</name>
	<email>bdrewery@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Mateusz</given>
	  <common>Guzik</common>
	</name>
	<email>mjg@FreeBSD.org</email>
      </person>
    </contact>


    <body>
      <p>Filemon is a kernel module for tracing which files a command
	creates, reads, writes, or executes.  It allows tracking build
	dependencies in combination with <tt>bmake</tt>'s meta mode.
	<tt>bmake</tt> stores filemon's output in a <tt>.meta</tt>
	file along with the build command and later uses this to
	trigger a rebuild of the target if any of the files referenced
	are missing or modified or if the build command changes.  It
	provides the same functionality as compiler <tt>-MF</tt> flags
	but for everything.  It will be critical for buildworld's
	<tt>WITH_META_MODE</tt> (which is the normal buildworld but
	just using filemon) to provide a reliable incremental build
	without even the need of <tt>.depend</tt> files or compiler
	<tt>-MF</tt> flags.  This allows <tt>-DNO_CLEAN</tt> to work
	all of the time.</p>

      <p>Filemon on -HEAD was improved for stability and performance
	over this quarter.  It no longer causes every syscall it hooks
	into to loop on processes looking for a matching filemon
	struct.  It now just attaches directly to the struct proc with
	its own pointer.  This improves performance by reducing lock
	contention during a build.  Much other work went into
	improving error handling and other stability issues in the
	module as well.</p>

      <p>All of this work was done by Bryan Drewery, sponsored by EMC,
	but much help and identification of bugs was provided by
	Mateusz Guzik.</p>
    </body>

    <sponsor>
      EMC / Isilon Storage Division
    </sponsor>

    <help>
      <task>
	<p>Improving credential handling</p>
      </task>

      <task>
	<p>Improving EVENTHANDLER performance</p>
      </task>

      <task>
	<p>Possibly providing a framework for syscallenter/syscallret
	  hooking to avoid the need to hook syscalls as Filemon
	  does.</p>
      </task>
    </help>
  </project>

  <project cat='arch'>
    <title>AmigaOne X5000 Support</title>

    <contact>
      <person>
	<name>
	  <given>Justin</given>
	  <common>Hibbits</common>
	</name>
	<email>jhibbits@freebsd.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.amigaos.net/hardware/133/amigaone-x5000" />
    </links>

    <body>
      <p>A continuation of the Book-E QorIQ support enhancements by
	Semihalf dating back to 2012.</p>

      <p>The AmigaOne X5000 series of AmigaOS compatible systems uses
	the Freescale QorIQ series of SoCs for a desktop-class form
	factor.  The work here entails adding support for the e5500
	core itself, in addition to support for the SoC
	peripherals.</p>

      <p>Currently most code is checked in to enable basic support:
	dTSEC (ethernet), core support (e500mc, e5500).  As part of
	this, <tt>rman</tt>, the kernel resource manager, was enhanced
	to use <tt>uintmax_t</tt> for resources.  This allows devices
	to be physically above the 4GB boundary on 32-bit systems.
	With a statically compiled device tree, it boots to multiuser
	mode with nfsroot, and can be used as normal (serial and SSH
	logins once configured).</p>
    </body>

    <sponsor>
      Alex Perez (Inertial Computing)
    </sponsor>

    <help>
      <task>
	<p>eSDHC driver: Work has been started on this, hijacking the
	  <tt>imx_sdhc.c</tt> from Ian Lepore, but there are still
	  bugs: missing DMA from the iMX driver, and odd timeouts
	  after the system starts up.</p>
      </task>

      <task>
	<p>SATA support: There is a WIP driver for the SATA
	  controller, but it is currently very slow, about 11MB/s on a
	  SATA 2 link.  It currently relies on a 10ms delay on every
	  SATA transaction for it to be even somewhat
	  stable.  Without this delay, the disk scan never works and I
	  have not yet figured out why.</p>
      </task>

      <task>
	<p>Local console (VGA) support: It currently boots with a
	  serial console.  vgapci0 is seen if there is a PCIe graphics
	  card, but <tt>vt(4)</tt> does not attach to it yet.</p>
      </task>

      <task>
	<p>64-bit support: The CPU on the board is a P5020, a 64-bit
	  e5500 dual-core SoC.  Currently, booke support in FreeBSD is
	  32-bit only.</p>
      </task>

      <task>
	<p>SMP: SMP support on Book-E hardware is currently
	  broken.</p>
      </task>

      <task>
	<p>U-boot support: Currently this uses a compiled-in device
	  tree, but it would be preferable to use the device
	  tree provided by u-boot, or at least the Linux-compatible
	  device tree.</p>
      </task>

      <task>
	<p>More work is needed on the DPAA front (Datapath
	  Acceleration Architecture) to improve the Ethernet driver
	  and utilize the SEC engine for crypto, <tt>random(4)</tt>,
	  and IPSec.</p>
      </task>
    </help>
  </project>

  <project cat='docs'>
    <title>The FreeBSD German Documentation Project</title>

    <contact>
      <person>
	<name>
	  <given>Björn</given>
	  <common>Heidotting</common>
	</name>
	<email>bhd@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Benedict</given>
	  <common>Reuschling</common>
	</name>
	<email>bcr@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Johann</given>
	  <common>Kois</common>
	</name>
	<email>jkois@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://people.freebsd.org/~jkois/FreeBSDde/de/">Homepage of the FreeBSD German Documentation Project</url>
    </links>

    <body>
      <p>The FreeBSD German Documentation Project translates FreeBSD's
	documentation (handbook, articles, website, etc.) into the
	German language.</p>

      <p>Due to the tireless effort of Björn Heidotting, we made huge
	improvements in catching up with the translation of the German
	handbook.  Benedict helped with reviewing the changes using
	FreeBSD's review system Phabricator, which helped a lot.  We
	now have the following handbook chapters in sync with the
	latest version in the English tree:</p>

      <ul>
	<li>filesystems</li>

	<li>kernelconfig</li>

	<li>ports</li>

	<li>x11</li>
      </ul>

      <p>We try to keep up the good work, while also looking at new
	ways to translate like the PO/gettext-based system.  We are
	always looking for volunteers who are interested in
	translating small sections or even entire documents.  The
	process is relatively easy and contributors do not have to
	know much to get started.  The members of the FreeBSD German
	Documentation Team are also willing to mentor people who are
	interested in helping out.</p>
    </body>

    <help>
      <task>
	<p>Translate more documents.</p>
      </task>
    </help>
  </project>

  <project cat='bin'>
    <title>ELF Tool Chain Tools</title>

    <contact>
      <person>
	<name>
	  <given>Ed</given>
	  <common>Maste</common>
	</name>
	<email>emaste@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://elftoolchain.sourceforge.net">ELF Tool Chain web site</url>
    </links>

    <body>
      <p>The ELF Tool Chain project provides BSD-licensed
	implementations of compilation tools and libraries for
	building and analyzing ELF objects.  The project began as part
	of &os; but later became an independent project to encourage
	wider participation from others in the open-source developer
	community.</p>

      <p>The ELF Tool Chain project released version 0.7.1 in
	February.  We have been tracking snapshots of the upstream
	repository in &os; and are not blocked waiting for releases to
	update.  Having an official release brings the benefit of
	broader testing and visibility within other open source
	projects.</p>

      <p>In the first quarter of 2016 The ELF Tool Chain tools were
	updated to a snapshot of upstream SVN revision 3400, which
	is close to the 0.7.1 release.  Additional bug fixes were
	committed to FreeBSD and subsequently merged into the upstream
	repository.</p>

      <p>ELF Tool Chain's <tt>elfcopy(1)</tt> is now installed as
	<tt>objcopy(1)</tt> by default as it is a viable replacement
	for the base system and ports tree.</p>

      <p>Significant improvements were made to the
	<tt>elfcopy(1)</tt>, <tt>readelf(1)</tt>, and
	<tt>elfdump(1)</tt> tools, including better MIPS, RISC-V, and
	AArch64 support.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>

    <help>
      <task>
	<p>Fix issues found by fuzzing inputs to the tools.</p>
      </task>

      <task>
	<p>Add automatic support for separate debug files.</p>
      </task>

      <task>
	<p>Investigate replacement objdump, ld and as
	  implementations.</p>
      </task>
    </help>
  </project>

  <project cat='kern'>
    <title>Infiniband</title>

    <contact>
      <person>
	<name>
	  <given>Hans Petter</given>
	  <common>Selasky</common>
	</name>
	<email>hselasky@freebsd.org</email>
      </person>
    </contact>

    <links>
      <url href="https://lists.freebsd.org/pipermail/freebsd-infiniband/2016-March/000190.html">Call for testing</url>
    </links>

    <body>
      <p>Mellanox is working on a big infiniband update towards
	Mellanox OFED v3.2 of the infiniband stack in &os;.  The
	updates include both userland and kernel.
	Infiniband patches for &os; are available in the link above
	which can be downloaded and applied to a recent &os;-head
	checkout.</p>
    </body>

    <sponsor>
      Mellanox Technologies
    </sponsor>

  </project>

  <project cat='kern'>
    <title>FreeBSD Integration Services (BIS)</title>

    <contact>
      <person>
	<name>
	  <given>Sepherosa</given>
	  <common>Ziehau</common>
	</name>
	<email>sepherosa@gmail.com</email>
      </person>

      <person>
	<name>
	  <given>Howard</given>
	  <common>Su</common>
	</name>
	<email>howard0su@gmail.com</email>
      </person>

      <person>
	<name>
	  <given>Hongjiang</given>
	  <common>Zhang</common>
	</name>
	<email>honzhan@microsoft.com</email>
      </person>

      <person>
	<name>
	  <given>Dexuan</given>
	  <common>Cui</common>
	</name>
	<email>decui@microsoft.com</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/HyperV">FreeBSD Virtual Machines on Microsoft Hyper-V</url>
      <url href="https://technet.microsoft.com/en-us/library/dn531030.aspx">Supported Linux and FreeBSD virtual machines for Hyper-V on Windows</url>
    </links>

    <body>
      <p>When &os; virtual machines (VMs) run on Hyper-V, using
	Hyper-V synthetic devices is recommended to get the best
	network and storage performance and make full use of all the
	benefits that Hyper-V provides.  The collection of drivers
	that are required to use Hyper-V synthetic devices in FreeBSD
	are known as FreeBSD Integration Services (BIS).  Some of the
	BIS drivers (like network and storage drivers) have existed in
	FreeBSD 9.x and 10.x for years, but there are still some
	performance and stability issues and bugs.  Compared with
	Windows and Linux VMs, the current BIS lacks some useful
	features, e.g., live virtual machine backup, TRIM/Unmap, the
	support for UEFI VM (boot from UEFI), etc.</p>

      <p>During the past quarter, we made a great progress on the
	performance tuning for Hyper-V network driver.  We also
	refactored and cleaned up the VMBus driver, and fixed some
	important bugs.  All the work makes FreeBSD VMs run even
	better on Hyper-V and the Hyper-V based cloud platform
	Azure!</p>

      <p>Our work during 2016Q1 is documented below:</p>

      <p>Optimizing the performance of Hyper-V network driver</p>

      <ul>
	<li>We added the LRO (Large Receive Offloading) support to the
	  driver and properly handled the ACK packets.  This
	  effectively reduced the CPU cycles used in the TCP/IP stack
	  and dramatically boosted the network performance!</li>

	<li>We enabled the vRSS (virtual Receive Side Scaling) support
	  for the driver.  This greatly improved the network
	  performance for SMP virtual machine (VM).</li>

	<li>We used a separate Tx kernel thread to relieve the Rx
	  thread of transmitting packets (the Rx thread tried to
	  transmit packets after receiving ACKs), so the Rx thread can
	  receive packets and send ACKs faster.</li>

	<li>Now we can reach a VM-to-VM throughput of 9.1Gbps on a
	  host with 10Gbps physical NIC, and over 20Gbps on a host
	  with 40Gbps NIC, and meanwhile the CPUs still have plenty of
	  cycles for applications.</li>

	<li>We also enabled IP header checksum offloading, and RX
	  checksum offloading for UDP.</li>

	<li>Further performance tuning is working in progress.</li>
      </ul>

      <p>Refactoring and Cleaning up the VMBus driver code</p>

      <ul>
	<li>Instead of using swi threads directly, now we use per-CPU
	  taskqueue_create_fast() threads for event and message
	  handling, making the code more FreeBSD conventional.</li>

	<li>Made a lot of cleanup to the hv_utils code (HeartBeat,
	  TimeSync and Shutdown) and we are further cleaning up the
	  KVP code.</li>

	<li>Used a new message/interrupt slot for Hyper-V timer, so
	  the handling of timer and non-timer messages can be
	  distinguished, fixing a potential issue.</li>

	<li>Instead of finding an available IDT vector by hacking,
	  we are changing to use the normal method, that is,
	  <tt>lapic_ipi_alloc()</tt>.</li>

	<li>We are modularizing the Hyper-V modules: 1) they will be
	  loaded in the loader; 2) we are going to enhance
	  <tt>devd(8)</tt> to improve the hot plug case.</li>
      </ul>

      <p>Bug Fixing</p>

      <ul>
	<li>Fixed the "spurious multiple disks" issue (PR 206630 ???
	  FreeBSD 10.2 on Windows 10 and 2016 server may not boot due
	  to multiple invalid disks issue) in the Hyper-V storage
	  driver and now FreeBSD VM can reliably boot on Win10 and
	  2016 hosts.</li>

	<li>Fixed the OACTIVE issue (PR 207297 - [Hyper-V] FreeBSD
	  10.2 on hyperv lost network under heavy load for
	  OACTIVE).</li>

	<li>Fixed TSC calibration issue (PR 208238 - [Hyper-V] TSC
	  frequency is not correctly detected: "calcru: runtime went
	  backwards") and we will not see the "runtime went backwards"
	  messages any more!</li>

	<li>Fixed the "very slow terminal" issue of 11-CURRENT by
	  enabling text mode when we are running on hypervisors.</li>

	<li>Fixed the "unknown dhcp option value 0xf5" issue in
	  <tt>dhclient(8)</tt> by asking <tt>dhclient(8)</tt> to
	  ignore the option and &os; VM on Azure can reliably get IP
	  now.</li>
      </ul>

      <p>Found a workaround for PR 20824 ([Hyper-V] VM network may not
	work over virtual switch based on wireless NIC): add
	"net.link.ether.inet.max_age=60" in /etc/sysctl.conf.</p>

      <p>We plan to add support for live virtual machine backup,
	TRIM/Unmap, and UEFI VMs (Hyper-V Generation-2 VMs).</p>

      <p>We published errata (FreeBSD-EN-16:04.hyperv,
	FreeBSD-EN-16:05.hv_netvsc) with the Release Engineering team,
	so 10.1 and 10.2 users can easily get the fixes of KVP and TCP
	checksum by upgrading the system.</p>

      <p>We published BIS test cases for Hyper-V on github:
	https://github.com/FreeBSDonHyper-V/Test-BIS and we are going
	to publish the test cases for Azure soon.</p>
    </body>

    <sponsor>
      Microsoft
    </sponsor>

  </project>

  <project cat='ports'>
    <title>Ports Collection</title>

    <contact>
      <person>
	<name>
	  <given>Frederic</given>
	  <common>Culot</common>
	</name>
	<email>portmgr-secretary@FreeBSD.org</email>
      </person>

      <person>
	<name>&os; Ports Management Team</name>
	<email>portmgr@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.FreeBSD.org/ports/" />
      <url href="http://www.freebsd.org/doc/en_US.ISO8859-1/articles/contributing-ports/" />
      <url href="http://portsmon.freebsd.org/index.html" />
      <url href="http://www.freebsd.org/portmgr/index.html" />
      <url href="http://www.facebook.com/portmgr" />
    </links>

    <body>
      <p>As of the end of Q1, the ports tree holds a bit more
	than 25,000 ports, and the PR count is below 1,900.  The
	activity on the ports tree remains steady, with almost 7,000
	commits performed by around 120 active committers.</p>

      <p>On the problem reports front, the encouraging trend
	observed during the previous quarter is confirmed, with again
	a significant increase in the number of PRs fixed during Q1.
	Indeed, almost 2,400 reports were fixed, which allows us to go
	below the threshold value of 2,000 open PRs.</p>

      <p>In Q1, three commit bits were taken in for safekeeping,
	following an inactivity period of more than 18 months (milki,
	brian), or on committer's request (mmoll).  We had one
	returning committer (fluffy) who had his commit bit
	reinstated.  Two new developers were granted a ports commit
	bit (Olivier Cochard-Labbe and Christoph Moench-Tegeder).</p>

      <p>On the management side, we had the pleasure to welcome miwi
	back to the portmgr team.</p>

      <p>On the QA side, 39 exp-runs were performed to validate
	sensitive updates or cleanups.  The most noticeable change
	might be the removal of the now unneeded
	<tt>&dollar;{PORTSDIR}</tt> when specifying dependencies in
	Makefiles (see the <tt>/usr/ports/CHANGES</tt> entry dated
	20160402).  Amongst other noticeable changes are the update to
	ruby 2.3, ruby-gems to 2.5.1, CMake to 3.5.0, clang to
	3.8.0-r258968, Qt5 to 5.5.1, Gnome to 3.18, boost to 1.60.0,
	the update of libc++ in base to 3.8.0 release, and the
	enabling of LLVM libunwind by default on x86.  The CentOS
	ports were also updated.  Some infrastructure changes included
	the switch from <tt>bsd.gnome.mk</tt> and <tt>bsd.mate.mk</tt>
	to the simpler <tt>Uses/gnome.mk</tt> and
	<tt>Uses/mate.mk</tt>.  Some work was also done to improve
	poudriere builds by reducing dependency calculation and
	general overheads.</p>
    </body>

    <help>
      <task>
	<p>We would like to remind everyone that the ports tree is
	  built and run by volunteers, and any help is greatly
	  appreciated.  A great amount of effort was spent on the
	  ports front in Q1, which allowed us to decrease the number
	  of pending problem reports significantly, as well as on the
	  ports infrastructure.  Many thanks to all who
	  contributed!</p>
      </task>
    </help>
  </project>

  <project cat='proj'>
    <title>Address Space Layout Randomization</title>

    <contact>
      <person>
	<name>
	  <given>Konstantin</given>
	  <common>Belousov</common>
	</name>
	<email>kib@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Ed</given>
	  <common>Maste</common>
	</name>
	<email>emaste@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://kib.kiev.ua/kib/aslr">Patch home.</url>
    </links>

    <body>
      <p>I wrote a small and straightforward yet feature-packed patch
	to implement ASLR for &os; available for broader testing.</p>

      <p>With this change, randomization is applied to all non-fixed
	mappings.  By randomization I mean the base address for the
	mapping is selected with a guaranteed amount of entropy
	(bits).  If the mapping was requested to be superpage aligned,
	the randomization honours the superpage attributes.</p>

      <p>The randomization is done on a best-effort basis - that is,
	the allocator falls back to a first fit strategy if
	fragmentation prevents entropy injection.  It is trivial to
	implement a strong mode where failure to guarantee the
	requested amount of entropy results in mapping request
	failure, but I do not consider that to be usable.</p>

      <p>I have not fine-tuned the amount of entropy injected right
	now.  It is only a quantitive change that will not change the
	implementation.  The current amount is controlled by
	aslr_pages_rnd.</p>

      <p>To not spoil coalescing optimizations, to reduce the page
	table fragmentation inherent to ASLR, and to keep the
	transient superpage promotion for the malloced memory, the
	locality is implemented for anonymous private mappings, which
	are automatically grouped until fragmentation kicks in.  The
	initial location for the anon group range is, of course,
	randomized.  After some additional tuning, the measures
	appeared to be quite effective.  In particular, very
	address-space hungry build of PyPy 5.0 on i386 successfully
	finished with the most aggressive functionality of the patch
	activated.</p>

      <p>The default mode keeps the sbrk area unpopulated by other
	mappings, but this can be turned off, which gives much more
	breathing bits on the small AS architectures (funny that
	32bits is considered small).  This is tied with the question
	of following an application's hint about the <tt>mmap(2)</tt>
	base address.  Testing shows that ignoring the hint does not
	affect the function of common applications, but I would expect
	more demanding code could break.  By default sbrk is preserved
	and mmap hints are satisfied, which can be changed by using
	the kern.elf{32,64}.aslr_care_sbrk sysctl (currently enabled
	by default for wider testing).</p>

      <p>Stack gap, W^X, shared page randomization, KASLR and other
	techniques are explicitly out of scope of this work.</p>

      <p>The paxtest results for the run with the previous version 5
	of the patch applied and aggresively tuned can be seen at the
	https://www.kib.kiev.ua/kib/aslr/paxtest.log .  For
	comparison, the run on Fedora 23 on the same machine is at
	https://www.kib.kiev.ua/kib/aslr/fedora.log .</p>

      <p>ASLR is enabled on per-ABI basis, and currently it is only
	enabled on native i386 and amd64 (including compat 32bit) and
	ARMv6 ABIs.  I expect to test and enable ASLR for arm64 as
	well, later.</p>

      <p>The <tt>procctl(2)</tt> control for ASLR is implemented, but
	I have not provided a userspace wrapper around the syscall.
	In fact, the most reasonable control needed is per-image and
	not per-process, but we have no tradition to put the
	kernel-read attributes into the extattrs of binary, so I am
	still pondering that part and this also explains the
	non-written tool.</p>

      <p>Thanks to Oliver Pinter and Shawn Webb of the HardenedBSD
	project for pursuing ASLR for &os;.  Although this work is
	not based on theirs, it was inspired by their efforts.</p>

      <p>Thanks to Ed Maste, Robert Watson, John Baldwin, and Alan Cox
	for some discussions about the patch, and for The FreeBSD
	Foundation for directing me.</p>

      <p>Bartek Rutkowski tested PyPy builds on i386, and David Naylor
	helped with the port which was at point of turbulence and
	upgrade during the work.</p>
    </body>

    <sponsor>The FreeBSD Foundation</sponsor>
  </project>

  <project cat='proj'>
    <title>RCTL Disk IO Limits</title>

    <contact>
      <person>
	<name>
	  <given>Edward Tomasz</given>
	  <common>Napierała</common>
	</name>
	<email>trasz@FreeBSD.org</email>
      </person>
    </contact>


    <body>
      <p>An important missing piece of the RCTL resource limits
	framework was the ability to limit file system throughput.
	This project aims to fill that hole by making it possible to
	add RCTL rules for read bytes per second (BPS), write BPS,
	read I/O operations per second (IOPS), and write IOPS, and
	adding a new throttling mechanism, to slow down offending
	processes when a limit gets hit.</p>

      <p>The code has been committed and will ship with &os;
	11.0-RELEASE.</p>
    </body>

    <help>
      <task>
	<p>Additional testing</p>
      </task>

      <task>
	<p>Simplify locking, getting rid of rctl_lock altogether</p>
      </task>

      <task>
	<p>Improve statistics gathering by make it possible for
	  <tt>rctl -u</tt> to retrieve usage counters at a fixed point
	  of time</p>
      </task>

      <task>
	<p>Use the new throttling mechanism for %CPU limits</p>
      </task>
    </help>

    <sponsor>
      The FreeBSD Foundation
    </sponsor>
  </project>

  <project cat='misc'>
    <title>Qt 5.6 on Raspberry Pi</title>

    <contact>
      <person>
	<name>
	  <given>Oleksandr</given>
	  <common>Tymoshenko</common>
	</name>
	<email>gonzo@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://kernelnomicon.org/?p=598">Qt 5.6 on FreeBSD/Pi</url>
    </links>

    <body>
      <p>Qt 5.6 is a great framework to build embedded GUI
	applications, so when Qt 5.6 was released it was natural to
	bring it up on Raspberry Pi.  Current Qt support in ports is
	very Xorg-centric so as a proof of concept I created an
	experimental qt56-base and qt56-multimedia.</p>

      <p>qt56-base can be configured for a generic ARM device with the
	scfb video driver and specifically for Raspberry Pi in which
	case it supports eglfs mode with hardware OpenGL
	acceleration.</p>
    </body>

    <help>
      <task>
	<p>Check how embedded use cases can be fit into current
	  <tt>bsd.qt.mk</tt> or whether a new port should be
	  introduced.</p>
      </task>
    </help>
  </project>

  <project cat='kern'>
    <title>FDT Overlay Support in UBLDR</title>

    <contact>
      <person>
	<name>
	  <given>Oleksandr</given>
	  <common>Tymoshenko</common>
	</name>
	<email>gonzo@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://reviews.freebsd.org/D3180">ubldr patch</url>
    </links>

    <body>
      <p>A flattened device tree is a way to keep the hardware
	description separated from code.  During the boot process, the
	loader passes a pointer to the device-tree blob to the kernel
	and the kernel instantiates and attaches drivers according to
	the information in the blob.</p>

      <p>This approach does not work when hardware is expandable.  For
	example, the Raspberry Pi and Beaglebone Black have the
	concept of capes or shields: snap-on PCBs that are connected
	to IO headers on the main board and provide additional
	functionality like an LCD screen or GPS receiver.  These
	shields can be described by their own device trees and these
	trees can be overlaid on the base tree by the boot loader,
	thus providing an accurate description to the kernel.</p>

      <p>The proposed patch add this functionality to ubldr.  The user
	can specify a comma-separated list of overlays as U-Boot or
	the loader <tt>fdt_overlays</tt> variable and ubldr will load
	them from the <tt>/boot/dtb/</tt> directory and do the
	overlaying.</p>
    </body>

  </project>

  <project cat='kern'>
    <title>MMC Stack Under CAM Framework</title>

    <contact>
      <person>
	<name>
	  <given>Ilya</given>
	  <common>Bakulin</common>
	</name>
	<email>ilya@bakulin.de</email>
      </person>
    </contact>

    <links>
      <url href="https://bakulin.de/freebsd/mmccam.html">Project information</url>
      <url href="https://github.com/kibab/FreeBSD/tree/mmccam">Source code</url>
      <url href="https://reviews.FreeBSD.org/D4761">Patch for review</url>
    </links>

    <body>
      <p>The goal of this project is to reimplement the existing
	MMC/SD stack using the CAM framework.  This will permit
	utilizing the well-tested CAM locking model and debug
	features.  It will also be possible to process interrupts
	generated by the inserted card, which is a prerequisite for
	implementing the SDIO interface.  SDIO support is necessary
	for communicating with WiFi/BT modules found on many
	development boards, like Wan Raspberry Pi 3.</p>

      <p>Another feature that the new stack will have is support for
	sending SD commands from the userland applications using
	<tt>cam(3)</tt>.  This will allow building device drivers in
	userland and make debugging much easier.</p>

      <p>The first version of the code was uploaded to Phabricator for
	review.  The new stack is able to attach to the SD card and
	bring it to an operational state so it is possible to read and
	write to the card.</p>

      <p>Support for the <tt>imx_sdhci</tt> SD Host Controller (used
	on iMX-based boards, for example Wandboard) was added in
	2016Q1, along with <tt>ti_sdhci</tt>, which is used on the
	BeagleBone Black.  Modifying other SDHCI-compliant drivers
	should not be difficult.</p>
    </body>

    <help>
      <task>
	<p>Modify the SDHCI driver on at least one x86 platform.  This
	  will make development and collaboration easier.</p>
      </task>

      <task>
	<p>Begin implementing SDIO-specific bits.</p>
      </task>
    </help>
  </project>

  <project cat='team'>
    <title>The &os; Core Team</title>

    <contact>
      <person>
	<name>&os; Core Team</name>
	<email>core@FreeBSD.org</email>
      </person>
    </contact>

    <body>
      <p>During the first quarter of 2016, the most important business
	of the &os; Core Team has been to respond to the harassment
	incident last year.  Core's actions were to assemble a
	timeline of the events and in the light of that to review
	Core's actions at the time; and to make recommendations about
	how better to handle such cases in future.  During this
	process, draft reports were reviewed by people concerned in
	the case and in addition a number of interested members of the
	&os; community.  Core would like to thank everyone involved
	for their contributions.</p>

      <p>The report was published to the &os; developer community in
	mid-February, and contained six recommendations for the
	community to consider.</p>

      <p>Core is also coordinating with the committee headed by Anne
	Dickison who are reviewing the Code of Conduct.  A corpus of
	case studies is being assembled, which will be re-examined to
	see what impact changes to the Code of Conduct would have
	had.</p>

      <p>Core, together with John Baldwin, are working on a plan to
	create a separate repository containing GPLv3 toolchain
	components. This will allow modernization of code within base
	beyond what the existing GPLv2 toolchain can handle, and
	permit support of certain new architectures where a copyfree
	licensed alternative (i.e., LLVM) is not yet available.  A
	position paper will soon be circulated to developers for
	comment.</p>

      <p>During this quarter three new commit bits were issued, and
	one was returned for safekeeping.  Please welcome Wojciech
	Macek, Jared McNeil and Stanislav Galabov, and bid farewell to
	Davide Italiano, who although too busy to work on FreeBSD
	directly, will still be contributing through his work upstream
	on lld and other parts of the toolchain.</p>
    </body>
  </project>

  <project cat='bin'>
    <title>Using <tt>lld</tt>, the LLVM Linker, to Link
      FreeBSD</title>

    <contact>
      <person>
	<name>
	  <given>Ed</given>
	  <common>Maste</common>
	</name>
	<email>emaste@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Davide</given>
	  <common>Italiano</common>
	</name>
	<email>davide@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.freebsd.org/LLD">&os; lld wiki page</url>
      <url href="http://lists.llvm.org/pipermail/llvm-dev/2016-March/096449.html">Status report on linking FreeBSD/amd64 with lld</url>
    </links>

    <body>
      <p><tt>lld</tt> is the linker in the LLVM family of projects.
	It is intended to be a high-performance linker and supports
	the ELF, COFF and Mach-O object formats.  Where possible,
	<tt>lld</tt> maintains command-line and functional
	compatibility with existing linkers (GNU BFD <tt>ld</tt> and
	<tt>gold</tt>), but <tt>lld</tt>'s authors are not constrained
	by strict compatability where it would hamper performance or
	desired functionality.</p>

      <p>The upstream <tt>lld</tt> project made significant progress
	in adding new functionality to <tt>lld</tt>'s ELF support over
	the first quarter of 2016.  The <tt>lld</tt> ELF linker is
	capable of self-hosting on FreeBSD/amd64 and is capable of
	linking many test applications.</p>

      <p><tt>lld</tt> currently lacks comprehensive linker script
	expression evaluation support, and therefore cannot yet be
	used to link the FreeBSD kernel.  It also lacks versioned
	symbol support, and does not implement some options used in
	the FreeBSD boot loader components.</p>

      <p>I've been running experimental world builds of FreeBSD/amd64
	with <tt>lld</tt> installed in place of <tt>ld.bfd</tt> as the
	linker.  With workarounds for the current gaps in
	functionality (using the <tt>WITHOUT_SYMVER</tt> option to
	disable symbol versioning use, and linking the loader
	components with GNU <tt>ld</tt>), <tt>lld</tt> is now able to
	link a working FreeBSD system.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>

    <help>
      <task>
	<p>Enable the <tt>lld</tt> option by default in the llvm-devel
	  (and later llvm) ports for testing.</p>
      </task>

      <task>
	<p>Develop symbol version support and linker script expression
	  improvements in the upstream lld project.</p>
      </task>

      <task>
	<p>Import a newer lld snapshot into the vendor area, add build
	  infrastructure and connect it to the world build, installed
	  as <tt>ld.lld</tt>.</p>
      </task>

      <task>
	<p>Request a ports exp-run with <tt>/usr/bin/ld</tt> a symlink
	  to <tt>ld.lld</tt>.</p>
      </task>

      <task>
	<p>Extensive testing.</p>
      </task>
    </help>
  </project>
</report>
