<!-- $Id: porting.sgml,v 1.54 1999-02-12 17:05:31 simokawa Exp $ -->
<!-- The FreeBSD Japanese Documentation Project -->
<!-- Original revision: 1.130 -->

<sect><heading>自分で port を作る<label id="porting"></heading>

<p><em>原作: &a.jkh;, &a.gpalmer;, &a.asami;, &a.obrien; and
      &a.hoek;.
<newline>28 August 1996.</em>.

<p><em>訳: &a.simokawa;, &a.asami;.
<newline>10 November 1996.</em>

<p>自分で port を作ることに興味がありますか, すばらしい! <tt/:)/

<p>これから, FreeBSD用のportを作る際の, いくつかのガイドラインを
説明します. 実際にportをコンパイルするときのほとんどの仕事は 
<tt>/usr/share/mk/bsd.port.mk</tt>というファイルでおこないます.
Portsコレクションについてのさらに細かい内部の働きについては, そちらの
ファイルを参照してください. これにはコメントが細かく書いてありますので,
Makefile を読むのにあまり慣れていない人でも, 得るものはとても大きいで
しょう.

<p>注意: ここでは, 変更可能な変数の一部についてのみ記述してい
ます. ほとんどの変数は<tt>bsd.port.mk</tt>の始めに記述があり
ます. また, このファイルは非標準のタブの設定になっていま
す. <tt>Emacs</tt> や <tt>Vim</tt> はファイルのロード時にこれ
を認識しますが,	<tt>vi</tt>や<tt>ex</tt>では, ファイルをロード
したら `<tt>:set tabstop=4</tt>'のようにして正しい値を設定する
ことができます.
	

    <sect1>
      <heading>3分porting</heading>

      <p>この節では, 簡単なportの方法について説明します. 多くの場合これ
	では不十分ですが, まあうまくいくかどうか試してみて損はないでしょ
	う.

      <p>まず, 元のtarファイルを<tt>&dollar;{DISTDIR}</tt>に置きます. 
	デフォルトは<tt>/usr/ports/distfiles</tt>です. 

      <p>注: 以下では, ソフトウェアはそのままコンパイルされるとします. 
	つまり, FreeBSDのマシンで動かすために, 変更がまったく必要ない
	とします. もしなにか変更が必要な場合には次の節も参照する必要
	があります.

      <sect2>
	<heading>Makefileの作成</heading>

	<p>最小限の<tt>Makefile</tt>は次のようなものです:

<tscreen><verb>
 # New ports collection makefile for:	oneko
 # Version required:	1.1b
 # Date created:	5 December 1994
 # Whom:		asami
 #
 # &dollar;Id&dollar;
 #
 
 DISTNAME=	oneko-1.1b
 CATEGORIES=	games
 MASTER_SITES=	ftp://ftp.cs.columbia.edu/archives/X11R5/contrib/
 
 MAINTAINER=	asami@FreeBSD.ORG
 
 MAN1=		oneko.1
 MANCOMPRESSED=	yes
 USE_IMAKE=	yes
 
 .include <bsd.port.mk>
</verb></tscreen>

      <p>おわかりになりますでしょうか. <tt>&dollar;Id&dollar;</tt>があ
	る行の内容については, 気にしないでください. これはこのファイル
	がportsツリーに書き込まれるときにCVSによって自動的に書
	き込まれます. もっと詳しい例が見たければ, <ref
	id="porting:samplem" name="Makefileのお手本">の節をご覧ください.

      <sect2>
	<heading>Package記述ファイルの作成</heading>

	<p>どのようなportでも, packageにするしないに関わらず, 3つ
	  の記述ファイルが必要です. <tt>pkg</tt>サブディレクトリにある,
	  <tt>COMMENT</tt>, <tt>DESCR</tt>, それに<tt>PLIST</tt>です.

	<sect3>
	  <heading>COMMENT</heading>

	  <p>これには, そのportについての説明を1行で書きます. Package
	    の名前, バージョン番号等は<em>含めない</em>でください. 
	    たとえば, こんな具合です:

<tscreen><verb>
A cat chasing a mouse all over the screen
</verb></tscreen>

	<sect3>
	  <heading>DESCR</heading>

	  <p>これは, そのソフトウェアについての, すこし長い説明を記述
	    します. その port が何をするのかについての数段落程度の簡潔
	    な解説があれば十分です. このファイルはマニュアルでもなけれ
	    ば, 使用方法やコンパイル方法についての細かい説明書でもあり
	    ません. 特に, <em><tt>README</tt> ファイルや manpage をコ
	    ピーしようとしてしている場合には注意してください</em>. こ
	    れらは多くの場合, そのポートの簡潔な説明になっていなかった
	    り, 扱いにくい形式(manpage の場合, 行を揃えるために空白が
	    調整されます)になっていたりします.  もしこのソフトウエアに
	    公式の WWW のホームページがあれば, ここに書いて下さい.

	  <p>このファイルの最後にあなたの名前を書くことが推奨されています. 
	    たとえば, こんな具合です.

<tscreen><verb>
This is a port of oneko, in which a cat chases a poor mouse all over
the screen.
 :
(うんぬん.)

http://www.oneko.org/

- Satoshi
asami@cs.berkeley.edu
</verb></tscreen>

	<sect3>
	  <heading>PLIST</heading>

	  <p>このファイルには, このportによってインストールされるファ
	    イルが列挙されます. このファイルはpackageを作る際のリス
	    トとして使われるため, `packing list' とも呼ばれます. ここ
	    に書かれているファイル名は, インストール時のプレフィックス 
	    (普通は <tt>/usr/local</tt> か <tt>/usr/X11R6</tt>) からの
	    相対パスです. <tt/MANx/ 変数を使用する場合(使用することが
	    推奨されています)には, マニュアルはここに入れないでくださ
	    い.

	  <p>簡単な例を載せておきましょう:

<tscreen><verb>
bin/oneko
lib/X11/app-defaults/Oneko
lib/X11/oneko/cat1.xpm
lib/X11/oneko/cat2.xpm
lib/X11/oneko/mouse.xpm
@dirrm lib/X11/oneko
</verb></tscreen>

	<p> 'Packing list'の詳細については, <tt>pkg_create(1)</tt>の
	  マニュアルを参照してください. すべてファイルを列挙しなければ
	  なりませんが, ディレクトリ名は必要ありません. また, ports が
	  インストール時にディレクトリを作成する場合には, <tt/@dirrm/
	  の行を加えて, その port が削除されるとき, そのディレクトリ
	  も削除されるようにしてください.

	<p>このファイルには, ファイル名をアルファベット順に並べるよう
	  にしてください. port のアップグレートのとき, 楽に確認ができ
	  るようになります.

      <sect2>
	<heading>チェックサムファイルの作成</heading>

	<p>ただ, `<tt>make makesum</tt>' と入力するだけです.
	  <tt>bsd.port.mk</tt>にルールがあるので, 自動的に<tt>files/md5</tt>が
	  生成されます.
	  
      <sect2>
	<heading>Portのテスト<label id="porting:testing"></heading>

	<p>そのportが正しく動くことを, package化を含めて確認してく
	  ださい. 以下の重要なポイントを確認してください.
	<itemize>
	  <item><tt/PLIST/ にその port がインストールしないものが含
	    まれていないこと.
	  <item><tt/PLIST/ にその port がインストールする全てのもの
	    が含まれていること.
	  <item><tt/reinstall/ ターゲットを使うことによって, 何度でも
	    インストールが可能こと.
	  <item>deintall の際に
	  <ref id="porting:cleaning" name="後片付け">をすること.
	</itemize>

	<p>推奨されるテストの手順:
	<enum>
	  <item><tt>make install</tt>
	  <item><tt>make package</tt>
	  <item><tt>make deinstall</tt>
	  <item><tt>pkg_add `make package-name`</tt>
	  <item><tt>make deinstall</tt>
	  <item><tt>make reinstall</tt>
	  <item><tt>make package</tt>
	</enum>
	  <tt/package/ および <tt/deinstall/ の段階で, どんな警告
	  (warning)も出力されないことを確認してください. ステップ3の
	  後, 新しいディレクトリが全て正しく消去されているかを確認し
	  てください. また, ステップ4の後にそのソフトウェアを使用して
	  みて, package からインストールされた場合に正しく動作するかを
	  確認してください.

      <sect2>
	<heading>portlint でチェック<label id="porting:portlint"></heading>
	<p><tt>portlint</tt>を使って, あなたの port が我々のガイドライン
	  そっているかを確認してください. 
	  <tt><htmlurl url="http://www.freebsd.org/cgi/ports.cgi?portlint"
	  name="portlint"></tt> プログラムは ports コレクション
	  に含まれています. 特に, <ref id="porting:samplem" name="Makefile">
	  が正しい形式になっているか, <ref id="porting:pkgname" name="package">
	  の名前が正しいか, をチェックするのに良いでしょう.

      <sect2>
	<heading>Portの送付<label id="porting:submitting"></heading>

	<p>まず, <ref id="porting:dads" name="やってよいことといけないこと">
	  についての節を読んでください.

	<p>さあ, あなたのportに満足したら, あとはそれをFreeBSDのメイ
	  ンの ports ツリーに置いて, 皆に使ってもらうだけです. 
	  いまある <tt>work/</tt> ディレクトリや <tt>pkgname.tgz</tt>
	  パッケージは必要ありませんから, まず消去してください.
	  あとは, バグレポートの中に `<tt>shar `find port_dir`</tt>'
	  の出力を, <tt>send-pr(1)</tt> プログラムを使用して送ってくだ
	  さい. (<tt>send-pr</tt> についての詳細は, <ref id="contrib:general"
	   name="バグ報告と一般的な論評">を参照してください.)
	  もし, 圧縮していない状態で, 20KB以上あるようなポートで
	  あれば, 圧縮して tar ファイルにして, バグレポートに入れる前に
	  <tt>uuencode(1)</tt> を使用してください. (20KB以下のものでも,
	  tar ファイルにして送ってもよいですが, あまり歓迎されません).
	  バクレポートの category は `ports', class は `change-request' 
	  を必ず使用してください. (レポートを `confidential'(内密) に
	  しないようにしてください!)

	<p>もう一度, <em>オリジナルのソースファイル, <tt>work/</tt>
	  ディレクトリ, `<tt>make package</tt>'で作成したパッケージが
	  含まれていないこと</em>を確認してください.

	<p>注: 以前, 新しい port をわれわれの ftp サイト 
	  (<tt/ftp.freebsd.org/)にアップロードするようにお願いした
	  ことがありますが, 現在このサイトの <tt/incoming/ ディレクトリ
	  は読み出し不可になっており, いまでは推奨されていません.
	  沢山の海賊版ソフトウェアがそこに置かれたためです. <tt>:&lt;</tt>

	<p>私たちは, 何か不明な点があったらあなたに確認したのち,
	  それをツリーへ置きます. あなたの名前は, FreeBSD
	  ハンドブックやその他のファイルの `Additional FreeBSD
	  contributors' のリストにも載るでしょう. う〜ん, 素晴らし
	  い. <tt>:)</tt>

    <sect1>
      <heading>本格的なport</heading>

      <p>残念ながら, 移植がそう簡単ではなく, 動かすために多少の変更が
	必要な場合も多いでしょう. この節では, portsコレクション
	の方法論にのっとって, そのような場合にどのように変更を施し, 動
	くようにしたらよいかを順を追って説明します.

      <sect2>
	<heading>port構築の詳細</heading>

	<p>まず, あなたがportのディレクトリで `<tt>make</tt>' とタイ
	  プしてから起こる一連の出来事について,順を追って説明しま
	  す. ここを読むときには, 他のウィンドウで同時に 
	  <tt>bsd.port.mk</tt>も開いておくとよいかもしれません.

	<p>しかし, <tt>bsd.port.mk</tt>が何をしているのか, 完全に理解
	  できなくても心配する必要はありません. そう多くの人が理解して
	  いるわけではないですから... <tt>f(^_^;)</tt>

	<enum>
	  <item>まず, fetchというターゲットが実行されます. このfetchターゲッ
	    トはローカルディスクの<tt>&dollar;{DISTDIR}</tt>に配布ファ
	    イルがあるようにするのが役目です. もし, fetchが必要なファ
	    イルを<tt>&dollar;{DISTDIR}</tt>に見つけることができなけ
	    れば, Makefileに指定されているURL
	    <tt>&dollar;{MASTER_SITES}</tt>, そして私たちのFTPサイトで
	    ある <htmlurl
	    url="ftp://ftp.freebsd.org/pub/FreeBSD/ports/distfiles/"
	    name="ftp://ftp.freebsd.org/pub/FreeBSD/ports/distfiles/">
	    (ここには, 私たちが取ってきたファイルをバックアップとして
	    置いてあります) に探しにいきます. そして, ユーザのサイトが
	    インターネットに直接接続されている場合には,
	    <tt>&dollar;{FETCH}</tt> を使って, その名前のファイルを取っ
	    てきて, <tt>&dollar;{DISTDIR}</tt>に保存します.

	  <item>次に実行されるのはextractターゲットです. これは,
	    <tt>&dollar;{DISTDIR}</tt>にある, 配布ファイル (普通は
	    gzipされたtarファイル) を読み, ソースを一時的な作業ディレ
	    クトリ<tt>&dollar;{WRKDIR}</tt> (デフォルトは
	    <tt>work</tt>) に展開します.

	  <item>次に, patchというターゲットが実行されます. まず,
	    <tt>&dollar;{PATCHFILES}</tt>に定義されている, すべてのパッ
	    チをあてます. 次にもし<tt>&dollar;{PATCHDIR}</tt> (デフォ
	    ルトは<tt>patches</tt> サブディレクトリ) にパッチが存在す
	    れば, これらをアルファベット順にあてます.

	  <item>次に実行されるターゲットはconfigureです. これには, い
	    ろいろな場合があります.

	    <enum>

	      <item>もし存在すれば, <tt>scripts/configure</tt> が実行されます. 

	      <item>もし, <tt>&dollar;{HAS_CONFIGURE}</tt> あるいは
		<tt>&dollar;{GNU_CONFIGURE}</tt> がセットされていれば, 
		<tt>&dollar;{WRKSRC}/configure</tt> が実行されます. 

	      <item>もし, <tt>&dollar;{USE_IMAKE}</tt> がセットされていれば, 
		<tt>&dollar;{XMKMF}</tt> (デフォルト: `<tt>xmkmf
		  -a</tt>') が実行されます. 

	    </enum>

	  <item>最後に, build というターゲットが実行されます. これは,
	    その port の専用の作業ディレクトリ (<tt>&dollar;{WRKSRC}</tt>)
	    にいき, コンパイルするのが役目です. もし 
	    <tt>&dollar;{USE_GMAKE}</tt> がセットされていれば, GNU
	    <tt>make</tt> が使用されます. さもなければ FreeBSD の 
	    <tt>make</tt> が使用されます.

	</enum>

	<p>上記はデフォルトのルールです. さらに, `<tt>pre-&lt;何とか
	  &gt;</tt>や `<tt>post-&lt;何とか&gt;</tt>' というターゲット
	  が定義してあったり, そのような名前のスクリプトが 
	  <tt>scripts</tt> サブディレクトリに置いてある場合には, それ
	  らはデフォルトの動作の前後に実行されます.

	<p>たとえば, <tt>post-extract</tt>というターゲットがMakefile 
	  で定義されていて, <tt>pre-build</tt>というファイルが,
	  <tt>scripts</tt>サブディレクトリにあるとすると,
	  <tt>post-extract</tt>ターゲットは, 通常の展開動作のあとに呼
	  び出され, <tt>pre-build</tt>スクリプトはデフォルトのコンパイ
	  ルのルールが実行される前に実行されます. もし動作が簡単であれ
	  ば, Makefileのターゲットを使用することが推奨されています. な
	  ぜならば, そのportが何らかのデフォルトではない動作を必要とす
	  るのかどうかが一箇所にまとめて書いてあった方が他の人に理解しやす
	  いからです.

	<p>デフォルトの動作は<tt>bsd.port.mk</tt> の
	  `<tt>do-&lt;何とか&gt;</tt>' というターゲットでおこなわれます.
	  たとえば, portを展開するコマンドは, `<tt>do-extract</tt>' 
	  というターゲットにあります.  もし, デフォルトのターゲットに
	  不満があれば, `<tt>do-&lt;something&gt;</tt>' というターゲッ
	  トを再定義することによって, どのようにでも直すことができます.

	<p>「メイン」のターゲット (例えば, <tt>extract</tt>,
	  <tt>configure</tt>等) は, すべての前段階が実行されていること
	  を確認して, 実際のターゲットやスクリプトを呼び出す以外のこと
	  はしません. bsd.port.mkはこれらが変更されることは仮定してい
	  ませんので, もし, 例えば, 展開の仕方を直したいときには,
	  <tt>do-extract</tt> を直し, 絶対に<tt>extract</tt>には手を
	  触れないでください.

	<p>これで, ユーザが `<tt>make</tt>' と入力したときに何が起こ
	  るのかが理解できたと思います. では, 完璧なportを手順を追っ
	  て作ってみましょう.

      <sect2>
	<heading>オリジナルのソースの入手</heading>

	<p>オリジナルのソースを, (普通は) 圧縮されたtarファイルの形
	  (<tt>&lt;foo&gt;.tar.gz</tt>あるいは 
	  <tt>&lt;foo&gt;.tar.Z</tt>) で入手して, それを 
	  <tt>&dollar;{DISTDIR}</tt> にコピーします. 可能なかぎり, 広
	  く使われている<em>主流の</em>ソースを使用するようにしてください.

	<p>もし, ネットワークへの接続のよい FTP/HTTP サイトを見つけるこ
	  とができなかったり, 頭にくるような非標準的な形式しか持ってい
	  ないサイトしか見つけられないときには, 自分で管理する確実な
	  ftp か http サーバ (たとえば, あなたのホームページ)に置くこと
	  ができます. <tt>MASTER_SITES</tt> に正しく反映されていること
	  を確認してください.

	<p>もしも, そのような都合の良く, 安心な置き場所が見つけられない
	  場合(あなたが FreeBSD の committer であれば, 自分の 
	  <tt>public_html</tt> ディレクトリに置けます), 私たちが,
<tscreen><verb>
ftp://ftp.FreeBSD.ORG/pub/FreeBSD/ports/distfiles/LOCAL_PORTS/
</verb></tscreen>
	  に置き場所を提供できます. この場所は, 変数
	  <tt>&dollar;{MASTER_SITE_LOCAL}</tt> を使って参照してくださ
	  い. これについての問い合わせのメールは &a.ports へお願いしま
	  す.

	<p>その port の配布ファイルが特に理由もなく, しょっちゅう
	  変る場合には, 配布ファイルをあなたのホームページに置いて
	  <tt>MASTER_SITES</tt>の最初に入れてください. こうすること
	  によって, ユーザ利用する場合に `checksum mismatch' エラー
	  が起るのを防ぎ, 我々の ftp サイトの保守の負担を
	  減らすことができます.  もし, master site がたった一つ
	  しかない場合には, あなたのサイトにバックアップを置いて
	  <tt>MASTER_SITES</tt> の2番目に加えてください.

	<p>もし, あなたのportに必要ないくつかの追加パッチがインター
	  ネット上で手に入るのならば, それらも取ってきて,
	  <tt>&dollar;{DISTDIR}</tt> に置きます. もし, それらがメイン
	  のソースのtarファイルとは別のサイトにあっても, 心配する必要
	  はありません. そのような状況にはちゃんと対応できるようになっ
	  ています. (以下の<ref id="porting:patchfiles"
	  name="&dollar;{PATCHFILES}の記述">をご覧ください).

      <sect2>
	<heading>Portの修正</heading>

	<p>適当なディレクトリにtarファイルを展開して, FreeBSDの最新の
	  バージョン上で, 正しくコンパイルできるために必要なあらゆる変
	  更を施します. 最終的に処理は自動化するわけですから, 何をおこなっ
	  たかを<em>注意深く記録しておきましょう</em>. あなたのport
	  が完成した暁には, ファイルの削除, 追加, 修正を含むすべての処
	  理が, 自動化されたスクリプトやパッチファイルでおこなえるようになっ
	  ていないといけません.

	<p>もし, あなたのportのコンパイルやインストールのために必要
	  な手作業があまりに多いようならば, Larry Wallの模範的な
	  Configureスクリプトでも参考にしたほうがいいかもしれませ
	  ん. 新しいportsコレクションは, 最小のディスクスペースで, 
	  個々のportがエンドユーザにできるだけ「プラグ &amp; プレ
	  イ」の状態でmakeできることをめざしています.

	<p>注意: あなたが作成しFreeBSDのportsに寄付されたパッチファイル,
	  スクリプトおよびその他のファイルは，明示的に記述されている場合
	  を除いては, BSDの標準的な著作権条件によりカバーされていると見な
	  されます．

      <sect2>
	<heading>パッチをあてる</heading>

	<p>portの過程で追加されたり変更されたファイルは再帰的diffで変
	  更点を取り出すことができます. パッチは適当にまとめて,
	  `<tt>patch-&lt;xx&gt;</tt>' という名前のファイルに入れてくだ
	  さい. <tt>&lt;xx&gt;</tt>はパッチが適用される順番を示します -- 
	  これらは, <em>アルファベット順</em>, つまり `<tt>aa</tt>' が
	  最初, つぎに `<tt>ab</tt>' などとなります. これらのファイル
	  を<tt>&dollar;{PATCHDIR}</tt>に置いておくと, 自動的に適用さ
	  れるようになっています. すべてのパッチは
	  <tt>&dollar;{WRKSRC}</tt> (通常は, portのtarファイルが展
	  開されるところで, makeが実行されるところと同じです) からの相
	  対パスになります. 修正やアップグレードを容易にするため, 2つ
	  以上のパッチが同じファイルを修正するのは避けてください. (例,
	  patch-aaとpatch-abが共に<tt>&dollar;{WRKSRC}</tt>/foobar.c
	  を修正する, など.)
	  
      <sect2>
	<heading>コンフィグレーション</heading>

	<p>カスタマイズのために追加したいコマンドがあれば,
	  <tt>configure</tt>という名前のスクリプトに入れて
	  `<tt>scripts</tt>' サブディレクトリに置きます. 上で述べたよ
	  うに, <tt>pre-configure</tt> あるいは<tt>post-configure</tt>
	  というMakefileのターゲットおよび/あるいはスクリプトで処理す
	  ることもできます.

      <sect2>
	<heading>ユーザからの入力の扱い</heading>

	<p>もし, そのportがビルド, コンフィグレーション, インストー
	  ルの際にユーザからの入力を必要とするならば, Makefileで 
	  <tt>IS_INTERACTIVE</tt>をセットしてください. これによって, 
	  深夜, 自動的にたくさんのportをコンパイルすることが可能にな
	  ります. 環境変数<tt>BATCH</tt>がセットされていると 
	  <tt>IS_INTERACTIVE</tt>の定義されているportはスキップされ
	  ます (そして, ユーザが<tt>INTERACTIVE</tt>という変数をセッ
	  トすると入力を必要とするport<em>のみ</em>コンパイルされま
	  す).

	<p>もし, 適切なデフォルト設定があるのであれば, 
	  <tt/PACKAGE_BUILDING/ 変数をチェックして, それが設定されて
	  いる場合には, ユーザ入力のスクリプトを起動しないように
	  してください. こうすることによって,  CD-ROM や ftp に
	  置く package を我々が作成することができます.

    <sect1>
      <heading>Makefileの作成</heading>

      <p>Makefileの作成は非常に単純です. 繰り返しになりますが, 始める
	まえに, すでにある例を見てみることをお奨めします.  またこのハ
	ンドブックには<ref id="porting:samplem" name="Makefileのお手本">
	があります. それを見て, Makefile内の変数の順番や空行を入れると
	ころなどの参考にしてください. そうすると他の人々にも読みやすい
	ものとなります.

      <p>では, Makefileをデザインするときに問題となるところを順に追っ
	て見てみましょう.

      <sect2>
	<heading>オリジナルのソース</heading>

	<p>ソースは<tt>&dollar;{DISTDIR}</tt>に, 標準的なgzipされた
	  tarファイルとして置かれていますか?  そうであれば, 次のステッ
	  プに進めます. そうでなければ, 変数 
	  <tt>&dollar;{EXTRACT_CMD}</tt>,
	  <tt>&dollar;{EXTRACT_BEFORE_ARGS}</tt>,
	  <tt>&dollar;{EXTRACT_AFTER_ARGS}</tt>,
	  <tt>&dollar;{EXTRACT_SUFX}</tt>,
	  <tt>&dollar;{DISTFILES}</tt>を適当に書き換えないといけません. 
	  どれだけ変更しないといけないかは, あなたのportの
	  配布ファイルがどの程度標準からかけはなれているかによりま
	  す. (最もよくある場合は, gzipではなく普通のcompressコマンド
	  でtarファイルが圧縮されている場合で,
	  `<tt>EXTRACT_SUFX=.tar.Z</tt>' とするだけです.)

	<p>最悪の場合には, 自分で `<tt>do-extract</tt>' ターゲットを作
	  成して, デフォルトを上書きすることもできます. しかし, そこま
	  でする必要があることはめったにないでしょう.

      <sect2>
	<heading>DISTNAME</heading>

	<p><tt>&dollar;{DISTNAME}</tt>にはportの名前の基幹部分を入れ
	  ます. デフォルトのルールでは, 配布ファイルのリスト 
	  (<tt>&dollar;{DISTFILES}</tt>) は
	  <tt>&dollar;{DISTNAME}&dollar;{EXTRACT_SUFX}</tt>という名前
	  になっています. 例えば, `<tt>DISTNAME=foozolix-1.0</tt>'の場
	  合, 通常のtarファイルだと,
<tscreen><verb>
foozolix-1.0.tar.gz
</verb></tscreen>
	  のようになります. 

	  さらにデフォルトのルールでは, tarファイルは
	  <tt>work/&dollar;{DISTNAME}</tt>というサブディレクトリ
	  に展開されることを仮定しています, 例えば
<tscreen><verb>
work/foozolix-1.0/
</verb></tscreen>
	  といった具合いです. 

	  これらの動作はもちろんすべて変更可能です. デフォルトのルー
	  ルは最も標準的な場合を仮定しているだけです. まず, portが複
	  数の配布ファイルを必要とするときには, 単に明示的に
	  <tt>&dollar;{DISTFILES}</tt>を設定してください. もし,
	  <tt>&dollar;{DISTFILES}</tt>の一部だけが実際に展開される場合
	  には, それらを<tt>&dollar;{EXTRACT_ONLY}</tt> に設定してくだ
	  さい. この変数が定義されている場合には, 展開時に
	  <tt>&dollar;{DISTFILES}</tt>に優先して利用されます. 残りのファ
	  イルも<tt>&dollar;{DISTDIR}</tt>に取ってきますが, 展開時に
	  はなにもせずに後で使うためにそのまま置いておかれます.

      <sect2>
	<heading>PKGNAME</heading>

	<p>もし, <tt>&dollar;{DISTNAME}</tt> が我々の
	<ref id="porting:pkgname" name="packageの名前についてのガイドライン">
	に沿ったものでない場合には, <tt>&dollar;{PKGNAME}</tt> にもっと良い
	名前を設定してください. 詳細は上記のガイドラインを参照してください.

      <sect2>
	<heading>CATEGORIES (分類)</heading>

	<p>完成したpackageの実体は<tt>/usr/ports/packages/All</tt>
	  に置かれます. また, 1つかそれ以上の
	  <tt>/usr/ports/packages</tt>のサブディレクトリからのシンボリッ
	  クリンクが作られます. それらのサブディレクトリの名前が
	  <tt>&dollar;{CATEGORIES}</tt>という変数によって指定されます. 
	  これは, ユーザがFTPサイトやCD-ROMのpackageの山を渡り歩
	  くことを容易にするためです. 現在存在する
	  <ref id="porting:categories" name="カテゴリ">を見て, そ
	  のportに適したもを選んでください. 

	<p>このリストは, この port が port tree のどこに import
	  されるかも決定します. 2つ以上のカテゴリを指定した場合には
	  最初のカテゴリで指定されるサブディレクトリに置かれること
	  になります. 適切なカテゴリを選ぶ方法については,
	  <ref id="porting:categories" name="カテゴリ">の節を
	  参照してください.

	<p>もしそのportが本当に現在存在するすべてのものとは異なって
	  いる場合には, 新しいカテゴリ名を作ることもできます.
	  その際には, &a.ports 宛てに新しいカテゴリ名を提案する
	  メールを送ってください.

	<p>カテゴリ名については, なんのエラーチェックも行なわれません.
	  ミスタイプがあっても`<tt>make package</tt>' はなにも考えずに
	   新しいディレクトリを作ってしまいますので, 注意してください.

      <sect2>
	<heading>MASTER_SITES</heading>

	<p>オリジナルの配布ファイルを指し示すFTPまたはHTTPのURLのディ
	  レクトリ部分までを<tt>&dollar;{MASTER_SITES}</tt>に記録しま
	  す. スラッシュ (<tt>/</tt>) を最後につけることをお忘れなく.
	  配布ファイルがシステム上に存在しないときに, makeマクロは
	  <tt>&dollar;{FETCH}</tt>でこの変数に指定されたサイトから取っ
	  てきます.

	<p>複数の, できれば異なる大陸のサイトをこのリストに入れておく
	  ことが推奨されています. これによって, 広域ネットワークにトラ
	  ブルがあった場合でも成功する可能性が高くなります. 私たちはさら
	  に, 自動的に最も近いマスタサイトを検出して, そこから取って
	  くるメカニズムの導入を計画しています.

	<p>オリジナルのtar ファイルが, X-contrib, GNU, Perl CPAN, TeX CTAN 
	  または Linux Sunsite などの有名なアーカイブにある場合には,
	  MASTER_SITE_XCONTRIB, MASTER_SITE_GNU,
	  MASTER_SITE_PERL_CPAN, MASTER_SITE_TEX_CTAN および 
	  MASTER_SITE_SUNSITE を利用することで, 簡単にこれらのサイトを 
	  指定することができます. あとは MASTER_SITE_SUBDIR にアーカイ
	  ブ内でのパスを指定するだけです. 以下に例を示します.
<tscreen><verb>
MASTER_SITES=         ${MASTER_SITE_XCONTRIB}
MASTER_SITE_SUBDIR=   applications
</verb></tscreen>
	<p>ユーザは<tt>/etc/make.conf</tt>中で MASTER_SITE_* 変数を設定
	  することによって, デフォルトの FTP サイトではなく, これらの
	  有名なアーカイブのミラーの中で好みのものを使用することが可能
	  です.

      <sect2>
	<heading>PATCHFILES<label id="porting:patchfiles"></heading>

	<p>もし, オリジナルの配布ファイル以外にもFTPかHTTPで手に入る
	  パッチが必要な場合には, <tt>&dollar;{PATCHFILES}</tt>にファ
	  イル名を, <tt>&dollar;{PATCH_SITES}</tt>にサイトとディレクト
	  リの名前を<tt>&dollar;{MASTER_SITES}</tt>と同様に設定してく
	  ださい.

	<p>そのパッチ内のファイル名ががソースツリーの一番上のディレク
	  トリ (<tt>&dollar;{WKRSRC}</tt>) からの相対パスになっていな
	  い場合には, <tt>&dollar;{PATCH_DIST_STRIP}</tt>を指定してく
	  ださい. 例えば, パッチ内のファイル名にすべて余計な 
	  `<tt>foozolix-1.0/</tt>' がついている場合には,
	  `<tt>PATCH_DIST_STRIP=-p1</tt>'としてください.

	<p>これらのパッチは圧縮されていても大丈夫です. ファイル名が 
	  `<tt>.gz</tt>' か `<tt>.Z</tt>' で終わる場合には自動的に復元
	  されるようになっています.

	<p>もしパッチが, 文書などその他のファイルと一緒にgzipされた
	 tarファイルで配布されている場合には，単純に
	 <tt>&dollar;{PATCHFILES}</tt> を使うことはできません.
	 このような場合には, このパッチの tar ファイルの名前と場所を
	 <tt>&dollar;{DISTFILES}</tt> と <tt>&dollar;{MASTER_SITES}</tt>
	 に加えます. それから, <tt>pre-patch</tt> ターゲットで,
	 パッチコマンドを走らせるか, パッチファイルを
	 <tt>&dollar;{PATCHDIR}</tt> ディレクトリに
	 <tt>patch-&lt;xx&gt;</tt>という名前でコピーするかして,
	 パッチを適用するようにします．(普通の gzip か compress された
	 tar ファイルであれば，通常のソースファイルと一緒にその時までに
	 展開されていますので，明示的に展開する必要はありません．)
	 もし，後者の方法を使用する場合には，すでにそのディレクトリにある
	 なにかを上書きしないように, 注意する必要があります.
	 さらに, <tt>pre-clean</tt> ターゲットにコピーしたパッチファイル
	 を削除するコマンドを追加するのを忘れないでください.

      <sect2>
	<heading>MAINTAINER</heading>

	<p>あなたのメールアドレスをここに入れてください. お願いします.
	  <tt>:)</tt>

	<p>保守担当者(maintainer)の責任についての詳細は，
	  <ref id="policies:maintainer" name="Makefile 中の MAINTAINER">
	  の節をご覧ください．

      <sect2>
	<heading>依存関係</heading>

	<p>このプログラムが他のportに依存する場合には, 必要なものが
	  自動的に作られるようにすることができます. そのために, 以下の 
	  5つの変数が用意されています. よくあるケースのために
	  あらかじめ設定された依存変数や, いくつかの依存関係の制御のため
	  の変数があります.

	<sect3>
	  <heading>LIB_DEPENDS</heading>

	  <p>Portが必要とする非標準の共有ライブラリをこの変数で指定
	    します. これは `<tt>lib:dir[:target]</tt>' という組のリストで,
	    <tt>lib</tt> が共有ライブラリの名前, そして<tt>dir</tt> 
	    がそのライブラリが見つからない場合にインストールするport
	    のあるディレクトリで, <tt/target/ はそのディレクトリで
	    呼ばれるターゲットです. 例えば,
<tscreen><verb>
LIB_DEPENDS=    jpeg.9:${PORTSDIR}/graphics/jpeg:install
</verb></tscreen>
	    と指定してあれば, まずメジャーバージョンが9のjpegライブ
	    ラリがあるかどうか確認し, ない場合にはportsツリーの中の
	    <tt>graphics/jpeg</tt> というサブディレクトリに移動し, そこ
	    でコンパイルとインストールを行ないます. `<tt/:target/' の
	    部分は, <tt>&dollar;{DEPENDS_TARGET}</tt> (デフォルトは
	    `<tt/install/') と等しいときには省略できます.

	    前半の<tt>lib</tt> 部分は `<tt>ldconfig -r | grep -wF</tt>'
	    への引数になります. この変数には正規表現を入れられません.

	    この依存関係は2度チェックされます. まず <tt/extract/
	    ターゲットで, 次に <tt/install/ でチェックされます.
	    (これは, その port を作成するマシンとインストールする
	    マシンが違う場合でも, きちんとそのライブラリが利用できる
	    ことを確認するためです.) また, 依存するもの名前は package
	    の中にも含まれますので, ユーザのシステムに存在しなければ,
	    <tt>pkg_add</tt> が自動的にインストールします.

	<sect3>
	  <heading>RUN_DEPENDS</heading>

	  <p>Portを使用する際に必要となるファイルまたはプログラムがある
	    ときにはこの変数で指定します. これは`<tt>path:dir[:target]</tt>'
	    という組のリストで, <tt>path</tt> がファイルまたはプログラムの
	    名前, そして<tt>dir</tt> がそれが見つからない場合に作成する
	    ためのディレクトリ名で, '<tt/target/' はそのディレクトリで
	    呼ばれるターゲットです. <tt>Path</tt> の最初の文字がスラッ
	    シュ (<tt>/</tt>) の場合にはファイルかディレクトリとみなし,
	    その存在を `<tt>test -e</tt>' でチェックします; そうでない
	    場合には実行可能であると仮定し, `<tt>which -s</tt>' を使って
	    そのプログラムがユーザのサーチパス上にあるかどうか確認します.

	  <p>例えばMakefileに以下のように書いてあるとします.
<tscreen><verb>
RUN_DEPENDS=    ${PREFIX}/etc/innd:${PORTSDIR}/news/inn \
                wish8.0:${PORTSDIR}/x11-toolkits/tk80
</verb></tscreen>
	    まず, `<tt>/usr/local/etc/innd</tt>' というファイルか
	    ディレクトリが存在するか確認し, ない場合にはportsツリーの中の
	    <tt>news/inn</tt> というサブディレクトリから作られます. ま
	    た, `<tt>wish8.0</tt>' というプログラムがユーザのサーチパス中
	    にあるかどうか探し, ない場合には同じくportsツリーの 
	    <tt>x11-toolkit/tk80</tt> というサブディレクトリから作られます.
	    (この例で, `<tt>innd</tt>' は実際にはプログラムです; この
	    ように, プログラムであっても標準のサーチパス以外のところに
	    あるようなものの場合には, 絶対パスで指定してください.)

	    この依存関係は<tt>install</tt> ステージのはじめでチェック
	    されます. また, packageを作る際に必要となるportのpackage名
	    が記録され, <tt>pkg_add</tt>を使用するとユーザのシステム
	    に存在しない場合には自動的にそちらのpackageもインストール
	    されるようになります. `<tt/:target/' の部分は, 
	    <tt>&dollar;{DEPENDS_TARGET}</tt> と同じ場合には省略可能
	    です.

	<sect3>
	  <heading>BUILD_DEPENDS</heading>

	  <p>Portのコンパイルに必要なファイルまたはプログラムがある
	    ときは, この変数で指定してください. <tt>RUN_DEPENDS</tt>と同
	    様に, これは `<tt>path:dir[:target]</tt>' という組のリストです.
	    例えば,
<tscreen><verb>
BUILD_DEPENDS=  unzip:${PORTSDIR}/archivers/unzip
</verb></tscreen>
	    は `<tt>unzip</tt>' という名前のプログラムを探し, 見つから
	    ない場合には<tt>archivers/unzip</tt> サブディレクトリで作
	    れという意味になります.

	    ここでは「コンパイル」と一口にいいましたが, この変数は実際
	    にはファイルの展開から実際のコンパイル・リンクまで全部をま
	    とめて面倒を見てくれます. この依存関係は<tt>extract</tt>
	    ステージからチェックされます. `<tt/:target/' の部分は
	    <tt>&dollar;{DEPENDS_TARGET}</tt> と同じ場合には省略可能です.

	<sect3>
	  <heading>FETCH_DEPENDS</heading>

	  <p>この変数は, portを取ってくるのに必要なファイルまたはプロ
	    グラムを指定するのに使います. 上の二つと同様に, これは
	    `<tt>path:dir[:target]</tt>' という組のリストです. 例えば,
<tscreen><verb>
FETCH_DEPENDS=  ncftp2:${PORTSDIR}/net/ncftp2
</verb></tscreen>
	    としておけば, `<tt>ncftp2</tt>' という名前のプログラムを探
	    し, 見つからない場合には<tt>net/ncftp2</tt> サブディレク
	    トリにいってインストールします.

	    この依存関係は<tt>fetch</tt>ステージからチェックされます.
	    `<tt/:target/' の部分は <tt>&dollar;{DEPENDS_TARGET}</tt>
	    と同じ場合には省略可能です.

	<sect3>
	  <heading>DEPENDS</heading>

	  <p>上記の四つのいずれにもあてはまらないような依存関係がある場
	    合, または他の port がインストールされれているだけではなく,
	    ソースが展開されている必要がある場合にはこの変数
	    を使います. これは `<tt>dir[:target]</tt>' という形式のリスト
	    になります. 上記の四つと違って特に「確認」するものがありませ
	    んので.

	<sect3>
	  <heading>よくある依存関係を表す変数</heading>

	  <p>もし ports が X Window System を必要とするのであれば,
	    `<tt>USE_XLIB=yes</tt>' を定義してください. (これは
	    <tt>USE_IMAKE</tt> も意味します) BSD <tt/make/ の代りに
	    GNU <tt/make/ を必要とする場合には, `<tt>USE_GMAKE=yes</tt>'
	    を定義. 動作するのに GNU autoconf を必要とする場合には, 
	    `<tt>USE_AUTOCONF=yes</tt>' を定義. 最新の qt toolkit を使用
	    する場合には `<tt>USE_QT=yes</tt>' を定義. perl 言語の
	    バージョン5 を必要とする場合には, `<tt>USE_PERL5=yes</tt>'
	    を定義してください. (特に最後のは重要で, FreeBSD のいくつかの
	    バージョンでは基本システムに perl5 を含みますが, 他のものは
	    含んでいません.)

	<sect3>
	   <heading>依存関係に関する注意</heading>

	   <p>上で述べたように, 依存する ports が必要になったときに
	     呼ばれるデフォルトのターゲットは
	     <tt>&dollar;{DEPENDS_TARGET}</tt> で, そのデフォルトは
	     `<tt/install/' です. これは, ユーザの使用する変数で,
	     port の Makefile で定義されるものではありません.
	     もし, あなたのportが特別な方法で, 依存関係を扱う必要が
	     ある場合には, <tt>&dollar;{DEPENDS_TARGET}</tt> を再定義
	     するのではなく, <tt>*_DEPENDS</tt> 変数の `<tt/:target/'
	     の部分を利用してください. 

	   <p>`<tt>make clean</tt>' とタイプしたときには, 依存する
	     port も自動的に clean されます. もしそうしたくない場合
	     には, <tt/NOCLEANDEPENDS/ を環境変数として設定してください.

	   <p>無条件に他の port に依存させるには, 特別に `<tt/nonexistent/'
	     という文字列を <tt/BUILD_DEPENDS/ あるいは <tt/RUN_DEPENDS/
	     の最初のフィールドに使用してください. これは, 他の port の
	     ソースが必要なときのみ使用してください. target も指定すること
	     によって, コンパイルの時間を節約することができます. 例えば,
<tscreen><verb>
BUILD_DEPENDS=   /nonexistent:${PORTSDIR}/graphics/jpeg:extract
</verb></tscreen>
	     これは, 常に JPEG port の directory に行きソースの展開
	     を行ないます.

	   <p>あなたがやりたいことが他の方法ではできない場合以外は,
	     `<tt/DEPENDS/' を使わないでください. これは常に
	     他の port の作成を行い(さらにデフォルトでインストール
	     を行い), package も作成します. もし本当にこれがあなたの
	     やりたいことでしたら, 代りにこれを <tt/BUILD_DEPENDS/ と
	     <tt/RUN_DEPENDS/ で書くことをお勧めします -- 少なくとも
	     意図が明確になります.

      <sect2>
	<heading>コンパイル時の特別な指定</heading>

	<p>GNUの<tt>make</tt>を使う場合には, `<tt>USE_GMAKE=yes</tt>'
	  と指定してください. Portに GNU <tt>configure</tt>が含まれ
	  ている場合には, `<tt>GNU_CONFIGURE=yes</tt>' を使います
	  (これは, <tt/HAS_CONFIGURE/ も意味します).
	  <tt>configure</tt>に追加の引数 (デフォルトでは, GNU の
	  <tt/configure/ では `<tt>--prefix=&dollar;{PREFIX}</tt>',
	  GNUでない<tt/configure/ では空) を渡したい場合には追加部分
	  を<tt>&dollar;{CONFIGURE_ARGS}</tt>で指定してください.
	  そのパッケージが <tt/autoconf/ を使用する場合には,
	  `<tt>USE_AUTOCONF=yes</tt>' を使います. これは, 
	  <tt/GNU_CONFIGURE/ も意味し, <tt/configure/ の前に
	  <tt/autoconf/ を実行します.

	<p>X Window Systemのアプリケーションなど, <tt>imake</tt>を
	  使ってImakefileからMakefileを作成するportの場合には 
	  `<tt>USE_IMAKE=yes</tt>' を指定してください. コンフィグレー
	  ションステージで自動的に<tt>xmkmf -a</tt> が実行されます. も
	  し `<tt>-a</tt>' フラグが問題をもたらすなら, さらに
	  `<tt>XMKMF=xmkmf</tt>'としてください.
	  もし, port が imake を使用するけれども, `<tt>install.man</tt>'
	  ターゲットがない場合には, `<tt>NO_INSTALL_MANPAGES=yes</tt>'
	  を指定してください. ついでに, その port のオリジナルの
	  作者を探し出して八つ裂きにするといいでしょう. <tt>:&gt;</tt>

	<p>PortのMakefileが `<tt>all</tt>' 以外のものをメインのター
	  ゲットとしている場合には, <tt>&dollar;{ALL_TARGET}</tt> でそ
	  れを指定してください. `<tt>install</tt>' と
	  <tt>&dollar;{INSTALL_TARGET}</tt> も同様です.

	<p>もし, port の元の Makefile が `<tt>all</tt>' 以外のターゲット
	  をメインのターゲットとしている場合には,
	  <tt>&dollar;{ALL_TARGET}</tt> をそれに合わせて設定してください.
	  `<tt>install</tt>' と <tt>&dollar;{INSTALL_TARGET}</tt> に
	  ついても同様です.
    <sect1>
      <heading>特別な配慮</heading>

      <p>Portを作成する場合, 考慮しなくてはいけないことがさらにいくつか
	あります. この節では, それらのうちもっともありがちなものに
	ついて説明します.

      <sect2>
	<heading>ldconfig</heading>

	<p>共有ライブラリをインストールするときには, 共有ライブラリのキャッ
	  シュを更新するためにportのMakefileの<tt>post-install</tt>
	  target から`<tt>&dollar;{LDCONFIG} -m</tt>' を走らせてください. 
	  このコマンドの引数は共有ライブラリのインストールしてあるディ
	  レクトリ (通常 <tt>&dollar;{PREFIX}/lib</tt>) です. 

	<p>また, <tt>pkg/PLIST</tt>に<tt>@exec /sbin/ldconfig -m</tt>
	  '/`<tt>@unexec /sbin/ldconfig -R</tt>' の組を入れて, package
	  をインストールした場合にも共有ライブラリがすぐ使え, 削除の際
	  にも, システムがまだライブラリが存在すると誤認しないようにし
	  てください. この行は共有ライブラリを指定する行のすぐ後に書く
	  のがよいでしょう:
<tscreen><verb>
lib/libtcl80.so.1
@exec /sbin/ldconfig -m %D/lib
@unexec /sbin/ldconfig -R
</verb></tscreen>

	<p><em>絶対に</em>引数なしでただ `<tt>ldconfig</tt>'とだけ書い
	  てある行をMakefileやpkg/PLISTファイルに入れないでください. 
	  このコマンドを実行すると, 共有ライブラリのキャッシュが 
	  <tt>/usr/lib</tt>の内容のみとなり, ユーザのマシンにさまざま
	  な問題をもたらします (「ぎゃぁ! このportをインストールした
	  らxinitが使えなくなっちゃった!」). この掟を破った者は, 永久
	  に地獄の底で苦しみ続けるように, 閻魔様に頼んでおきます.

    <sect2>
      <heading>ELF 対応</heading>

      <p>FreeBSD は 3.0-RELEASE で ELF に移行しましたので,
	シェアードライブラリを作成するたくさんの port を ELF 対応
	にする必要があります. 3.0 システムは ELF としても a.out としても
	動作しますし, 我々は非公式ではありますが, できだけ長い間
	2.2 システムのサポートをしたいと思っていますので, 複雑な状況です.
	以下は a.out のみに対応している	port をどのように a.out と
	ELF 両方に対応させるかのガイドラインです.

      <p>このリストの一部は, 移行時にしかあてはまらないものもあります
	が, 古い port をアップグレードしたい場合に参考になるように,
	しばらくのあいだは残しておきます.

      <sect3>
	<heading>a.out ライブラリの退避</heading>

	<p>a.out ライブラリは, <tt>/usr/local/lib</tt> から,
	  `<tt/aout/' サブディレクトリ に移動しなくはなりません.
	  (もし移動しないと, ELF ports がそれらをあっさり上書きして
	  しまいます.) 3.0-CURRENT の <tt>src/Makefile</tt> にある 
	  `<tt/move-aout-libs/' ターゲット (`<tt/aout-to-elf'/ から呼ば
	  れます) がその移動をしてくれます. a.out ライブラリを
	  移動するだけなので, ELF と a.out の両方のライブラリが標準的な
	  ディレクトリにあるシステムでは, このターゲットを実行しても安全
	  です.

      <sect3>
	<heading>フォーマット</heading>

	<p>port ツリーは package をそのマシンのフォーマットで作成しま
	  す. つまり, 2.2 では a.out, また 3.0 では 
	  <tt>`objformat`</tt> の結果によって, a.out か ELF になります.
	  また, いったん a.out ライブラリをサブディレクトリに移動すると
	  a.out ライブラリの作成はサポートされません. (つまり, あなたがな
	  にをすれば良いのかを理解しているのならば, うまく作成できるかもし
	  れませんが, 自力でやらなければならないということです)

	<p>注: もし port が aout でしか動作しないのなら, <tt/BROKEN_ELF/
	  に原因を説明する文字列を設定してください. この変数が設定された 
	  port は, ELF システム上でのビルドの際スキップされます.

     <sect3>
       <heading>PORTOBJFORMAT</heading>

	<p><tt/bsd.port.mk/ において <tt/PORTOBJFORMAT/ は
	  `<tt/aout/' か `<tt/elf/' に設定され, 環境変数
	  <tt/CONFIGURE_ENV/,  <tt/SCRIPTS_ENV/, <tt/MAKE_ENV/
	  の中で export されます. (2.2-STABLE では常に `<tt/aout/' になり
	  ます). また, `<tt>PORTOBJFORMAT=${PORTOBJFORMAT}</tt>' とし
	  て <tt/PLIST_SUB/ に渡されます. (以下にある <tt/ldconfig/ に
	  関するコメントを参照して下さい.)
	
	<p>この変数は, 以下のようにして <tt/bsd.port.mk/ 中で設定され
	ます.
<tscreen><verb>
PORTOBJFORMAT!= test -x /usr/bin/objformat && /usr/bin/objformat ||
echo aout
</verb></tscreen>

	<p>この変数を使って, port の make の過程で何をすべきかを決定す
	  べきですが, もし port の <tt/configure/ スクリプトが元々, ELF
	  システムを自動的に検出するのであれば, <tt/PORTOBJFORMAT/ を
	  参照する必要はありません.

      <sect3>
	<heading>共有ライブラリの作成</heading>

	<p>以下は, a.out と ELF での共有ライブラリの扱いの違いです.

	<descrip>
	  <tag>共有ライブラリのバージョン</tag>ELF の共有ライブラリ
	    は, "<tt/libfoo.so.M/" という名前になっていなければなりませ
	    ん. ここで <tt/M/ は単一のバージョン番号を表します. 一方
	    a.out のライブラリは "<tt/libfoo.so.M.N/" という名前で,
	    <tt/M/ はメジャーバージョン番号, <tt/N/ はマイナーバージョン
	    番号になっている必要があります. これらを混同しないでください.
	    "<tt/libfoo.so.N.M/" という名のELF 共有ライブラリや 
	    "<tt/libfoo.so.N/" という名の a.out 共有ライブラリ(あるいは
	    シンボリックリンク) は <em/絶対にinstallしないでください/.

	  <tag>リンカコマンドライン</tag>直接 '<tt/ld/' を使用せずに,
	    '<tt>cc -shared</tt>' を使用してください. たった一つの違いは,
	    ELF には,  `<tt>-Wl,-soname,libfoo.so.M</tt>' コマンドライ
	    ンにを加える必要があることです.
	</descrip>

	<p>ELF のリンカを満足させるためには, <tt>libfoo.so</tt> -&gt;
	  <tt>libfoo.so.N</tt> というシンボリックリンクを作る必要があり
	  ます. これは, <tt/PLIST/ にも加えなくてはいけませんし, a.out
	  の場合でも害にはならないので (一部の port ではダイナミックリ
	  ンクローディングのために必要でもあります),
	  <tt/PORTOBJFORMAT/ の設定を気にせずに, ただ単純にリンクを作
	  成してください.

      <sect3>
	<heading><tt/LIB_DEPENDS/</heading>

	<p>すべての port の Makefile を編集して, <tt/LIB_DEPENDS/ 
	  からマイナー番号を除去する必要があり, 正規表現のサポートも
	  除去する必要があります. (例えば,
	  `<tt>foo\\.1\\.\\(33|40\\)</tt>' -&gt; `<tt>foo.2</tt>'.)
	  マッチングは `<tt>grep -wF</tt>' 使って行われます.

      <sect3>
	<heading><tt/PLIST/</heading>

	<p><tt/PLIST/ は, a.out のマイナー番号が0であれば, 短い (ELFの)
	  共有ライブラリの名前を含み, さもなくば長い (a.outの) 名前を
	  含んでいる必要があります. <tt/bsd.port.mk/ は 自動的に,
	  <tt/PORTOBJFORMAT/ が <tt/aout/ であれば, 
	  `<tt/.0/' を 短い共有ライブラリの名前の行に付け加え,
	  <tt/PORTOBJFORMAT/ が <tt/elf/ であれば, マイナー番号を
	  長い共有ライブラリの名前から削除します.

	<p>ELF システムで 2 つのバージョン番号を持つ共有ライブラリをイ
	  ンストールしたり, aout システムで 1 つのバージョン番号しか持
	  たない共有ライブラリをインストールするのが避けられない場合
	  (例えば他のオペレーティングシステム用の互換ライブラリをイン
	  ストールする port など), <tt/FILTER_NO_SHLIBS/ 変数を定義す
	  れば, 前節で説明されている <tt/PLIST/ 編集の機能が停止されま
	  す.

      <sect3>
	<heading><tt/ldconfig/</heading>

	<p>Makefile 中の <tt/ldconfig/ の行は以下のようになります.
<tscreen><verb>
${SETENV} OBJFORMAT=${PORTOBJFORMAT} ${LDCONFIG} -m ....
</verb></tscreen>
	  また <tt/PLIST/ 中では:
<tscreen><verb>
@exec /usr/bin/env OBJFORMAT=%%PORTOBJFORMAT%% /sbin/ldconfig -m ...
@unexec /usr/bin/env OBJFORMAT=%%PORTOBJFORMAT%% /sbin/ldconfig -R
</verb></tscreen>
	  となります. これは, システムのデフォルトフォーマットではなく
	  パッケージのフォーマットに応じて, 正しい 
	  <tt/ldconfig/ が呼ばれることを保証するためのものです.

      <sect2>
	<heading><tt/MASTERDIR/<label id="porting:masterdir"></heading>

	<p>もし, あなたの port が 変数(例えば 解像度とか紙のサイズなど)
	  を変えたりした, ちょっと違うバージョンを作成する必要があるとき
	  には, ユーザが分りやすいように, package ごとに別々のサブ
	  ディレクトリを作成し, ただし, できるだけ port 間でファイル
	  を共有するようにしてください. 典型的な例では, うまく変数を
	  使えば, とても短いMakefileだけ, 1つ以外のすべてのディレクトリ
	  に置くだけで済みます. その短い Makefile には
	  <tt>&dollar;{MASTERDIR}</tt> を使って, 残りのファイルがある
	  ディレクトリを指定できます. また<tt><ref id="porting:pkgname"
	  name="PKGNAME"></tt> の一部に変数に使って, package が別々の
	  名前を持つようにしてください.

	<p>以下が, とても良い例になるでしょう. これは
	  <tt>japanese/xdvi300/Makefile</tt>の一部です:
<tscreen><verb>
 :
PKGNAME=       ja-xdvi${RESOLUTION}-17
 :
# default
RESOLUTION?=    300
.if ${RESOLUTION} != 118 && ${RESOLUTION} != 240 && \
	${RESOLUTION} != 300 && ${RESOLUTION} != 400
	@${ECHO} "Error: invalid value for RESOLUTION: \"${RESOLUTION}\"" 
	@${ECHO} "Possible values are: 118, 240, 300 (default) and 400." 
	@${FALSE}
.endif
</verb></tscreen>
	  <tt>japanese/xdvi300</tt> は通常のパッチ, package ファイルも
	  もっています. そこで, `<tt/make/' と入力すると, デフォルトの
	  解像度(300)を使って, 普通に port の作成を行います.

	<p>他の解像度に関してですが, これが, <tt>xdvi118/Makefile</tt>
	  の(コメントを除いた)<em/すべて/です.
<tscreen><verb>
RESOLUTION=     118
MASTERDIR=      ${.CURDIR}/../xdvi300

.include "${MASTERDIR}/Makefile"
</verb></tscreen>
	  (<tt>xdvi240/Makefile</tt> と <tt>xdvi400/Makefile</tt> も
	  同様です). <tt>&dollar;{MASTERDIR}</tt> が <tt/bsd.port.mk/
	  に <tt>&dollar;{PATCHDIR}</tt> や <tt>&dollar;{PKGDIR}</tt>
	  などの通常のサブディレクトリが <tt/xdvi300/ にあることを
	  教えます. <tt/RESOLUTION=118/ の行が, <tt>xdvi300/Makefile</tt>
	  の <tt/RESOLUTION?=300/ の行を無効にし, port は解像度を
	  118として作成されます.

      <sect2>
	<heading>共有ライブラリのバージョン</heading>

	<p>まず, <ref id="policies:shlib"
	  name="共有ライブラリのバージョンについての指針"> を読んで,
	  共有ライブラリのバージョンを一般的にどうすれば良いかを
	  理解してください. 盲目的に, ソフトウエアの作者がちゃんと理解
	  していると信じててはいけません, 多くの場合違います.
	  細い点まで考慮することは大変重要なことです, なぜなら我々は
	  互換性がないかもしれない大量のソフトウェアを共存させようと
	  する, 特殊な状況にあるからです. 不注意な port の導入が
	  共有ライブラリに関して, 多大な問題を引き起したことが過去にあ
	  ります (今まで, <tt/jpeg-6b/ がなぜ `9.0' といバージョン番号
	  を持っているか不思議に思ったことはありませんか?).
	  もし, 疑問があれば, &a.ports; にメールを送ってください.
	  ほとんどの時間は, 正しいシェアードライブラリのバージョンを
	  決めることと, それを実現するためのパッチを作成することに
	  終始します.

	<p>しかしながら, が同じソフトウェアの違ったバージョンのソフト
	  ウェアが既にツリーにあるばあいには, 状況は非常に複雑です.
	  つまり, FreeBSD では, ユーザがリンカにどのバージョンの
	  共有ライブラリを使用するかを指定できないからです(リンカは
	  常にもっとも高いバージョンを選びます). これは, もし,
	  <tt/libfoo.so.3.2/ と <tt/libfoo.so.4.0/ がシステムに存在
	  するときには, リンカに特別なアプリケーションだけ
	  <tt/libfoo.so.3.2/ をリンクするように指示する方法がない
	  ことを意味します. これは, コンパイル時のリンクという意味
	  では完全に見劣りします. この場合の唯一の解決方法は, 共有
	  ファイルの名前の'ベース'部分を変えることです. 例えば,
	  <tt/libfoo.so.4.0/ を <tt/libfoo4.so.1.0/ へ変えることに
	  よって, バージョン 3.2 とバージョン 4.0 共に他の port から
	  リンクされることができるようになります. 

    <sect2>
      <heading>マニュアル<label id="porting:manpages"></heading>
	
      <p>MAN[1-9LN] 変数を使用すると, 自動的にすべてのマニュアルを
	<tt>pkg/PLIST</tt> に加えます (つまり, マニュアルを <tt/PLIST/
	に加えては<em/いけません/ -- <ref id="porting:plist"
	name="PLIST の生成"> を参照してください).
	またマニュアルを <tt>/etc/make.conf</tt> 中の
	<tt>NOMANCOMPRESS</tt>の設定に応じて, install時に自動的に
	圧縮したり伸長したりします.

      <p>マニュアルをインストール時に圧縮するかどうかを指定するには,
	<tt/MANCOMPRESSED/ 変数を使用します. この変数は, 3つの値をとる
	ことができます, `<tt/yes/', `<tt/no/' そして `<tt/maybe/ です.
	`<tt/yes/' はマニュアルが既に圧縮されてインストールされている,
	`<tt/no/' はされていない, `<tt/maybe/' はそのソフトウェアが
	すでに, <tt/NOMANCOMPRESS/ に合わせており <tt/bsd.port.mk/
	が特別なにもする必要がないことを意味します.

      <p><tt/USE_IMAKE/ がセットされていて, <tt/NO_INSTALL_MANPAGES/
	がセットされていなければ, <tt/MANCOMPRESSED/ は自動的に
	`<tt/yes/' に設定され, それ以外の場合には, `<tt/no/' になります.
	デフォルトがあなたの port に合わない場合以外は明示的に設定
	する必要がありません.

      <p><tt>PREFIX</tt>以外のディレクトリの下にマニュアルを置く
	ようなportでは<tt>MANPREFIX</tt>を指定することが
	できます. さらに, 特定のセクションのマニュアルだけ, 標準では
	ない場所にインストールする場合, 例えばいくつかの Perl のモ
	ジュールの ports など, には個々のマニュアルのパスを
	<tt>MAN<em>sect</em>PREFIX</tt> (<em>sect</em>は, 1 から 9
	または, L か N を表わします) によって指定できます.
	ができます. 

      <p>マニュアルが, 言語特有のサブディレクトリに置かれる場合には,
	言語名を <tt/MANLANG/ に設定してください. この変数のデフォルト
	値は, <tt>""</tt> になっています (つまり, 英語のみ).

      <p>これは, 全部をまとめた例です.
<tscreen><verb>
MAN1=		foo.1
MAN3=		bar.3
MAN4=		baz.4
MANLANG=	"" ja
MAN3PREFIX=	${PREFIX}/share/foobar
MAN8COMPRESSED=	yes
</verb></tscreen>
	以下の6個のファイルがこの port でインストールされます.
<tscreen><verb>
${PREFIX}/man/man1/foo.1.gz
${PREFIX}/man/ja/man1/foo.1.gz
${PREFIX}/share/foobar/man/man3/bar.3.gz
${PREFIX}/share/foobar/man/ja/man3/bar.3.gz
${PREFIX}/man/man4/baz.4.gz
${PREFIX}/man/ja/man4/baz.4.gz
</verb></tscreen>

      <sect2>
      <heading>Motifを必要とするport</heading>

      <p>最近はコンパイルにMotifを必要とするアプリケーションが増えて
	きました. (Motif自体は有料のものがいくつかの会社から手に入りま
	すし, 多くのアプリケーションがコンパイル可能な無料の互換ライブラリ
	が <tt>x11-toolkits/lesstif</tt>にあります)
	Motifはかなり広く使われていますし, 製品のライ
	センスではライブラリを静的にリンクした実行形式は再配布が認めら
	れている場合が多いので, Motifを必要とするソフトウェアを簡単に
	動的(port からコンパイルする人々のために)/静的(package を配布
	する人々のために)にリンクできるようなしくみが用意されています.

      <sect3>
	<heading>REQUIRES_MOTIF</heading>

	<p>MotifがないとコンパイルできないportのMakefileではこの変
	  数を指定してください. これによって, Motifを持っていない人が
	  このportをコンパイルしようとするのを未然に防ぎます.

      <sect3>
	<heading>&dollar;{MOTIFLIB}</heading>

	<p>この変数は<tt>bsd.port.mk</tt>によってMotifライブラリの指
	  定に置き換えられます. ソース内のMakefileやImakefileで 
	  Motifライブラリを指定しているところをこの変数に置き換えるよ
	  うにパッチをあててください.

	<p>代表的な例としては以下の二つがあげられます:
	<enum>
	  <item>MakefileかImakefileの中でMotifライブラリが 
	    `<tt>-lXm</tt>' として使われている場合には, かわりに 
	    `<tt>&dollar;{MOTIFLIB}</tt>' と書いてください.

	  <item>Imakefileの中で `<tt>XmClientLibs</tt>' が使われている
	    場合には, それを `<tt>&dollar;{MOTIFLIB}
	    &dollar;{XTOOLLIB} &dollar;{XLIB}</tt>' と書きかえてください.
	</enum>

	<p><tt>&dollar;{MOTIFLIB}</tt> は通常 `<tt>-L/usr/X11R6/lib 
	  -lXm</tt>' か `<tt>/usr/X11R6/lib/libXm.a</tt>' に置き換えら
	  れます. したがって前に `<tt>-L</tt>' や `<tt>-l</tt>' をつけ
	  る必要はありません.

      <sect2>
      <heading>X11 のフォント</heading>

      <p>もし, あなたの port が X window system のフォントをインストール
	するのであれば, それらを
	<tt>&dollar;{X11BASE}/lib/X11/fonts/local</tt> に置くようにして
	ください. このディレクトリは XFree86 release 3.3.3 で新設された
	ものです. もし, それが存在しなければ作成し, ユーザに
	XFree86 を 3.3.3 かそれより新しいものに更新か,
	すくなくとも, このディレクトリを <tt>/etc/XF86Config</tt> の
	font path に加えるように促すメッセージを出力するようにしてください.

    <sect2>
      <heading>Info ファイル</heading>
      <p>新しい版の texinfo(2.2.2-RELEASE およびそれ以降に入っています)
	には, `<tt/install-info/' というコマンドが含まれており,
	`<tt/dir/' ファイルに項目を追加したり, 削除したりすることがで
	きます. もし, あなたの port が info ドキュメントをインストー
	ルするのであれば, 以下の指示に従って, その port および package
	が正しく, ユーザの <tt>&dollar{PREFIX}/info/dir</tt> ファイル
	を更新するようにしてください. (この節は, とても長くてすいません,
	しかし info ファイルを作りあげるためには, これらは不可欠
	です. 正しく行なえば, <em>美しい</em> リストができますので,
	辛抱してください! <tt/:)/

      <p>まず, これを知っておかなければなりません:

<tscreen><verb>
% install-info --help
install-info [OPTION]... [INFO-FILE [DIR-FILE]]
  Install INFO-FILE in the Info directory file DIR-FILE.
  (訳注: Info ディレクトリの INO-FILE を DIR-FILE にインストールする)
Options:
--delete          Delete existing entries in INFO-FILE;
                    don't insert any new entries.
                  (訳注: INFO-FILE の中の項目を削除,
                   新しい項目は一切追加しない.)
 :
--entry=TEXT      Insert TEXT as an Info directory entry.
                  (訳注: TEXT を Info ディレクトリの項目として追加する.)
 :
--section=SEC     Put this file's entries in section SEC of the directory.
                  (訳注: このファイルの項目を Info ディレクトリの SEC 
                   という節に置く.)
 :
</verb></tscreen>

      <p>このプログラムは, 実際には info ファイルを<em/インストール/
	しません, 単に <tt/dir/ ファイルにエントリーを挿入したり削除し
	たりするだけです.

      <p>これから, <tt/install-info/ を使用するように, ports を変換す
	る7段階の工程を示します. 例として <tt>editors/emacs</tt>を
	使用します.

      <enum>
	<item>まず, texinfo のソースを見て, 
	  <tt/@dircategory/ と <tt/@direntry/ 文がないファイルについて, 
	  それらを追加するパッチを作成します. 以下は, ここでの例での
	  patchの一部です:

<tscreen><verb>
--- ./man/vip.texi.org	Fri Jun 16 15:31:11 1995
+++ ./man/vip.texi	Tue May 20 01:28:33 1997
@@ -2,6 +2,10 @@
 
 @setfilename ../info/vip
 @settitle VIP
+@dircategory The Emacs editor and associated tools
+@direntry
+* VIP: (vip).		A VI-emulation for Emacs.
+@end direntry
 
 @iftex
 @finalout
 :
</verb></tscreen>

	<p>フォーマットについては見ればわかると思います.
	  <tt/dir/ というファイルに必要な項目を書いておいてくれる作者
	  も多いので, まず自分で書く前にさがしてみてください. また, 関係
	  する ports も調べて, 節(section)の名前や, インデントなどが
	  きちんと合っているかどうかを確認してください(項目のテキスト
	  は, すべて4つめのタブ・ストップ(tab stop)から始めることを推
	  奨します).

	<p>1つのファイルに対して1つの info の項目しか書けないことに注
	  意してください, これは, `<tt>install-info --delete</tt>'
	  が, そのバグにより,  <tt/@direntry/ セクションに複数の項目を書
	  いても, 初めの1つの項目しか削除してくれないからです.

	<p>texinfo のソースにパッチをあてるかわりに, <tt/dir/ の項目
	  を <tt/install-info/ の 引数((<tt/--section/, <tt/--entry/)
	  として与えることもできます. これはあまり良い方法とは
	  思えません, なぜなら, 同じ情報を3ヶ所(<tt/Makefile/,
	  <tt/PLIST/ の <tt/@exec//<tt/@unexec/: 以下参照) に重複して, 
	  書く必要があるからです. しかしながら, もし日本語(あるいは, 
	  他のマルチバイト文字)の info ファイルがあるのならば, 
	  <tt/install-info/ の特別な引数を使用する必要があるでしょう,
	  なぜならば, <tt/makeinfo/ がこのような texinfo ソースファイル
	  を扱えないからです. (このようなものをどう扱うかの例としては,
	  <tt>japanese/skk</tt> の <tt/Makefile/ と <tt/PLIST/ を見て
	  ください.)

	<item>portのディレクトリに戻って, `<tt>make clean;  make</tt>'
	  をして, info ファイルが texinfo ソースファイルから再び生成さ
	  れることを確認してください. texinfo ソースファイルのほうが
	  info ファイルよりも新しいので, <tt/make/ とタイプすれば,
	  info ファイルは再構築されるはずですが, 多くの <tt/Makefile/ 
	  には info ファイルの正しい依存関係が書かれていません. emacs 
	  の場合, info ファイルの再構築ため, <tt/man/ サブディレクトリ
	  に降りていくようにするために, メインの <tt/Makefile.in/ にパッ
	  チをあてる必要がありました.

<tscreen><verb>
--- ./Makefile.in.org	Mon Aug 19 21:12:19 1996
+++ ./Makefile.in	Tue Apr 15 00:15:28 1997
@@ -184,7 +184,7 @@
 # Subdirectories to make recursively.  `lisp' is not included
 # because the compiled lisp files are part of the distribution
 # and you cannot remake them without installing Emacs first.
-SUBDIR = lib-src src
+SUBDIR = lib-src src man
 
 # The makefiles of the directories in $SUBDIR.
 SUBDIR_MAKEFILES = lib-src/Makefile man/Makefile src/Makefile oldXMenu/Makefile lwlib/Makefile
--- ./man/Makefile.in.org	Thu Jun 27 15:27:19 1996
+++ ./man/Makefile.in	Tue Apr 15 00:29:52 1997
@@ -66,6 +66,7 @@
 	${srcdir}/gnu1.texi \
 	${srcdir}/glossary.texi
 
+all: info
 info: $(INFO_TARGETS)
 
 dvi: $(DVI_TARGETS)
</verb></tscreen>

	<p><tt/man/ サブディレクトリでのデフォルトターゲットは,
	  <tt/info/ で呼ばれるのに対して, メインの Makefile では,
	  <tt/all/ で呼びたいので, 2つめのpatchが必要でした.
	  また, <tt/info/ info ファイルのインストールも削除しました, 
	  なぜなら, 同じものが同じ名前で既に <tt>/usr/share/info</tt>
	  にあるからです. (このパッチはここにはありません.)

	<item>もし, <tt/Makefile/ に <tt/dir/ ファイルをインストールす
	  る個所があれば, 削除します. あなたの port がインストー
	  ルしてはいけません. また, <tt/dir/ ファイルを壊してしまうよう
	  なコマンドの類も削除します.

<tscreen><verb>
--- ./Makefile.in.org	Mon Aug 19 21:12:19 1996
+++ ./Makefile.in	Mon Apr 14 23:38:07 1997
@@ -368,14 +368,8 @@
 	if [ `(cd ${srcdir}/info && /bin/pwd)` != `(cd ${infodir} && /bin/pwd)` ]; \
 	then \
 	  (cd ${infodir};  \
-	   if [ -f dir ]; then \
-	     if [ ! -f dir.old ]; then mv -f dir dir.old; \
-	     else mv -f dir dir.bak; fi; \
-	   fi; \
 	   cd ${srcdir}/info ; \
-	   (cd $${thisdir}; ${INSTALL_DATA} ${srcdir}/info/dir ${infodir}/dir); \
-	   (cd $${thisdir}; chmod a+r ${infodir}/dir); \
 	   for f in ccmode* cl* dired-x* ediff* emacs* forms* gnus* info* message* mh-e* sc* vip*; do \
 	     (cd $${thisdir}; \
 	      ${INSTALL_DATA} ${srcdir}/info/$$f ${infodir}/$$f; \
 	      chmod a+r ${infodir}/$$f); \
</verb></tscreen>

	<item>(これは, 既存のportを修正するときのみ必要です.)
	  <tt>pkg/PLIST</tt> を見て, <tt>info/dir</tt> にパッチをあて
	  ようとするものすべてを削除します.  これらは,
	  <tt>pkg/INSTALL</tt> やその他のファイルにもあるかもしれない
	  ので, いろいろさがしてみてください.

<tscreen><verb>
Index: pkg/PLIST
===================================================================
RCS file: /usr/cvs/ports/editors/emacs/pkg/PLIST,v
retrieving revision 1.15
diff -u -r1.15 PLIST
--- PLIST	1997/03/04 08:04:00	1.15
+++ PLIST	1997/04/15 06:32:12
@@ -15,9 +15,6 @@
 man/man1/emacs.1.gz
 man/man1/etags.1.gz
 man/man1/ctags.1.gz
-@unexec cp %D/info/dir %D/info/dir.bak
-info/dir
-@unexec cp %D/info/dir.bak %D/info/dir
 info/cl
 info/cl-1
 info/cl-2
</verb></tscreen>

	<item><tt/post-install/ ターゲットを Makefile に加えて,
	  <tt/dir/ ファイルが存在しなければ作成するようにします.
	  また, インストールされた info ファイルについては,
	  <tt/install-info/ を実行するようします.

<tscreen><verb>
Index: Makefile
===================================================================
RCS file: /usr/cvs/ports/editors/emacs/Makefile,v
retrieving revision 1.26
diff -u -r1.26 Makefile
--- Makefile	1996/11/19 13:14:40	1.26
+++ Makefile	1997/05/20 10:25:09	1.28
@@ -20,5 +20,11 @@
 post-install:
 .for file in emacs-19.34 emacsclient etags ctags b2m
 	strip ${PREFIX}/bin/${file}
 .endfor
+	if [ ! -f ${PREFIX}/info/dir ]; then \
+	  ${SED} -ne '1,/Menu:/p' /usr/share/info/dir > ${PREFIX}/info/dir; \
+	fi
+.for info in emacs vip viper forms gnus mh-e cl sc dired-x ediff ccmode
+	install-info ${PREFIX}/info/${info} ${PREFIX}/info/dir
+.endfor
 
 .include <bsd.port.mk>
</verb></tscreen>

	<p> 新しい info ファイルを作成するのに,
	  <tt>/usr/share/info/dir</tt> と上のコマンド, 以外は使用しな
	  いでください. 実際のところ, もし port する人がこれに関して
	  <tt/PLIST/ に自らまったく手を加える必要がないのであれば, 上
	  のパッチのはじめの3行を <tt/bsd.port.mk/ に加えたでしょう.

	<item><tt/PLIST/ を編集して,  同じ働きをする <tt/@exec/ 文, そ
	  れに<tt/pkg_delete/ のために <tt/@unexec/ 文を加えてくださ
	  い. <tt/@unexec/ を使用して <tt>info/dir</tt> を削除する必
	  要はありません.

<tscreen><verb>
Index: pkg/PLIST
===================================================================
RCS file: /usr/cvs/ports/editors/emacs/pkg/PLIST,v
retrieving revision 1.15
diff -u -r1.15 PLIST
--- PLIST	1997/03/04 08:04:00	1.15
+++ PLIST	1997/05/20 10:25:12	1.17
@@ -16,7 +14,15 @@
 man/man1/etags.1.gz
 man/man1/ctags.1.gz
+@unexec install-info --delete %D/info/emacs %D/info/dir
 :
+@unexec install-info --delete %D/info/ccmode %D/info/dir
 info/cl
 info/cl-1
@@ -87,6 +94,18 @@
 info/viper-3
 info/viper-4
+@exec [ -f %D/info/dir ] || sed -ne '1,/Menu:/p' /usr/share/info/dir > %D/info/dir
+@exec install-info %D/info/emacs %D/info/dir
 :
+@exec install-info %D/info/ccmode %D/info/dir
 libexec/emacs/19.34/i386--freebsd/cvtmail
 libexec/emacs/19.34/i386--freebsd/digest-doc
</verb></tscreen>

	<p><tt>@unexec install-info --delete</tt>' コマンドは, info
	  ファイル自身より先に置き, コマンドがファイルを読めるようにし
	  ておかなければならないことに注意してください.
	  また, `<tt>@exec install-info</tt>' コマンドは
	  info ファイルおよび <tt/dir/ ファイルを作るコマンドより後に
	  おかなければなりません.

	<item><ref id="porting:testing" name="テスト"> をして
	  出来栄えに感服しましょう <tt/:)/
	  各段階の前後に, <tt/dir/ ファイルをチェックしましょう.
      </enum>

    <sect1>
      <heading><tt/pkg/ サブディレクトリ</heading>

      <p>まだ触れていない, いくつかのこつが <tt/pkg/ サブディレクトリ
	にはあり, 時として便利でしょう.

      <sect2>
	<heading><tt/MESSAGE/</heading>

	<p><label id="porting:message">もし, インストールする人に
	  メッセージを表示する必要がある場合には, そのメッセージを
	  <tt>pkg/MESSAGE</tt> に置けます. この機能は, <tt/pkg_add/
	  の後の追加のインストール手続きを表示するときなどに, 重宝
	  します. MESSAGE ファイルは pkg/PLIST に加える必要はありま
	  せん. また, もしユーザが package ではなく port を使用して
	  いる場合には自動的には表示されませんので, 明示的に
	  <tt/post-install/ で表示するようにするべきでしょう.

      <sect2>
	<heading><tt/INSTALL/</heading>
	  <p>バイナリパッケージが <tt/pkg_add/ でインストールされるとき
	  に, 実行される必要があるコマンドがあれば, pkg/INSTALL スクリプト
	  を使って実行することができます. このスクリプトは自動的に
	  package に加えられ, pkg_add によって2度実行されます. はじめは 
	  `<tt>INSTALL &dollar;{PKGNAME} PRE-INSTALL</tt>' と実行され,
	  2度目には, '`<tt>INSTALL &dollar;{PKGNAME} POST-INSTALL</tt>'
	  と実行されます. どちらのモードで実行されているかは,
	  `<tt>&dollar;2</tt>' を調べることによってわかります.
	  環境変数 `<tt>PKG_PREFIX</tt>' には package がインストールさ
	  れるディレクトリが設定されます. 詳細は man
	  <tt>pkg_add(1)</tt> を見てください.
	  注意すべきことは, port を `<tt>make install</tt>' で
	  インストールするときには, このスクリプトは自動的に実行されな
	  いということです. もし, 実行される必要があるならば, port の
	  Makefile から明示的に呼ぶ必要があります.

      <sect2>
	<heading><tt/REQ/</heading>
	  <p>port が(インストールされるシステムの状態によって)
	  インストールされるべきか, されないべきか区別する必要があると
	  きには, 「要件(requirements)」スクリプト pkg/REQ を作ること
	  ができます. これは, インストール及びデインストール
	  (package の削除)の時に自動的に実行され, それらが処理されるべ
	  きかを決定します.
	
      <sect2>
	<heading>makeの変数にあわせた <tt/PLIST/ の変更<label
	  id="porting:plist"></heading>

	<p>いくつかの port, 特に p5- portsなど, は configure のオプション
	  (あるいは, p5- ports の場合は perl のバージョン)によって, 
	  <tt/PLIST/ を変える必要があります. これを容易に実現するために,
	  <tt/PLIST/ 中の <tt/%%OSREL%%/, <tt/%%PERL_VER%%/,
	  <tt>%%PERL_VERSION%%</tt> は, 適切に置き換えられるようになって
	  います. <tt/%%OSREL%%/ の値は, オペレーティングシステムの
	  数字で表されたリビジョンです (例えば, `2.2.7').
	  <tt/%%PERL_VERSION%%/ は perl のバージョン番号全体(例えば,
	  `5.00502')で, <tt/%%PERL_VER%%/ はバージョン番号から,
	  パッチレベルを引いてものです(例えば, `5.005').

	<p>他の置き換えが必要であれば, <tt>PLIST_SUB</tt> 変数に
	  <tt>VAR=VALUE</tt> という形式のペアのリストを設定することに
	  よって,	<tt/PLIST/ 中の `<tt>%%VAR%%</tt>' は `<tt/VALUE/'
	  に置き換えられます. 例えば, バージョンに固有の沢山のファイル
	  をインストールする場合には, <tt/Makefile/ に

<tscreen><verb>
OCTAVE_VERSION=        2.0.13
PLIST_SUB=     OCTAVE_VERSION=${OCTAVE_VERSION}
</verb></tscreen>

	  と書いて, <tt/PLIST/ 中のバージョン番号が表われるすべての
	  ところに, <tt>%%OCTAVE_VERSION%%</tt> と書きます.
	  このようにしておけば, port をアップグレードするときに,
	  何十行(ときとして, 何百行)も <tt/PLIST/ を書き替えないで
	  すみます.

	<p>この書き換えは (<ref id="porting:manpages" name="マニュアル">
	  の追加も) <tt/do-install/ と <tt/post-install/ ターゲット
	  のあいだに, <tt>&dollar;{PLIST}</tt> を読み
	  <tt>&dollar;{TMPPLIST}</tt> (デフォルトは, 
	  <tt>&dollar;{WRKDIR}/.PLIST.mktmp</tt>) に書き込むことによって
	  行なわれます. もし, あなたの port が <tt>&dollar;{PLIST}</tt>
	  を実行時に生成するのであれば, <tt/do-install/ のあいだか,
	  その前に行うようにしてください. また, 書きかえられたあとの
	  ファイルを編集する必要がある場合には, <tt/post-install/
	  で, <tt/&dollar;{TMPPLIST}/ を書きかえてください.

      <sect2>
	<heading><tt/pkg/ サブディレクトリにあるファイル名の変更
	  <label id="porting:pkgsubdir"></heading>
	<p><tt/pkg/ サブディレクトリにあるファイルは全て, 変数を
	  を使用して定義されていますので, 必要であれば Makefile 中で
	  変更可能です. いくつかの ports で 一つの <tt/pkg/
	  サブディレクトリを共有す場合や, 上記のファイルに書き込む
	  必要があるときなど, 特に便利です.
	  (<tt/pkg/ サブディレクトリに直接書き込むのが良くない理由に
	  ついては <ref id="porting:wrkdir" name="WRKDIR 以外への書きこみ">
	  を参照してください.)

	<p>以下が変数名とそのデフォルト値の表です.

<tscreen><verb>
COMMENT          ${PKGDIR}/COMMENT
DESCR            ${PKGDIR}/DESCR
PLIST            ${PKGDIR}/PLIST
PKGINSTALL       ${PKGDIR}/INSTALL
PKGDEINSTALL     ${PKGDIR}/DEINSTALL
PKGREQ           ${PKGDIR}/REQ
PKGMESSAGE       ${PKGDIR}/MESSAGE
</verb></tscreen>

	<p><tt>PKG_ARGS</tt>を上書きせずに, これらの変数を変更
	  するようにしてください. <tt>PKG_ARGS</tt>を変更すると
	  これらのファイルは port から正しく <tt>/var/db/pkg</tt>
	  にインストールされなくなります.

    <sect1>
      <heading>ライセンス上の問題</heading>

      <p>ソフトウェアによっては制限の厳しいライセンスがついてきたり, 
	法律的に問題があるかもしれません. (PKPの公開鍵暗号化, ITAR (暗
	号化ソフトウェアの輸出) などが例としてあげられます). それらを
	どう扱えばいいかはライセンスの文面によってさまざまな場合があり
	ます.

      <p>ソフトウェア移植者として, あなたにはライセンスをよく読み,
	FreeBSDプロジェクトがFTPまたはCD-ROMで配布してはいけないソフ
	トウェアを配布してしまうことのないよう, 注意する義務があります. 
	なにか疑問がある場合には, &a.ports;に聞いてみてください.

      <p>よく見られるケースに対処するために, 二つの変数が用意されてい
	ます:

      <enum>
	<item>ソフトウェアに「有償再配布を禁ずる」という趣旨のライセン
	  スがついてきた場合には<tt>NO_CDROM</tt>という変数にその理由
	  を記述してください. 私たちはこれがついている port は CD-ROM
	  リリースに入れないようにしますが, オリジナルのソースファイル
	  とpackageはFTPでは取れるようにしておきます.

	<item>もしも, 生成される package が個々のサイトで独自に構築さ
	  れる必要があったり, ライセンスによって生成されるバイナリが
	  配布できない場合には, <tt>NO_PACKAGE</tt> 変数にその理由を
	  記述してください. そのような package が FTP サイトに置かれ
	  たり, リリース時の CD-ROM へ入らないようにします. ただし,
	  いずれの場合も distfile は(FTP や CD-ROM に)含まれるように
	  なります.
	
	<item>Portが, 使用者によっては法律上の問題が生じる時 (暗号化ソフ
	  トウェアなど), または「商用利用を禁ずる」とライセンスに書い
	  てある場合には<tt>RESTRICTED</tt>という変数にその理由を入れ
	  てください. この場合には, ソースファイルやpackageは私たちの
	  FTPサイトにも置かれません.
      </enum>

      <p>注: GNU一般公有使用許諾書 (GPL) はバージョン1, 2とも
	port作成上は何ら問題にはなりません.

      <p>注: もしあなたが，ソースツリー管理者 (committer) であれば，
	ソースツリーにこのようなportを入れる際に,
	<tt>ports/LEGAL</tt>ファイルを書き換えるのを忘れないようにし
	てください.

    <sect1>
      <heading>アップグレード</heading>

      <p>Portのバージョンが原作者からのものに比べて古いことに気がつ
	いたら, まずはあなたの持っているportが私たちの最新のもの (ミラー
	サイトの <tt>ports/ports-current</tt> というディレクトリにあります) 
	であることを確認してください.

      <p>次に, portのMakefileに<tt>MAINTAINER</tt> (保守担当者) の
	アドレスが書いてある場合には, その人にメールを出してみましょう. 
	保守担当者の人がすでにアップグレードの準備をしているかもしれま
	せんし, (新しいバージョンの安定度に問題があるなど) あえてアッ
	プグレードをしない理由があるのかもしれません.

      <p>保守担当者にアップグレードをしてくれと頼まれた場合, あるいは
	そもそもportのMakefileに保守担当者が書いてない場合などは, あ
	なたがアップグレードをしてくださると助かります. その場合にはアッ
	プグレードをしたのち, 変更前と変更後のディレクトリの再帰的diff
	(unified diff と context diff のどちらでもいいのですが,
	port のコミッター達は unified diff のほうを好むようです)
	をとって送ってください. (例えば, 変更前のディレクトリが 
	`<tt>superedit.bak</tt>' という名前でとってあり, 変更後のもの
	が `<tt>superedit</tt>' に入っているなら, `<tt>diff -ruN
	superedit.bak superedit</tt>' の結果を送ってください. )
	diff の出力を見て, すべての変更が正しくなされているか確認して
	ください. 変更箇所については, <tt>send-pr</tt> (カテゴリーは,
	`ports')に diff の出力結果を添えて, 私たちに送ってもらうのが一
	番よいです. commit する際に CVS に明確に記述しなければならない
	ので, 付け加えたり削除したりしたファイルがあったら, それについ
	て書いておいてください. もし diff の大きさが 20 KB 程度を
	超えるようであれば, 圧縮したものを uuencode して下さい.
	そうでなければそのまま PR に入れるだけでいいです.

      <p>繰り返しになりますが, ports の変更を送るときには,
	<tt>shar(1)</tt> ではなく <tt>diff(1)</tt> を使用してください.

    <sect1>
      <heading>やってよいことといけないこと
      <label id="porting:dads"></heading>

      <p>この節では, ソフトウェアをportする上でよくある落し穴などにつ
	いて説明します. このリストを使って, あなた自身が作成した port 
	のチェックはもとより, PR データベースにある, 他の人が作成した 
	port のチェックもできます. あなたがチェックした port について
	のコメントを
	<ref id="contrib:general" name="バグ報告と一般的な論評">
	にしたがって, 送ってください. PR データベースにある port を
	チェックすることによって, 私達がそれらを commit するのを早くし,
	あなたが何をしているか理解していることも示します.

      <sect2>
	<heading>バイナリのstrip</heading>

	<p>バイナリはstripしてください. オリジナルのソースがバイナリを
	  stripしてくれる場合は良いですが, そうでない場合には
	  <tt>post-install</tt>ターゲットを指定して strip するようにする
	  とよいでしょう. 例えば, こんな風になります:

<tscreen><verb>
 post-install:
	 strip ${PREFIX}/bin/xdl
</verb></tscreen>

	<p>インストールされた実行形式がすでにstripされているかどうか
	  は<tt>file</tt>コマンドで確認できます. これが`not stripped'
	  と言わなければ, stripされているということです. 

      <sect2>
	<heading>INSTALL_* マクロ</heading>
	<p> あなた自身の *-install ターゲットでファイルの正しいモードと
	 オーナを保証するために, 必ず<tt>bsd.port.mk</tt>で提供されて
	 いるマクロを使用してください. マクロは以下のようなものがあります.

	<itemize>
	  <item><tt>${INSTALL_PROGRAM}</tt> は実行可能なバイナリを
	    インストールするコマンドです．
	  <item><tt>${INSTALL_SCRIPT}</tt> は実行可能なスクリプトを
	    インストールするコマンドです．
	  <item><tt>${INSTALL_DATA}</tt> は共有可能なデータを
	    インストールするコマンドです．
	  <item><tt>${INSTALL_MAN}</tt> はマニュアルとその他のドキュメ
	    ントをインストールするコマンドです．(圧縮はしません)
	  </itemize>

	<p>これらは基本的に<tt>install</tt>コマンドに適当なフラグを与え
	  たものです. どのようにこれらを使用するかは以下の例を見てください.

    <sect2>
      <heading><tt/WRKDIR/<label id="porting:wrkdir"></heading>
      <p><tt/WKRDIR/ の外のファイルにはなにも書き込まないように
	してください. <tt/WRKDIR/ は ports のビルド中に書き込こめる
	ことが保証されている唯一の場所です(<ref id="ports:cd"
	name="CDROM から ports をコンパイル">を参照).
	<tt>&dollar;{PKGDIR}</tt> にあるファイルを修正する必要がある
	ときには, <ref id="porting:pkgsubdir" name="変数の再定義">
	によって行ない, 上書きはしないでください.

    <sect2>
      <heading><tt/WRKDIRPREFIX/</heading>
      <p><tt/WRKDIRPREFIX/ を尊重していることを確認してください.
	特に, 別の port の <tt>&dollar;{WRKDIR}</tt> を参照している
	ときには気を付けてください. 正しい場所は, 
	<tt>&dollar;{WRKDIRPREFIX}&dollar;{PORTSDIR}/subdir/name/work</tt>,
	です, <tt>&dollar;{PORTSDIR}/subdir/name/work</tt> とか
	<tt>&dollar;{.CURDIR}/../../subdir/name/work</tt> とか
	ではありません.

      <p>また, 自分で <tt/WRKDIR/ 定義するときには, 頭に
	<tt>&dollar;{WRKDIRPREFIX}&dollar;{.CURDIR}</tt> が付いている
	事を確認してください.

    <sect2>
      <heading>OS や OS のバージョンの区別
	<label id="porting:versions"></heading>

      <p>Portの過程で, 修正や, どのバージョンのUNIXで動くかによる条件
	つきコンパイルなどが必要なコードに出会うかもしれません. その
	ような条件つきコンパイルなどのための変更をおこなうときには,
	FreeBSD 1.x システムへの移植や, CSRGの4.4BSD, BSD/386,
	386BSD, NetBSD, OpenBSD などの他のBSDシステムへの移植が可能な
	ように, できるだけ普遍的な変更をおこなうことを心がけてください.

      <p>4.3BSD/Reno (1990) およびそれより新しいBSD版を古いバージョン
	と区別するには `<tt>BSD</tt>' マクロを利用するのがよいでしょう.
	これは <tt>&lt;sys/param.h&gt;</tt> で定義されています. このファ
	イルがすでにインクルードされていればよいのですが, もしそうでな
	い場合には以下のコードを, その<tt>.c</tt> ファイルの適当な場所
	に加えてください.

<tscreen><verb>
#if (defined(__unix__) || defined(unix)) && !defined(USG)
#include <sys/param.h>
#endif
</verb></tscreen>

      <p>これらの2つのシンボルが定義されているすべてのシステムには 
	sys/param.h があるはずです. もし, そうでないシステムを発見した
	ら我々にも教えてください. &a.ports; までメールを送ってください.

      <p>あるいは, GNU の Autoconf のスタイルを使用することもできます,

<tscreen><verb>
#ifdef HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif
</verb></tscreen>

	この方法を使用するときには, Makefile 中の<tt>CFLAGS</tt>に
	<tt>-DHAVE_SYS_PARAM_H</tt> を加えることを忘れないようにしてく
	ださい. 

	いったん<tt>&lt;sys/param.h&gt;</tt>がインクルードされると,

<tscreen><verb>
#if (defined(BSD) && (BSD >= 199103))
</verb></tscreen>

	このようにしてそのコードが4.3 Net2コードベース, または
	それより新しいもの (例: FreeBSD 1.x, 4.3/Reno, NetBSD 0.9, 386BSD, 
	BSD/386 1.1とそれ以前) の上でコンパイルされているかを検出できます. 

<tscreen><verb>
#if (defined(BSD) && (BSD >= 199306))
</verb></tscreen>

	これは, 4.4コードベース, またはそれより新しいもの (例: FreeBSD
	2.x, 4.4, NetBSD 1.0, BSD/386 2.0とそれ以後) の上でコンパイルさ
	れているかどうかを検出するために使用します.

	4.4BSD-Lite2 コードベースでは, BSD マクロの値は 199506 になっ
	ています.  これは参考程度の意味合いしかありません.
	4.4-Lite ベースの FreeBSD と 4.4-Lite2 での変更がマージされた
	バージョンとを区別するのに使用するべきものではありません.
	この目的のためには, __FreeBSD__ マクロをかわりに使用してくださ
	い.

      <p>以下は控え目に使ってください.

      <itemize>
	<item><tt>__FreeBSD__</tt> はFreeBSDのすべての版で定義されてい
	  ます. 変更がFreeBSDだけに適用されるとき以外は使用しないでく
	  ださい. Portでよくある, <tt>strerror()</tt> ではなく
	  <tt>sys_errlist[]</tt> を使うなどは, FreeBSDでの変更ではなく,
	  BSDの流儀です.

	<item>FreeBSD 2.xでは<tt>__FreeBSD__</tt>が2と定義されていま
	  す. それ以前の版では1になっています. その後の版では,
	  そのメジャー番号に合うように上がっていきます.

	<item>もし, FreeBSD 1.x システムと FreeBSD 2.x あるいは 
	  FreeBSD 3.x システムを区別する必要があれば, 上で述べた
	  <tt>BSD</tt>マクロを使用するのが, 
	  大抵の場合において正しい答です. もし, FreeBSD特有の変更であ
	  れば (`<tt>ld</tt>' を使うときのシェアードライブラリ用のな
	  オプションなど), <tt>__FreeBSD__</tt>を使い
	  `<tt>#if __FreeBSD__ &gt; 1</tt>' のようにFreeBSD 2.x
	  および, それ以降のシステムを検出するのはかまいません.

	  もし, 2.0-RELEASE以降のFreeBSDシステムを細かく検出したけれ
	  ば, 以下を使用することができます.

<tscreen><verb>
#if __FreeBSD__ >= 2
#include <osreldate.h>
#    if __FreeBSD_version >= 199504
         /* 2.0.5+ release specific code here */
#    endif
#endif
</verb></tscreen>
<tt>__FreeBSD_version</tt> の値は以下の通りです:
<tscreen><verb>
2.0-RELEASE:                     199411
2.1-CURRENT's:                   199501, 199503
2.0.5-RELEASE:                   199504
2.2-CURRENT (2.1以前):           199508
2.1.0-RELEASE:                   199511
2.2-CURRENT (2.1.5以前):         199512
2.1.5-RELEASE:                   199607
2.2-CURRENT (2.1.6以前):         199608
2.1.6-RELEASE:                   199612
2.1.7-RELEASE:                   199612
2.2-RELEASE:                     220000
2.2.1-RELEASE:                   220000 (2.2-RELEASE と同じです)
2.2-STABLE (2.2.1-RELEASE 以後): 220000 (これも同じです)
2.2-STABLE (texinfo-3.9 以後):   221001
2.2-STABLE (top 導入以後):       221002
2.2.2-RELEASE:                   222000
2.2-STABLE (2.2.2-RELEASE 以後): 222001
2.2.5-RELEASE:                   225000
2.2-STABLE (2.2.5-RELEASE 以後): 225001
2.2-STABLE (ldconfig -R 以後):   225002
2.2.6-RELEASE:                   226000
2.2.7-RELEASE:                   227000
2.2-STABLE (2.2.7-RELEASE 以後): 227001
2.2-STABLE (semctl(2) 変更後):   227002
2.2.8-RELEASE:                   228000
2.2-STABLE (2.2.8-RELEASE 以後): 228001
3.0-CURRENT (mount(2) 変更以前): 300000
3.0-CURRENT (mount(2) 変更後):   300001
3.0-CURRENT (semctl(2) 変更後):  300002
3.0-CURRENT (ioctl 引数変更後):  300003
3.0-CURRENT (ELF(2) 移行後):     300004
3.0-RELEASE:                     300005
3.0-CURRENT (3.0-RELEASE 以後):  300006
3.0-STABLE (3/4 ブランチ以後):   300007
3.1-RELEASE:                     310000
3.1-STABLE (3.1-RELEASE 以後):   310001
4.0-CURRENT (3/4 ブランチ以後):  400000
</verb></tscreen>
        (2.2-STABLEは, 2.2.5-RELESE 以後, "2.2.[5678]-STABLE" と呼ばれ
	ることがあります.)
	見ての通り, これは年・月というフォーマットになっていましたが,
	バージョン 2.2 から, より直接的にメジャー/マイナー番号を使う
	ように変更になりました. 並行していくつかのブランチ(枝分かれし
	たバージョン)を開発する場合には, リリースされた日付でそれらの
	リリースを分類することが不可能だからです.
	(あなたが今 port を作成するときに, 古い -CURRENT 達について心配
	する必要はありません. これは参考のために挙げられているにすぎま
	せん.)
	
      </itemize>

      <p>これまで, 何百ものportが作られてきましたが,
	<tt>__FreeBSD__</tt>が正しく使われたのは, 1つか2つの場合だけで
	しょう. 以前のportが誤った場所でそのマクロを使っているからと
	いって, それをまねする理由はありません.

      <sect2>
	<heading><tt/bsd.port.mk/ の後に書くこと</heading>

	<p>`<tt>.include &lt;bsd.port.mk&gt;</tt>' の行の後には
	  なにも書かないようにしてください. 大抵の場合は Makefile の
	  中程のどこかで, <tt/bsd.port.pre.mk/ を include して,
	  最後に <tt/bsd.port.post.mk/ を include することによって
	  避けることができます. (<tt/pre.mk//<tt/post.mk/ のペアか
	  <tt/bsd.port.mk/ だけのどちらかだけを include してください.
	  2つを混ぜないでください.) 前者は, いくつかの変数の定義だけ
	  をして, Makefile でのテストに使用し, 後者は残りを定義します.
	  以下は <tt/bsd.port.pre.mk/ で定義される重要な変数です.
	  (これは, すべてではありません. 完全なリストは <tt/bsd.port.mk/
	  を参照してください.)

	<descrip>
	<tag>&dollar{ARCH}</tag> `<tt>uname -m</tt>' で返される
	  アーキテクチャ. (例, `i386').

	<tag>&dollar{OPSYS}</tag>`<tt>uname -s</tt>' で返される
	  オペレーティングシステム (例, `FreeBSD').

	<tag>&dollar{OSREL}</tag> オペレーティングシステムの
	  リリースバージョン (例., `2.1.5', `2.2.7').

	<tag>&dollar{OSVERSION}</tag> 数字形式のオペレーティングシステム
	  のバージョン, 上記の <ref id="porting:versions"
	  name="__FreeBSD_version"> と同じです.

	<tag>&dollar{PORTOBJFORMAT}</tag> システムのオブジェクト
	  フォーマット (`aout' あるいは `elf').

	<tag>&dollar{LOCALBASE}</tag> 'local' ツリーのベース.
	  (例, `/usr/local/').

	<tag>&dollar{X11BASE}</tag> `X11' ツリーのベース.
	  (例, `/usr/X11R6/').

	<tag>&dollar{PREFIX}</tag> portsのインストール先
	  (<ref id="porting:prefix" name="PREFIX について">を参照).

	</descrip>

	<p><tt/USE_IMAKE/, <tt/USE_X_PREFIX/ あるいは <tt/MASTERDIR/
	  などの変数を定義する必要がある場合には, <tt/bsd.port.pre.mk/
	  を include する前に定義してください. 他のものは,
	  <tt/bsd.port.pre.mk/ の前でも後でもかまいません. 以下は
	  <tt/bsd.port.pre.mk/ の後に書けるものの例です:

<tscreen><verb>
# no need to compile lang/perl5 if perl5 is already in system
.if ${OSVERSION} > 300003
BROKEN= perl is in system
.endif

# only one shlib version number for ELF
.if ${PORTOBJFORMAT} == "elf"
TCL_LIB_FILE=  ${TCL_LIB}.${SHLIB_MAJOR}
.else
TCL_LIB_FILE=  ${TCL_LIB}.${SHLIB_MAJOR}.${SHLIB_MINOR}
.endif

# software already makes link for ELF, but not for a.out
post-install:
.if ${PORTOBJFORMAT} == "aout"
       ${LN} -sf liblinpack.so.1.0 ${PREFIX}/lib/liblinpack.so
.endif
</verb></tscreen>
	
      <sect2>
	<heading>付加的ドキュメント</heading>

	<p>普通のマニュアルやinfoファイルのほかにユーザにとって有用だ
	  と思えるようなドキュメントがある場合には,
	  <tt>&dollar;{PREFIX}/share/doc</tt>の下にインストールしてく
	  ださい. これは前記と同様, <tt>post-install</tt>ターゲットの
	  中からするのがいいでしょう.

	<p>まず, あなたのportのために新しいディレクトリを作りま
	  す. どのportのドキュメントか簡単にわかるような名前にする必
	  要がありますので, 普通は<tt>&dollar;{PKGNAME}</tt>からバージョ
	  ン番号を除いた部分を使うといいでしょう. もちろん, ユーザが異
	  なるバージョンのものを同時に使うことが予想されるportの場合
	  には, <tt>&dollar;{PKGNAME}</tt>をそのまま使ってかまいません.

	<p>ユーザが<tt>/etc/make.conf</tt>でこの部分を禁止するために
	  <tt>NOPORTDOCS</tt>という変数をセットしている場合には，
	  これらのドキュメントがインストールされないようにしてください. 
	  こんな具合です. 
<tscreen><verb>
 post-install:
 .if !defined(NOPORTDOCS)
	 ${MKDIR} -p ${PREFIX}/share/doc/xv
	 ${INSTALL_MAN} ${WRKSRC}/docs/xvdocs.ps ${PREFIX}/share/doc/xv
 .endif
</verb></tscreen>

	<p>これらのファイルを<tt>pkg/PLIST</tt>に入れるのを忘れないよ
	  うにしてください. (packageが<tt>/etc/make.conf</tt>内の
	  変数を読む方法は今のところ存在しませんので,
	  <tt>NOPORTDOCS</tt>については気にしないでください.)

	<p>インストール時に <tt>pkg/MESSAGE</tt> ファイルを利用して,
	  メッセージを表示することができます. 詳細は <ref id="porting:message"
	  name="pkg/MESSAGE を使う"> の節を参照してください.

      <sect2>
	<heading>DIST_SUBDIR</heading>

	<p><tt>/usr/ports/distfiles</tt>ディレクトリ内をあまり散らかさ
	  ないようにしてください. たくさんのファイルを取ってくるport
	  や, 数は少なくてもほかのportのファイルと混同されるおそれが
	  あるファイル (`Makefile' など) がある場合には,
	  <tt>&dollar;{DIST_SUBDIR}</tt>にportの名前
	  (<tt>&dollar;{PKGNAME}</tt>からバージョン番号を取った部分を
	  使うといいでしょう) を入れてください. すると,
	  <tt>&dollar;{DISTDIR}</tt>がデフォルトの
	  <tt>/usr/ports/distfiles</tt>から
	  <tt>/usr/ports/distfiles/&dollar;{DIST_SUBDIR}</tt>に変更さ
	  れ, 取ってきたファイルはすべてそのサブディレクトリの中に置か
	  れるようになります.

	<p>また, ファイルを取ってくるときにバックアップサイトとして使わ
	  れる<tt>ftp.freebsd.org</tt>のディレクトリ名にもこの変数の
	  値が使われます. (<tt>&dollar;{DISTDIR}</tt>を明示的に指定し
	  た場合には, ローカルのファイルを置くところは変わりますが, こ
	  のサイトのディレクトリ名は変わりませんので, 必ず
	  <tt>&dollar;{DIST_SUBDIR}</tt>を使うようにしてください.)
	  
	<p>この変数はMakefile中で明示的に指定された 
	  <tt>&dollar;{MASTER_SITES}</tt>には影響しないことに注意して
	  ください.

      <sect2>
	<heading>RCS文字列</heading>

	<p>RCSが特別な意味を与えている文字列をパッチ内に入れないように
	  してください. ファイルを私たちのソースツリーに入れる時にこれら
	  の文字列はCVSによって書き換えられてしまい, あとでまたパッチ
	  を使おうとした時にうまくいかないことがあります. RCS文字列は
	  ドル記号 (`<tt>&dollar;</tt>') で囲まれており,
	  `<tt>&dollar;Id</tt>' や `<tt>&dollar;RCS</tt>' などで始まり
	  ます.

      <sect2>
	<heading>パッチ作成上の注意</heading>

	<p><tt>diff</tt>の再帰 (`<tt>-r</tt>') フラグを使って再帰的なパッ
	  チを作るのは大変結構なのですが, でき上がったパッチは必ず目で
	  チェックして余計なゴミが入っていないことを確認してくださ
	  い. よくあるのはバックアップファイル同士の変更点, あるいは 
	  Imake や GNU <tt/configure/ を使うソフトウェアの Makefile
	  の変更点が入っている場合などです. また, <tt/configure.in/
	  を編集して, <tt/autoconf/ を使って <tt/configure/ を作り直す
	  ときには, <tt/configure/ の diff は含めずに(
	  それらは, 数千行になることもしばしばです), <tt/USE_AUTOCONF=yes/
	  を定義して, <tt/configure.in/ の diff をとってください.

	<p>ファイルをまるごと消す場合にはパッチを使わずに
	  <tt>post-extract</tt>ターゲットで消す方が簡単です. できあがった
	  差分に満足したら, それらをソースのファイルごとに別々の
	  パッチファイルに分割してください.

      <sect2>
	<heading>PREFIX<label id="porting:prefix"></heading>

	<p>なるべくportは<tt>&dollar;{PREFIX}</tt>に対する相対パス
	  にインストールすることができるように心がけてください. 
	  (この変数の値は <tt>&dollar;{USE_X_PREFIX}</tt> か
	  <tt>&dollar;{USE_IMAKE}</tt> が指定してある時には
	  <tt>&dollar;{X11BASE}</tt> (デフォルト<tt>/usr/X11R6</tt>),
	  そうでない場合には<tt>&dollar;{LOCALBASE}</tt>
	  (デフォルト<tt>/usr/local</tt>) にセットされます.)

	<p>サイトによってフリーソフトウェアがインストールされる場所が
	  違いますので, ソース内で `<tt>/usr/local</tt>' や 
	  `<tt>/usr/X11R6</tt>' を明示的に書かないようにしてくださ
	  い. Xのプログラムでimakeを使うものについては, これは問題に
	  はなりません. それ以外の場合には, ソース中のMakefileやスク
	  リプトで `<tt>/usr/local</tt>' (imakeを使わないXのプログラ
	  ムは `<tt>/usr/X11R6</tt>') と書いてあるところを 
	  `<tt>&dollar;{PREFIX}</tt>' に書き換えてください. この値は
	  portのコンパイル, およびインストール時に自動的に環境変数として
	  下位makeに渡されます.

	<p><tt>USE_X_PREFIX</tt>は本当に必要な時(つまり, X のライブラ
	  リなどとリンクしたり, <tt>&dollar;{X11BASE}</tt> 以下にある
	  ファイルを参照したりする必要がある時)以外には設定しないでく
	  ださい.

	<p>変数<tt>&dollar;{PREFIX}</tt>の値はportのMakefileやユー
	  ザの環境で変更することもできます. しかし, 個々のportが 
	  Makefileでこの変数の値を明示的に設定することはなるべくしない
	  でください. 

	<p>また, 他のportからインストールされるプログラムやファイル
	  を指定するときには, 上で述べた変数を使用してください. 例えば, 
	  <tt>less</tt>のフルパスを<tt>PAGER</tt>というマクロに入れた
	  い場合は, コンパイラに
	  <verb>-DPAGER=\"/usr/local/bin/less\"</verb>と渡すかわりに
	  <verb>-DPAGER=\"&dollar;{PREFIX}/bin/less\"</verb> (Xを使う
	  portの時は 
	  <verb>-DPAGER=\"&dollar;{LOCALBASE}/bin/less\"</verb>) を渡し
	  てください. こうしておけば,  `/usr/local' がまるごとどこか他
	  の場所に移してあるサイトでも, あなたのportがそのまま使える
	  可能性が高くなります. 

      <sect2>
      <heading>ディレクトリ構成</heading>

	<p>インストール時には<tt>&dollar;{PREFIX}</tt>の正しいサブディ
	  レクトリにファイルを置くように心がけてください. ソフトウェア
	  によっては新しいディレクトリを一つ作ってファイルを全部それに
	  入れてしまうものがありますが, それはよくありません. また, バ
	  イナリ, ヘッダファイルとマニュアル以外のすべてを 
	  `<tt>lib</tt>'というディレクトリに入れてしまうportもあります
	  が, これもBSD的なファイルシステム構成からいうと正しくありま
	  せん. これは以下のように分散すべきです. `<tt>etc</tt>' にセッ
	  トアップ/コンフィグレーションファイル, `<tt>libexec</tt>' に
	  内部で使用されるプログラム (コマンドラインから呼ばれることの
	  ないコマンド), `<tt>sbin</tt>' に管理者用のコマンド,
	  `<tt>info</tt>' に GNU Info 用のドキュメント, そして 
	  `<tt>share</tt>' にアーキテクチャに依存しないファイルが入り
	  ます. 詳細については man <tt>hier(7)</tt> を見てくださ
	  い. <tt>/usr</tt>の構成方針はほとんどそのまま 
	  <tt>/usr/local</tt>にもあてはまります. USENET ニュースを
	  扱う ports は例外です. これらは, ファイルのインストール先として
	  <tt>&dollar;{PREFIX}/news</tt> を使用します.

      <sect2>
	<heading>空のディレクトリの除去<label id="porting:cleaning"></heading>

	<p>ports は デインストール(削除) の際には, 自分自身を消去した
	 あとに, (ディレクトリの)除去をするようにしてください.
	 これは, 大抵の場合 <tt/@dirrm/ の行を ports が作成するすべての
	 ディレクトリについて加えることによって実現できます. 
	 親ディレクトリは, 子ディレクトリを先に消さないと消せないことに
	 気をつけて下さい.
<tscreen><verb>
 :
lib/X11/oneko/pixmaps/cat.xpm
lib/X11/oneko/sounds/cat.au
 :
@dirrm lib/X11/oneko/pixmaps
@dirrm lib/X11/oneko/sounds
@dirrm lib/X11/oneko
</verb></tscreen>
	  といった感じです.

	<p>しかし, ときとして, 他の port をディレクトリを共有している
	  ために <tt/@dirrm/ がエラーを返すことがあります. <tt/rmdir/
	  を <tt/@unexec/ から呼びだすことによって, 警告(warning)なしで
	  空のディレクトリのみを削除することができます:
<tscreen><verb>
 :
@unexec rmdir %D/share/doc/gimp 2>/dev/null || true
</verb></tscreen>
	  これを使えば, たとえ, 他の port がファイルをインストールして
	  いて, <tt>${PREFIX}/share/doc/gimp</tt> が空でない場合でも
	  エラーメッセージは表示されませんし, <tt/pkg_delete/ が異常終了
	  することもありません.

      <sect2>
	<heading>UID</heading>

	<p>もしあなたの portがインストールされるシステム上に特定のユー
	  ザを必要とする場合は, <tt>pkg/INSTALL</tt> スクリプトから 
	  <tt>pw</tt>コマンドを実行して自動的にそのユーザを追加するよ
	  うにしてください. 
	  <tt>net/cvsup-mirror</tt> の portが参考になるでしょう.

	<p>もしあなたの port が, バイナリのパッケージとして
	としてインストールされるときにも, コンパイルされたときと同じ
	ユーザー/グループ ID を使わなければならないのなら, 50 から 99
	の間で空いている UID を選んで登録してください.
	<tt>japanese/Wnn</tt> の port が参考になるでしょう.

	<p>既にシステムや他の portで利用されている UIDを使わないように
	  十分注意してください. 現在の 50から 99までの間の UIDは以下の
	  とおりです.

<tscreen><verb>
majordom:*:54:54:Majordomo Pseudo User:/usr/local/majordomo:/nonexistent
cyrus:*:60:60:the cyrus mail server:/nonexistent:/nonexistent
gnats:*:61:1:GNATS database owner:/usr/local/share/gnats/gnats-db:/bin/sh
uucp:*:66:66:UUCP pseudo-user:/var/spool/uucppublic:/usr/libexec/uucp/uucico
xten:*:67:67:X-10 daemon:/usr/local/xten:/nonexistent
pop:*:68:6:Post Office Owner (popper):/nonexistent:/nonexistent
wnn:*:69:7:Wnn:/nonexistent:/nonexistent
ifmail:*:70:66:Ifmail user:/nonexistent:/nonexistent
pgsql:*:70:70:PostgreSQL pseudo-user:/usr/local/pgsql:/bin/sh
ircd:*:72:72:IRCd hybrid:/nonexistent:/nonexistent
alias:*:81:81:QMail user:/var/qmail/alias:/nonexistent
qmaill:*:83:81:QMail user:/var/qmail:/nonexistent
qmaild:*:82:81:QMail user:/var/qmail:/nonexistent
qmailq:*:85:82:QMail user:/var/qmail:/nonexistent
qmails:*:87:82:QMail user:/var/qmail:/nonexistent
qmailp:*:84:81:QMail user:/var/qmail:/nonexistent
qmailr:*:86:82:QMail user:/var/qmail:/nonexistent
msql:*:87:87:mSQL-2 pseudo-user:/var/db/msqldb:/bin/sh
</verb></tscreen>

	<p>このリストを最新の状態に保つためにも,
	この範囲の UID や GID を予約するような port を作ったり,
	既存の port にそのような改変を行って我々に送るときには,
	UID の予約に関する注意書きをつけてください.

      <sect2>
	<heading>合理的な port</heading>

	<p>Makefile は単純かつ適切であるべきです. もし, Makefile を
	  数行短かくできたり, もっと読みやすくできるのであれば, そうし
	  てください. 例えば, shell の `<tt>if</tt>' 構文を使う代りに,
	  make の `<tt>.if</tt>' 構文を使う,
	  <tt>&dollar;{EXTRACT*}</tt>の再定義で代用できるのであれば,
	  <tt>do-extract</tt>を再定義しない, `<tt>CONFIGURE_ARGS +=
	  --prefix=&dollar;{PREFIX}</tt>' とするかわりに,
	  <tt>&dollar;GNU_CONFIGURE</tt> とする, などです.
	
      <sect2>
	<heading>CFLAGS の尊重</heading>
	<p><tt>&dollar;{CFLAGS}</tt> 変数は尊重すべきです. その port 
	  がこれを無視するのであれば, `<tt>NO_PACKAGE=ignores
	  cflags</tt>' を Makefile に加えてください.

      <sect2>
	<heading>コンフィグレーション(設定)ファイル</heading>
	<p>もしあなたの port が設定ファイルを
	  <tt>&dollar;{PREFIX}/etc</tt> に置く必要がある場合には,
	  それを単純にインストールしたり, <tt>pkg/PLIST</tt> に加え
	  ては<em/いけません/. こうしてしまうと, <tt/pkg_delete/ が
	  ユーザが苦労して作ったファイルを消してしまったり, 新しく
	  インストールすると上書きされてしまったりします.

	<p>代りに, 見本となるファイルを suffix (
	  `<tt>&lt;filename&gt;.sample</tt>' が良いでしょう) を付けて
	  インストールして, <ref id="porting:message" name="message">
	  を表示して, ソフトウエアを動かす前に, ユーザがそのファイル
	  をコピーして編集をしなければならないことを知らせましょう.

      <sect2>
	<heading>Portlint</heading>
	<p>送付や commit をする前に 
	  <ref id="porting:portlint" name="portlint"> を使ってチェック
	  しましょう.
	  
      <sect2>
	<heading>フィードバック</heading>

	<p>Portを作るためにソフトウェアに変更を加えたら, なるべく原
	  作者にその旨を伝えてパッチ等を送ってください. これらが次のリ
	  リースに取り入れられれば, アップグレードが楽になります. 

      <sect2>
	<heading>その他諸々</heading>

	<p><tt>pkg/DESCR</tt>, <tt>pkg/COMMENT</tt>,
	  <tt>pkg/PLIST</tt> などのファイルは, それぞれ2重にチェックし
	  てください. 再検討してもっと良い記述があれば, それに置きかえ
	  てください.

	<p>GNU General Public License(GNU一般公有使用許諾)のコピーは
	  (すでにあるので)コピーしないでください, おねがいします.

	<p>法律に関することには, 十分注意をはらってください. 
	  私達に法律に反するような形でソフトフェアの配布をさせない
	  でください!

      <sect2>
	<heading>困ったら....</heading>

	<p>私たちに質問を送る前に, 既存のportの例と<tt>bsd.port.mk</tt>を
	  ちゃんと読んでください! <tt>;)</tt>

	<p>それでもわからないことがあったら, 一人で悩まないでどんどん
	  質問してください! <tt>:)</tt>

    <sect1>
      <heading>Makefileのお手本<label id="porting:samplem"></heading>

      <p>これはportのMakefileを作る際のお手本です. かぎかっこ 
	([])内のコメントは忘れずに取ってください.

      <p>変数の順番, 段落の間の空行など, Makefileを作るときはなるべくこ
	の形式にしたがってください. この形式は重要な情報が簡単に見つけら
	れるように設計されています. <ref id="porting:portlint"
	name="portlint"> を使って Makefile をチェックすることが
	推奨されています.

<tscreen><verb>
 [ヘッダ -- どのようなportのMakefileかすぐにわかるようになっています]
 # New ports collection makefile for:	xdvi
 # Version required:	pl18 ["1.5alpha" みたいなのでも結構です]
 [この Makefile の最初の版が作成された日付です.  この port をアップグ
  レードするときには変えないでください.]
 # Date created:	26 May 1995
 [このソフトウェアを最初に FreeBSD に port した人の名前, つまり, 
  この Makefile の最初の版を書いた人です. この port をアップグレー
  ドするとき, この行も変えないでください.]
 # Whom:		Satoshi Asami <asami@FreeBSD.ORG>
 #
 # &dollar;Id&dollar;
 [ ^^^^ この部分は, CVS ツリーに入れる時に自動的に RCS の ID 文字列に
  置き換えられます.]
 #
 
 [Port自体, およびオリジナルのソースを取ってくるところを記述する部分.
  最初は必ずDISTNAME, そして必要ならPKGNAME, CATEGORIES, 続いて
  MASTER_SITESがおかれ, さらに MASTER_SITE_SUBDIR がおかれることもあり
  ます. そのあと, EXTRACT_SUFX か DISTFILES を指定することも可能です]
 DISTNAME=	xdvi
 PKGNAME=	xdvi-pl18
 CATEGORIES=	print
 [MASTER_SITE_* マクロを使用しない場合は,
 最後のスラッシュを忘れないように ("/")!]
 MASTER_SITES= ${MASTER_SITE_XCONTRIB}
 MASTER_SITE_SUBDIR= applications
 [ソースファイルが標準の ".tar.gz" 形式でない時にこれを使いましょう]
 EXTRACT_SUFX=	.tar.Z
 
 [配布パッチのセクション -- ない場合もあります]
 PATCH_SITES=	ftp://ftp.sra.co.jp/pub/X11/japanese/
 PATCHFILES=	xdvi-18.patch1.gz xdvi-18.patch2.gz
 
 [保守責任者 -- これは *必ず* 必要です. 担当者 (あなた) 自身, あるいは
  担当者に素早く連絡をとれる人のアドレスを書いてください. どうしてもこ
  こに自分のアドレスを書くのがいやな人は "ports@FreeBSD.ORG" と書いて
  もいいです]
 MAINTAINER=	asami@FreeBSD.ORG
 
 [依存するport -- ない場合もあります]
 RUN_DEPENDS=	gs:${PORTSDIR}/print/ghostscript
 LIB_DEPENDS=	Xpm.5:${PORTSDIR}/graphics/xpm
 
 [ここには標準のbsd.port.mkの変数で, 上のどれにもあてはまらないものを
  書きます]
 [コンフィグレーション, コンパイル, インストールなどの時に質問をする
  なら...]
 IS_INTERACTIVE=yes
 [${DISTNAME}以外のディレクトリにソースが展開されるなら...]
 WRKSRC=	${WRKDIR}/xdvi-new
 [配布されているパッチが ${WRKSRC} に対する相対パスで作られてい
ない場合にこの変数の指定が必要かも...]
 PATCH_DIST_STRIP=	-p1
 [GNU autoconfによって生成された "configure" スクリプトを走らせたいなら...]
 GNU_CONFIGURE=	yes
 [/usr/bin/makeでなく, GNU makeを使わないといけないなら...]
 USE_GMAKE=	yes
 [これがXのアプリケーションで "xmkmf -a" を走らせたいなら...]
 USE_IMAKE=	yes
 [などなど]
 
 [下の方のルールで使う非標準の変数]
 MY_FAVORITE_RESPONSE=	"yeah, right"
 
 [そして, 特別なターゲット, 使用順に]
 pre-fetch:
	 i go fetch something, yeah

 post-patch:
	 i need to do something after patch, great
 
 pre-install:
	 and then some more stuff before installing, wow
 
 [最後には必ず]
 .include <bsd.port.mk>
</verb></tscreen>

    <sect1>
      <heading>Packageの名前<label id="porting:pkgname"></heading>

      <p>Packageの名前は以下のルールにしたがってつけてください. こ
	れはpackageのディレクトリを見やすくするためで, 無秩序な名前
	がたくさん並んでいるとユーザが使いづらくなるのではという心配か
	らです. (FTPサイトなどにはたくさんpackageがありますからね.)

      <p>Packageの名前は以下のようにしてください. 

<tscreen><verb>
[<言語>-]<名前>[[-]<オプション>]-<バージョン.番号>;
</verb></tscreen>

	  <tt>&dollar;{DISTNAME}</tt> が上記の形式になっていない場合に
	  は, <tt>&dollar;{PKGNAME}</tt> をそのようにしてください. 

      <enum>
	<item>FreeBSDはユーザの慣れ親しんだ言語のサポートに力を入れて
	  います. 特定の言語のためのportのpackage名には 
	  `&lt;言語&gt;' に ISO-639 で定義されている言語名の略称を入れ
	  てください. 例えば, 日本語なら `ja', ロシア語なら `ru', ベト
	  ナム語なら `vi', 中国語なら `zh', 韓国語ならば `ko', ドイツ
	  語なら `de', といった具合です.

	<item>`<tt>&lt;名前&gt;</tt>' の部分は原則的にはすべて英小文字
	  を使います. 例外はたくさんのプログラムが入っている巨大なport
	  の場合で, XFree86 (ほんとにあるんですよ) やImageMagickな
	  どがこれにあたります. そうでない場合には, 名前の大文字を小文
	  字に (少なくとも最初の一字だけは) 変えてください.
	  もし, 大文字であることが重要な場合(例えば, 1文字の名前,
	  R とか V)には, あなたの裁量で大文字を使うのも良いでしょう.
	  Perl 5 のモジュールでは, 頭に `p5-' を付け, 2重コロン(::)
	  のセパレータをハイフン(-)に置きかえるしきたりになっています.
	  例えば,  `Data::Dumper' は `p5-Data-Dumper'
	  になります. また, その
	  ソフトウェアの名前として通常使われるものに番号, ハイフン, あ
	  るいは下線が入っている場合には, それらを使うことも構いません 
	  (`kinput2' など).

	<item>コンパイル時に環境変数や<tt>make</tt>の引数などで
	  <ref id="porting:masterdir" name="ハードコードされたデフォルト">
	  を変えてコンパイルできる場合, `&lt;compiled.specifics&gt;'
	  にそのコンパイル時のデフォルトを入れてください
	  (ハイフンはあってもなくてもかまいません). 用紙のサイズ, 
	  あるいはフォントの解像度などがこれにあたります. 

	<item>バージョン番号は数字とアルファベットからなり, ピリオド 
	  (.) で区切ります. アルファベットは二文字以上続けてはいけませ
	  ん. ただ一つの例外は「パッチレベル」を意味する `pl' で, それ
	  以外にバージョン番号がまったくついていない場合にのみ使うことがで
	  きます.
      </enum>

      <p>では, <tt>&dollar;{DISTNAME}</tt>を正しい
	<tt>&dollar;{PKGNAME}</tt>に直す例を見てみましょう:

<tscreen><verb>
DISTNAME        PKGNAME                 理由
mule-2.2.2      mule-2.2.2              まったく問題なし
XFree86-3.1.2   XFree86-3.1.2           同上
EmiClock-1.0.2  emiclock-1.0.2          プログラム一つだけの時は小文字のみ
gmod1.4         gmod-1.4                `<名前>' のあとにハイフンが必要
xmris.4.02      xmris-4.02              同上
rdist-1.3alpha  rdist-1.3a              `alpha'のような文字列は使えない
es-0.9-beta1    es-0.9b1                同上
v3.3beta021.src tiff-3.3                なんなんでしょう ;)
tvtwm           tvtwm-pl11              バージョン番号は必ず必要
piewm           piewm-1.0               同上
xvgr-2.10pl1    xvgr-2.10.1             `pl' が使えるのは他にバージョン番号がない場合のみ
gawk-2.15.6     ja-gawk-2.15.6          日本語バージョン
psutils-1.13    psutils-letter-1.13     コンパイル時に用紙のサイズを指定
pkfonts         pkfonts300-1.0          300dpiフォント用のpackage
</verb></tscreen>

      <p>オリジナルのソースにまったくバージョン情報が見当たらず, また原作
	者が新しいバージョンをリリースする可能性が低いときには, バージョ
	ン番号として `1.0' を使えばいいでしょう (上記のpiewmの例がこ
	れにあたります). そうでない場合には, 原作者に聞くか, 日付 (`年.
	月.日') を使うなどしてください.

    <sect1>
      <heading>カテゴリ<label id="porting:categories"></heading>

      <p>すでに御存知のように, ports はいくつかのカテゴリに
	分類されています. これを有効に利用するためには, port を
	行う人々とユーザが, そろぞれのカテゴリーが何であるか,
	どのようにしてカテゴリに分類するかを理解する必要があります.

      <sect2>
	<heading>現在のカテゴリのリスト</heading>

	<p>まず, これが現在の port のカテゴリーのリストです.
	  アスタリスク(<tt/*/)が付いているものは, バーチャル(<em/virtual/)
	  カテゴリです --  これらには対応するサブディレクトリが port
	  ツリーにはありません. バーチャルカテゴリでないものは,
	  そのサブディレクトリ内の <tt>pkg/COMMENT</tt> に1行の記述
	  があります(例, <tt>archivers/pkg/COMMENT</tt>).

      <descrip>
	<tag><tt/afterstep*/</tag> Ports to support the AfterStep
	  window manager.
	<tag><tt/archivers/</tag> Archiving tools.
	<tag><tt/astro/</tag> Astronomical ports.
	<tag><tt/audio/</tag> Sound support.
	<tag><tt/benchmarks/</tag> Benchmarking utilities.
	<tag><tt/biology/</tag> Biology-related software.
	<tag><tt/cad/</tag> Computer aided design tools.
	<tag><tt/chinese/</tag> Chinese language support.
	<tag><tt/comms/</tag> Communication software.  Mostly software
	  to talk to your serial port.
	<tag><tt/converters/</tag> Character code converters.
	<tag><tt/databases/</tag> Databases.
	<tag><tt/deskutils/</tag> Things that used to be on the
	  desktop before computers were invented.
	<tag><tt/devel/</tag> Development utilities.  Do not put
	  libraries here just because they are libraries -- unless
	  they truly don't belong to anywhere else, they shouldn't be
	  in this category.
	<tag><tt/editors/</tag> General editors.  Specialized editors
	  go in the section for those tools (e.g., a
	  mathematical-formula editor will go in <tt/math/).
	<tag><tt/elisp/</tag> Emacs-lisp ports.
	<tag><tt/emulators/</tag> Emulators for other operating
	  systems.  Terminal emulators do <em/not/ belong here --
	  X-based ones should go to <tt/x11/ and text-based ones to
	  either <tt/comms/ or <tt/misc/, depending on the exact
	  functionality.
	<tag><tt/games/</tag> Games.
	<tag><tt/german/</tag> German language support.
	<tag><tt/graphics/</tag> Graphics utilities.
	<tag><tt/japanese/</tag> Japanese language support.
	<tag><tt/kde*/</tag> Ports that form the K Desktop Environment
	  (kde).
	<tag><tt/korean/</tag> Korean language support.
	<tag><tt/lang/</tag> Programming languages.
	<tag><tt/mail/</tag> Mail software.
	<tag><tt/math/</tag> Numerical computation software and other
	  utilities for mathematics.
	<tag><tt/mbone/</tag> MBone applications.
	<tag><tt/misc/</tag> Miscellaneous utilities -- basically
	  things that doesn't belong to anywhere else.  This is the
	  only category that should not appear with any other
	  non-virtual category.  If you have <tt/misc/ with something
	  else in your <tt/CATEGORIES/ line, that means you can safely
	  delete <tt/misc/ and just put the port in that other
	  subdirectory! <tt/:)/
	<tag><tt/net/</tag> Miscellaneous networking software.
	<tag><tt/news/</tag> USENET news software.
	<tag><tt/offix*/</tag> Ports from the OffiX suite.
	<tag><tt/palm/</tag> Software support for the 3Com Palm(tm) series.
	<tag><tt/perl5*/</tag> Ports that require perl version 5 to
	  run.
	<tag><tt/plan9*/</tag> Various programs from Plan9.
	<tag><tt/print/</tag> Printing software.  Desktop publishing
	  tools (previewers, etc.) belong here too.
	<tag><tt/python*/</tag> Software written in python.
	<tag><tt/russian/</tag> Russian language support.
	<tag><tt/security/</tag> Security utilities.
	<tag><tt/shells/</tag> Command line shells.
	<tag><tt/sysutils/</tag> System utilities.
	<tag><tt/tcl75*/</tag> Ports that use tcl version 7.5 to run.
	<tag><tt/tcl76*/</tag> Ports that use tcl version 7.6 to run.
	<tag><tt/tcl80*/</tag> Ports that use tcl version 8.0 to run.
	<tag><tt/tcl81*/</tag> Ports that use tcl version 8.1 to run.
	<tag><tt/textproc/</tag> Text processing utilities.  It does
	  not include desktop publishing tools, which go to
	  <tt/print/.
	<tag><tt/tk41*/</tag> Ports that use tk version 4.1 to run.
	<tag><tt/tk42*/</tag> Ports that use tk version 4.2 to run.
	<tag><tt/tk80*/</tag> Ports that use tk version 8.0 to run.
	<tag><tt/tk81*/</tag> Ports that use tk version 8.1 to run.
	<tag><tt/vietnamese/</tag> Vietnamese language support.
	<tag><tt/windowmaker*/</tag> Ports to support the WindowMaker
	  window manager.
	<tag><tt/www/</tag> Software related to the World Wide Web.
	  HTML language support belong here too.
	<tag><tt/x11/</tag> The X window system and friends.  This
	  category is only for software that directly support the
	  window system.  Do not put regular X applications here.  If
	  your port is an X application, define <tt/USE_XLIB/ (implied
	  by <tt/USE_IMAKE/) and put it in appropriate categories.
	  Also, many of them go into other <tt/x11-*/ categories (see
	  below).
	<tag><tt/x11-clocks/</tag> X11 clocks.
	<tag><tt/x11-fm/</tag> X11 file managers.
	<tag><tt/x11-fonts/</tag> X11 fonts and font utilities.
	<tag><tt/x11-toolkits/</tag> X11 toolkits.
	<tag><tt/x11-wm/</tag> X11 window managers.
      </descrip>

      <sect2>
	<heading>適切なカテゴリの選択</heading>

	<p>多くのカテゴリーに重なるので, どれを '第一'カテゴリにするか
	  を決めなければならないことがたびたびあるでしょう. これを
	  うまく決めるルールがいくつかあります. 以下はその優先順の
	  リストで, 優先度の高いものから低いものの順に書いてあります.

	<enum>
	  <item>言語特有のカテゴリがまず最初です. 例えば日本語の X11
	    のフォントをインストールする port の場合, <tt/CATEGORIES/
	    `<tt>japanese x11-fonts</tt>' となるでしょう.

	  <item>より特徴的なカテゴリーが, 一般的なカテゴリーより優先さ
	    れます. 例えば, HTML エディタの場合は `<tt>www editors</tt>'
	    となり, 逆順にはしないでください. また, port が 
	    <tt/mail/, <tt/mbone/, <tt/news/, <tt/security/, <tt/www/
	    のいづれかに属するとには, <tt/net/ は必要ありません.

	  <item><tt/x11/ を第2カテゴリにするのは, 第1カテゴリが自然言語
	    の場合のみにしてください. 特に X のアプリケーションには
	    <tt/x11/ を指定<em/しない/でください.

	  <item>もし, あなたの port が他のどのカテゴリにも属しないばあい
	    には, <tt/misc/ にしてください.
	</enum>
	<p>もし, あなたがカテゴリについて自信が持てない場合には, そのこと
	  を <tt/send-pr/ するときに書き加えてください. そうすれば,
	  import するまえにそれについて議論できます. (もしあなたが
	  commiter であれば, そのことを &a.ports に送って, 先に議論
	  するようにしてください -- 新しい port が間違ったカテゴリ
	  に import されて, すぐ移動されることが多いので.)

    <sect1>
      <heading>このドキュメントと ports システムの変更</heading>

      <p>もしあなたが, たくさんの ports の保守をしているのであれば,
	&a.ports メーリングリストの内容をフォロウすることを
	考えてください. Ports のしくみについての重要な変更点はここに
	アナウンスされます. 最新の変更点については, いつでも, <htmlurl
	url="http://www.FreeBSD.ORG/cgi/cvsweb.cgi/src/share/mk/bsd.port.mk"
	name="the bsd.port.mk CVS log"> で詳細な情報を得ることができま
	す.

    <sect1>
      <heading>やっとおしまい!</heading>

      <p>いやはや, 長い文章ですみません. ここまで読んでくださった方に
	は感謝, 感謝でございます. <tt>(_ _)</tt>

      <p>さあ, portの作り方がわかったところで, 世界中のソフトウェア
	をport化しましょう. FreeBSDプロジェクトに貢献するには, それ
	がもっとも簡単な方法です! <tt>:)</tt>
