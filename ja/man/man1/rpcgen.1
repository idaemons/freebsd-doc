.\" @(#)rpcgen.1 1.35 93/06/02 SMI
'\"macro stdmacro
.\" Copyright 1985-1993 Sun Microsystems, Inc.
.\" jpman %Id: rpcgen.1,v 1.2 1997/06/08 13:49:19 jsakai Stab %
.nr X
.TH rpcgen 1 "28 Mar 1993"
.SH 名称
rpcgen \- RPC プロトコルコンパイラ
.SH 書式
.BI rpcgen " infile"
.LP
.B rpcgen
[
.B \-a
] [
.B \-b
] [
.B \-C
] [
.BI \-D name
[ =
.I value
] ]
.if n .ti +5n
[
.BI \-i " size"
]
[
.B \-I
[
.BI \-K " seconds"
] ]
[
.B \-L
] [
.B \-M
] 
.if n .ti +5n
.if t .ti +5n
[
.B \-N
]
[
.B \-T
] [
.BI \-Y " pathname"
]
.I infile
.LP
.B rpcgen
[
.B \-c
|
.B \-h
|
.B \-l
|
.B \-m
|
.B \-t
|
.B \-Sc
|
.B \-Ss
|
.B \-Sm
]
.if n .ti +5n
[
.BI \-o " outfile"
] [
.I infile
]
.LP
.B rpcgen
[
.BI \-s " nettype"
] [
.BI \-o " outfile"
] [
.I infile
]
.LP
.B rpcgen
[
.BI \-n " netid"
] [
.BI \-o " outfile"
] [
.I infile
]
.\" .SH AVAILABILITY
.\" .LP
.\" SUNWcsu
.SH 解説
.IX "rpcgen" "" "\fLrpcgen\fP \(em RPC protocol compiler"
.IX "RPC" "protocol compiler" "" "protocol compiler \(em \fLrpcgen\fP"
.IX "RPC Language" "RPC protocol compiler" "" "RPC protocol compiler \(em \fLrpcgen\fP"
.IX "compilers" "RPC protocol compiler" "" "RPC protocol compiler \(em \fLrpcgen\fP"
.IX "programming tools" "RPC protocol compiler" "" "RPC protocol compiler \(em \fLrpcgen\fP"
.LP
\f3rpcgen\f1
は、ある RPC プロトコルを実現する C コードを生成するツールです。
\f3rpcgen\f1
への入力は、RPC 言語 (リモートプロシージャコール言語) として知られる、
C 言語に類似した言語です。
.LP
\f3rpcgen\f1
は通常第 1 の書式で使用され、
1 つの入力ファイルから 4 つの出力ファイルを生成します。
.\" ↑原文では three output files となっているが、すぐ後ろで 4 つ列挙している。
.\" 原文の誤りと思われる。  97/06/08 J.Sakai
入力ファイル
\f2infile\f1
が
\f3proto.x\f1
であるとすると、
\f3rpcgen\f1
はヘッダファイル
\f3proto.h\f1、
XDR ルーチンファイル
\f3proto_xdr.c\f1、
、サーバ側スタブ 
\f3proto_svc.c\f1、
クライアント側スタブ
\f3proto_clnt.c\f1
を作成します。
\f3\-T\f1
オプションを指定すると、上記に加え、
RPC ディスパッチテーブル
\f3proto_tbl.i\f1
も作成します。
.LP
.B rpcgen
はまた、特定アプリケーション向けにカスタマイズ可能な
クライアントおよびサーバのサンプルファイルも生成できます。
オプション
\f3\-Sc\f1,
\f3\-Ss\f1,
\f3\-Sm\f1
によってそれぞれ、サンプルのクライアント、サーバ、makefile を生成します。
オプション
\f3\-a\f1
を指定するとサンプルを含め全てのファイルを生成します。
入力ファイルが \f3proto.x\f1 の場合、
クライアント側サンプルファイルは \f3proto_client.c\f1 に、
サーバ側サンプルファイルは \f3proto_server.c\f1 に、
そしてサンプル makefile は \f3makefile.proto\f1 に書き出されます。
.LP
生成されたサーバは、ポートモニタ (例えば \f3inetd\f1) で起動することも、
それ自身で起動することもできます。
ポートモニタから起動される場合、
ファイルディスクリプタ \f30\fP を引き渡すトランスポートのためだけの
サーバを生成します。
トランスポートの名前は環境変数 \f3PM_TRANSPORT\f1 をセットすることで
指定しなければなりません。
\f3rpcgen\f1 で作成されたサーバが実行されると、
サーバは環境変数 \f3NETPATH\f1 で指定された全トランスポート用に
サーバハンドルを作成します。
\f3NETPATH\f1 が指定されていない場合は、ファイル \f3/etc/netconfig\f1 に
記述されている全ての可視トランスポート用にサーバハンドルを作成します。
注意:
トランスポートはコンパイル時ではなく実行時に選択されます。
サーバが自分で開始すると、
デフォルトでは自動的にバックグラウンド実行に移ります。
\f3RPC_SVC_FG\f1 を定義することで、
サーバをフォアグラウンドで実行させることもできます。
.LP
第二の書式は、更に洗練された RPC サーバを生成する特別な機能をもちます。
その特別な機能として、
ユーザが定義した \f3#defines\f1 と RPC ディスパッチテーブル
のサポートがあります。
RPC ディスパッチテーブルのエントリには以下のものがあります:
.RS
.PD 0
.TP 3
\(bu
そのプロシージャに対応するサービスルーチンへのポインタ
.TP
\(bu
入出力引数へのポインタ
.TP
\(bu
これらのルーチンのサイズ
.PD
.RE
サーバはディスパッチテーブルを用いて認証チェックを行い、
それからサービスルーチンを実行します。
クライアントライブラリはそれを用いて、
記憶領域管理や XDR データ変換の詳細に対処します。
.LP
上に示した他の 3 つの書式は、出力ファイルの全てではなく、
そのうちの特定のものだけを生成したい場合に用いられます。
.B rpcgen
の使用例については以下の
.SM EXAMPLES
セクションを参照して下さい。
\f3\-s\f1 オプション付きで実行されると、
\f3rpcgen\f1 は特定のトランスポートクラス用のサーバを生成します。
\f3\-n\f1 オプション付きで実行されると、
\f3rpcgen\f1 は \f2netid\f1 で指定されたトランスポート用サーバを生成します。
\f2infile\f1
が指定されない場合、
\f3rpcgen\f1 は標準入力から入力を受け付けます。
.LP
入力ファイルは、実際に \f3rpcgen\f1 に処理される前に、
C プリプロセッサ \f3cc \-E\f1 で処理されます。
\f3rpcgen\f1 は、出力ファイルの各タイプ毎に
\f3rpcgen\f1 プログラマ向けの特別なプリプロセッサシンボルを定義します。
.LP
.PD 0
.RS
.TP 12
\f3RPC_HDR\f1
ヘッダをコンパイルする際に定義されます
.TP
\f3RPC_XDR\f1
XDR ルーチンをコンパイルする際に定義されます
.TP
\f3RPC_SVC\f1
サーバ側スタブをコンパイルする際に定義されます
.TP
\f3RPC_CLNT\f1
クライアント側スタブをコンパイルする際に定義されます
.TP
\f3RPC_TBL\f1
RPC ディスパッチテーブルをコンパイルする際に定義されます
.RE
.PD
.LP
``\f3%\f1'' で始まる行は全て、\f3rpcgen\f1 に解釈されることなく、
出力ファイルに直接引き継がれます。
C プリプロセッサのパス名を指定するには \f3\-Y\f1 フラグを使用して下さい。
.LP
\f2infile\f1 で参照される全てのデータ方に対し、
\f3rpcgen\f1 は、そのデータ型名の前に \f3xdr_\f1 を付与した名前の
ルーチンが存在することを仮定します。
このルーチンが RPC/XDR ライブラリ中に存在しない場合は、
それを提供しなければなりません。
未定義データ型を提供することで XDR ルーチンをカスタマイズすることが可能です。
.br
.ne 10
.SH オプション
.TP 15
\f3\-a\f1
サンプルファイルを含め、全てのファイルを生成します。
.TP
\f3\-b\f1
従来互換モード。
以前のバージョンの OS のために、トランスポート固有の RPC コードを生成します。
.IP
注: FreeBSD ではこの互換フラグはデフォルトで有効になっています。
FreeBSD は以前の ONC RPC ライブラリのみサポートしているからです。
.TP
\f3\-c\f1
XDR ルーチンをコンパイル出力します。
.TP
\f3\-C\f1
.SM ANSI C
コンパイラで使用できるヘッダおよびスタブファイルを生成します。
ここで生成したヘッダファイルは C++ プログラムでも使用できます。
.TP
\f3\-D\f2name\f3[=\f2value\f3]\f1
シンボル \f2name\f1 を定義します。
ソース中の \f3#define\f1 指示行と等価です。
\f2value\f1 が指定されない場合、
\f2value\f1 は \f31\f1 と定義されます。
このオプションは複数回の指定が可能です。
.TP
\f3\-h\f1
\f3C\f1 のデータ定義 (ヘッダファイル) をコンパイル出力します。
同時に \f3\-T\f1 オプションを指定することで、
RPC ディスパッチテーブルをサポートするヘッダファイルを生成できます。
.TP
\f3\-i \f2size\f1
インラインコードを生成し始めるサイズを指定します。
最適化を行う際に用いられます。デフォルト値は 5 です。
.IP
注: FreeBSD プラットホームでの以前の
.B rpcgen
と互換性を保つため、デフォルト値は実際には 0 (つまり、
デフォルトではインラインコードは生成しない) となっています。
このデフォルト値を上書きするには明示的にゼロ以外の値を
指定しなければなりません。
.TP
\f3\-I\f1
サーバ側スタブにおける
.BR inetd (8)
サポートコードを生成します。
このようにして生成したサーバは、単独で起動することも、
\f3inetd\f1 から起動することもできます。
単独で起動した場合、デフォルトでは自らバックグラウンド動作に移ります。
特殊シンボル \f3RPC_SVC_FG\f1 を定義するか、
単に \f3\-I\f1 オプションなしでコンパイルすると、
サーバプロセスはフォアグラウンドで動作します。
.br
.ne 5
.IP
クライアントからの未処理リクエストがなければ、
\f3inetd\f1 サーバは 120 秒 (デフォルト値) 経過の後、終了します。
このデフォルト値は
.B \-K
オプションにより変更できます。
\f3inetd\f1 サーバの全エラーメッセージは常に
.BR syslog (3)
によってログに残されます。
.\" .IP
.\" Note:
.\" this option is supported for backward compatibility only.
.\" By default,
.\" .B rpcgen
.\" generates servers that can be invoked through portmonitors.
.TP
.BI \-K " seconds"
デフォルトでは、\f3rpcgen\fP を用いて作成され、ポートモニタから起動された
サービスは、リクエストを処理した後 \f3120\fP 秒待って終了します。
この時間は \f3\-K\fP オプションを用いて変更できます。
リクエスト処理が済むと直ちに終了するようなサーバを生成するには、
.BR "\-K\ 0"
と指定します。また、決して終了しないサーバを生成するには、
\f3\-K \-1\fP
として下さい。
.IP
サーバをモニタする場合、
あるサービスリクエストに対して
.I 常に
新しいプロセスを生成するようなポートモニタがあります。
そのようなモニタを用いてサーバを使用することがわかっている場合は、
サーバは処理完了後直ちに終了すべきです。
そのようなサーバを生成するには、\f3rpcgen\fP は \f3\-K 0\fP オプション
とともに使用すべきです。
.TP
\f3\-l\f1
クライアント側スタブをコンパイル出力します。
.TP
.B \-L
サーバがフォアグラウンドで起動された場合、
サーバのエラーを記録するのに、標準エラー出力に出力する代わりに
.BR syslog (3)
を使用します。
.TP
\f3\-m\f1
サーバ側スタブをコンパイル出力しますが、\(lqmain\(rq ルーチンは生成しません。
コールバックルーチンのみを作成したり、初期化を行うために
独自の \(lqmain\(rq ルーチンを必要とする場合に便利です。
.TP
\f3\-M\f1
rpcgen が生成したコードとユーザが書いたコードの間で
引数や結果を受渡しするために、
マルチスレッド対応の (MT-safe な) スタブを生成します。
ユーザプログラム中でスレッドを使用する場合に有用です。
しかし関数
.BR rpc_svc_calls (3N)
はまだ MT-safe にはなっていません。
つまり rpcgen が生成したサーバ側コードは MT-safe ではありません。
.TP
.B \-N
プロシージャが複数の引数を持てるようにします。
これはまた、C 言語に大変似たパラメータ渡し方法を用います。
ですからリモートプロシージャにある引数を渡す場合、
その引数へのポインタを渡す必要はなく、引数そのものを渡せます。
この動作は
.B rpcgen
が生成したコードの以前の振る舞いとは異なっています。
以前との互換性を保つため、このオプションはデフォルトでは有効ではありません。
.TP
\f3\-n \f2netid\f1
\f2netid\f1 で指定したトランスポート用のサーバ側スタブをコンパイル出力します。
netconfig データベースには \f2netid\f1 用エントリが存在しなければなりません。
このオプションを複数回指定することで、
複数のトランスポートに対してサービスするサーバを作成することができます。
.TP
\f3\-o \f2outfile\f1
出力ファイル名を指定します。
何も指定されなければ標準出力が用いられます 
(\f3\-c\f1,
\f3\-h\f1,
\f3\-l\f1,
\f3\-m\f1,
\f3\-n\f1,
\f3\-s\f1,
\f3\-Sc\f1,
\f3\-Sm\f1,
\f3\-Ss\f1,
\f3\-t\f1
モード時のみ)。
.TP
\f3\-s \f2nettype\f1
クラス \f2nettype\f1 に属する全てのトランスポート用の
サーバ側スタブをコンパイル出力します。
サポートされているクラスは以下のものです:
\f3netpath\f1,
\f3visible\f1,
\f3circuit_n\f1,
\f3circuit_v\f1,
\f3datagram_n\f1,
\f3datagram_v\f1,
\f3tcp\f1,
\f3udp\f1 
(これらのクラスの意味については
.BR rpc (3N)
を参照して下さい) 
このオプションは複数回指定できます。
注: トランスポートはコンパイル時ではなく実行時に選択されます。
.TP
\f3\-Sc\f1
リモートプロシージャ呼び出しを用いるサンプルクライアントコードを生成します。
.br
.ne 5
.TP
\f3\-Sm\f1
アプリケーションをコンパイルする際に用いるサンプル Makefile を生成します。
.TP
\f3\-Ss\f1
リモートプロシージャ呼び出しを用いるサンプルサーバコードを生成します。
.TP
\f3\-t\f1
RPC ディスパッチテーブルをコンパイル出力します。
.TP
\f3\-T\f1
RPC ディスパッチテーブルをサポートするコードを生成します。
.IP
ある特定のタイプのファイルを生成するために、
以下のオプション
\f3\-c\f1,
\f3\-h\f1,
\f3\-l\f1,
\f3\-m\f1,
\f3\-s\f1,
\f3\-Sc\f1,
\f3\-Sm\f1,
\f3\-Ss\f1,
\f3\-t\f1 
は排他的に使用されます。
他方、オプション
\f3\-D\f1
と
\f3\-T\f1
は大域的であり、他のオプションと組み合わせて使用できます。
.TP 
\f3\-Y\f2 pathname\f1
.B rpcgen
が C プリプロセッサを探し始めるディレクトリ名を指定します。
.br
.ne 5
.SH 使用例
以下の例:
.LP
.RS
.B example% rpcgen \-T prot.x
.RE
.LP
は 5 種類のファイル
.BR prot.h ,
.BR prot_clnt.c ,
.BR prot_svc.c ,
.B prot_xdr.c ,
.BR prot_tbl.i 
.LP
の全てを生成します。
次の例は C のデータ定義 (ヘッダ) を標準出力に出力します。
.LP
.RS
.B example% rpcgen \-h prot.x
.RE
.LP
.BR -DTEST
のテストバージョンを作成するため、
クラス
.B datagram_n
に属する全トランスポート用サーバ側スタブを標準出力に出力するには、
.LP
.RS
.B example% rpcgen \-s datagram_n \-DTEST prot.x
.RE
.LP
とします。
\f2netid\f1
\f3tcp\f1 
で指定されたトランスポート用のサーバ側スタブを作成するには
.LP
.RS
.B example% rpcgen \-n tcp \-o prot_svc.c prot.x
.RE
とします。
.SH 関連項目
.BR cc (1),
.BR inetd (8),
.BR syslog (3),
.BR rpc (3),
.\" .BR rpc_svc_calls (3)
.LP
.TZ NETP
マニュアルの
.B rpcgen
の章。
