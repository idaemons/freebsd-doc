.TH GREP 1 "1992 September 10" "GNU Project"
.\" jpman %Id: grep.1,v 1.3 1997/07/21 07:22:12 konuma Stab %
.SH 名称
grep, egrep, fgrep \- パターンにマッチする行を表示する
.SH 書式
.B grep
[\-[AB] num]
[\-HRPS]
[\-CEFGLVabchilnqsvwx]
[\-e expr]
[\-f file]
files...
.SH 解説
.B grep
は、
.I files
で名前を指定されたファイル (ファイルが指定されてないか
.I files
の部分に
.B \-
が指定された場合は標準入力) を読み込み、
.I pattern
で指定したパターンにマッチする部分を含んでいるかどうかを、行毎に調べます。
デフォルト動作では、マッチした行を表示します。
.PP
.B grep
は、以下のオプションにより大きく 3 つの動作に分かれます。
.PD 0
.TP
.B \-G
.I pattern
として、基本的な正規表現を扱うモードです (下記参照)。デフォルトです。
.TP
.B \-E
.I pattern
として、拡張された正規表現を扱うモードです (下記参照)。
.TP
.B \-F
.I pattern
として、改行で区切られた固定の文字列パターンのリストを扱うモードです。
その文字列のどれかにマッチするかどうか調べます。
.LP
さらに、2 つの同種のプログラム
.B egrep
と
.B fgrep
が利用可能です。
.B egrep
は、
.B "grep\ \-E" 
と似ています (が等価ではありません) し、歴史的な UNIX の
.B egrep 
と互換性があります。
.B fgrep
は、
.B "grep\ \-F"
と同じです。
.PD
.LP
全ての
.B grep
の変種は、以下のようなオプションを理解します:
.PD 0
.TP
.BI \- num
.I num
で指定した行数だけ、パターンにマッチした行の前後の行も表示します。
ただし、同じ行を 2 度以上表示する事はありません。
.TP
.BI \-A " num"
.I num
で指定した行数だけ、パターンにマッチした行の後の行も表示します。
.TP
.BI \-B " num"
.I num
で指定した行数だけ、パターンにマッチした行の前の行も表示します。
.TP
.B \-C
.B \-2
を指定した事と同じです。
.TP
.B \-V
.B grep
のバージョン番号を標準エラー出力に表示します。バグレポート
には、この番号を付記してください (下記参照)。
.TP
.B \-a
バイナリファイルの検索を行いません。
.TP
.B \-b
各行の前に、ファイルの先頭からのバイト単位のオフセットを表示します。
.TP
.B \-c
各行の表示はせず、マッチした行数だけを表示します。
.B \-v
オプションと共に指定した場合は、
マッチしなかった行数の表示となります (下記参照)。
.TP
.BI \-e " pattern"
パターンを指定します。
.B \-
で始まっているパターンを保護するために有効です。
.TP
.BI \-f " file"
パターンを
.I file
から読み込みます。
.TP
.B \-h
複数ファイルを検索した時に、出力の前にファイル名を付けることを抑制します。
.TP
.B \-i
パターンマッチにおいて、英大文字と小文字の区別をしないようにします。
.TP
.B \-L
通常の表示を抑止します;
このオプションを指定しなかったときに
全く出力されない入力ファイルの名前を表示します。
.TP
.B \-l
通常の表示を抑止します;
このオプションを指定しなかったときに
出力される入力ファイルの名前を表示します。
.TP
.B \-n
各行の出力の前に、入力ファイルにおける行番号を表示します。
.TP
.B \-q
静粛; 通常の表示を抑止します。
.TP
.B \-s
指定されたファイルが存在しないことや読み込みできないことを示す
エラーメッセージを抑止します。
.TP
.B \-v
マッチの意味を逆転します。すなわち、マッチしない行を対象にします。
.TP
.B \-w
完全な語にマッチする行のみを選択します。
部分文字列が行頭から始まっているか、
語でない文字列が前にあることがテストされます。
同様に、行末か語でない文字列が後に付いいる必要があります。
単語とは、レター・数字・アンダスコアからなる文字列です。
.TP
.B \-x
行全体がマッチする行のみを選択します。

.PP
FTS ライブラリとともにコンパイルした場合、以下のオプションが
利用可能です:
.PD 0
.TP
.BI \-H
.I \-R
オプション指定時に、
コマンドラインのシンボリックリンクを辿ります
(木を探索している時に遭遇したシンボリックリンクは辿りません) 。
.TP

.BI \-L
.I \-R
オプション指定時に、全てのシンボリックリンクを辿ります。
.TP

.BI \-P
.I \-R
オプション指定時に、シンボリックリンクを辿りません。
.TP

.BI \-R
ファイルのみを検索する代わりに、ファイルを根とするファイル階層を検索します。
.TP

.PD
.SH "正規表現"
.PP
正規表現は、文字列の集合を表現するパターンの事です。正規表現は、より小さな
表現を組み合わせるさまざまな演算子を用いる事により、数式表現と同じような
表現を作成する事ができます。
.PP
.B grep
は、「基本」正規表現と
「拡張」正規表現の 2 種類の正規表現を扱う事ができます。
.RB "GNU\ " grep
では、どちらの表現も機能的に違いありません。
他の実装では、基本正規表現は拡張正規表現より能力が低くなっています。
ここでは、拡張正規表現について説明します。
基本正規表現との違いは、その後に説明します。
.PP
正規表現の基本単位は、1 文字にマッチします。
レターや数字などの多くの文字は、それ自身にマッチします。
また、特殊な意味があるメタ文字も、その文字の前にバックスラッシュ
を付ける事で、その本来の文字にマッチするようになります。
.PP
.B [
と
.B ]
で囲まれた文字のリストは、そのリストの中に含まれるどれか 1 文字にマッチします。
ただし、リストの先頭がキャレット
.B ^
の場合は、そのリストに含まれ
.I ない
文字にマッチします。
例えば、正規表現
.B [0123456789]
は数字 1 文字にマッチします。
ASCII 文字の範囲は最初と最後の文字をハイフン (`-') でつなぐことで
指定できます。最後に、特定の名前を持つ文字クラスが既定義されています。
名前が内容を示しており、それらは、
.BR [:alnum:] ,
.BR [:alpha:] ,
.BR [:cntrl:] ,
.BR [:digit:] ,
.BR [:graph:] ,
.BR [:lower:] ,
.BR [:print:] ,
.BR [:punct:] ,
.BR [:space:] ,
.BR [:upper:] ,
.B [:xdigit:]
です。
例えば、
.B [[:alnum:]]
は
.B [0-9A-Za-z]
と同じですが、後者は ASCII コード順に依存しますので、前者の方が可搬的です。
(注: クラス名の鈎括弧はシンボル名の一部であり、
リストを区切る鈎括弧とは別に指定する必要があります。)
リストの中では、ほとんどの特殊文字は、通常の文字として扱われます。
リテラル
.B ]
を含むためにはリストの先頭に置いてください。同様に、リテラル
.B ^
を含むためには先頭以外に置いてください。リテラル
.B \-
を含むためには、最後に置いてください。
.PP
ピリオド
.B .
は、任意の 1 文字にマッチします。
シンボル
.B \ew
は、
.B [[:alnum:]]
と同じで、
シンボル
.B \eW
は、
.B [^[:alnum:]]
と同じです。
.PP
キャレット
.B ^
と、
ドル記号
.B $
は、それぞれ行頭と行末の空文字列にマッチするメタ文字です。
シンボル
.B \e<
とシンボル
.B \e>
は、それぞれ単語の先頭と単語の末尾の空文字列にマッチするメタ文字です。
シンボル
.B \eb
は単語の端の空文字列にマッチします。
シンボル
.B \eB
は単語の端
.I 以外
の空文字列にマッチします。
.PP
1 文字にマッチする正規表現の後には、繰り返し演算子が付くことがあります:
.PD 0
.TP
.B ?
直前の項目はオプションであり、最大 1 回マッチします。
.TP
.B *
直前の項目は 0 回以上マッチします。
.TP
.B +
直前の項目は 1 回以上マッチします。
.TP
.BI { n }
直前の項目は厳密に
.I n
回マッチします。
.TP
.BI { n ,}
直前の項目は
.I n
回以上マッチします。
.TP
.BI {, m }
直前の項目はオプションであり、最大
.I m
回マッチします。
.TP
.BI { n , m }
直前の項目は、最低
.I n
回、最大
.I m
回マッチします。
.PD
.PP
2 つの正規表現は結合可能です;
結果としてできあがる正規表現は、
結合された 2 つの部分表現にそれぞれマッチする
2 つの部分文字列を結合した任意の文字列にマッチします。
2 つの正規表現は
.B |
インフィクス演算子で繋ぐことができます;
結果としてできあがる正規表現は、
どちらかの部分表現にマッチする任意の文字列にマッチします。
.PP
繰り返しは結合に優先します。また結合は選言に優先します。
部分表現全体は括弧で括って、この順序に優先させることができます。
.PP
.I n
が 1 つの数字であるような、
後方参照
.BI \e n\c
\& は、正規表現中で括弧で囲まれた
.I n 
番目の部分表現にマッチします。
.PP
基本正規表現では、メタ文字
.BR ? ,
.BR + ,
.BR { ,
.BR | ,
.BR ( ,
.B )
は、特殊な意味を失います; 代わりに、バックスラッシュを付けた
.BR \e? ,
.BR \e+ ,
.BR \e{ ,
.BR \e| ,
.BR \e( ,
.B \e) 
を使用してください。
.PP
.B egrep
では、
.B {
は、特殊な意味を失います; 代わりに、
.B \e{
を使う必要があります。
.SH 診断
通常、パターンにマッチした行が見つかった場合は 0 を、
見つからなかった場合は 1 を返します。(ただし、
.B \-v
オプションを指定した場合は、逆になります。)
パターンの指定の仕方が間違っていたり、ファイルがアクセスできないなどの
エラーが発生した場合は、2 を返します。
.SH バグ
バグレポートは、
.B bug-gnu-utils@prep.ai.mit.edu
まで Email してください。この時、``Subject:'' のどこにでもいいですから
``grep'' という単語を
忘れずに入れてください。
.PP
.BI { m , n }
の表現で非常に大きな繰り返しを指定すると、非常に多くのメモリを消費します。
さらに、ある種のあいまいな正規表現を指定すると、必要となる時間とメモリ領域は
指数的に増大し、メモリ不足を起こす可能性があります。
.PP
後方参照は非常に動作が遅く、必要となる時間は指数的に増大します。
