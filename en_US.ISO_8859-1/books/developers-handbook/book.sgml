<!--
     The FreeBSD Documentation Project

     $FreeBSD: doc/en_US.ISO_8859-1/books/developers-handbook/book.sgml,v 1.8 2000/11/28 18:31:02 asmodai Exp $
-->

<!DOCTYPE BOOK PUBLIC "-//FreeBSD//DTD DocBook V3.1-Based Extension//EN" [
<!ENTITY % bookinfo PUBLIC "-//FreeBSD//ENTITIES DocBook BookInfo Entities//EN">
%bookinfo;
<!ENTITY % chapters SYSTEM "chapters.ent"> %chapters;
]>

<book>
  <bookinfo>
    <title>FreeBSD Developers' Handbook</title>
    
    <authorgroup>
      <author>
	<surname>The FreeBSD Documentation Project</surname>
        <affiliation>
          <address>
            <email>doc@FreeBSD.org</email>
          </address>
        </affiliation>
      </author>
    </authorgroup>
    
    <pubdate>August 2000</pubdate>
    
    <copyright>
      <year>2000</year>
      <holder>The FreeBSD Documentation Project</holder>
    </copyright>

    &bookinfo.legalnotice;
    
    <abstract>
      <para>Welcome to the Developers' Handbook.</para>
    </abstract>
  </bookinfo>
  
  <part id="introduction">
    <title>Introduction</title>

    <chapter id="developmentplatform">
      <title>Developing on FreeBSD</title>

      <para>This will need to discuss FreeBSD as a development
        platform, the vision of BSD, architectural overview, layout of
        /usr/src, history, etc.</para>

      <para>Thank you for considering FreeBSD as your development
        platform!  We hope it will not let you down.</para>
    </chapter>

    <chapter id="bsdvision">
      <title>The BSD Vision</title>

      <para></para>
    </chapter>

    <chapter id="archoverview">
      <title>Architectural Overview</title>

      <para></para>
    </chapter>

    <chapter id="sourcelayout">
      <title>The Layout of /usr/src</title>

      <para>The complete source code to FreeBSD is available from our
      public CVS repository.  The source code is normally installed in
      <filename class=directory>/usr/src</filename> which contains the
      following subdirectories.</para>

      <para>
      <informaltable frame="none">
        <tgroup cols="2">
	  <thead>
	    <row>
	      <entry>Directory</entry>
	      <entry>Description</entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	    <entry><filename class=directory>bin/</filename></entry>
            <entry>Source for files in
            <filename>/bin</filename></entry>
	    </row>
	    
	    <row>
	    <entry><filename class=directory>contrib/</filename></entry>
	    <entry>Source for files from contribued software.</entry>
	    </row>

	    <row>
	    <entry><filename class=directory>crypto/</filename></entry>
	    <entry>DES source</entry>
	    </row>

	    <row>
	    <entry><filename class=directory>etc/</filename></entry>
	    <entry>Source for files in <filename
	    class=directory>/etc</filename></entry>
	    </row>

	    <row>
	    <entry><filename class=directory>games/</filename></entry>
	    <entry>Source for files in <filename
	    class=directory>/usr/games</filename></entry>
	    </row>

	    <row>
	    <entry><filename class=directory>gnu/</filename></entry>
	    <entry>Utilities covered by the GNU Public License</entry>
	    </row>

	    <row>
	    <entry><filename class=directory>include/</filename></entry>
            <entry>Source for files in <filename
            class=directory>/usr/include</filename></entry>
	    </row>

	    <row>
	    <entry><filename
 class=directory>kerberosIV/</filename></entry>
            <entry>Source for Kerbereros version IV</entry>
	    </row>

	    <row>
	    <entry><filename
 class=directory>kerberos5/</filename></entry>
            <entry>Source for Kerbereros version 5</entry>
	    </row>

	    <row>
	    <entry><filename class=directory>lib/</filename></entry>
	    <entry>Source for files in <filename
	    class=directory>/usr/lib</filename></entry>
	    </row>
	    
	    <row>
	    <entry><filename class=directory>libexec/</filename></entry>
	    <entry>Source for files in <filename
	    class=directory>/usr/libexec</filename></entry>
	    </row>
	    
	    <row>
	    <entry><filename
 class=directory>release/</filename></entry>
            <entry>Files required to produce a FreeBSD release</entry>
	    </row>

	    <row>
	    <entry><filename class=directory>sbin/</filename></entry>
	    <entry>Source for files in <filename
	    class=directory>/sbin</filename></entry>
	    </row>

	    <row>
	    <entry><filename class=directory>secure/</filename></entry>
	    <entry>FreeSec sources</entry>
	    </row>

	    <row>
	    <entry><filename class=directory>share/</filename></entry>
	    <entry>Source for files in <filename
	    class=directory>/sbin</filename></entry>
	    </row>

	    <row>
	    <entry><filename class=directory>sys/</filename></entry>
	    <entry>Kernel source files</entry>
	    </row>

	    <row>
	    <entry><filename class=directory>tools/</filename></entry>
	    <entry>Tools used for maintenance and testing of
	    FreeBSD</entry>
	    </row>

	    <row>
	    <entry><filename
 class=directory>usr.bin/</filename></entry>
            <entry>Source for files in <filename
 class=directory>/usr/bin</filename></entry>
            </row>

	    <row>
	    <entry><filename
 class=directory>usr.sbin/</filename></entry>
            <entry>Source for files in <filename
 class=directory>/usr/sbin</filename></entry>
            </row>
          </tbody>
	</tgroup>
      </informaltable>

      </para>

    </chapter>
  </part>

  <part id="Basics">
    <title>Basics</title>

    &chap.tools;
    &chap.secure;

  </part>

  <part id="kernel">
    <title>Kernel</title>

    <chapter id="kernelhistory">
      <title>History of the Unix Kernel</title>

      <para>Some history of the Unix/BSD kernel, system calls, how do
        processes work, blocking, scheduling, threads (kernel),
        context switching, signals, interrupts, modules, etc.</para>

      <para></para>
    </chapter>
  </part>

  <part id="memory">
    <title>Memory and Virtual Memory</title>

    <chapter id="virtualmemory">
      <title>Virtual Memory</title>

      <para>VM, paging, swapping, allocating memory, testing for
        memory leaks, mmap, vnodes, etc.</para>

      <para></para>
    </chapter>
  </part>

  <part id="iosystem">
    <title>I/O System</title>

    <chapter id="ufs">
      <title>UFS</title>

      <para>UFS, FFS, Ext2FS, JFS, inodes, buffer cache, labeling,
        locking, metadata, soft-updates, LFS, portalfs, procfs,
        vnodes, memory sharing, memory objects, TLBs, caching</para>

    </chapter>
  </part>

  <part id="ipc">
    <title>Interprocess Communication</title>
    
    <chapter id="signals">
      <title>Signals</title>

      <para>Signals, pipes, semaphores, message queues, shared memory,
        ports, sockets, doors</para>

    </chapter>
  </part>

  <part id="networking">
    <title>Networking</title>
    
    <chapter id="sockets">
      <title>Sockets</title>

      <para>Sockets, bpf, IP, TCP, UDP, ICMP, OSI, bridging,
        firewalling, NAT, switching, etc</para>

    </chapter>
  </part>
  
  <part id="networkfs">
    <title>Network Filesystems</title>

    <chapter id="afs">
      <title>AFS</title>

      <para>AFS, NFS, SANs etc]</para>

    </chapter>
  </part>
  
  <part id="terminal">
    <title>Terminal Handling</title>

    <chapter id="syscons">
      <title>Syscons</title>

      <para>Syscons, tty, PCVT, serial console, screen savers,
        etc</para>

    </chapter>
  </part>
  
  <part id="sound">
    <title>Sound</title>

    <chapter id="oss">
      <title>OSS</title>

      <para>OSS, waveforms, etc</para>

    </chapter>
  </part>
  
  <part id="devicedrivers">
    <title>Device Drivers</title>

    &chap.driverbasics;

    <chapter id="pci">
      <title>PCI Devices</title>

      <para>This chapter will talk about the FreeBSD mechanisms for
      writing a device driver for a device on a PCI bus.</para>

      <sect1><title>Probe and Attach</title>

      <para>Information here about how the PCI bus code iterates
      through the unattached devices and see if a newly loaded kld
      will attach to any of them.</para>
<programlisting>
/*
 * Simple KLD to play with the PCI functions.
 *
 * Murray Stokely
 */

#define MIN(a,b) (((a) < (b)) ? (a) : (b))

#include &lt;sys/types.h&gt;
#include &lt;sys/module.h&gt;
#include &lt;sys/systm.h&gt;  /* uprintf */ 
#include &lt;sys/errno.h&gt;
#include &lt;sys/param.h&gt;  /* defines used in kernel.h */
#include &lt;sys/kernel.h&gt; /* types used in module initialization */
#include &lt;sys/conf.h&gt;   /* cdevsw struct */
#include &lt;sys/uio.h&gt;    /* uio struct */
#include &lt;sys/malloc.h&gt;
#include &lt;sys/bus.h&gt;	/* structs, prototypes for pci bus stuff */

#include &lt;pci/pcivar.h&gt; /* For get_pci macros! */

/* Function prototypes */
d_open_t      mypci_open;
d_close_t     mypci_close;
d_read_t      mypci_read;
d_write_t     mypci_write;

/* Character device entry points */

static struct cdevsw mypci_cdevsw = {
  mypci_open,
  mypci_close,
  mypci_read,
  mypci_write,
  noioctl,
  nopoll,
  nommap,
  nostrategy,
  "mypci",
  36,                   /* reserved for lkms - /usr/src/sys/conf/majors */
  nodump,
  nopsize,
  D_TTY,
  -1
};

/* vars */
static dev_t sdev;

/* We're more interested in probe/attach than with
   open/close/read/write at this point */

int 
mypci_open(dev_t dev, int oflags, int devtype, struct proc *p)
{
  int err = 0;

  uprintf("Opened device \"mypci\" successfully.\n");
  return(err);
}

int 
mypci_close(dev_t dev, int fflag, int devtype, struct proc *p)
{
  int err=0;

  uprintf("Closing device \"mypci.\"\n"); 
  return(err);
} 

int
mypci_read(dev_t dev, struct uio *uio, int ioflag)
{
  int err = 0;

  uprintf("mypci read!\n");
  return err;
}

int
mypci_write(dev_t dev, struct uio *uio, int ioflag)
{
  int err = 0;

  uprintf("mypci write!\n");
  return(err);
}

/* PCI Support Functions */

/*
 * Return identification string if this is device is ours.
 */
static int
mypci_probe(device_t dev)
{
  uprintf("MyPCI Probe\n"
	  "Vendor ID : 0x%x\n"
	  "Device ID : 0x%x\n",pci_get_vendor(dev),pci_get_device(dev));

  if (pci_get_vendor(dev) == 0x11c1) {
    uprintf("We've got the Winmodem, probe successful!\n");
    return 0;
  }

  return ENXIO;
}

/* Attach function is only called if the probe is successful */

static int
mypci_attach(device_t dev)
{
  uprintf("MyPCI Attach for : deviceID : 0x%x\n",pci_get_vendor(dev));
  sdev = make_dev(<literal>&</literal>mypci_cdevsw,
		  0,
		  UID_ROOT,
		  GID_WHEEL,
		  0600,
		  "mypci");
  uprintf("Mypci device loaded.\n");
  return ENXIO;
}

/* Detach device. */

static int
mypci_detach(device_t dev)
{
  uprintf("Mypci detach!\n");
  return 0;
}

/* Called during system shutdown after sync. */

static int
mypci_shutdown(device_t dev)
{
  uprintf("Mypci shutdown!\n");
  return 0;
}

/*
 * Device suspend routine.  
 */
static int
mypci_suspend(device_t dev)
{
  uprintf("Mypci suspend!\n");
  return 0;
}

/*
 * Device resume routine.
 */

static int
mypci_resume(device_t dev)
{
  uprintf("Mypci resume!\n");
  return 0;
}

static device_method_t mypci_methods[] = {
	/* Device interface */
	DEVMETHOD(device_probe,		mypci_probe),
	DEVMETHOD(device_attach,	mypci_attach),
	DEVMETHOD(device_detach,	mypci_detach),
	DEVMETHOD(device_shutdown,	mypci_shutdown),
	DEVMETHOD(device_suspend,	mypci_suspend),
	DEVMETHOD(device_resume,	mypci_resume),

	{ 0, 0 }
};

static driver_t mypci_driver = {
	"mypci",
	mypci_methods,
	0,
	/*	sizeof(struct mypci_softc), */
};

static devclass_t mypci_devclass;

DRIVER_MODULE(mypci, pci, mypci_driver, mypci_devclass, 0, 0);
</programlisting>
      
        <para>Additional Resources
	<itemizedlist>
	<listitem><simpara><ulink
	url="http://www.pcisig.org">PCI Special Interest
	Group</ulink></simpara></listitem>
	<listitem><simpara>PCI System Architecture, Fourth Edition by
	Tom Shanley, et al.</simpara></listitem>
	</itemizedlist>
	</para>
      </sect1>
    </chapter>

    <chapter id="usb">
      <title>USB Devices</title>

      <para>This chapter will talk about the FreeBSD mechanisms for
      writing a device driver for a device on a USB bus.</para>
    </chapter>

    <chapter id="newbus">
      <title>NewBus</title>

      <para>This chapter will talk about the FreeBSD NewBus
      architecture.</para>
    </chapter>

  </part>
  
  <part id="architectures">
    <title>Architectures</title>

    <chapter id="ia32">
      <title>IA-32</title>

      <para>Talk about the architectural specifics of FreeBSD/x86.</para>

    </chapter>

    <chapter id="alpha">
      <title>Alpha</title>

      <para>Talk about the architectural specifics of
      FreeBSD/alpha.</para>

      <para>Explanation of allignment errors, how to fix, how to
      ignore.</para>

      <para>Example assembly language code for FreeBSD/alpha.</para>
    </chapter>

    <chapter id="ia64">
      <title>IA-64</title>

      <para>Talk about the architectural specifics of
      FreeBSD/ia64.</para>

    </chapter>
  </part>
  
  <part id="debuggingpart">
    <title>Debugging</title>

    <chapter id="truss">
      <title>Truss</title>

      <para>various descriptions on how to debug certain aspects of
        the system using truss, ktrace, gdb, kgdb, etc</para>

    </chapter>
  </part>
  
  <part id="compatibility">
    <title>Compatibility Layers</title>

    <chapter id="linux">
      <title>Linux</title>

      <para>Linux, SVR4, etc</para>

    </chapter>
  </part>
  
  <part id="appendices">
    <title>Appendices</title>

      <bibliography>

      <biblioentry id="COD" xreflabel="1">
        <authorgroup>
          <author>
            <firstname>Dave</firstname>
            <othername role="MI">A</othername>
            <surname>Patterson</surname>
          </author>
          <author>
            <firstname>John</firstname>
            <othername role="MI">L</othername>
            <surname>Hennessy</surname>
          </author>
        </authorgroup>
        <copyright><year>1998</year><holder>Morgan Kaufmann Publishers,
        Inc.</holder></copyright>
        <isbn>1-55860-428-6</isbn>
        <publisher>
          <publishername>Morgan Kaufmann Publishers, Inc.</publishername>
        </publisher>
        <title>Computer Organization and Design</title>
        <subtitle>The Hardware / Software Interface</subtitle>
        <pagenums>1-2</pagenums>
      </biblioentry>

      <biblioentry xreflabel="2">
        <authorgroup>
          <author>
            <firstname>W.</firstname>
            <othername role="Middle">Richard</othername>
            <surname>Stevens</surname>
          </author>
        </authorgroup>
        <copyright><year>1993</year><holder>Addison Wesley Longman,
        Inc.</holder></copyright>
        <isbn>0-201-56317-7</isbn>
        <publisher>
          <publishername>Addison Wesley Longman, Inc.</publishername>
        </publisher>
        <title>Advanced Programming in the Unix Environment</title>
        <pagenums>1-2</pagenums>
      </biblioentry>

      <biblioentry xreflabel="3">
        <authorgroup>
          <author>
            <firstname>Marshall</firstname>
            <othername role="Middle">Kirk</othername>
            <surname>McKusick</surname>
          </author>
          <author>
            <firstname>Keith</firstname>
            <surname>Bostic</surname>
          </author>
          <author>
            <firstname>Michael</firstname>
            <othername role="MI">J</othername>
            <surname>Karels</surname>
          </author>
          <author>
            <firstname>John</firstname>
            <othername role="MI">S</othername>
            <surname>Quarterman</surname>
          </author>
        </authorgroup>
        <copyright><year>1996</year><holder>Addison-Wesley Publishing Company,
        Inc.</holder></copyright>
        <isbn>0-201-54979-4</isbn>
        <publisher>
          <publishername>Addison-Wesley Publishing Company, Inc.</publishername>
        </publisher>
        <title>The Design and Implementation of the 4.4 BSD Operating System</title>
        <pagenums>1-2</pagenums>
      </biblioentry>

      <biblioentry id="Phrack" xreflabel="4">
        <authorgroup>
          <author>
            <firstname>Aleph</firstname>
            <surname>One</surname>
          </author>
        </authorgroup>
        <title>Phrack 49; "Smashing the Stack for Fun and Profit"</title>
      </biblioentry>

      <biblioentry id="StackGuard" xreflabel="5">
        <authorgroup>
          <author>
            <firstname>Chrispin</firstname>
            <surname>Cowan</surname>
          </author>
          <author>
            <firstname>Calton</firstname>
            <surname>Pu</surname>
          </author>
          <author>
            <firstname>Dave</firstname>
            <surname>Maier</surname>
          </author>
        </authorgroup>
        <title>StackGuard; Automatic Adaptive Detection and Prevention of
        Buffer-Overflow Attacks</title>
      </biblioentry>

      <biblioentry id="OpenBSD" xreflabel="6">
        <authorgroup>
	  <author>
	    <firstname>Todd</firstname>
	    <surname>Miller</surname>
	  </author>
	  <author>
	    <firstname>Theo</firstname>
	    <surname>de Raadt</surname>
	  </author>
	</authorgroup>
	<title>strlcpy and strlcat -- consistent, safe string copy and
	concatenation.</title>
      </biblioentry>

      </bibliography>

  </part>

</book>
